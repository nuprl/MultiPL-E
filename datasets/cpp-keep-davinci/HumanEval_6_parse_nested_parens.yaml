name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
  \ parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nstd::vector<long>\
  \ parse_nested_parens(std::string paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
  \ (std::vector<long>({(long)4})));\n}\n"
completions: ["    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ s;\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            s.push(c);\n            depth++;\n \
    \           max_depth = std::max(max_depth, depth);\n        } else if (c == ')')\
    \ {\n            if (s.empty()) {\n                result.push_back(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            } else\
    \ {\n                s.pop();\n                depth--;\n            }\n     \
    \   } else if (c == ' ') {\n            result.push_back(max_depth);\n       \
    \     max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::vector<char> stack;\n\
    \    long count = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            stack.push_back(c);\n            count++;\n        } else if\
    \ (c == ')') {\n            stack.pop_back();\n            count--;\n        }\
    \ else if (c == ' ') {\n            result.push_back(count);\n            count\
    \ = 0;\n        }\n    }\n    result.push_back(count);\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        int max_depth =\
    \ 0;\n        int current_depth = 0;\n        for (int i = 0; i < token.size();\
    \ i++) {\n            if (token[i] == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (token[i] == ')') {\n                current_depth--;\n          \
    \  }\n        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        result.push_back(parse_nested_parens_helper(item));\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ stk;\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            stk.push(c);\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            stk.pop();\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_level = 0;\n        long cur_level = 0;\n        for\
    \ (auto c : token) {\n            if (c == '(') {\n                cur_level++;\n\
    \                max_level = std::max(max_level, cur_level);\n            } else\
    \ if (c == ')') {\n                cur_level--;\n            }\n        }\n  \
    \      result.push_back(max_level);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    long max_depth = 0;\n    long depth = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            st.push(c);\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            st.pop();\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long curr_depth = 0;\n        for (char c : token) {\n\
    \            if (c == '(') {\n                curr_depth++;\n                max_depth\
    \ = std::max(max_depth, curr_depth);\n            } else if (c == ')') {\n   \
    \             curr_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (char c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_level = 0;\n\
    \    long level = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            level++;\n            max_level = std::max(max_level, level);\n\
    \        } else if (c == ')') {\n            level--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_level);\n            max_level = 0;\n\
    \            level = 0;\n        }\n    }\n    result.push_back(max_level);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> st;\n   \
    \     long max_level = 0;\n        for (char c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                max_level = std::max(max_level,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stack<char> st;\n    long\
    \ count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            st.push(paren_string[i]);\n            count++;\n   \
    \     }\n        else if(paren_string[i] == ')') {\n            st.pop();\n  \
    \          count--;\n        }\n        else if(paren_string[i] == ' ') {\n  \
    \          result.push_back(count);\n            count = 0;\n        }\n    }\n\
    \    result.push_back(count);\n    return result;", "    std::vector<long> result;\n\
    \    std::stringstream ss(paren_string);\n    std::string token;\n    while (std::getline(ss,\
    \ token, ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n     \
    \   for (char c : token) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = std::max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_level = 0;\n       \
    \ long level = 0;\n        for (char c : token) {\n            if (c == '(') {\n\
    \                st.push(c);\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        st.pop();\n                level--;\n            }\n        }\n     \
    \   assert(st.empty());\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        res.push_back(max_level);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                ++level;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            st.push(c);\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            st.pop();\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    long max_depth = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            max_depth = std::max(max_depth, (long)st.size());\n        } else\
    \ if (paren_string[i] == ')') {\n            st.pop();\n        } else if (paren_string[i]\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        result.push_back(parse_nested_parens_helper(item));\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    long max_depth = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            st.push(c);\n            max_depth = std::max(max_depth,\
    \ (long)st.size());\n        } else if (c == ')') {\n            st.pop();\n \
    \       } else if (c == ' ') {\n            result.push_back(max_depth);\n   \
    \         max_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long current_depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_depth++;\n            max_depth = std::max(max_depth,\
    \ current_depth);\n        } else if (c == ')') {\n            current_depth--;\n\
    \        } else if (c == ' ') {\n            result.push_back(max_depth);\n  \
    \          max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (auto c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_level =\
    \ 0;\n        long level = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stack<char> st;\n    long\
    \ max_depth = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n      \
    \  if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n    \
    \        max_depth = std::max(max_depth, (long)st.size());\n        } else if\
    \ (paren_string[i] == ')') {\n            st.pop();\n        } else if (paren_string[i]\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;",
  "    std::vector<long> result;\n    std::stack<char> st;\n    long max_depth = 0;\n\
    \    for (char c : paren_string) {\n        if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            continue;\n        }\n        if (c ==\
    \ '(') {\n            st.push(c);\n            max_depth = std::max(max_depth,\
    \ (long)st.size());\n        } else {\n            st.pop();\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<char> st;\n    long max_nesting = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            st.push(c);\n    \
    \        max_nesting = std::max(max_nesting, (long)st.size());\n        } else\
    \ if (c == ')') {\n            st.pop();\n        } else if (c == ' ') {\n   \
    \         result.push_back(max_nesting);\n            max_nesting = 0;\n     \
    \   }\n    }\n    result.push_back(max_nesting);\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string item;\n  \
    \  while (std::getline(ss, item, ' ')) {\n        long max_depth = 0;\n      \
    \  long depth = 0;\n        for (char c : item) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            }\n\
    \        }\n        result.push_back(max_depth);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stack<char> stk;\n    int max_depth = 0;\n\
    \    int curr_depth = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \            curr_depth++;\n            max_depth = std::max(max_depth, curr_depth);\n\
    \        } else if (paren_string[i] == ')') {\n            stk.pop();\n      \
    \      curr_depth--;\n        } else if (paren_string[i] == ' ') {\n         \
    \   result.push_back(max_depth);\n            max_depth = 0;\n            curr_depth\
    \ = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ temp;\n    while (std::getline(ss, temp, ' ')) {\n        long max_depth = 0;\n\
    \        long current_depth = 0;\n        for (auto c : temp) {\n            if\
    \ (c == '(') {\n                current_depth++;\n                max_depth =\
    \ std::max(max_depth, current_depth);\n            } else if (c == ')') {\n  \
    \              current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long current_depth = 0;\n    for (auto c : paren_string) {\n     \
    \   if (c == '(') {\n            current_depth += 1;\n            max_depth =\
    \ std::max(max_depth, current_depth);\n        } else if (c == ')') {\n      \
    \      current_depth -= 1;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> st;\n   \
    \     long max_depth = 0;\n        for (char c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_nesting = 0;\n  \
    \      long curr_nesting = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                curr_nesting++;\n                max_nesting =\
    \ std::max(max_nesting, curr_nesting);\n            } else if (c == ')') {\n \
    \               curr_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long current_depth = 0;\n    for (auto c : paren_string) {\n     \
    \   if (c == '(') {\n            current_depth++;\n            max_depth = std::max(max_depth,\
    \ current_depth);\n        } else if (c == ')') {\n            current_depth--;\n\
    \        } else if (c == ' ') {\n            result.push_back(max_depth);\n  \
    \          max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (char c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : item) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> stk;\n\
    \    long max_depth = 0;\n    long curr_depth = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            stk.push(c);\n            curr_depth++;\n\
    \            max_depth = std::max(max_depth, curr_depth);\n        } else if (c\
    \ == ')') {\n            stk.pop();\n            curr_depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            curr_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : group) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> stk;\n\
    \    int max_depth = 0;\n    int curr_depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \            curr_depth++;\n            max_depth = std::max(max_depth, curr_depth);\n\
    \        } else if (paren_string[i] == ')') {\n            stk.pop();\n      \
    \      curr_depth--;\n        } else if (paren_string[i] == ' ') {\n         \
    \   result.push_back(max_depth);\n            max_depth = 0;\n            curr_depth\
    \ = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;",
  "    std::vector<long> result;\n    std::stack<char> st;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            st.push(c);\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            st.pop();\n           \
    \ depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (char c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ s;\n        long max_depth = 0;\n        for (auto c : token) {\n          \
    \  if (c == '(') {\n                s.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)s.size());\n            } else if (c == ')') {\n                s.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    long count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            count++;\n        }\n        else if(paren_string[i] == ')') {\n\
    \            st.pop();\n            count--;\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            result.push_back(count);\n            count = 0;\n  \
    \      }\n    }\n    result.push_back(count);\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long count = 0;\n        long\
    \ max_count = 0;\n        for (char c : token) {\n            if (c == '(') {\n\
    \                count++;\n                max_count = std::max(max_count, count);\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \        }\n        result.push_back(max_count);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_nesting\
    \ = 0;\n        long current_nesting = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                current_nesting++;\n             \
    \   max_nesting = std::max(max_nesting, current_nesting);\n            } else\
    \ if (c == ')') {\n                current_nesting--;\n            }\n       \
    \ }\n        result.push_back(max_nesting);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ paren_group;\n    while (std::getline(ss, paren_group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto paren : paren_group)\
    \ {\n            if (paren == '(') {\n                level++;\n             \
    \   max_level = std::max(max_level, level);\n            } else if (paren == ')')\
    \ {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (auto c : item) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_level = 0;\n    \
    \    long level = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                level++;\n                max_level = std::max(max_level,\
    \ level);\n            } else if (c == ')') {\n                level--;\n    \
    \        }\n        }\n        result.push_back(max_level);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_depth = 0;\n    long\
    \ depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n   \
    \         depth++;\n            max_depth = std::max(max_depth, depth);\n    \
    \    } else if (c == ')') {\n            depth--;\n        } else if (c == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string group;\n    while (std::getline(ss, group, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : group) {\n  \
    \          if (c == '(') {\n                ++level;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ stk;\n    int count = 0;\n    for(int i = 0; i < paren_string.size(); i++) {\n\
    \        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \            count++;\n        }\n        else if(paren_string[i] == ')') {\n\
    \            stk.pop();\n            count--;\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            result.push_back(count);\n            count = 0;\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>\
    \ stack;\n    long depth = 0;\n    for (long i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            depth++;\n           \
    \ stack.push_back(depth);\n        } else if (paren_string[i] == ')') {\n    \
    \        result.push_back(stack.back());\n            stack.pop_back();\n    \
    \        depth--;\n        } else if (paren_string[i] == ' ') {\n            continue;\n\
    \        } else {\n            assert(false);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    // TODO: Implement this function\n    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while(std::getline(ss, token, ' ')) {\n        int count = 0;\n        int\
    \ max = 0;\n        for(int i = 0; i < token.length(); i++) {\n            if(token[i]\
    \ == '(') {\n                count++;\n                if(count > max) {\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(token[i] == ')') {\n                count--;\n            }\n      \
    \  }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<char> st;\n    long max_depth = 0;\n    long depth =\
    \ 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            st.push(paren_string[i]);\n            depth++;\n   \
    \         max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            st.pop();\n            depth--;\n        } else if (paren_string[i]\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ s;\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                s.push(c);\n     \
    \           depth++;\n                max_depth = std::max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                s.pop();\n              \
    \  depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    int max_depth = 0;\n    int curr_depth = 0;\n    for (int i = 0; i\
    \ < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       st.push(paren_string[i]);\n            curr_depth++;\n            max_depth\
    \ = std::max(max_depth, curr_depth);\n        } else if (paren_string[i] == ')')\
    \ {\n            st.pop();\n            curr_depth--;\n        } else if (paren_string[i]\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n            curr_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "\tstd::vector<long> result;\n\tstd::stringstream ss(paren_string);\n\
    \tstd::string item;\n\twhile (std::getline(ss, item, ' ')) {\n\t\tlong max_depth\
    \ = 0;\n\t\tlong depth = 0;\n\t\tfor (auto c : item) {\n\t\t\tif (c == '(') {\n\
    \t\t\t\tdepth++;\n\t\t\t\tmax_depth = std::max(max_depth, depth);\n\t\t\t}\n\t\
    \t\telse if (c == ')') {\n\t\t\t\tdepth--;\n\t\t\t}\n\t\t}\n\t\tresult.push_back(max_depth);\n\
    \t}\n\treturn result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long count = 0;\n        long max_count = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                count++;\n      \
    \          max_count = std::max(max_count, count);\n            } else if (c ==\
    \ ')') {\n                count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : item) {\n            if (c == '(') {\n                depth++;\n       \
    \         max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    int max_depth = 0;\n    int depth = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            st.push(c);\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            if (st.empty()) {\n                result.push_back(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            } else\
    \ {\n                st.pop();\n                depth--;\n            }\n    \
    \    } else if (c == ' ') {\n            if (st.empty()) {\n                result.push_back(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n    }\n    if (!st.empty()) {\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long current_depth = 0;\n    for (auto c : paren_string) {\n     \
    \   if (c == '(') {\n            current_depth++;\n            max_depth = std::max(max_depth,\
    \ current_depth);\n        } else if (c == ')') {\n            current_depth--;\n\
    \        } else if (c == ' ') {\n            result.push_back(max_depth);\n  \
    \          max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> st;\n   \
    \     long max_depth = 0;\n        for (auto c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    long max_depth = 0;\n    long cur_depth\
    \ = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n         \
    \   cur_depth++;\n            max_depth = std::max(max_depth, cur_depth);\n  \
    \      } else if (c == ')') {\n            cur_depth--;\n        } else if (c\
    \ == ' ') {\n            res.push_back(max_depth);\n            max_depth = 0;\n\
    \            cur_depth = 0;\n        }\n    }\n    res.push_back(max_depth);\n\
    \    return res;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string paren_group;\n    while (std::getline(ss, paren_group, ' '))\
    \ {\n        long max_nesting = 0;\n        long current_nesting = 0;\n      \
    \  for (char c : paren_group) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        assert(current_nesting == 0);\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        std::stack<char> st;\n   \
    \     long max_depth = 0;\n        for (auto c : token) {\n            if (c ==\
    \ '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ stk;\n    long count = 0;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \            count++;\n        }\n        else if(paren_string[i] == ')') {\n\
    \            stk.pop();\n            if(stk.empty()) {\n                result.push_back(count);\n\
    \                count = 0;\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> output;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            output.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    output.push_back(max_depth);\n\
    \    return output;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    int max_depth = 0;\n    int depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            depth++;\n            max_depth = std::max(max_depth, depth);\n \
    \       } else if (paren_string[i] == ')') {\n            st.pop();\n        \
    \    depth--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    int max_depth = 0;\n    int curr_depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            curr_depth++;\n            max_depth = std::max(max_depth, curr_depth);\n\
    \        } else if (paren_string[i] == ')') {\n            st.pop();\n       \
    \     curr_depth--;\n        } else if (paren_string[i] == ' ') {\n          \
    \  result.push_back(max_depth);\n            max_depth = 0;\n            curr_depth\
    \ = 0;\n        }\n    }\n    result.push_back(max_depth);\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ stk;\n    long max_depth = 0;\n    long depth = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     stk.push(paren_string[i]);\n            depth++;\n            max_depth\
    \ = std::max(max_depth, depth);\n        } else if (paren_string[i] == ')') {\n\
    \            stk.pop();\n            depth--;\n        } else if (paren_string[i]\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> st;\n\
    \        long max_level = 0;\n        long cur_level = 0;\n        for (char c\
    \ : item) {\n            if (c == '(') {\n                st.push(c);\n      \
    \          cur_level++;\n                max_level = std::max(max_level, cur_level);\n\
    \            } else if (c == ')') {\n                st.pop();\n             \
    \   cur_level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    std::stringstream\
    \ ss(paren_string);\n    std::string temp;\n    while(std::getline(ss, temp, '\
    \ ')) {\n        std::stack<char> st;\n        long max_level = 0;\n        for(char\
    \ c : temp) {\n            if(c == '(') {\n                st.push(c);\n     \
    \           max_level = std::max(max_level, (long)st.size());\n            } else\
    \ if(c == ')') {\n                st.pop();\n            }\n        }\n      \
    \  res.push_back(max_level);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long current_depth = 0;\n        for (char c : token) {\n            if (c\
    \ == '(') {\n                current_depth++;\n                max_depth = std::max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_depth = 0;\n    long\
    \ depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n   \
    \         depth++;\n            max_depth = std::max(max_depth, depth);\n    \
    \    } else if (c == ')') {\n            depth--;\n        } else if (c == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_level = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_level = std::max(max_level, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_level);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<char> stk;\n    long max_depth = 0;\n    long depth\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   stk.push(c);\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            stk.pop();\n          \
    \  depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (char c : token) {\n            if\
    \ (c == '(') {\n                ++depth;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                --depth;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stack<char> st;\n    long\
    \ count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            st.push(paren_string[i]);\n            count++;\n   \
    \     }\n        else if(paren_string[i] == ')') {\n            st.pop();\n  \
    \          count--;\n        }\n        else if(paren_string[i] == ' ') {\n  \
    \          result.push_back(count);\n            count = 0;\n        }\n    }\n\
    \    result.push_back(count);\n    return result;", "    std::vector<long> result;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> stk;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            stk.push(c);\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            stk.pop();\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (char c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long count = 0;\n        long max_count = 0;\n        for (auto\
    \ c : token) {\n            if (c == '(') {\n                count++;\n      \
    \          max_count = std::max(max_count, count);\n            } else if (c ==\
    \ ')') {\n                count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (char c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_level = 0;\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            level++;\n            max_level = std::max(max_level, level);\n\
    \        } else if (c == ')') {\n            level--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_level);\n            max_level = 0;\n\
    \            level = 0;\n        }\n    }\n    result.push_back(max_level);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_nesting = 0;\n        long current_nesting = 0;\n        for (char c : token)\
    \ {\n            if (c == '(') {\n                current_nesting++;\n       \
    \         max_nesting = std::max(max_nesting, current_nesting);\n            }\
    \ else if (c == ')') {\n                current_nesting--;\n            }\n  \
    \      }\n        result.push_back(max_nesting);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : token) {\n         \
    \   if (c == '(') {\n                st.push(c);\n                max_depth =\
    \ std::max(max_depth, (long)st.size());\n            } else if (c == ')') {\n\
    \                st.pop();\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_nesting\
    \ = 0;\n    long nesting = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            nesting++;\n            max_nesting = std::max(max_nesting,\
    \ nesting);\n        } else if (c == ')') {\n            nesting--;\n        }\
    \ else if (c == ' ') {\n            result.push_back(max_nesting);\n         \
    \   max_nesting = 0;\n            nesting = 0;\n        }\n    }\n    result.push_back(max_nesting);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (long i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            depth++;\n           \
    \ max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            depth--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "  std::vector<long> result;\n  std::stringstream ss(paren_string);\n\
    \  std::string token;\n  while (std::getline(ss, token, ' ')) {\n    std::stack<char>\
    \ st;\n    long max_depth = 0;\n    for (auto c : token) {\n      if (c == '(')\
    \ {\n        st.push(c);\n        max_depth = std::max(max_depth, (long)st.size());\n\
    \      } else if (c == ')') {\n        st.pop();\n      }\n    }\n    result.push_back(max_depth);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    long max_depth = 0;\n    for (char c : paren_string) {\n        if\
    \ (c == '(') {\n            st.push(c);\n            max_depth = std::max(max_depth,\
    \ (long)st.size());\n        } else if (c == ')') {\n            st.pop();\n \
    \       } else if (c == ' ') {\n            result.push_back(max_depth);\n   \
    \         max_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_depth = 0;\n       \
    \ for (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (long)st.size());\n         \
    \   } else if (c == ')') {\n                st.pop();\n            }\n       \
    \ }\n        result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<char> stk;\n    int max_depth = 0;\n    int depth =\
    \ 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            stk.push(paren_string[i]);\n            depth++;\n  \
    \          max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            stk.pop();\n            depth--;\n        } else if (paren_string[i]\
    \ == ' ') {\n            result.push_back(max_depth);\n            max_depth =\
    \ 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (auto c : token)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<char> st;\n    long max_depth = 0;\n    long depth =\
    \ 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n           \
    \ st.push(c);\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            st.pop();\n           \
    \ depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (auto c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                level++;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            depth++;\n            max_depth = std::max(max_depth,\
    \ depth);\n        } else if (c == ')') {\n            depth--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_depth);\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    int max_depth\
    \ = 0;\n    int depth = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            depth++;\n           \
    \ max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            depth--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (int i = 0; i < token.size();\
    \ i++) {\n            if (token[i] == '(') {\n                depth++;\n     \
    \           max_depth = std::max(max_depth, depth);\n            } else if (token[i]\
    \ == ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    int max_depth\
    \ = 0;\n    int depth = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            depth++;\n           \
    \ max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            depth--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    long max_depth = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            st.push(c);\n            max_depth = std::max(max_depth,\
    \ (long)st.size());\n        } else if (c == ')') {\n            st.pop();\n \
    \       } else if (c == ' ') {\n            result.push_back(max_depth);\n   \
    \         max_depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        int max_depth = 0;\n        for (int i = 0; i < item.size(); i++)\
    \ {\n            if (item[i] == '(') {\n                st.push(item[i]);\n  \
    \              max_depth = std::max(max_depth, (int)st.size());\n            }\
    \ else if (item[i] == ')') {\n                st.pop();\n            }\n     \
    \   }\n        result.push_back(max_depth);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        long max_depth =\
    \ 0;\n        long depth = 0;\n        for (auto c : token) {\n            if\
    \ (c == '(') {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_level = 0;\n    long\
    \ level = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n   \
    \         ++level;\n            max_level = std::max(max_level, level);\n    \
    \    } else if (c == ')') {\n            --level;\n        } else if (c == ' ')\
    \ {\n            result.push_back(max_level);\n            max_level = 0;\n  \
    \          level = 0;\n        }\n    }\n    result.push_back(max_level);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ stk;\n    long max_depth = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            stk.push(c);\n            max_depth = std::max(max_depth,\
    \ (long)stk.size());\n        } else if (c == ')') {\n            stk.pop();\n\
    \        } else if (c == ' ') {\n            result.push_back(max_depth);\n  \
    \          max_depth = 0;\n        }\n    }\n    if (!stk.empty()) {\n       \
    \ result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_nesting = 0;\n  \
    \      long current_nesting = 0;\n        for (auto c : token) {\n           \
    \ if (c == '(') {\n                current_nesting++;\n                max_nesting\
    \ = std::max(max_nesting, current_nesting);\n            } else if (c == ')')\
    \ {\n                current_nesting--;\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ st;\n    int max_depth = 0;\n    int depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            depth++;\n            max_depth = std::max(max_depth, depth);\n \
    \       } else if (paren_string[i] == ')') {\n            st.pop();\n        \
    \    depth--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_nesting = 0;\n        for (auto c : token) {\n       \
    \     if (c == '(') {\n                st.push(c);\n                max_nesting\
    \ = std::max(max_nesting, (long)st.size());\n            } else if (c == ')')\
    \ {\n                st.pop();\n            }\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long current_depth = 0;\n    \
    \    for (char c : token) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = std::max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            }\n  \
    \      }\n        result.push_back(max_depth);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_depth = 0;\n    long depth = 0;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            depth--;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            st.push(c);\n            depth++;\n\
    \            max_depth = std::max(max_depth, depth);\n        } else if (c ==\
    \ ')') {\n            st.pop();\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            depth++;\n            max_depth = std::max(max_depth, depth);\n\
    \        } else if (c == ')') {\n            depth--;\n        } else if (c ==\
    \ ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "\tstd::vector<long> result;\n\tstd::stringstream ss(paren_string);\n\
    \tstd::string token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tlong max_nesting\
    \ = 0;\n\t\tlong curr_nesting = 0;\n\t\tfor (auto c : token) {\n\t\t\tif (c ==\
    \ '(') {\n\t\t\t\tcurr_nesting++;\n\t\t\t\tmax_nesting = std::max(max_nesting,\
    \ curr_nesting);\n\t\t\t}\n\t\t\telse if (c == ')') {\n\t\t\t\tcurr_nesting--;\n\
    \t\t\t}\n\t\t}\n\t\tresult.push_back(max_nesting);\n\t}\n\treturn result;", " \
    \   std::vector<long> result;\n    std::stringstream ss(paren_string);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char> st;\n\
    \        long max_depth = 0;\n        for (auto c : item) {\n            if (c\
    \ == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long max_depth = 0;\n    long\
    \ depth = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n   \
    \         depth++;\n            max_depth = std::max(max_depth, depth);\n    \
    \    } else if (c == ')') {\n            depth--;\n        } else if (c == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    long count = 0;\n    for(int i = 0; i < paren_string.length(); i++) {\n \
    \       if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            count++;\n        }\n        else if(paren_string[i] == ')') {\n\
    \            st.pop();\n            count--;\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            result.push_back(count);\n            count = 0;\n  \
    \      }\n    }\n    result.push_back(count);\n    return result;", "    std::vector<long>\
    \ result;\n    int max_level = 0;\n    int level = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     level++;\n            max_level = std::max(max_level, level);\n        }\
    \ else if (paren_string[i] == ')') {\n            level--;\n        } else if\
    \ (paren_string[i] == ' ') {\n            result.push_back(max_level);\n     \
    \       max_level = 0;\n            level = 0;\n        }\n    }\n    result.push_back(max_level);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ count = 0;\n        long max_count = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                count++;\n                max_count\
    \ = std::max(max_count, count);\n            } else if (c == ')') {\n        \
    \        count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        int count = 0;\n        int max_count = 0;\n        for (int\
    \ i = 0; i < token.length(); i++) {\n            if (token[i] == '(') {\n    \
    \            count++;\n                if (count > max_count) {\n            \
    \        max_count = count;\n                }\n            } else if (token[i]\
    \ == ')') {\n                count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long count = 0;\n        long max = 0;\n        for (int i\
    \ = 0; i < token.length(); i++) {\n            if (token[i] == '(') {\n      \
    \          count++;\n                if (count > max) {\n                    max\
    \ = count;\n                }\n            } else if (token[i] == ')') {\n   \
    \             count--;\n            }\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long current_depth = 0;\n    for (auto c : paren_string) {\n     \
    \   if (c == '(') {\n            current_depth += 1;\n            max_depth =\
    \ std::max(max_depth, current_depth);\n        } else if (c == ')') {\n      \
    \      current_depth -= 1;\n        } else if (c == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n\
    \    result.push_back(max_depth);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            level++;\n            max_level = std::max(max_level,\
    \ level);\n        } else if (c == ')') {\n            level--;\n        } else\
    \ if (c == ' ') {\n            result.push_back(max_level);\n            max_level\
    \ = 0;\n            level = 0;\n        }\n    }\n    result.push_back(max_level);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        std::stack<char>\
    \ st;\n        long max_depth = 0;\n        for (char c : item) {\n          \
    \  if (c == '(') {\n                st.push(c);\n                max_depth = std::max(max_depth,\
    \ (long)st.size());\n            } else if (c == ')') {\n                st.pop();\n\
    \            }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : token) {\n  \
    \          if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<char>\
    \ s;\n    long max_depth = 0;\n    long depth = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            s.push(c);\n            depth++;\n \
    \           max_depth = std::max(max_depth, depth);\n        } else if (c == ')')\
    \ {\n            if (s.empty()) {\n                result.push_back(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            } else\
    \ {\n                s.pop();\n                depth--;\n            }\n     \
    \   } else if (c == ' ') {\n            result.push_back(max_depth);\n       \
    \     max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        long\
    \ max_level = 0;\n        long level = 0;\n        for (auto c : token) {\n  \
    \          if (c == '(') {\n                level++;\n                max_level\
    \ = std::max(max_level, level);\n            } else if (c == ')') {\n        \
    \        level--;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        std::stack<char> st;\n        int max_depth = 0;\n        for\
    \ (char c : token) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_depth = std::max(max_depth, (int)st.size());\n          \
    \  } else if (c == ')') {\n                if (st.empty()) {\n               \
    \     max_depth = -1;\n                    break;\n                }\n       \
    \         st.pop();\n            }\n        }\n        if (!st.empty()) {\n  \
    \          max_depth = -1;\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_depth = 0;\n        long depth = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                depth++;\n      \
    \          max_depth = std::max(max_depth, depth);\n            } else if (c ==\
    \ ')') {\n                depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_level = 0;\n        long level = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                ++level;\n      \
    \          max_level = std::max(max_level, level);\n            } else if (c ==\
    \ ')') {\n                --level;\n            }\n        }\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long max_nesting = 0;\n        long current_nesting = 0;\n\
    \        for (char c : token) {\n            if (c == '(') {\n               \
    \ current_nesting++;\n                max_nesting = std::max(max_nesting, current_nesting);\n\
    \            } else if (c == ')') {\n                current_nesting--;\n    \
    \        }\n        }\n        result.push_back(max_nesting);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        for (char c : item)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = std::max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            }\n        }\n \
    \       result.push_back(max_depth);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(paren_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        for (char c : token) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = std::max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        }\n        }\n        result.push_back(max_depth);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stack<char> st;\n    long\
    \ max_depth = 0;\n    long depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            depth++;\n            max_depth = std::max(max_depth, depth);\n \
    \       } else if (paren_string[i] == ')') {\n            st.pop();\n        \
    \    depth--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            depth++;\n            max_depth = std::max(max_depth, depth);\n \
    \       } else if (paren_string[i] == ')') {\n            st.pop();\n        \
    \    depth--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<char> st;\n\
    \    long max_depth = 0;\n    long depth = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \            depth++;\n            max_depth = std::max(max_depth, depth);\n \
    \       } else if (paren_string[i] == ')') {\n            st.pop();\n        \
    \    depth--;\n        } else if (paren_string[i] == ' ') {\n            result.push_back(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n\
    \    return result;", "    std::vector<long> result;\n    std::stringstream ss(paren_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        for (char c : item) {\n   \
    \         if (c == '(') {\n                depth++;\n                max_depth\
    \ = std::max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            }\n        }\n        result.push_back(max_depth);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        long count = 0;\n        long max_count = 0;\n        for (char\
    \ c : token) {\n            if (c == '(') {\n                count++;\n      \
    \          max_count = std::max(max_count, count);\n            } else if (c ==\
    \ ')') {\n                count--;\n            }\n        }\n        result.push_back(max_count);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(paren_string);\n    std::string item;\n    while (std::getline(ss, item,\
    \ ' ')) {\n        std::stack<char> st;\n        long max_nesting = 0;\n     \
    \   for (char c : item) {\n            if (c == '(') {\n                st.push(c);\n\
    \                max_nesting = std::max(max_nesting, (long)st.size());\n     \
    \       } else if (c == ')') {\n                if (st.empty()) {\n          \
    \          max_nesting = -1;\n                    break;\n                }\n\
    \                st.pop();\n            }\n        }\n        if (!st.empty())\
    \ {\n            max_nesting = -1;\n        }\n        result.push_back(max_nesting);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_depth\
    \ = 0;\n    long depth = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            depth++;\n           \
    \ max_depth = std::max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == ')') {\n            depth--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            result.push_back(max_depth);\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n    }\n    result.push_back(max_depth);\n  \
    \  return result;"]
stop_tokens:
- "\n}"
