name: HumanEval_22_filter_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given list of any\
  \ python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n\
  // >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long>\
  \ filter_integers(std::vector<std::any> values) {\n"
tests: "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>(long)\"\
  adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>(long)\"\
  b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n"
completions: ["    std::vector<long> result;\n    for(auto &i: values){\n        try{\n\
    \            result.push_back(std::any_cast<long>(i));\n        }\n        catch(std::bad_any_cast\
    \ &e){\n            continue;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for(auto v: values) {\n        if(v.type() == typeid(long)) {\n\
    \            result.push_back(std::any_cast<long>(v));\n        }\n    }\n   \
    \ return result;", "    std::vector<long> res;\n    for(auto i:values){\n    \
    \    if(i.type()==typeid(int)){\n            res.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ it = values.begin(); it != values.end(); it++) {\n        if(it->type() == typeid(long))\
    \ {\n            result.push_back(std::any_cast<long>(*it));\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    for(auto &val : values)\
    \ {\n        if(val.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(val));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ val : values) {\n        try {\n            result.push_back(std::any_cast<long>(val));\n\
    \        } catch(std::bad_any_cast& e) {\n            // Do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto& value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            continue;\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // Do nothing\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> result;\n  for (auto\
    \ value : values) {\n    if (value.type() == typeid(long)) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "  std::vector<long> result;\n  for (auto i :\
    \ values) {\n    if (i.type() == typeid(long)) {\n      result.push_back(std::any_cast<long>(i));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for(auto i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        if(i.type()==typeid(int)){\n            result.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> res;\n    for(auto x: values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(x));\n        }\n\
    \        catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto i:values){\n \
    \       if(i.type()==typeid(int)){\n            result.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        if(i.type()==typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        if(i.type()==typeid(int)){\n            res.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ i : values) {\n        try {\n            result.push_back(std::any_cast<long>(i));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto i :\
    \ values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i : values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> res;\n    for(auto i :\
    \ values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    for(auto v: values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(v));\n        }\n\
    \        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // Do nothing\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(const std::bad_any_cast& e){\n            continue;\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> res;\n    for(auto i:values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ it = values.begin(); it != values.end(); it++) {\n        try {\n          \
    \  result.push_back(std::any_cast<long>(*it));\n        } catch(const std::bad_any_cast&\
    \ e) {\n            continue;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for(auto value : values) {\n        if(value.type() == typeid(long))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    for(auto i:values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  for (auto value :\
    \ values) {\n    if (value.type() == typeid(long)) {\n      result.push_back(std::any_cast<long>(value));\n\
    \    }\n  }\n  return result;", "    std::vector<long> result;\n    for(auto &value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ x: values){\n        try{\n            result.push_back(std::any_cast<long>(x));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  for (auto value :\
    \ values) {\n    try {\n      result.push_back(std::any_cast<long>(value));\n\
    \    } catch (std::bad_any_cast& e) {\n      continue;\n    }\n  }\n  return result;",
  "    std::vector<long> res;\n    for(auto i:values){\n        try{\n           \
    \ res.push_back(std::any_cast<long>(i));\n        }\n        catch(std::bad_any_cast&\
    \ e){\n            continue;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    for(auto value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> v;\n    for(auto i:values){\n\
    \        try{\n            v.push_back(std::any_cast<long>(i));\n        }\n \
    \       catch(std::bad_any_cast& e){\n            //do nothing\n        }\n  \
    \  }\n    return v;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto i :\
    \ values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    for(auto i:values){\n\
    \        if(i.type()==typeid(int)){\n            res.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast){\n            continue;\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        if(i.type() == typeid(int)){\n            result.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type() == typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // Do nothing\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ x: values){\n        try{\n            res.push_back(std::any_cast<long>(x));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto i :\
    \ values){\n        if(i.type() == typeid(int)){\n            result.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type() == typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ x: values){\n        if(x.type() == typeid(long)){\n            result.push_back(std::any_cast<long>(x));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // do nothing\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            continue;\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast&) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> v;\n    for(auto i:values){\n\
    \        try{\n            v.push_back(std::any_cast<long>(i));\n        }\n \
    \       catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n\
    \    return v;", "    std::vector<long> result;\n    for(auto &i:values){\n  \
    \      try{\n            result.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(const std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto x: values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(x));\n       \
    \ }\n        catch(const std::bad_any_cast& e){\n            continue;\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            continue;\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i:values){\n\
    \        try{\n            std::any_cast<long>(i);\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            //std::cout<<e.what()<<std::endl;\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // do nothing\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &value : values) {\n        if(value.type() == typeid(long)) {\n           \
    \ result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    for(auto it = values.begin();\
    \ it != values.end(); it++) {\n        try {\n            result.push_back(std::any_cast<long>(*it));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto it =\
    \ values.begin(); it != values.end(); it++) {\n        try {\n            result.push_back(std::any_cast<long>(*it));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> ret;\n    for(auto\
    \ i:values){\n        try{\n            ret.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(const std::bad_any_cast& e){\n            continue;\n\
    \        }\n    }\n    return ret;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto &val\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(val));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "\tstd::vector<long> result;\n\tfor (auto value :\
    \ values) {\n\t\tif (value.type() == typeid(long)) {\n\t\t\tresult.push_back(std::any_cast<long>(value));\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto i :\
    \ values){\n        if(i.type() == typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto &value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> res;\n    for(auto i:values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    for(auto i:values){\n    \
    \    if(i.type()==typeid(int)){\n            res.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return res;", "  std::vector<long> res;\n  for(auto i:values){\n\
    \    if(i.type()==typeid(int)){\n      res.push_back(std::any_cast<int>(i));\n\
    \    }\n    else if(i.type()==typeid(long)){\n      res.push_back(std::any_cast<long>(i));\n\
    \    }\n  }\n  return res;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> v;\n    for(auto i:values){\n\
    \        try{\n            v.push_back(std::any_cast<long>(i));\n        }\n \
    \       catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n\
    \    return v;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ x: values){\n        try{\n            res.push_back(std::any_cast<long>(x));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ v: values) {\n        try {\n            result.push_back(std::any_cast<long>(v));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto i :\
    \ values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        if(i.type() == typeid(int)){\n            result.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type() == typeid(long)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i : values){\n        if(std::any_cast<long>(&i)){\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ &i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast &e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ i:values){\n        try{\n            result.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    for(auto it = values.begin();\
    \ it != values.end(); it++) {\n        if(it->type() == typeid(long)) {\n    \
    \        res.push_back(std::any_cast<long>(*it));\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    for(auto &val : values) {\n     \
    \   try {\n            result.push_back(std::any_cast<long>(val));\n        }\
    \ catch(std::bad_any_cast &e) {\n            // do nothing\n        }\n    }\n\
    \    return result;", "    std::vector<long> res;\n    for(auto i : values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(const std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return res;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "  std::vector<long> ans;\n  for(auto\
    \ i : values){\n    try{\n      ans.push_back(std::any_cast<long>(i));\n    }\n\
    \    catch(std::bad_any_cast& e){\n      continue;\n    }\n  }\n  return ans;",
  "    std::vector<long> res;\n    for(auto i:values){\n        try{\n           \
    \ res.push_back(std::any_cast<long>(i));\n        }\n        catch(std::bad_any_cast\
    \ e){\n            continue;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    for(auto val : values) {\n        try {\n            result.push_back(std::any_cast<long>(val));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> res;\n    for(auto i:values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i : values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> res;\n    for(auto &i:values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }\n\
    \        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    for(auto x: values){\n   \
    \     try{\n            res.push_back(std::any_cast<long>(x));\n        }\n  \
    \      catch(std::bad_any_cast& e){\n            //do nothing\n        }\n   \
    \ }\n    return res;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // do nothing\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "\tstd::vector<long> result;\n\tfor (auto\
    \ it = values.begin(); it != values.end(); it++) {\n\t\tif (it->type() == typeid(long))\
    \ {\n\t\t\tresult.push_back(std::any_cast<long>(*it));\n\t\t}\n\t}\n\treturn result;",
  "    std::vector<long> result;\n    for(auto value : values) {\n        try {\n\
    \            result.push_back(std::any_cast<long>(value));\n        } catch(std::bad_any_cast&\
    \ e) {\n            continue;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for(auto& value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    for(auto value\
    \ : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    for(auto it: values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(it));\n        }\n\
    \        catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto value : values)\
    \ {\n        if(value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto\
    \ i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "  std::vector<long> result;\n  for (auto value\
    \ : values) {\n    try {\n      result.push_back(std::any_cast<long>(value));\n\
    \    } catch (std::bad_any_cast &e) {\n      continue;\n    }\n  }\n  return result;",
  "    std::vector<long> res;\n    for(auto i : values){\n        try{\n         \
    \   res.push_back(std::any_cast<long>(i));\n        }\n        catch(std::bad_any_cast&\
    \ e){\n            continue;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for(auto i:values){\n        try{\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n        catch(std::bad_any_cast& e){\n            continue;\n    \
    \    }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(const std::bad_any_cast& e) {\n            // ignore\n      \
    \  }\n    }\n    return result;", "    std::vector<long> res;\n    for(auto i:values){\n\
    \        if(i.type()==typeid(int)){\n            res.push_back(std::any_cast<int>(i));\n\
    \        }\n        else if(i.type()==typeid(long)){\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    for(auto\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast &e) {\n            // do nothing\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(auto &i:values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(const std::bad_any_cast& e){\n            continue;\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    for(auto&\
    \ value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n\
    \        } catch(std::bad_any_cast& e) {\n            continue;\n        }\n \
    \   }\n    return result;", "    std::vector<long> res;\n    for(auto &x: values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(x));\n        }\n\
    \        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    for(auto i : values){\n\
    \        try{\n            result.push_back(std::any_cast<long>(i));\n       \
    \ }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    for(auto i : values){\n\
    \        try{\n            res.push_back(std::any_cast<long>(i));\n        }catch(std::bad_any_cast&\
    \ e){\n            continue;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    for(auto value : values) {\n        if(value.type() == typeid(long))\
    \ {\n            result.push_back(std::any_cast<long>(value));\n        }\n  \
    \  }\n    return result;", "    std::vector<long> res;\n    for(auto i : values){\n\
    \        if(i.type() == typeid(long)){\n            res.push_back(std::any_cast<long>(i));\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    for(auto\
    \ &x: values){\n        try{\n            res.push_back(std::any_cast<long>(x));\n\
    \        }catch(std::bad_any_cast &e){\n            continue;\n        }\n   \
    \ }\n    return res;"]
stop_tokens:
- "\n}"
