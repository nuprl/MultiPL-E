name: HumanEval_12_longest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n// strings of the same\
  \ length. Return None in case the input list is empty.\n// >>> longest([])\n// >>>\
  \ longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\n\
  std::optional<std::string> longest(std::vector<std::string> strings) {\n"
tests: "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
  \ == (std::optional<std::string>({})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"y\", (std::string)\"z\"}))) == (std::optional<std::string>(\"\
  x\")));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
  yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"\
  abc\"}))) == (std::optional<std::string>(\"zzzz\")));\n}\n"
completions: []
stop_tokens:
- "\n}"
