name: HumanEval_78_hex_key
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write\
  \ a function that receives \n// a hexadecimal number as a string and counts the\
  \ number of hexadecimal \n// digits that are primes (prime number, or a prime, is\
  \ a natural number \n// greater than 1 that is not a product of two smaller natural\
  \ numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
  \ E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal\
  \ 13).\n// Note: you may assume the input is always correct or empty string, \n\
  // and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"\
  AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n//\
  \ For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\"\
  \ the output should be 6.\n// For num = \"2020\" the output should be 2.\nlong hex_key(std::string\
  \ num) {\n"
tests: "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\"\
  )) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"\
  ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"\
  123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12));\n}\n"
completions: ["    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n   \
    \     if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "  std::string\
    \ hex_digits = \"0123456789ABCDEF\";\n  std::string prime_hex_digits = \"2357BDF\"\
    ;\n  long count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    for (int\
    \ j = 0; j < prime_hex_digits.length(); j++) {\n      if (num[i] == prime_hex_digits[j])\
    \ {\n        count++;\n      }\n    }\n  }\n  return count;", "    long key =\
    \ 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= 'A' &&\
    \ num[i] <= 'F') {\n            key = key * 16 + (num[i] - 'A' + 10);\n      \
    \  } else {\n            key = key * 16 + (num[i] - '0');\n        }\n    }\n\
    \    return key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16\
    \ + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ == 'A') {\n            key += 10 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'B') {\n            key += 11 * pow(16, num.size() - i - 1);\n\
    \        } else if (num[i] == 'C') {\n            key += 12 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'D') {\n            key += 13 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'E') {\n            key +=\
    \ 14 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'F') {\n   \
    \         key += 15 * pow(16, num.size() - i - 1);\n        } else {\n       \
    \     key += (num[i] - '0') * pow(16, num.size() - i - 1);\n        }\n    }\n\
    \    return key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16\
    \ + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long result =\
    \ 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' &&\
    \ num[i] <= '9') {\n            result += num[i] - '0';\n        } else {\n  \
    \          result += num[i] - 'A' + 10;\n        }\n    }\n    return result;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key += (num[i] - 'A' + 10) * pow(16,\
    \ num.size() - i - 1);\n        } else {\n            key += (num[i] - '0') *\
    \ pow(16, num.size() - i - 1);\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        key = key * 16\
    \ + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i] - '0');\n    }\n    return key;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long count =\
    \ 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '2'\
    \ || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i]\
    \ == 'D') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long result = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            result += (num[i] - '0');\n        }\
    \ else {\n            result += (num[i] - 'A' + 10);\n        }\n    }\n    return\
    \ result;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n \
    \       if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "\tlong\
    \ key = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\t\tif (num[i] >= '0'\
    \ && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i] - '0');\n\t\t}\n\t\telse\
    \ if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey = key * 16 + (num[i] - 'A'\
    \ + 10);\n\t\t}\n\t}\n\treturn key;", "    long key = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        key *= 16;\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key += num[i] - '0';\n        } else if (num[i] >= 'A'\
    \ && num[i] <= 'F') {\n            key += num[i] - 'A' + 10;\n        }\n    }\n\
    \    return key;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            result +=\
    \ num[i] - '0';\n        } else {\n            result += num[i] - 'A' + 10;\n\
    \        }\n    }\n    return result;", "    long result = 0;\n    for (int i\
    \ = 0; i < num.size(); i++) {\n        switch (num[i]) {\n            case '0':\
    \ result += 0; break;\n            case '1': result += 1; break;\n           \
    \ case '2': result += 2; break;\n            case '3': result += 3; break;\n \
    \           case '4': result += 4; break;\n            case '5': result += 5;\
    \ break;\n            case '6': result += 6; break;\n            case '7': result\
    \ += 7; break;\n            case '8': result += 8; break;\n            case '9':\
    \ result += 9; break;\n            case 'A': result += 10; break;\n          \
    \  case 'B': result += 11; break;\n            case 'C': result += 12; break;\n\
    \            case 'D': result += 13; break;\n            case 'E': result += 14;\
    \ break;\n            case 'F': result += 15; break;\n        }\n    }\n    return\
    \ result;", "    long result = 0;\n    for (int i = 0; i < num.size(); i++) {\n\
    \        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D') {\n            result++;\n\
    \        }\n    }\n    return result;", "    long result = 0;\n    for (int i\
    \ = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n\
    \            result += num[i] - '0';\n        } else {\n            result +=\
    \ num[i] - 'A' + 10;\n        }\n    }\n    return result;", "  std::map<char,\
    \ long> hex_map = {\n    {'0', 0},\n    {'1', 1},\n    {'2', 2},\n    {'3', 3},\n\
    \    {'4', 4},\n    {'5', 5},\n    {'6', 6},\n    {'7', 7},\n    {'8', 8},\n \
    \   {'9', 9},\n    {'A', 10},\n    {'B', 11},\n    {'C', 12},\n    {'D', 13},\n\
    \    {'E', 14},\n    {'F', 15}\n  };\n  long key = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    key += hex_map[num[i]];\n  }\n  return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "    if (num.empty()) {\n        return 0;\n\
    \    }\n    long count = 0;\n    std::unordered_set<char> hex_prime = {'2', '3',\
    \ '5', '7', 'B', 'D'};\n    for (char c : num) {\n        if (hex_prime.find(c)\
    \ != hex_prime.end()) {\n            count++;\n        }\n    }\n    return count;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey += (num[i] - 'A'\
    \ + 10) * pow(16, num.length() - i - 1);\n\t\t}\n\t\telse {\n\t\t\tkey += (num[i]\
    \ - '0') * pow(16, num.length() - i - 1);\n\t\t}\n\t}\n\treturn key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] ==\
    \ 'A') {\n            key += 10 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'B') {\n            key += 11 * pow(16, num.size() - i - 1);\n\
    \        } else if (num[i] == 'C') {\n            key += 12 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'D') {\n            key += 13 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'E') {\n            key +=\
    \ 14 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'F') {\n   \
    \         key += 15 * pow(16, num.size() - i - 1);\n        } else {\n       \
    \     key += (num[i] - '0') * pow(16, num.size() - i - 1);\n        }\n    }\n\
    \    return key;", "    std::string key = \"2357BD\";\n    long count = 0;\n \
    \   for (int i = 0; i < num.length(); i++) {\n        if (key.find(num[i]) !=\
    \ std::string::npos) {\n            count++;\n        }\n    }\n    return count;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        result += num[i] - '0';\n        } else {\n            result += num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return result;", "    long key = 0;\n   \
    \ for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            key += (num[i] - 'A' + 10) * pow(16, num.size() - i -\
    \ 1);\n        } else {\n            key += (num[i] - '0') * pow(16, num.size()\
    \ - i - 1);\n        }\n    }\n    return key;", "    std::map<char, int> hex_map;\n\
    \    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3']\
    \ = 3;\n    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n\
    \    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A']\
    \ = 10;\n    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n\
    \    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n    long sum = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        sum += hex_map[num[i]];\n    }\n    return\
    \ sum;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        key = key * 16\
    \ + (num[i] - '0');\n    }\n    return key;", "\tlong key = 0;\n\tfor (int i =\
    \ 0; i < num.length(); i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\
    \tkey += num[i] - '0';\n\t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \t\t\tkey += num[i] - 'A' + 10;\n\t\t}\n\t}\n\treturn key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A') {\n  \
    \          key += 10;\n        } else if (num[i] == 'B') {\n            key +=\
    \ 11;\n        } else if (num[i] == 'C') {\n            key += 12;\n        }\
    \ else if (num[i] == 'D') {\n            key += 13;\n        } else if (num[i]\
    \ == 'E') {\n            key += 14;\n        } else if (num[i] == 'F') {\n   \
    \         key += 15;\n        } else {\n            key += num[i] - '0';\n   \
    \     }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n      \
    \      result += num[i] - '0';\n        } else {\n            result += num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return result;", "    long key = 0;\n   \
    \ for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tkey = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i] - '0');\n\
    \t}\n\treturn key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        key = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i] - '0');\n\
    \    }\n    return key;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return\
    \ key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\t\tkey\
    \ = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i] - '0');\n\t}\n\treturn\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    key = key * 16 + (num[i] <= '9' ? num[i] - '0' : num[i] - 'A' + 10);\n  \
    \  }\n    return key;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        result = result * 16 + (isdigit(num[i]) ? num[i] - '0' : num[i]\
    \ - 'A' + 10);\n    }\n    return result;", "    long hex_key = 0;\n    for (int\
    \ i = 0; i < num.length(); i++) {\n        if (num[i] == 'A' || num[i] == 'B'\
    \ || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F') {\n   \
    \         hex_key += (num[i] - 55) * pow(16, num.length() - 1 - i);\n        }\
    \ else {\n            hex_key += (num[i] - 48) * pow(16, num.length() - 1 - i);\n\
    \        }\n    }\n    return hex_key;", "\tlong count = 0;\n\tfor (int i = 0;\
    \ i < num.length(); i++) {\n\t\tif (num[i] == '2' || num[i] == '3' || num[i] ==\
    \ '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n\t\t\tcount++;\n\t\
    \t}\n\t}\n\treturn count;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        result = result * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 :\
    \ num[i] - '0');\n    }\n    return result;", "    std::map<char, int> hex_map;\n\
    \    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3']\
    \ = 3;\n    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n\
    \    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A']\
    \ = 10;\n    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n\
    \    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        key += hex_map[num[i]];\n        key\
    \ *= 16;\n    }\n    return key;", "    long key = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    key = key * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n\
    \    return key;", "  std::unordered_map<char, int> hex_map = {\n    {'0', 0},\n\
    \    {'1', 1},\n    {'2', 2},\n    {'3', 3},\n    {'4', 4},\n    {'5', 5},\n \
    \   {'6', 6},\n    {'7', 7},\n    {'8', 8},\n    {'9', 9},\n    {'A', 10},\n \
    \   {'B', 11},\n    {'C', 12},\n    {'D', 13},\n    {'E', 14},\n    {'F', 15}\n\
    \  };\n  long sum = 0;\n  for (int i = 0; i < num.size(); i++) {\n    sum += hex_map[num[i]];\n\
    \  }\n  return sum;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D') {\n   \
    \         result++;\n        }\n    }\n    return result;", "  std::unordered_map<char,\
    \ int> hex_map;\n  hex_map['0'] = 0;\n  hex_map['1'] = 1;\n  hex_map['2'] = 2;\n\
    \  hex_map['3'] = 3;\n  hex_map['4'] = 4;\n  hex_map['5'] = 5;\n  hex_map['6']\
    \ = 6;\n  hex_map['7'] = 7;\n  hex_map['8'] = 8;\n  hex_map['9'] = 9;\n  hex_map['A']\
    \ = 10;\n  hex_map['B'] = 11;\n  hex_map['C'] = 12;\n  hex_map['D'] = 13;\n  hex_map['E']\
    \ = 14;\n  hex_map['F'] = 15;\n  long key = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    key = key * 16 + hex_map[num[i]];\n  }\n  return key;", "    long\
    \ count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D') {\n            count++;\n        }\n    }\n    return count;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A') {\n  \
    \          key += 10;\n        } else if (num[i] == 'B') {\n            key +=\
    \ 11;\n        } else if (num[i] == 'C') {\n            key += 12;\n        }\
    \ else if (num[i] == 'D') {\n            key += 13;\n        } else if (num[i]\
    \ == 'E') {\n            key += 14;\n        } else if (num[i] == 'F') {\n   \
    \         key += 15;\n        } else {\n            key += num[i] - '0';\n   \
    \     }\n    }\n    return key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i]\
    \ - '0');\n\t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey =\
    \ key * 16 + (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;", "    long count\
    \ = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '2'\
    \ || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i]\
    \ == 'D') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long result =\
    \ 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A' ||\
    \ num[i] == 'B' || num[i] == 'D') {\n            result++;\n        }\n    }\n\
    \    return result;", "  long count = 0;\n  for (int i = 0; i < num.length();\
    \ i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] ==\
    \ '7' || num[i] == 'B' || num[i] == 'D') {\n      count++;\n    }\n  }\n  return\
    \ count;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n  \
    \      if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >=\
    \ '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n      \
    \  } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16 +\
    \ num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "    std::unordered_map<char, int> hex_map\
    \ = {\n        {'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4}, {'5', 5}, {'6',\
    \ 6}, {'7', 7}, {'8', 8}, {'9', 9},\n        {'A', 10}, {'B', 11}, {'C', 12},\
    \ {'D', 13}, {'E', 14}, {'F', 15}\n    };\n    long key = 0;\n    for (int i =\
    \ 0; i < num.size(); i++) {\n        key += hex_map[num[i]] * pow(16, num.size()\
    \ - i - 1);\n    }\n    return key;", "    long key = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        key += (num[i] - '0') * pow(16, num.size() - i - 1);\n        } else\
    \ {\n            key += (num[i] - 'A' + 10) * pow(16, num.size() - i - 1);\n \
    \       }\n    }\n    return key;", "    long key = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n      \
    \      key = key * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n\
    \    return key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16\
    \ + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;",
  "    std::map<char, int> hex_map = {\n        {'0', 0},\n        {'1', 1},\n   \
    \     {'2', 2},\n        {'3', 3},\n        {'4', 4},\n        {'5', 5},\n   \
    \     {'6', 6},\n        {'7', 7},\n        {'8', 8},\n        {'9', 9},\n   \
    \     {'A', 10},\n        {'B', 11},\n        {'C', 12},\n        {'D', 13},\n\
    \        {'E', 14},\n        {'F', 15}\n    };\n    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        key = key * 16 + hex_map[num[i]];\n \
    \   }\n    return key;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D') {\n   \
    \         key += 1;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "    std::map<char, int> hex_map;\n    hex_map['0']\
    \ = 0;\n    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3'] = 3;\n\
    \    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n    hex_map['7']\
    \ = 7;\n    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A'] = 10;\n\
    \    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n    hex_map['E']\
    \ = 14;\n    hex_map['F'] = 15;\n    long sum = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        sum += hex_map[num[i]];\n    }\n    return sum;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        key += (num[i]\
    \ - '0') * pow(16, num.size() - i - 1);\n    }\n    return key;", "    long result\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            result += num[i] - '0';\n        } else {\n\
    \            result += num[i] - 'A' + 10;\n        }\n    }\n    return result;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ == 'A') {\n            key += 10;\n        } else if (num[i] == 'B') {\n   \
    \         key += 11;\n        } else if (num[i] == 'C') {\n            key +=\
    \ 12;\n        } else if (num[i] == 'D') {\n            key += 13;\n        }\
    \ else if (num[i] == 'E') {\n            key += 14;\n        } else if (num[i]\
    \ == 'F') {\n            key += 15;\n        } else {\n            key += num[i]\
    \ - '0';\n        }\n    }\n    return key;", "    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        key = key * 16 + (num[i] <= '9' ? num[i]\
    \ - '0' : num[i] - 'A' + 10);\n    }\n    return key;", "    long key = 0;\n \
    \   for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "    long key = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n      \
    \      key = key * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n\
    \    return key;", "    long count = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            count++;\n        }\n\
    \    }\n    return count;", "  std::map<char, int> hex_map;\n  hex_map['0'] =\
    \ 0;\n  hex_map['1'] = 1;\n  hex_map['2'] = 2;\n  hex_map['3'] = 3;\n  hex_map['4']\
    \ = 4;\n  hex_map['5'] = 5;\n  hex_map['6'] = 6;\n  hex_map['7'] = 7;\n  hex_map['8']\
    \ = 8;\n  hex_map['9'] = 9;\n  hex_map['A'] = 10;\n  hex_map['B'] = 11;\n  hex_map['C']\
    \ = 12;\n  hex_map['D'] = 13;\n  hex_map['E'] = 14;\n  hex_map['F'] = 15;\n  long\
    \ key = 0;\n  for (int i = 0; i < num.size(); i++) {\n    key += hex_map[num[i]]\
    \ * pow(16, num.size() - i - 1);\n  }\n  return key;", "    long key = 0;\n  \
    \  for (int i = 0; i < num.size(); i++) {\n        key = key * 16 + (num[i] <=\
    \ '9' ? num[i] - '0' : num[i] - 'A' + 10);\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] ==\
    \ 'A') {\n            key += 10 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'B') {\n            key += 11 * pow(16, num.size() - i - 1);\n\
    \        } else if (num[i] == 'C') {\n            key += 12 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'D') {\n            key += 13 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'E') {\n            key +=\
    \ 14 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'F') {\n   \
    \         key += 15 * pow(16, num.size() - i - 1);\n        } else {\n       \
    \     key += (num[i] - '0') * pow(16, num.size() - i - 1);\n        }\n    }\n\
    \    return key;", "  long count = 0;\n  for (int i = 0; i < num.length(); i++)\
    \ {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7'\
    \ || num[i] == 'B' || num[i] == 'D') {\n      count++;\n    }\n  }\n  return count;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long count =\
    \ 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '2'\
    \ || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i]\
    \ == 'D') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long count =\
    \ 0;\n    std::string hex_key = \"2357BDF\";\n    for (int i = 0; i < num.length();\
    \ i++) {\n        for (int j = 0; j < hex_key.length(); j++) {\n            if\
    \ (num[i] == hex_key[j]) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return\
    \ key;", "\tlong hex_key = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\t\t\
    if (num[i] == 'A') {\n\t\t\thex_key += 10;\n\t\t}\n\t\telse if (num[i] == 'B')\
    \ {\n\t\t\thex_key += 11;\n\t\t}\n\t\telse if (num[i] == 'C') {\n\t\t\thex_key\
    \ += 12;\n\t\t}\n\t\telse if (num[i] == 'D') {\n\t\t\thex_key += 13;\n\t\t}\n\t\
    \telse if (num[i] == 'E') {\n\t\t\thex_key += 14;\n\t\t}\n\t\telse if (num[i]\
    \ == 'F') {\n\t\t\thex_key += 15;\n\t\t}\n\t\telse {\n\t\t\thex_key += num[i]\
    \ - '0';\n\t\t}\n\t}\n\treturn hex_key;", "  long key = 0;\n  for (int i = 0;\
    \ i < num.size(); i++) {\n    if (num[i] == 'A') {\n      key += 10;\n    } else\
    \ if (num[i] == 'B') {\n      key += 11;\n    } else if (num[i] == 'C') {\n  \
    \    key += 12;\n    } else if (num[i] == 'D') {\n      key += 13;\n    } else\
    \ if (num[i] == 'E') {\n      key += 14;\n    } else if (num[i] == 'F') {\n  \
    \    key += 15;\n    } else {\n      key += num[i] - '0';\n    }\n  }\n  return\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >=\
    \ '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n      \
    \  } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16 +\
    \ num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    std::map<char,\
    \ int> hex_map = {\n        {'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4},\
    \ {'5', 5}, {'6', 6}, {'7', 7}, {'8', 8}, {'9', 9},\n        {'A', 10}, {'B',\
    \ 11}, {'C', 12}, {'D', 13}, {'E', 14}, {'F', 15}\n    };\n    long key = 0;\n\
    \    for (auto c : num) {\n        key = key * 16 + hex_map[c];\n    }\n    return\
    \ key;", "    long count = 0;\n    for (int i = 0; i < num.length(); i++) {\n\
    \        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7'\
    \ || num[i] == 'B' || num[i] == 'D') {\n            count++;\n        }\n    }\n\
    \    return count;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        result += (num[i] - '0') * pow(16, num.size() - i - 1);\n  \
    \  }\n    return result;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "\tlong\
    \ result = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == 'A'\
    \ || num[i] == 'B' || num[i] == 'D') {\n\t\t\tresult++;\n\t\t}\n\t\telse if (num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7') {\n\t\t\tresult++;\n\
    \t\t}\n\t}\n\treturn result;", "    long result = 0;\n    for (int i = 0; i <\
    \ num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n        \
    \    result += num[i] - '0';\n        } else {\n            result += num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return result;", "    long count = 0;\n   \
    \ for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long key\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else\
    \ if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n\
    \            key = key * 16 + num[i] - '0';\n        } else if (num[i] >= 'A'\
    \ && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n     \
    \   }\n    }\n    return key;", "    std::unordered_map<char, long> hex_map;\n\
    \    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3']\
    \ = 3;\n    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n\
    \    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A']\
    \ = 10;\n    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n\
    \    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        key += hex_map[num[i]];\n    }\n    return\
    \ key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\t\tif\
    \ (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i] - '0');\n\
    \t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey = key * 16 +\
    \ (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;", "    long key = 0;\n    for\
    \ (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9')\
    \ {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i] >=\
    \ 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n \
    \       }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        result += num[i] - '0';\n        } else {\n            result += num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return result;", "    long key = 0;\n   \
    \ for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A' || num[i]\
    \ == 'B' || num[i] == 'D') {\n            key += 1;\n        }\n    }\n    return\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] == 'A') {\n            key += 10;\n        } else if (num[i] ==\
    \ 'B') {\n            key += 11;\n        } else if (num[i] == 'C') {\n      \
    \      key += 12;\n        } else if (num[i] == 'D') {\n            key += 13;\n\
    \        } else if (num[i] == 'E') {\n            key += 14;\n        } else if\
    \ (num[i] == 'F') {\n            key += 15;\n        } else {\n            key\
    \ += num[i] - '0';\n        }\n    }\n    return key;", "    long key = 0;\n \
    \   for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A') {\n   \
    \         key += 10;\n        } else if (num[i] == 'B') {\n            key +=\
    \ 11;\n        } else if (num[i] == 'C') {\n            key += 12;\n        }\
    \ else if (num[i] == 'D') {\n            key += 13;\n        } else if (num[i]\
    \ == 'E') {\n            key += 14;\n        } else if (num[i] == 'F') {\n   \
    \         key += 15;\n        } else {\n            key += num[i] - '0';\n   \
    \     }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n      \
    \      result += num[i] - '0';\n        } else {\n            result += num[i]\
    \ - 'A' + 10;\n        }\n    }\n    return result;", "    long key = 0;\n   \
    \ for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A') {\n     \
    \       key += 10;\n        } else if (num[i] == 'B') {\n            key += 11;\n\
    \        } else if (num[i] == 'C') {\n            key += 12;\n        } else if\
    \ (num[i] == 'D') {\n            key += 13;\n        } else if (num[i] == 'E')\
    \ {\n            key += 14;\n        } else if (num[i] == 'F') {\n           \
    \ key += 15;\n        } else {\n            key += num[i] - '0';\n        }\n\
    \    }\n    return key;", "  long result = 0;\n  for (int i = 0; i < num.size();\
    \ i++) {\n    if (num[i] >= '0' && num[i] <= '9') {\n      result += (num[i] -\
    \ '0');\n    } else {\n      result += (num[i] - 'A' + 10);\n    }\n    result\
    \ *= 16;\n  }\n  return result / 16;", "    std::unordered_map<char, int> hex_map;\n\
    \    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3']\
    \ = 3;\n    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n\
    \    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A']\
    \ = 10;\n    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n\
    \    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        key = key * 16 + hex_map[num[i]];\n \
    \   }\n    return key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tkey = key * 16 + (num[i] >= 'A' ? num[i] - 'A' + 10 : num[i] - '0');\n\
    \t}\n\treturn key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16\
    \ + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ == 'A' || num[i] == 'B' || num[i] == 'D') {\n            key += 1;\n       \
    \ }\n    }\n    return key;", "    long count = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            count++;\n        }\n\
    \    }\n    return count;", "    long key = 0;\n    for (auto c : num) {\n   \
    \     if (c == 'A' || c == 'B' || c == 'D') {\n            key += 1;\n       \
    \ }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D') {\n   \
    \         result++;\n        }\n    }\n    return result;", "    std::map<char,\
    \ long> hex_map;\n    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n    hex_map['2']\
    \ = 2;\n    hex_map['3'] = 3;\n    hex_map['4'] = 4;\n    hex_map['5'] = 5;\n\
    \    hex_map['6'] = 6;\n    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n    hex_map['9']\
    \ = 9;\n    hex_map['A'] = 10;\n    hex_map['B'] = 11;\n    hex_map['C'] = 12;\n\
    \    hex_map['D'] = 13;\n    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n    long\
    \ result = 0;\n    for (int i = 0; i < num.size(); i++) {\n        result = result\
    \ * 16 + hex_map[num[i]];\n    }\n    return result;", "    long key = 0;\n  \
    \  for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            key += num[i] - 'A' + 10;\n        } else {\n       \
    \     key += num[i] - '0';\n        }\n        key *= 16;\n    }\n    return key;",
  "    std::map<char, int> hex_map;\n    hex_map['0'] = 0;\n    hex_map['1'] = 1;\n\
    \    hex_map['2'] = 2;\n    hex_map['3'] = 3;\n    hex_map['4'] = 4;\n    hex_map['5']\
    \ = 5;\n    hex_map['6'] = 6;\n    hex_map['7'] = 7;\n    hex_map['8'] = 8;\n\
    \    hex_map['9'] = 9;\n    hex_map['A'] = 10;\n    hex_map['B'] = 11;\n    hex_map['C']\
    \ = 12;\n    hex_map['D'] = 13;\n    hex_map['E'] = 14;\n    hex_map['F'] = 15;\n\
    \    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        key +=\
    \ hex_map[num[i]];\n        key *= 16;\n    }\n    return key;", "    long result\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            result += num[i] - '0';\n        } else {\n\
    \            result += num[i] - 'A' + 10;\n        }\n    }\n    return result;",
  "  long count = 0;\n  std::vector<int> prime_nums = {2, 3, 5, 7, 11, 13};\n  std::vector<char>\
    \ hex_nums = {'2', '3', '5', '7', 'B', 'D'};\n  for (int i = 0; i < num.size();\
    \ i++) {\n    for (int j = 0; j < hex_nums.size(); j++) {\n      if (num[i] ==\
    \ hex_nums[j]) {\n        count++;\n      }\n    }\n  }\n  return count;", " \
    \   long result = 0;\n    for (int i = 0; i < num.size(); i++) {\n        result\
    \ *= 16;\n        if (num[i] >= '0' && num[i] <= '9') {\n            result +=\
    \ num[i] - '0';\n        } else {\n            result += num[i] - 'A' + 10;\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> hex_digits\
    \ = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"};\n  std::vector<std::string> prime_digits\
    \ = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"};\n  long count = 0;\n  for (int\
    \ i = 0; i < num.length(); i++) {\n    for (int j = 0; j < prime_digits.size();\
    \ j++) {\n      if (num[i] == prime_digits[j][0]) {\n        count++;\n      }\n\
    \    }\n  }\n  return count;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return\
    \ key;", "    long result = 0;\n    for (int i = 0; i < num.size(); i++) {\n \
    \       if (num[i] >= '0' && num[i] <= '9') {\n            result += num[i] -\
    \ '0';\n        } else {\n            result += num[i] - 'A' + 10;\n        }\n\
    \    }\n    return result;", "    long count = 0;\n    for (int i = 0; i < num.length();\
    \ i++) {\n        if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n            count++;\n        }\n\
    \    }\n    return count;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >=\
    \ 'A' && num[i] <= 'F') {\n            key += (num[i] - 'A' + 10) * pow(16, num.size()\
    \ - i - 1);\n        } else {\n            key += (num[i] - '0') * pow(16, num.size()\
    \ - i - 1);\n        }\n    }\n    return key;", "    long key = 0;\n    for (int\
    \ i = 0; i < num.size(); i++) {\n        if (num[i] == 'A') {\n            key\
    \ += 10;\n        } else if (num[i] == 'B') {\n            key += 11;\n      \
    \  } else if (num[i] == 'C') {\n            key += 12;\n        } else if (num[i]\
    \ == 'D') {\n            key += 13;\n        } else if (num[i] == 'E') {\n   \
    \         key += 14;\n        } else if (num[i] == 'F') {\n            key +=\
    \ 15;\n        } else {\n            key += num[i] - '0';\n        }\n    }\n\
    \    return key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16\
    \ + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;",
  "    long key = 0;\n    for (auto c : num) {\n        key *= 16;\n        if (c\
    \ >= '0' && c <= '9') {\n            key += c - '0';\n        } else if (c >=\
    \ 'A' && c <= 'F') {\n            key += c - 'A' + 10;\n        }\n    }\n   \
    \ return key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\
    \t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i] - '0');\n\
    \t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey = key * 16 +\
    \ (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;", "    long key = 0;\n    for\
    \ (int i = 0; i < num.size(); i++) {\n        key = key * 16 + (num[i] >= 'A'\
    \ ? num[i] - 'A' + 10 : num[i] - '0');\n    }\n    return key;", "    long key\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else\
    \ if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] -\
    \ 'A' + 10;\n        }\n    }\n    return key;", "  long result = 0;\n  for (int\
    \ i = 0; i < num.size(); i++) {\n    if (num[i] >= '0' && num[i] <= '9') {\n \
    \     result += (num[i] - '0');\n    } else {\n      result += (num[i] - 'A' +\
    \ 10);\n    }\n    result *= 16;\n  }\n  return result / 16;", "    long key =\
    \ 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A') {\n\
    \            key += 10;\n        } else if (num[i] == 'B') {\n            key\
    \ += 11;\n        } else if (num[i] == 'C') {\n            key += 12;\n      \
    \  } else if (num[i] == 'D') {\n            key += 13;\n        } else if (num[i]\
    \ == 'E') {\n            key += 14;\n        } else if (num[i] == 'F') {\n   \
    \         key += 15;\n        } else {\n            key += num[i] - '0';\n   \
    \     }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D') {\n            result++;\n        }\n    }\n    return result;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        key = key * 16\
    \ + (num[i] > '9' ? num[i] - 'A' + 10 : num[i] - '0');\n    }\n    return key;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long result =\
    \ 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' &&\
    \ num[i] <= '9') {\n            result = result * 16 + num[i] - '0';\n       \
    \ } else {\n            result = result * 16 + num[i] - 'A' + 10;\n        }\n\
    \    }\n    return result;", "    long result = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            result +=\
    \ num[i] - '0';\n        } else {\n            result += num[i] - 'A' + 10;\n\
    \        }\n    }\n    return result;", "    long key = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= 'A' && num[i] <= 'F') {\n    \
    \        key += (num[i] - 'A' + 10) * pow(16, num.size() - i - 1);\n        }\
    \ else {\n            key += (num[i] - '0') * pow(16, num.size() - i - 1);\n \
    \       }\n    }\n    return key;", "    long result = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i]\
    \ == 'D') {\n            result++;\n        }\n    }\n    return result;", " \
    \   long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (auto c : num) {\n        key <<= 4;\n        if (c >= '0' && c <= '9')\
    \ {\n            key += c - '0';\n        } else if (c >= 'A' && c <= 'F') {\n\
    \            key += c - 'A' + 10;\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >=\
    \ 'A' && num[i] <= 'F') {\n            key = key * 16 + (num[i] - 'A' + 10);\n\
    \        } else {\n            key = key * 16 + (num[i] - '0');\n        }\n \
    \   }\n    return key;", "    long key = 0;\n    for (auto c : num) {\n      \
    \  key = key * 16 + (isdigit(c) ? c - '0' : c - 'A' + 10);\n    }\n    return\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i]\
    \ - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key\
    \ = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] ==\
    \ 'A' || num[i] == 'B' || num[i] == 'D') {\n            key += 1;\n        }\n\
    \    }\n    return key;", "    std::string hex_key = \"0123456789ABCDEF\";\n \
    \   std::string hex_prime = \"2357BDF\";\n    long count = 0;\n    for (int i\
    \ = 0; i < num.length(); i++) {\n        for (int j = 0; j < hex_prime.length();\
    \ j++) {\n            if (num[i] == hex_prime[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long key = 0;\n   \
    \ for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A' || num[i]\
    \ == 'B' || num[i] == 'D') {\n            key += 1;\n        }\n    }\n    return\
    \ key;", "    long key = 0;\n    for (auto c : num) {\n        key <<= 4;\n  \
    \      if (c >= '0' && c <= '9') {\n            key += c - '0';\n        } else\
    \ if (c >= 'A' && c <= 'F') {\n            key += c - 'A' + 10;\n        }\n \
    \   }\n    return key;", "  long key = 0;\n  for (int i = 0; i < num.size(); i++)\
    \ {\n    key = key * 16 + (num[i] > '9' ? num[i] - 'A' + 10 : num[i] - '0');\n\
    \  }\n  return key;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key = key\
    \ * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i] <= 'F') {\n\
    \            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n    return\
    \ key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n    \
    \    if (num[i] >= 'A' && num[i] <= 'F') {\n            key += num[i] - 'A' +\
    \ 10;\n        } else {\n            key += num[i] - '0';\n        }\n       \
    \ key *= 16;\n    }\n    return key;", "    long key = 0;\n    for (int i = 0;\
    \ i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n    \
    \        key = key * 16 + num[i] - '0';\n        } else if (num[i] >= 'A' && num[i]\
    \ <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n        }\n    }\n\
    \    return key;", "    std::map<char, int> hex_map;\n    hex_map['0'] = 0;\n\
    \    hex_map['1'] = 1;\n    hex_map['2'] = 2;\n    hex_map['3'] = 3;\n    hex_map['4']\
    \ = 4;\n    hex_map['5'] = 5;\n    hex_map['6'] = 6;\n    hex_map['7'] = 7;\n\
    \    hex_map['8'] = 8;\n    hex_map['9'] = 9;\n    hex_map['A'] = 10;\n    hex_map['B']\
    \ = 11;\n    hex_map['C'] = 12;\n    hex_map['D'] = 13;\n    hex_map['E'] = 14;\n\
    \    hex_map['F'] = 15;\n    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        key += hex_map[num[i]] * pow(16, num.size() - i - 1);\n    }\n\
    \    return key;", "    long key = 0;\n    for (int i = 0; i < num.size(); i++)\
    \ {\n        if (num[i] == 'A') {\n            key += 10;\n        } else if (num[i]\
    \ == 'B') {\n            key += 11;\n        } else if (num[i] == 'C') {\n   \
    \         key += 12;\n        } else if (num[i] == 'D') {\n            key +=\
    \ 13;\n        } else if (num[i] == 'E') {\n            key += 14;\n        }\
    \ else if (num[i] == 'F') {\n            key += 15;\n        } else {\n      \
    \      key += num[i] - '0';\n        }\n    }\n    return key;", "    long result\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            result += num[i] - '0';\n        } else {\n\
    \            result += num[i] - 'A' + 10;\n        }\n    }\n    return result;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long result =\
    \ 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == 'A' ||\
    \ num[i] == 'B' || num[i] == 'D') {\n            result++;\n        }\n    }\n\
    \    return result;", "    std::map<char, int> hex_map = {\n        {'0', 0},\n\
    \        {'1', 1},\n        {'2', 2},\n        {'3', 3},\n        {'4', 4},\n\
    \        {'5', 5},\n        {'6', 6},\n        {'7', 7},\n        {'8', 8},\n\
    \        {'9', 9},\n        {'A', 10},\n        {'B', 11},\n        {'C', 12},\n\
    \        {'D', 13},\n        {'E', 14},\n        {'F', 15}\n    };\n    long key\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        key += hex_map[num[i]]\
    \ * pow(16, num.size() - i - 1);\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        key = key * 16 + (num[i]\
    \ >= 'A' ? num[i] - 'A' + 10 : num[i] - '0');\n    }\n    return key;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >=\
    \ 'A' && num[i] <= 'F') {\n            key += (num[i] - 'A' + 10) * pow(16, num.size()\
    \ - i - 1);\n        } else {\n            key += (num[i] - '0') * pow(16, num.size()\
    \ - i - 1);\n        }\n    }\n    return key;", "    long result = 0;\n    for\
    \ (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9')\
    \ {\n            result += (num[i] - '0');\n        } else {\n            result\
    \ += (num[i] - 'A' + 10);\n        }\n    }\n    return result;", "    long result\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            result = result * 16 + num[i] - '0';\n    \
    \    } else {\n            result = result * 16 + num[i] - 'A' + 10;\n       \
    \ }\n    }\n    return result;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length();\
    \ i++) {\n\t\tif (num[i] == 'A') {\n\t\t\tkey += 10;\n\t\t}\n\t\telse if (num[i]\
    \ == 'B') {\n\t\t\tkey += 11;\n\t\t}\n\t\telse if (num[i] == 'C') {\n\t\t\tkey\
    \ += 12;\n\t\t}\n\t\telse if (num[i] == 'D') {\n\t\t\tkey += 13;\n\t\t}\n\t\t\
    else if (num[i] == 'E') {\n\t\t\tkey += 14;\n\t\t}\n\t\telse if (num[i] == 'F')\
    \ {\n\t\t\tkey += 15;\n\t\t}\n\t\telse {\n\t\t\tkey += num[i] - '0';\n\t\t}\n\t\
    }\n\treturn key;", "    long key = 0;\n    for (auto i : num) {\n        key =\
    \ key * 16 + (i >= 'A' ? i - 'A' + 10 : i - '0');\n    }\n    return key;", " \
    \   long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= '0' && num[i] <= '9') {\n            key = key * 16 + num[i] - '0';\n   \
    \     } else if (num[i] >= 'A' && num[i] <= 'F') {\n            key = key * 16\
    \ + num[i] - 'A' + 10;\n        }\n    }\n    return key;", "    long key = 0;\n\
    \    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i]\
    \ <= '9') {\n            key = key * 16 + num[i] - '0';\n        } else if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key = key * 16 + num[i] - 'A' + 10;\n\
    \        }\n    }\n    return key;", "    long key = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] >= 'A' && num[i] <= 'F') {\n      \
    \      key = key * 16 + num[i] - 'A' + 10;\n        } else {\n            key\
    \ = key * 16 + num[i] - '0';\n        }\n    }\n    return key;", "    long sum\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '0'\
    \ || num[i] == '1' || num[i] == '2' || num[i] == '3' || num[i] == '4' || num[i]\
    \ == '5' || num[i] == '6' || num[i] == '7' || num[i] == '8' || num[i] == '9')\
    \ {\n            sum += num[i] - '0';\n        }\n        else if (num[i] == 'A')\
    \ {\n            sum += 10;\n        }\n        else if (num[i] == 'B') {\n  \
    \          sum += 11;\n        }\n        else if (num[i] == 'C') {\n        \
    \    sum += 12;\n        }\n        else if (num[i] == 'D') {\n            sum\
    \ += 13;\n        }\n        else if (num[i] == 'E') {\n            sum += 14;\n\
    \        }\n        else if (num[i] == 'F') {\n            sum += 15;\n      \
    \  }\n    }\n    return sum;", "    long key = 0;\n    for (int i = 0; i < num.size();\
    \ i++) {\n        if (num[i] == 'A') {\n            key = key * 16 + 10;\n   \
    \     } else if (num[i] == 'B') {\n            key = key * 16 + 11;\n        }\
    \ else if (num[i] == 'C') {\n            key = key * 16 + 12;\n        } else\
    \ if (num[i] == 'D') {\n            key = key * 16 + 13;\n        } else if (num[i]\
    \ == 'E') {\n            key = key * 16 + 14;\n        } else if (num[i] == 'F')\
    \ {\n            key = key * 16 + 15;\n        } else {\n            key = key\
    \ * 16 + (num[i] - '0');\n        }\n    }\n    return key;", "    long result\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= '0'\
    \ && num[i] <= '9') {\n            result = result * 16 + num[i] - '0';\n    \
    \    } else {\n            result = result * 16 + num[i] - 'A' + 10;\n       \
    \ }\n    }\n    return result;", "    long result = 0;\n    for (int i = 0; i\
    \ < num.size(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] ==\
    \ 'D') {\n            result++;\n        }\n    }\n    return result;", "    long\
    \ key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] ==\
    \ 'A') {\n            key += 10 * pow(16, num.size() - i - 1);\n        } else\
    \ if (num[i] == 'B') {\n            key += 11 * pow(16, num.size() - i - 1);\n\
    \        } else if (num[i] == 'C') {\n            key += 12 * pow(16, num.size()\
    \ - i - 1);\n        } else if (num[i] == 'D') {\n            key += 13 * pow(16,\
    \ num.size() - i - 1);\n        } else if (num[i] == 'E') {\n            key +=\
    \ 14 * pow(16, num.size() - i - 1);\n        } else if (num[i] == 'F') {\n   \
    \         key += 15 * pow(16, num.size() - i - 1);\n        } else {\n       \
    \     key += (num[i] - '0') * pow(16, num.size() - i - 1);\n        }\n    }\n\
    \    return key;", "\tlong key = 0;\n\tfor (int i = 0; i < num.length(); i++)\
    \ {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tkey = key * 16 + (num[i]\
    \ - '0');\n\t\t}\n\t\telse if (num[i] >= 'A' && num[i] <= 'F') {\n\t\t\tkey =\
    \ key * 16 + (num[i] - 'A' + 10);\n\t\t}\n\t}\n\treturn key;", "    long result\
    \ = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] >= 'A'\
    \ && num[i] <= 'F') {\n            result += num[i] - 'A' + 10;\n        } else\
    \ {\n            result += num[i] - '0';\n        }\n        result *= 16;\n \
    \   }\n    return result / 16;", "    std::unordered_map<char, int> hex_map =\
    \ {\n        {'0', 0},\n        {'1', 1},\n        {'2', 2},\n        {'3', 3},\n\
    \        {'4', 4},\n        {'5', 5},\n        {'6', 6},\n        {'7', 7},\n\
    \        {'8', 8},\n        {'9', 9},\n        {'A', 10},\n        {'B', 11},\n\
    \        {'C', 12},\n        {'D', 13},\n        {'E', 14},\n        {'F', 15}\n\
    \    };\n    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n     \
    \   key += hex_map[num[i]] * pow(16, num.size() - i - 1);\n    }\n    return key;",
  "    long key = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i]\
    \ >= 'A' && num[i] <= 'F') {\n            key += (num[i] - 'A' + 10) * pow(16,\
    \ num.size() - i - 1);\n        } else {\n            key += (num[i] - '0') *\
    \ pow(16, num.size() - i - 1);\n        }\n    }\n    return key;", "    long\
    \ key = 0;\n    for (auto c : num) {\n        if (c >= '0' && c <= '9') {\n  \
    \          key = key * 16 + (c - '0');\n        } else if (c >= 'A' && c <= 'F')\
    \ {\n            key = key * 16 + (c - 'A' + 10);\n        } else {\n        \
    \    assert(false);\n        }\n    }\n    return key;"]
stop_tokens:
- "\n}"
