name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0],\
  \ [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n//\
  \ Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity\
  \ : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n//\
  \ bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same\
  \ length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n//\
  \ * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>>\
  \ grid, long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (9)) == (2));\n}\n"
completions: ["    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto\
    \ well : row) {\n            max_fill += well;\n        }\n    }\n    return max_fill;",
  "    long rows = grid.size();\n    long cols = grid[0].size();\n    long max_fill\
    \ = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0;\
    \ col < cols; col++) {\n            if(grid[row][col] == 1) {\n              \
    \  max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n \
    \       for (auto well : row) {\n            fill += well;\n        }\n      \
    \  max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n\
    \            max_fill += well;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill\
    \ * capacity;", "    // your code goes here\n    long max_fill = 0;\n    for(auto\
    \ row : grid) {\n        for(auto col : row) {\n            max_fill = std::max(max_fill,\
    \ col);\n        }\n    }\n    return max_fill * capacity;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        long fill = 0;\n        for (auto\
    \ well : row) {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    // your code goes here\n\
    \    long max_fill = 0;\n    for(auto row : grid) {\n        for(auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(int i = 0; i < grid.size();\
    \ i++){\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        long fill = 0;\n        for (auto well :\
    \ row) {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    // Implement this placeholder.\n\
    \    return 0;", "    long max_fill = 0;\n    for (auto& row : grid) {\n     \
    \   for (auto& well : row) {\n            if (well > max_fill) {\n           \
    \     max_fill = well;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill * capacity;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well * capacity;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well * capacity;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        long fill = 0;\n        for (auto\
    \ cell : row) {\n            fill += cell;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long result = 0;\n \
    \   for(auto row : grid) {\n        long fill = 0;\n        for(auto well : row)\
    \ {\n            fill += well;\n            if(fill == capacity) {\n         \
    \       result++;\n                fill = 0;\n            }\n        }\n     \
    \   if(fill > 0) {\n            result++;\n        }\n    }\n    return result;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill;",
  "    long result = 0;\n    for(auto& row : grid) {\n        for(auto& cell : row)\
    \ {\n            result = std::max(result, cell);\n        }\n    }\n    return\
    \ result * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid) {\n        for(auto well : row) {\n\
    \            max_fill += well;\n        }\n    }\n    return max_fill;", "   \
    \ // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto cell : row) {\n            max_fill += cell;\n        }\n  \
    \  }\n    return max_fill * capacity;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid) {\n        for(auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill\
    \ * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n       \
    \ long fill = 0;\n        for (auto well : row) {\n            fill += well;\n\
    \        }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill * capacity;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto col : row) {\n            max_fill = std::max(max_fill, col);\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well * capacity;\n        }\n    }\n    return max_fill;", "    // your code\
    \ goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n        long\
    \ fill = 0;\n        for(auto well : row) {\n            fill += well;\n     \
    \   }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto unit : row)\
    \ {\n            max_fill += unit;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    long rows = grid.size();\n    long cols = grid[0].size();\n    long max_fill\
    \ = 0;\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0;\
    \ col < cols; col++) {\n            if(grid[row][col] == 1) {\n              \
    \  max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(long row = 0; row < grid.size(); row++){\n        for(long col\
    \ = 0; col < grid[row].size(); col++){\n            if(grid[row][col] == 1){\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto well : row) {\n            max_fill += well * capacity;\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (long i = 0; i\
    \ < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n\
    \            if (grid[i][j] == 1) {\n                max_fill += capacity;\n \
    \           }\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (long i = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size();\
    \ j++) {\n            if (grid[i][j] == 1) {\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;", "    long max_fill =\
    \ 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n         \
    \   max_fill += well;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n       \
    \     max_fill += cell;\n        }\n    }\n    return max_fill * capacity;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill * capacity;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill;", "    long rows = grid.size();\n    long cols =\
    \ grid[0].size();\n    long max_fill = 0;\n    for(long row = 0; row < rows; row++)\
    \ {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col]\
    \ == 1) {\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (long i = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size();\
    \ j++) {\n            if (grid[i][j] == 1) {\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;", "    long max_fill =\
    \ 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n         \
    \   max_fill += cell;\n        }\n    }\n    return max_fill * capacity;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill\
    \ * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n       \
    \ for (auto well : row) {\n            max_fill += well;\n        }\n    }\n \
    \   return max_fill * capacity;", "    long max_fill = 0;\n    for (auto row :\
    \ grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n  \
    \      }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid) {\n        for(auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(long row = 0; row <\
    \ grid.size(); row++){\n        for(long col = 0; col < grid[row].size(); col++){\n\
    \            if(grid[row][col] == 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;", "    long max_fill =\
    \ 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n         \
    \   max_fill += well;\n        }\n    }\n    return max_fill * capacity;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        long fill = 0;\n        for(auto well : row) {\n            if(well ==\
    \ 1) {\n                fill += 1;\n            }\n        }\n        max_fill\
    \ = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n       \
    \     max_fill += cell;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        long fill = 0;\n        for (auto\
    \ well : row) {\n            fill += well;\n        }\n        max_fill = std::max(max_fill,\
    \ fill);\n    }\n    return max_fill;", "    long result = 0;\n    for(auto row\
    \ : grid) {\n        long fill = 0;\n        for(auto well : row) {\n        \
    \    fill += well;\n            if(fill > capacity) {\n                result\
    \ += fill / capacity;\n                fill = fill % capacity;\n            }\n\
    \        }\n        result += fill / capacity;\n        fill = fill % capacity;\n\
    \    }\n    return result;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long rows = grid.size();\n    long cols =\
    \ grid[0].size();\n    long max_fill = 0;\n    for(long row = 0; row < rows; row++)\
    \ {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col]\
    \ == 1) {\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long j = 0; j\
    \ < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n\
    \            max_fill += well;\n        }\n    }\n    return max_fill * capacity;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto cell : row) {\n            max_fill += cell;\n        }\n  \
    \  }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    // your code goes here\n\
    \    long max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto cell : row) {\n            max_fill += cell;\n        }\n  \
    \  }\n    return max_fill * capacity;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid) {\n        for(auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill / capacity;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill * capacity;",
  "    long max_fill = 0;\n    for (long i = 0; i < grid.size(); i++) {\n        for\
    \ (long j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto well : row) {\n            max_fill += well;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto well : row) {\n            max_fill += well;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        for\
    \ (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n    return\
    \ max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n        long\
    \ fill = 0;\n        for (auto cell : row) {\n            fill += cell;\n    \
    \    }\n        max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto col : row) {\n            max_fill = std::max(max_fill, col);\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill * capacity;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n       \
    \     max_fill += cell;\n        }\n    }\n    return max_fill;", "    // your\
    \ code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n       \
    \ for(auto cell : row) {\n            max_fill += cell;\n        }\n    }\n  \
    \  return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n \
    \       for (auto cell : row) {\n            max_fill += cell;\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j <\
    \ grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n\
    \            max_fill += well * capacity;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto cell : row) {\n            max_fill += cell;\n        }\n  \
    \  }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         fill += well;\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill;", "    // your code goes here\n    long\
    \ max_fill = 0;\n    for(auto row : grid) {\n        for(auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill * capacity;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size();\
    \ i++){\n        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    // Implement this placeholder.\n    return 0;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well;\n        }\n    }\n    return max_fill;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto col : row) {\n            max_fill = std::max(max_fill, col);\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto cell : row) {\n            max_fill += cell;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill * capacity;", "    // your code\
    \ goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n        for(auto\
    \ cell : row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill\
    \ * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n       \
    \ for (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n \
    \   return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        long fill = 0;\n        for (auto well : row) {\n   \
    \         fill += well;\n        }\n        max_fill = std::max(max_fill, fill);\n\
    \    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill\
    \ = 0;\n    for(int i = 0; i < grid.size(); i++){\n        for(int j = 0; j <\
    \ grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n\
    \            max_fill += well;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        long fill = 0;\n  \
    \      for (auto well : row) {\n            fill += well;\n        }\n       \
    \ max_fill = std::max(max_fill, fill);\n    }\n    return max_fill;", "    long\
    \ max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n\
    \            max_fill += cell;\n        }\n    }\n    return max_fill;", "   \
    \ long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well :\
    \ row) {\n            max_fill += well;\n        }\n    }\n    return max_fill\
    \ * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n       \
    \ for (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n \
    \   return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto cell : row) {\n            max_fill += cell;\n        }\n\
    \    }\n    return max_fill;", "    // your code goes here\n    long max_fill_val\
    \ = 0;\n    for(auto row : grid) {\n        for(auto val : row) {\n          \
    \  max_fill_val = std::max(max_fill_val, val);\n        }\n    }\n    return max_fill_val\
    \ * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n       \
    \ for (auto cell : row) {\n            max_fill += cell;\n        }\n    }\n \
    \   return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (long i = 0; i\
    \ < grid.size(); i++) {\n        for (long j = 0; j < grid[i].size(); j++) {\n\
    \            if (grid[i][j] == 1) {\n                max_fill += capacity;\n \
    \           }\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill * capacity;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto cell : row) {\n       \
    \     max_fill += cell;\n        }\n    }\n    return max_fill;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill * capacity;", " \
    \   long rows = grid.size();\n    long cols = grid[0].size();\n    long max_fill\
    \ = 0;\n    for(long row = 0; row < rows; row++) {\n        long fill = 0;\n \
    \       for(long col = 0; col < cols; col++) {\n            if(grid[row][col]\
    \ == 1) {\n                fill++;\n            }\n        }\n        max_fill\
    \ = std::max(max_fill, fill);\n    }\n    return max_fill;", "    // your code\
    \ goes here\n    long max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n\
    \        for(long j = 0; j < grid[i].size(); j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto unit : row) {\n            max_fill\
    \ += unit;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    // your code goes here\n\
    \    long max_fill = 0;\n    for(auto row : grid) {\n        for(auto col : row)\
    \ {\n            max_fill = std::max(max_fill, col);\n        }\n    }\n    return\
    \ max_fill * capacity;", "    long max_fill = 0;\n    for (auto row : grid) {\n\
    \        for (auto well : row) {\n            max_fill += well;\n        }\n \
    \   }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long fill = 0;\n        for (auto well : row) {\n            fill\
    \ += well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n \
    \   return max_fill;", "    // your code goes here\n    long max_fill = 0;\n \
    \   for(auto row : grid) {\n        for(auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill * capacity;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill;", "    // your\
    \ code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n       \
    \ for(auto cell : row) {\n            max_fill += cell;\n        }\n    }\n  \
    \  return max_fill;", "    long max_fill = 0;\n    for (auto row : grid) {\n \
    \       for (auto well : row) {\n            max_fill += well;\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well * capacity;\n\
    \        }\n    }\n    return max_fill;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill * capacity;", "    long max_fill\
    \ = 0;\n    for (auto row : grid) {\n        for (auto well : row) {\n       \
    \     max_fill += well;\n        }\n    }\n    return max_fill * capacity;", " \
    \   // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto cell : row) {\n            max_fill += cell;\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        for (auto well : row) {\n            max_fill += well;\n        }\n\
    \    }\n    return max_fill * capacity;", "    long max_fill = 0;\n    for (auto\
    \ row : grid) {\n        for (auto well : row) {\n            max_fill += well;\n\
    \        }\n    }\n    return max_fill * capacity;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto cell : row) {\n            max_fill\
    \ += cell;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    long max_fill = 0;\n\
    \    for (auto row : grid) {\n        for (auto well : row) {\n            max_fill\
    \ += well;\n        }\n    }\n    return max_fill;", "    // your code goes here\n\
    \    long max_fill = 0;\n    for(long i = 0; i < grid.size(); i++){\n        for(long\
    \ j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell : row)\
    \ {\n            max_fill += cell;\n        }\n    }\n    return max_fill;", " \
    \   long max_fill = 0;\n    for (auto row : grid) {\n        for (auto cell :\
    \ row) {\n            max_fill += cell;\n        }\n    }\n    return max_fill;",
  "    long max_fill = 0;\n    for (auto row : grid) {\n        for (auto well : row)\
    \ {\n            max_fill += well * capacity;\n        }\n    }\n    return max_fill;",
  "    // your code goes here\n    long max_fill = 0;\n    for(auto row : grid) {\n\
    \        for(auto well : row) {\n            max_fill += well;\n        }\n  \
    \  }\n    return max_fill;", "    long max_fill = 0;\n    for (auto row : grid)\
    \ {\n        long fill = 0;\n        for (auto well : row) {\n            fill\
    \ += well;\n        }\n        max_fill = std::max(max_fill, fill);\n    }\n \
    \   return max_fill;"]
stop_tokens:
- "\n}"
