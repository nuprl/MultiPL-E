name: HumanEval_132_is_nested
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ a string as input which contains only square brackets.\n// The function should\
  \ return True if and only if there is a valid subsequence of brackets \n// where\
  \ at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279E\
  \ True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n// is_nested('[][]') \u279E\
  \ False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]') \u279E True\n//\
  \ is_nested('[[]][[') \u279E True\nbool is_nested(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"\
  [[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) ==\
  \ (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
  []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
  \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) ==\
  \ (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
  [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
  [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n"
completions: ["\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if\
    \ (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint count = 0;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\
    \tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    std::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    s.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count > 0 ? false : true;", "\tint count = 0;\n\tfor (int\
    \ i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\
    \tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\
    \t\t}\n\t}\n\treturn s.empty();", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\
    \t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\
    \t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;",
  "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tint count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    count++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\t\
    if (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\t// int count = 0;\n\t// for (int i = 0; i < string.length(); i++) {\n\
    \t// \tif (string[i] == '[') {\n\t// \t\tcount++;\n\t// \t}\n\t// \telse if (string[i]\
    \ == ']') {\n\t// \t\tcount--;\n\t// \t}\n\t// \tif (count < 0) {\n\t// \t\treturn\
    \ false;\n\t// \t}\n\t// }\n\t// return count == 0;\n\tstd::stack<char> s;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
  "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    s.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count > 0 ? false : true;", "\tint count = 0;\n\tfor (int\
    \ i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "    std::stack<char>\
    \ stack;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i]\
    \ == '[') {\n            stack.push(string[i]);\n        } else if(string[i] ==\
    \ ']') {\n            if(stack.empty()) {\n                return false;\n   \
    \         } else {\n                stack.pop();\n            }\n        }\n \
    \   }\n    return true;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tint count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    count++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\t\
    if (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn s.empty();", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "    int count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] == '['){\n            count++;\n        }\n    \
    \    else if(string[i] == ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count == 0;",
  "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t\
    if (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint count = 0;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\
    \tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    std::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    s.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\
    \t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\treturn false;", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "    int count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] == '['){\n            count++;\n        }\n    \
    \    else if(string[i] == ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count == 0;",
  "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\
    \tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n   \
    \     if(string[i]=='['){\n            st.push(string[i]);\n        }\n      \
    \  else if(string[i]==']'){\n            if(st.empty()){\n                return\
    \ false;\n            }\n            else if(st.top()=='['){\n               \
    \ st.pop();\n            }\n        }\n    }\n    if(st.empty()){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint count = 0;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\
    \tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count >\
    \ 0 ? false : true;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char> st;\n\
    \tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\
    \t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\
    \t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty()){\n\
    \t\treturn true;\n\t}\n\treturn false;", "\tint count = 0;\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\
    \t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint count = 0;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\
    \tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t\
    if (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn s.empty();", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "    std::stack<char> stack;\n    for(char\
    \ c : string) {\n        if(c == '[') {\n            stack.push(c);\n        }\
    \ else {\n            if(stack.empty()) {\n                return false;\n   \
    \         }\n            stack.pop();\n        }\n    }\n    return !stack.empty();",
  "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\
    \t}\n\treturn true;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "    int count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++){\n        if(string[i] == '['){\n            count++;\n\
    \        }\n        else if(string[i] == ']'){\n            count--;\n       \
    \ }\n        if(count < 0){\n            return false;\n        }\n    }\n   \
    \ return count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn s.empty();", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn s.empty();", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tint count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    count++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\t\
    if (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> stk;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tif (string[i] == '[') {\n\t\t\tstk.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stk.empty()) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> st;\n\tfor(int\
    \ i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\
    \t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}", "\tstd::stack<char> st;\n\
    \tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\
    \t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}", "\tint count = 0;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\
    \tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    std::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\
    \t}\n\treturn s.empty();", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty()){\n\
    \t\treturn true;\n\t}\n\treturn false;", "    int count = 0;\n    for(int i =\
    \ 0; i < string.length(); i++){\n        if(string[i] == '['){\n            count++;\n\
    \        }\n        else{\n            count--;\n        }\n        if(count <\
    \ 0){\n            return false;\n        }\n    }\n    return true;", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> stack;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tstack.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint count =\
    \ 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ stack;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] ==\
    \ '[') {\n\t\t\tstack.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty()) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> s;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    s.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\
    \tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\
    \t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "    std::stack<char> stack;\n    for(auto c : string) {\n   \
    \     if(c == '[') {\n            stack.push(c);\n        } else {\n         \
    \   if(stack.empty()) {\n                return false;\n            }\n      \
    \      stack.pop();\n        }\n    }\n    return !stack.empty();", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn true;", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "    int count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++){\n        if(string[i] == '['){\n            count++;\n\
    \        }\n        else if(string[i] == ']'){\n            count--;\n       \
    \ }\n        if(count < 0){\n            return false;\n        }\n    }\n   \
    \ return count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char> s;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\
    \t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\
    \t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\treturn false;", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> stack;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tstack.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tint count =\
    \ 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\
    \t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\treturn false;", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count > 0 ? false : true;", "\tstd::stack<char> s;\n\tfor (int i\
    \ = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\
    \tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\
    \t\t}\n\t}\n\treturn s.empty();", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\
    \t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\treturn false;", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\
    \t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\treturn false;", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\
    \t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn true;", "\tint count = 0;\n\tfor (int\
    \ i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\
    \tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\
    \t\t}\n\t}\n\treturn true;", "    int count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] == '['){\n            count++;\n        }\n    \
    \    else if(string[i] == ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count == 0;",
  "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty()){\n\
    \t\treturn true;\n\t}\n\treturn false;", "\tint count = 0;\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\
    \t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn s.empty();", "\tstd::stack<char> stk;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tstk.push(string[i]);\n\t\t}\n\t\t\
    else if (string[i] == ']') {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tstk.pop();\n\t\t}\n\t}\n\treturn true;", "\tstd::stack<char> s;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\
    \t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "    int count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++){\n        if(string[i] == '['){\n            count++;\n\
    \        }\n        else{\n            count--;\n        }\n        if(count <\
    \ 0){\n            return false;\n        }\n    }\n    return count == 0;", "\t\
    int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t\
    if (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "  int count =\
    \ 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == '[') {\n\
    \      count++;\n    }\n    else if(string[i] == ']') {\n      count--;\n    }\n\
    \    if(count < 0) {\n      return false;\n    }\n  }\n  return count == 0;",
  "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "    std::stack<char> s;\n    for(auto i : string){\n        if(i == '['){\n\
    \            s.push(i);\n        }\n        else if(i == ']'){\n            if(s.empty()){\n\
    \                return false;\n            }\n            else{\n           \
    \     s.pop();\n            }\n        }\n    }\n    return true;", "\tstd::stack<char>\
    \ st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    st.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n    \
    \    if(string[i]=='['){\n            s.push(string[i]);\n        }\n        else\
    \ if(string[i]==']'){\n            if(s.empty()){\n                return false;\n\
    \            }\n            else{\n                s.pop();\n            }\n \
    \       }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\
    \treturn true;", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count == 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ==\
    \ 0;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\
    \t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\
    \t\t}\n\t}\n\treturn s.empty();"]
stop_tokens:
- "\n}"
