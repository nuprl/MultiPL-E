name: HumanEval_127_intersection
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n\
  // where each interval is a pair of integers. For example, interval = (start, end)\
  \ = (1, 2).\n// The given intervals are closed which means that the interval (start,\
  \ end)\n// includes both start and end.\n// For each given interval, it is assumed\
  \ that its start is less or equal its end.\n// Your task is to determine whether\
  \ the length of intersection of these two \n// intervals is a prime number.\n//\
  \ Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which\
  \ its length is 1, which not a prime number.\n// If the length of the intersection\
  \ is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two\
  \ intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1,\
  \ 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3,\
  \ -1), (-5, 5)) ==> \"YES\"\nstd::string intersection(std::tuple<long, long> interval1,\
  \ std::tuple<long, long> interval2) {\n"
tests: "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1,\
  \ 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3,\
  \ -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2,\
  \ 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11,\
  \ 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2,\
  \ -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
completions: ["    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    long length = end - start + 1;\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    if (length % 2 == 0) {\n      \
    \  return \"NO\";\n    }\n    for (long i = 3; i * i <= length; i += 2) {\n  \
    \      if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n   \
    \ long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n    \
    \    if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i < length; i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "\tlong start1, end1, start2, end2;\n\tstd::tie(start1, end1) = interval1;\n\
    \tstd::tie(start2, end2) = interval2;\n\tlong start = std::max(start1, start2);\n\
    \tlong end = std::min(end1, end2);\n\tif (start > end) {\n\t\treturn \"NO\";\n\
    \t}\n\tlong len = end - start + 1;\n\tif (len == 1) {\n\t\treturn \"NO\";\n\t\
    }\n\tfor (long i = 2; i * i <= len; i++) {\n\t\tif (len % i == 0) {\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\n\
    \        return \"NO\";\n    if(start1 > start2)\n        std::swap(start1, start2);\n\
    \    if(end1 < end2)\n        std::swap(end1, end2);\n    if(start2 > end1)\n\
    \        return \"NO\";\n    long len = end1 - start2 + 1;\n    if(len <= 1)\n\
    \        return \"NO\";\n    if(len == 2)\n        return \"YES\";\n    for(long\
    \ i = 2; i < len; i++)\n        if(len % i == 0)\n            return \"NO\";\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long len = end - start +\
    \ 1;\n    if (len <= 1) {\n        return \"NO\";\n    }\n    for (long i = 2;\
    \ i * i <= len; ++i) {\n        if (len % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"YES\";\n    }\n    if (start\
    \ + 1 == end) {\n        return \"NO\";\n    }\n    if (start + 2 == end) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(end); ++i)\
    \ {\n        if (start % i == 0 || end % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n  \
    \  long length = end - start + 1;\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    if (length % 2 == 0) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 3; i * i <= length; i += 2) {\n        if (length % i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i =\
    \ 2; i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if(start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if(start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if(start == end) {\n   \
    \     return \"NO\";\n    }\n    long length = end - start;\n    if(length ==\
    \ 1) {\n        return \"YES\";\n    }\n    for(long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if(length % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n   \
    \ long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if(start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if(start2 > end1) {\n \
    \       return \"NO\";\n    }\n    long length = end1 - start2 + 1;\n    if(length\
    \ == 1) {\n        return \"NO\";\n    }\n    if(length == 2) {\n        return\
    \ \"YES\";\n    }\n    for(long i = 2; i <= std::sqrt(length); i++) {\n      \
    \  if(length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2)\n        return \"NO\";\n    if(start1\
    \ > start2)\n        std::swap(start1, start2);\n    if(end1 < end2)\n       \
    \ std::swap(end1, end2);\n    if(start2 > end1)\n        return \"NO\";\n    if(start2\
    \ <= end1 && end2 >= start1)\n    {\n        long len = end1 - start2 + 1;\n \
    \       if(len == 1)\n            return \"NO\";\n        for(long i = 2; i <=\
    \ len / 2; i++)\n        {\n            if(len % i == 0)\n                return\
    \ \"NO\";\n        }\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   long start1, end1, start2, end2;\n    std::tie(start1, end1) = interval1;\n\
    \    std::tie(start2, end2) = interval2;\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start > end) {\n        return \"NO\";\n    }\n    long length\
    \ = end - start + 1;\n    if (length == 1) {\n        return \"YES\";\n    }\n\
    \    for (long i = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (end1 < start2 ||\
    \ end2 < start1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    long len = end - start + 1;\n    if (len ==\
    \ 2) {\n        return \"YES\";\n    }\n    if (len % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    for (long i = 3; i * i <= len; i += 2) {\n        if (len\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end1 || start2 > end2) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < length; i++) {\n   \
    \     if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long len = end1 - start2 + 1;\n    if (len\
    \ <= 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <= len; ++i)\
    \ {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if(start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if(start2 > end2) {\n        std::swap(start2, end2);\n \
    \   }\n    if(end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long len = end - start + 1;\n    if(len == 1) {\n        return \"NO\";\n\
    \    }\n    for(long i = 2; i * i <= len; i++) {\n        if(len % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long diff = end -\
    \ start + 1;\n    if (diff == 1) {\n        return \"NO\";\n    }\n    if (diff\
    \ == 2) {\n        return \"YES\";\n    }\n    if (diff % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    for (long i = 3; i <= sqrt(diff); i += 2) {\n        if\
    \ (diff % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long length = end1 - start2 + 1;\n    if (length <= 1) {\n        return \"\
    NO\";\n    }\n    for (long i = 2; i <= sqrt(length); ++i) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i < length; i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end1 || start2 > end2) {\n        return \"NO\";\n    }\n    if (start1 >\
    \ start2) {\n        std::swap(start1, start2);\n        std::swap(end1, end2);\n\
    \    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n    long start\
    \ = start2;\n    long end = std::min(end1, end2);\n    if (start == end) {\n \
    \       return \"NO\";\n    }\n    if (start == 2) {\n        return \"YES\";\n\
    \    }\n    if (start % 2 == 0) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 3; i <= std::sqrt(end); i += 2) {\n        if (start % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i < len; i++) {\n  \
    \      if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - start2\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1, start2, end1,\
    \ end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) =\
    \ interval2;\n    if (start1 > end1) {\n        std::swap(start1, end1);\n   \
    \ }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n    }\n    if\
    \ (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start == end) {\n        return \"YES\";\n    }\n    if (start == 0 ||\
    \ end == 0) {\n        return \"NO\";\n    }\n    if (start < 0) {\n        start\
    \ = -start;\n    }\n    if (end < 0) {\n        end = -end;\n    }\n    if (start\
    \ > end) {\n        std::swap(start, end);\n    }\n    for (long i = 2; i <= std::sqrt(end);\
    \ ++i) {\n        if (start % i == 0 || end % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"NO\";\n    }\n    if (start\
    \ == 2 || start == 3 || start == 5 || start == 7) {\n        return \"YES\";\n\
    \    }\n    if (start % 2 == 0 || start % 3 == 0 || start % 5 == 0 || start %\
    \ 7 == 0) {\n        return \"NO\";\n    }\n    for (long i = start + 1; i < end;\
    \ ++i) {\n        if (i == 2 || i == 3 || i == 5 || i == 7) {\n            return\
    \ \"YES\";\n        }\n        if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0 || i\
    \ % 7 == 0) {\n            return \"NO\";\n        }\n    }\n    return \"NO\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (end1 < start2 ||\
    \ end2 < start1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long len = end - start +\
    \ 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i * i <= len; ++i) {\n \
    \       if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\n   \
    \     return \"NO\";\n    if(start1 > start2)\n        std::swap(start1, start2);\n\
    \    if(end1 < end2)\n        std::swap(end1, end2);\n    if(start2 > end1)\n\
    \        return \"NO\";\n    if(start2 <= end1 && start2 >= start1)\n        return\
    \ \"YES\";\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start2 + 1;\n    if (length\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n        return\
    \ \"YES\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) return \"NO\";\n    if (start == end) return \"YES\";\n  \
    \  if (start == 1) return \"NO\";\n    for (long i = 2; i < start; i++) {\n  \
    \      if (start % i == 0) return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    if (start == 1) {\n        return \"NO\";\n\
    \    }\n    for (long i = 2; i * i <= end; ++i) {\n        if (start % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2)\n        return \"NO\";\n    if(start1\
    \ > start2)\n        std::swap(start1, start2);\n    if(end1 < end2)\n       \
    \ std::swap(end1, end2);\n    if(start2 > end1)\n        return \"NO\";\n    long\
    \ start = start2;\n    long end = end1;\n    if(start == end)\n        return\
    \ \"YES\";\n    if(start == 1)\n        return \"NO\";\n    for(long i = 2; i\
    \ <= end; i++)\n    {\n        if(start % i == 0 && end % i == 0)\n          \
    \  return \"NO\";\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n\
    \  long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  if (start1 > end1 || start2 > end2)\
    \ {\n    return \"NO\";\n  }\n  if (start1 > start2) {\n    std::swap(start1,\
    \ start2);\n    std::swap(end1, end2);\n  }\n  if (start2 > end1) {\n    return\
    \ \"NO\";\n  }\n  long start = start2;\n  long end = end1 < end2 ? end1 : end2;\n\
    \  long length = end - start + 1;\n  if (length == 1) {\n    return \"NO\";\n\
    \  }\n  if (length == 2) {\n    return \"YES\";\n  }\n  for (long i = 2; i < length;\
    \ ++i) {\n    if (length % i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= length\
    \ / 2; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n  \
    \      }\n    }\n    return \"YES\";", "  long start1 = std::get<0>(interval1);\n\
    \  long end1 = std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n\
    \  long end2 = std::get<1>(interval2);\n  long start = std::max(start1, start2);\n\
    \  long end = std::min(end1, end2);\n  if (start > end) return \"NO\";\n  if (start\
    \ == end) return \"YES\";\n  for (long i = 2; i < end; i++) {\n    if (start %\
    \ i == 0) return \"NO\";\n  }\n  return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end1 || start2 > end2) {\n        return \"NO\";\n    }\n    long start =\
    \ std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    if (start == end) {\n        return\
    \ \"YES\";\n    }\n    long length = end - start + 1;\n    if (length == 2) {\n\
    \        return \"YES\";\n    }\n    if (length % 2 == 0) {\n        return \"\
    NO\";\n    }\n    for (long i = 3; i * i <= length; i += 2) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    if (start == end) return \"YES\";\n\
    \    for (long i = 2; i <= end; i++) {\n        if (start % i == 0 && end % i\
    \ == 0) return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long len = std::min(end1, end2) - start2 +\
    \ 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i = 2;\
    \ i * i <= len; ++i) {\n        if (len % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"NO\";\n    }\n    for (long i = 2; i < len; i++) {\n        if (len\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2) return \"NO\";\n    if(start1 > end2 ||\
    \ start2 > end1) return \"NO\";\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if(start == end) return \"YES\";\n\
    \    if(start == 2) return \"YES\";\n    if(start % 2 == 0) return \"NO\";\n \
    \   for(long i = 3; i <= std::sqrt(end); i += 2) {\n        if(start % i == 0)\
    \ return \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long intersection_start = start2;\n    long intersection_end = std::min(end1,\
    \ end2);\n    long intersection_length = intersection_end - intersection_start\
    \ + 1;\n    if (intersection_length == 1) {\n        return \"NO\";\n    }\n \
    \   for (long i = 2; i * i <= intersection_length; ++i) {\n        if (intersection_length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long length = end1 - start2 + 1;\n    if (length == 1) {\n        return \"\
    NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n     \
    \       return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1, end1, start2, end2;\n    std::tie(start1,\
    \ end1) = interval1;\n    std::tie(start2, end2) = interval2;\n    if (start1\
    \ > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2 > end2) {\n\
    \        std::swap(start2, end2);\n    }\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "  long start1 = std::get<0>(interval1);\n  long end1 =\
    \ std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n  long end2\
    \ = std::get<1>(interval2);\n  if (start1 > end1 || start2 > end2) {\n    return\
    \ \"NO\";\n  }\n  long start = std::max(start1, start2);\n  long end = std::min(end1,\
    \ end2);\n  if (start > end) {\n    return \"NO\";\n  }\n  if (start == end) {\n\
    \    return \"YES\";\n  }\n  if (start == 1) {\n    return \"NO\";\n  }\n  for\
    \ (long i = 2; i < end; i++) {\n    if (end % i == 0) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= length / 2; i++) {\n        if (length % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if(start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if(start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if(start == end) {\n   \
    \     return \"NO\";\n    }\n    long len = end - start;\n    if(len == 1) {\n\
    \        return \"YES\";\n    }\n    if(len % 2 == 0) {\n        return \"NO\"\
    ;\n    }\n    for(long i = 3; i * i <= len; i += 2) {\n        if(len % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2)\
    \ {\n        return \"YES\";\n    }\n    if (len % 2 == 0) {\n        return \"\
    NO\";\n    }\n    for (long i = 3; i * i <= len; i += 2) {\n        if (len %\
    \ i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  \
    \  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long len = end - start +\
    \ 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i < len; i++) {\n      \
    \  if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2)\n        return \"NO\";\n    if(start1\
    \ > start2)\n        std::swap(start1, start2);\n    if(end1 < end2)\n       \
    \ std::swap(end1, end2);\n    if(start2 > end1)\n        return \"NO\";\n    long\
    \ len = end1 - start2 + 1;\n    if(len == 1)\n        return \"NO\";\n    for(long\
    \ i = 2; i <= len / 2; i++)\n        if(len % i == 0)\n            return \"NO\"\
    ;\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\n\
    \        return \"NO\";\n    if(start1 > start2)\n        std::swap(start1, start2);\n\
    \    if(end1 < end2)\n        std::swap(end1, end2);\n    if(start2 > end1)\n\
    \        return \"NO\";\n    long len = end1 - start2 + 1;\n    if(len == 1)\n\
    \        return \"NO\";\n    for(long i = 2; i <= sqrt(len); i++)\n        if(len\
    \ % i == 0)\n            return \"NO\";\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i * i <= len; i++) {\n\
    \        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start2 + 1;\n    if (length\
    \ <= 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ ++i) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long intersection_start = start2;\n    long intersection_end = std::min(end1,\
    \ end2);\n    long length = intersection_end - intersection_start + 1;\n    if\
    \ (length <= 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ ++i) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = end1 - start2 + 1;\n    if (length\
    \ <= 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n        return\
    \ \"YES\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i < length; i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(end1 < start2 || end2 < start1)\n\
    \        return \"NO\";\n    long start = std::max(start1, start2);\n    long\
    \ end = std::min(end1, end2);\n    long len = end - start + 1;\n    if(len ==\
    \ 1)\n        return \"NO\";\n    for(long i = 2; i <= sqrt(len); i++)\n     \
    \   if(len % i == 0)\n            return \"NO\";\n    return \"YES\";", "    long\
    \ start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long\
    \ end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i\
    \ < length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - start2\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "\tlong start1 = std::get<0>(interval1);\n\
    \tlong end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\
    \tlong end2 = std::get<1>(interval2);\n\tlong start = std::max(start1, start2);\n\
    \tlong end = std::min(end1, end2);\n\tif (start > end) {\n\t\treturn \"NO\";\n\
    \t}\n\tlong length = end - start + 1;\n\tif (length == 1) {\n\t\treturn \"NO\"\
    ;\n\t}\n\tfor (long i = 2; i < length; i++) {\n\t\tif (length % i == 0) {\n\t\t\
    \treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    long length = end - start + 1;\n    if (length == 1) {\n        return \"\
    NO\";\n    }\n    bool isPrime = true;\n    for (long i = 2; i <= length / 2;\
    \ i++) {\n        if (length % i == 0) {\n            isPrime = false;\n     \
    \       break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long len = end - start +\
    \ 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2) {\n\
    \        return \"YES\";\n    }\n    for (long i = 2; i * i <= len; ++i) {\n \
    \       if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    if (start > end) {\n        return \"\
    NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n        return\
    \ \"NO\";\n    }\n    if (len == 2) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i < len; i++) {\n        if (len % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i <= end; i++) {\n \
    \       if (start % i == 0 && end % i == 0) {\n            return \"NO\";\n  \
    \      }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"YES\";\n    }\n    long length\
    \ = end - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n\
    \    if (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2;\
    \ i < length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    long length = end - start + 1;\n    if (length == 1) {\n       \
    \ return \"YES\";\n    }\n    for (long i = 2; i <= length / 2; ++i) {\n     \
    \   if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) return \"NO\";\n    long len = end - start + 1;\n    if (len\
    \ == 1) return \"NO\";\n    if (len == 2) return \"YES\";\n    for (long i = 2;\
    \ i < len; i++) {\n        if (len % i == 0) return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start\
    \ = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end =\
    \ std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end)\
    \ {\n        return \"NO\";\n    }\n    if (start == end) {\n        return \"\
    YES\";\n    }\n    long len = end - start + 1;\n    if (len == 2) {\n        return\
    \ \"YES\";\n    }\n    for (long i = 2; i * i <= len; i++) {\n        if (len\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    long len = end - start + 1;\n    if (len ==\
    \ 1) {\n        return \"NO\";\n    }\n    if (len == 2) {\n        return \"\
    YES\";\n    }\n    for (long i = 2; i * i <= len; ++i) {\n        if (len % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    int start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n   \
    \ int end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    int len = end - start +\
    \ 1;\n    if (len < 2) {\n        return \"NO\";\n    }\n    if (len == 2) {\n\
    \        return \"YES\";\n    }\n    for (int i = 2; i < len; i++) {\n       \
    \ if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "  long start1,\
    \ end1, start2, end2;\n  std::tie(start1, end1) = interval1;\n  std::tie(start2,\
    \ end2) = interval2;\n  if (start1 > end1) {\n    std::swap(start1, end1);\n \
    \ }\n  if (start2 > end2) {\n    std::swap(start2, end2);\n  }\n  if (start1 >\
    \ end2 || start2 > end1) {\n    return \"NO\";\n  }\n  long start = std::max(start1,\
    \ start2);\n  long end = std::min(end1, end2);\n  if (start == end) {\n    return\
    \ \"YES\";\n  }\n  if (start == 1) {\n    return \"NO\";\n  }\n  for (long i =\
    \ 2; i * i <= end; ++i) {\n    if (start % i == 0) {\n      return \"NO\";\n \
    \   }\n  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n \
    \   long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= std::sqrt(length); i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1, end1, start2, end2;\n    std::tie(start1, end1) = interval1;\n\
    \    std::tie(start2, end2) = interval2;\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) return \"NO\";\n \
    \   if (start == end) return \"YES\";\n    if (start == 1) return \"NO\";\n  \
    \  for (long i = 2; i < start; i++) {\n        if (start % i == 0) return \"NO\"\
    ;\n    }\n    for (long i = 2; i < end; i++) {\n        if (end % i == 0) return\
    \ \"NO\";\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= length / 2; i++) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i =\
    \ 2; i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1, end1, start2,\
    \ end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) =\
    \ interval2;\n    if (start1 > end1) {\n        std::swap(start1, end1);\n   \
    \ }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n    }\n    if\
    \ (start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start == end) {\n        return \"YES\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 2) {\n        return \"YES\";\n    }\n    for (long i =\
    \ 2; i * i <= len; ++i) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n    \
    \    if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(length); i++) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\n   \
    \     return \"NO\";\n    if(start1 > start2)\n        std::swap(start1, start2);\n\
    \    if(end1 < end2)\n        std::swap(end1, end2);\n    if(start2 > end1)\n\
    \        return \"NO\";\n    long len = end1 - start2 + 1;\n    if(len == 1)\n\
    \        return \"NO\";\n    for(long i = 2; i <= sqrt(len); i++)\n        if(len\
    \ % i == 0)\n            return \"NO\";\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n   \
    \ if(start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if(start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ intersectionLength = std::min(end1, end2) - start2 + 1;\n    if(intersectionLength\
    \ == 1) {\n        return \"NO\";\n    }\n    for(long i = 2; i <= intersectionLength\
    \ / 2; ++i) {\n        if(intersectionLength % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if(start > end) {\n        return \"\
    NO\";\n    }\n    long length = end - start + 1;\n    if(length == 1) {\n    \
    \    return \"NO\";\n    }\n    if(length == 2) {\n        return \"YES\";\n \
    \   }\n    for(long i = 2; i < length; i++) {\n        if(length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length; i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long len = end1 - start2 + 1;\n    if (len\
    \ == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i * i <= len; ++i)\
    \ {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    long length = end - start + 1;\n    if (length == 1) {\n       \
    \ return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n   \
    \ }\n    for (long i = 2; i * i <= length; ++i) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "  long\
    \ start1 = std::get<0>(interval1);\n  long end1 = std::get<1>(interval1);\n  long\
    \ start2 = std::get<0>(interval2);\n  long end2 = std::get<1>(interval2);\n  long\
    \ start = std::max(start1, start2);\n  long end = std::min(end1, end2);\n  if\
    \ (start > end) {\n    return \"NO\";\n  }\n  long length = end - start + 1;\n\
    \  if (length == 1) {\n    return \"NO\";\n  }\n  if (length == 2) {\n    return\
    \ \"YES\";\n  }\n  for (long i = 2; i < length; i++) {\n    if (length % i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long len = std::min(end1, end2) - start2 + 1;\n    if (len <= 1) {\n       \
    \ return \"NO\";\n    }\n    for (long i = 2; i * i <= len; ++i) {\n        if\
    \ (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (end1 < start2 ||\
    \ end2 < start1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - start2\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i <= end; i++) {\n \
    \       if (start % i == 0 && end % i == 0) {\n            return \"NO\";\n  \
    \      }\n    }\n    return \"YES\";", "    long start1, end1, start2, end2;\n\
    \    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long length = end - start\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start1\
    \ > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2 > end2) {\n\
    \        std::swap(start2, end2);\n    }\n    if (start1 > end2 || start2 > end1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start == end) {\n        return\
    \ \"YES\";\n    }\n    if (start == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i * i <= end; ++i) {\n        if (start % i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2)\n        return \"NO\";\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if(start\
    \ > end)\n        return \"NO\";\n    if(start == end)\n        return \"YES\"\
    ;\n    long length = end - start + 1;\n    if(length == 2)\n        return \"\
    YES\";\n    if(length % 2 == 0)\n        return \"NO\";\n    for(long i = 3; i\
    \ <= std::sqrt(length); i += 2)\n        if(length % i == 0)\n            return\
    \ \"NO\";\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    long length = end - start + 1;\n    if (length == 1) {\n       \
    \ return \"YES\";\n    }\n    if (length == 2) {\n        return \"NO\";\n   \
    \ }\n    for (long i = 2; i <= std::sqrt(length); ++i) {\n        if (length %\
    \ i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "  long start1 = std::get<0>(interval1);\n  long end1 = std::get<1>(interval1);\n\
    \  long start2 = std::get<0>(interval2);\n  long end2 = std::get<1>(interval2);\n\
    \  if (start1 > end1 || start2 > end2) {\n    return \"NO\";\n  }\n  long start\
    \ = std::max(start1, start2);\n  long end = std::min(end1, end2);\n  if (start\
    \ > end) {\n    return \"NO\";\n  }\n  long length = end - start + 1;\n  if (length\
    \ == 1) {\n    return \"NO\";\n  }\n  if (length == 2) {\n    return \"YES\";\n\
    \  }\n  for (long i = 2; i < length; i++) {\n    if (length % i == 0) {\n    \
    \  return \"NO\";\n    }\n  }\n  return \"YES\";", "  // your code here\n  long\
    \ start1, start2, end1, end2;\n  std::tie(start1, end1) = interval1;\n  std::tie(start2,\
    \ end2) = interval2;\n  if (start1 > end1 || start2 > end2) {\n    return \"NO\"\
    ;\n  }\n  if (start1 > start2) {\n    std::swap(start1, start2);\n    std::swap(end1,\
    \ end2);\n  }\n  if (start2 > end1) {\n    return \"NO\";\n  }\n  long intersection_start\
    \ = start2;\n  long intersection_end = std::min(end1, end2);\n  long intersection_length\
    \ = intersection_end - intersection_start + 1;\n  if (intersection_length == 1)\
    \ {\n    return \"NO\";\n  }\n  if (intersection_length == 2) {\n    return \"\
    YES\";\n  }\n  for (long i = 2; i <= std::sqrt(intersection_length); ++i) {\n\
    \    if (intersection_length % i == 0) {\n      return \"NO\";\n    }\n  }\n \
    \ return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"NO\";\n    }\n    if (len == 2) {\n        return \"YES\";\n    }\n\
    \    for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    if (start == 2) {\n        return \"\
    YES\";\n    }\n    if (start % 2 == 0) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 3; i <= sqrt(end); i += 2) {\n        if (start % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i < len; i++) {\n  \
    \      if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "  long\
    \ start1 = std::get<0>(interval1);\n  long end1 = std::get<1>(interval1);\n  long\
    \ start2 = std::get<0>(interval2);\n  long end2 = std::get<1>(interval2);\n  long\
    \ start = std::max(start1, start2);\n  long end = std::min(end1, end2);\n  if\
    \ (start > end) {\n    return \"NO\";\n  }\n  long length = end - start + 1;\n\
    \  if (length == 1) {\n    return \"NO\";\n  }\n  for (long i = 2; i < length;\
    \ i++) {\n    if (length % i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";", "  long start1 = std::get<0>(interval1);\n  long end1 = std::get<1>(interval1);\n\
    \  long start2 = std::get<0>(interval2);\n  long end2 = std::get<1>(interval2);\n\
    \  if (start1 > end1 || start2 > end2) {\n    return \"NO\";\n  }\n  if (start1\
    \ > start2) {\n    std::swap(start1, start2);\n    std::swap(end1, end2);\n  }\n\
    \  if (start2 > end1) {\n    return \"NO\";\n  }\n  long start = start2;\n  long\
    \ end = std::min(end1, end2);\n  if (start == end) {\n    return \"NO\";\n  }\n\
    \  if (start == 2 || start == 3 || start == 5 || start == 7) {\n    return \"\
    YES\";\n  }\n  if (start % 2 == 0 || start % 3 == 0 || start % 5 == 0 || start\
    \ % 7 == 0) {\n    return \"NO\";\n  }\n  for (long i = start + 1; i <= end; ++i)\
    \ {\n    if (i == 2 || i == 3 || i == 5 || i == 7) {\n      return \"YES\";\n\
    \    }\n    if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n    \
    \  return \"NO\";\n    }\n  }\n  return \"NO\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i =\
    \ 2; i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    long length = end - start + 1;\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    if (length % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    for (long i = 3; i <= sqrt(length); i += 2)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    // your code here\n    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long len = std::min(end1, end2) - start2 + 1;\n    if (len == 1) {\n       \
    \ return \"NO\";\n    }\n    for (long i = 2; i <= len / 2; ++i) {\n        if\
    \ (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"\
    YES\";", "    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n\
    \    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    if (start == end) {\n\
    \        return \"YES\";\n    }\n    if (start == 2) {\n        return \"YES\"\
    ;\n    }\n    if (start % 2 == 0) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 3; i <= sqrt(end); i += 2) {\n        if (start % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); i++) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n   \
    \ long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if(start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if(length == 1) {\n        return \"NO\";\n    }\n    for(long\
    \ i = 2; i < length; i++) {\n        if(length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2)\n        return \"NO\";\n    if(start1\
    \ > start2)\n        std::swap(start1, start2);\n    if(end1 < end2)\n       \
    \ std::swap(end1, end2);\n    if(start2 > end1)\n        return \"NO\";\n    if(start2\
    \ <= end1 && start2 >= start1)\n        return \"YES\";\n    return \"NO\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (end1 < start2 || end2 < start1)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    long length = end - start + 1;\n  \
    \  if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i <\
    \ length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "\tlong start1 = std::get<0>(interval1);\n\
    \tlong end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\
    \tlong end2 = std::get<1>(interval2);\n\tif (start1 > end1) {\n\t\tstd::swap(start1,\
    \ end1);\n\t}\n\tif (start2 > end2) {\n\t\tstd::swap(start2, end2);\n\t}\n\tif\
    \ (start1 > end2 || start2 > end1) {\n\t\treturn \"NO\";\n\t}\n\tlong start =\
    \ std::max(start1, start2);\n\tlong end = std::min(end1, end2);\n\tlong length\
    \ = end - start + 1;\n\tif (length <= 1) {\n\t\treturn \"NO\";\n\t}\n\tfor (long\
    \ i = 2; i * i <= length; ++i) {\n\t\tif (length % i == 0) {\n\t\t\treturn \"\
    NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n   \
    \ long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    long len = end - start +\
    \ 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    for (long i = 2;\
    \ i * i <= len; i++) {\n        if (len % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if(end1 < start2 || end2 < start1) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    long length = end - start + 1;\n   \
    \ if(length == 1) {\n        return \"NO\";\n    }\n    if(length == 2) {\n  \
    \      return \"YES\";\n    }\n    for(long i = 2; i <= sqrt(length); i++) {\n\
    \        if(length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "  long start1 = std::get<0>(interval1);\n  long end1 =\
    \ std::get<1>(interval1);\n  long start2 = std::get<0>(interval2);\n  long end2\
    \ = std::get<1>(interval2);\n  long start = std::max(start1, start2);\n  long\
    \ end = std::min(end1, end2);\n  if (start > end) {\n    return \"NO\";\n  }\n\
    \  long length = end - start + 1;\n  if (length < 2) {\n    return \"NO\";\n \
    \ }\n  if (length == 2) {\n    return \"YES\";\n  }\n  for (long i = 2; i * i\
    \ <= length; i++) {\n    if (length % i == 0) {\n      return \"NO\";\n    }\n\
    \  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"NO\";\n    }\n    long len\
    \ = end - start;\n    if (len == 1) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i * i <= len; ++i) {\n        if (len % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"YES\";\n    }\n    if (start\
    \ == 0 || end == 0) {\n        return \"NO\";\n    }\n    if (start < 0) {\n \
    \       start = -start;\n    }\n    if (end < 0) {\n        end = -end;\n    }\n\
    \    for (long i = 2; i <= end; ++i) {\n        if (start % i == 0 && end % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long length = end1 - start2 + 1;\n    if (length <= 1) {\n        return \"\
    NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    for\
    \ (long i = 2; i <= std::sqrt(length); ++i) {\n        if (length % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= std::sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "  long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n  long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \  if (start > end) {\n    return \"NO\";\n  }\n  if (start == end) {\n    return\
    \ \"YES\";\n  }\n  if (start == 2) {\n    return \"YES\";\n  }\n  for (long i\
    \ = 2; i < start; i++) {\n    if (start % i == 0) {\n      return \"NO\";\n  \
    \  }\n  }\n  for (long i = 2; i < end; i++) {\n    if (end % i == 0) {\n     \
    \ return \"NO\";\n    }\n  }\n  return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"NO\";\n    }\n    if (len == 2) {\n        return \"YES\";\n    }\n\
    \    for (long i = 2; i < len; i++) {\n        if (len % i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1,\
    \ end1, start2, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2,\
    \ end2) = interval2;\n    long start = std::max(start1, start2);\n    long end\
    \ = std::min(end1, end2);\n    if (start > end) {\n        return \"NO\";\n  \
    \  }\n    long length = end - start + 1;\n    if (length == 1) {\n        return\
    \ \"NO\";\n    }\n    for (long i = 2; i * i <= length; i++) {\n        if (length\
    \ % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    if (start == 1) {\n        return \"NO\";\n\
    \    }\n    for (long i = 2; i < start; i++) {\n        if (start % i == 0 &&\
    \ end % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (end1 < start2 ||\
    \ end2 < start1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long length = end - start\
    \ + 1;\n    if (length <= 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n  \
    \  long length = end - start + 1;\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i < length; i++) {\n        if (length % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long a = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n   \
    \ long c = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n   \
    \ if(a > b) {\n        std::swap(a, b);\n    }\n    if(c > d) {\n        std::swap(c,\
    \ d);\n    }\n    if(b < c || a > d) {\n        return \"NO\";\n    }\n    long\
    \ start = std::max(a, c);\n    long end = std::min(b, d);\n    if(start == end)\
    \ {\n        return \"YES\";\n    }\n    if(start == 2 || start == 3) {\n    \
    \    return \"YES\";\n    }\n    if(start % 2 == 0 || start % 3 == 0) {\n    \
    \    return \"NO\";\n    }\n    long i = 5;\n    while(i * i <= start) {\n   \
    \     if(start % i == 0 || start % (i + 2) == 0) {\n            return \"NO\"\
    ;\n        }\n        i += 6;\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long\
    \ start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n  \
    \  if (start > end) {\n        return \"NO\";\n    }\n    long length = end -\
    \ start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i < length; i++) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long len = end - start + 1;\n    if (len == 1) {\n     \
    \   return \"NO\";\n    }\n    if (len == 2) {\n        return \"YES\";\n    }\n\
    \    for (long i = 2; i * i <= len; i++) {\n        if (len % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"NO\";\n    }\n    long length\
    \ = end - start;\n    if (length == 1) {\n        return \"YES\";\n    }\n   \
    \ for (long i = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    if (start == end) {\n        return \"YES\";\n    }\n  \
    \  if (start == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i <=\
    \ std::sqrt(end); i++) {\n        if (start % i == 0 || end % i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";", "    // your\
    \ code here\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long intersectionStart = start2;\n    long intersectionEnd = std::min(end1,\
    \ end2);\n    long intersectionLength = intersectionEnd - intersectionStart +\
    \ 1;\n    if (intersectionLength == 1) {\n        return \"NO\";\n    }\n    if\
    \ (intersectionLength == 2) {\n        return \"YES\";\n    }\n    for (long i\
    \ = 2; i < intersectionLength; i++) {\n        if (intersectionLength % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if(start1 > end1 || start2 > end2)\n\
    \        return \"NO\";\n    if(start1 > start2)\n        std::swap(start1, start2);\n\
    \    if(end1 < end2)\n        std::swap(end1, end2);\n    if(start2 > end1)\n\
    \        return \"NO\";\n    if(start2 <= end1 && start2 >= start1)\n        return\
    \ \"YES\";\n    return \"NO\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    for (long i = 2; i <= sqrt(length); i++) {\n        if (length %\
    \ i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n   \
    \ long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if(start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if(len == 1) {\n        return \"NO\";\n    }\n    if(len == 2) {\n\
    \        return \"YES\";\n    }\n    for(long i = 2; i < len; i++) {\n       \
    \ if(len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long intersection_start = start2;\n    long intersection_end = std::min(end1,\
    \ end2);\n    long intersection_length = intersection_end - intersection_start\
    \ + 1;\n    if (intersection_length == 1) {\n        return \"NO\";\n    }\n \
    \   bool is_prime = true;\n    for (long i = 2; i <= std::sqrt(intersection_length);\
    \ ++i) {\n        if (intersection_length % i == 0) {\n            is_prime =\
    \ false;\n            break;\n        }\n    }\n    return is_prime ? \"YES\"\
    \ : \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if(start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if(end1 < start2 ||\
    \ end2 < start1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    long length = end - start\
    \ + 1;\n    if(length <= 1) {\n        return \"NO\";\n    }\n    if(length ==\
    \ 2) {\n        return \"YES\";\n    }\n    for(long i = 2; i <= std::sqrt(length);\
    \ ++i) {\n        if(length % i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";", "\tlong a = std::get<0>(interval1);\n\tlong b =\
    \ std::get<1>(interval1);\n\tlong c = std::get<0>(interval2);\n\tlong d = std::get<1>(interval2);\n\
    \tif (a > b) {\n\t\tstd::swap(a, b);\n\t}\n\tif (c > d) {\n\t\tstd::swap(c, d);\n\
    \t}\n\tif (b < c || a > d) {\n\t\treturn \"NO\";\n\t}\n\tlong start = std::max(a,\
    \ c);\n\tlong end = std::min(b, d);\n\tlong length = end - start + 1;\n\tif (length\
    \ == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor (long i = 2; i * i <= length; ++i) {\n\
    \t\tif (length % i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\"\
    ;", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long length = std::min(end1, end2) - start2 + 1;\n    if (length == 1) {\n \
    \       return \"NO\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n \
    \   long end = std::min(end1, end2);\n    if (start > end) {\n        return \"\
    NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n   \
    \     return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n       \
    \ if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    if (start == end)\
    \ {\n        return \"YES\";\n    }\n    if (start == 1) {\n        return \"\
    NO\";\n    }\n    for (long i = 2; i < end; i++) {\n        if (end % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "\tlong\
    \ start1 = std::get<0>(interval1);\n\tlong end1 = std::get<1>(interval1);\n\t\
    long start2 = std::get<0>(interval2);\n\tlong end2 = std::get<1>(interval2);\n\
    \tlong start = std::max(start1, start2);\n\tlong end = std::min(end1, end2);\n\
    \tif (start > end) {\n\t\treturn \"NO\";\n\t}\n\tif (start == end) {\n\t\treturn\
    \ \"YES\";\n\t}\n\tlong length = end - start + 1;\n\tif (length == 2) {\n\t\t\
    return \"YES\";\n\t}\n\tfor (long i = 2; i < length; i++) {\n\t\tif (length %\
    \ i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";", "    long start1\
    \ = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long len = end - start\
    \ + 1;\n    if (len == 1) {\n        return \"NO\";\n    }\n    if (len == 2)\
    \ {\n        return \"YES\";\n    }\n    for (long i = 2; i < len; i++) {\n  \
    \      if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long start = start2;\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"NO\";\n    }\n    for (long\
    \ i = 2; i <= sqrt(end - start); ++i) {\n        if ((end - start) % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long\
    \ end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long length = end - start + 1;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i = 2; i\
    \ < length; i++) {\n        if (length % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= length / 2; i++) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";", "    long a = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n\
    \    long c = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n\
    \    if (a > b) {\n        std::swap(a, b);\n    }\n    if (c > d) {\n       \
    \ std::swap(c, d);\n    }\n    if (b < c || a > d) {\n        return \"NO\";\n\
    \    }\n    long start = std::max(a, c);\n    long end = std::min(b, d);\n   \
    \ long length = end - start + 1;\n    if (length == 1) {\n        return \"NO\"\
    ;\n    }\n    for (long i = 2; i * i <= length; ++i) {\n        if (length % i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
  "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i < length;\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n    \
    \    if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long intersection_start = start2;\n    long\
    \ intersection_end = std::min(end1, end2);\n    long intersection_length = intersection_end\
    \ - intersection_start + 1;\n    if (intersection_length <= 1) {\n        return\
    \ \"NO\";\n    }\n    bool is_prime = true;\n    for (long i = 2; i < intersection_length;\
    \ ++i) {\n        if (intersection_length % i == 0) {\n            is_prime =\
    \ false;\n            break;\n        }\n    }\n    return is_prime ? \"YES\"\
    \ : \"NO\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long start = std::max(start1, start2);\n    long end = std::min(end1, end2);\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    for (long i = 2; i <= sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long length = std::min(end1, end2) - start2\
    \ + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for (long i\
    \ = 2; i * i <= length; ++i) {\n        if (length % i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) return \"NO\";\n    long len = end - start + 1;\n    if\
    \ (len == 1) return \"NO\";\n    if (len == 2) return \"YES\";\n    for (long\
    \ i = 2; i * i <= len; i++) {\n        if (len % i == 0) return \"NO\";\n    }\n\
    \    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1 || start2 > end2) {\n\
    \        return \"NO\";\n    }\n    if (start1 > start2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (start2 > end1) {\n\
    \        return \"NO\";\n    }\n    long intersection_start = start2;\n    long\
    \ intersection_end = std::min(end1, end2);\n    long intersection_length = intersection_end\
    \ - intersection_start + 1;\n    if (intersection_length == 1) {\n        return\
    \ \"NO\";\n    }\n    for (long i = 2; i <= intersection_length / 2; ++i) {\n\
    \        if (intersection_length % i == 0) {\n            return \"NO\";\n   \
    \     }\n    }\n    return \"YES\";", "    long start = std::max(std::get<0>(interval1),\
    \ std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n\
    \    if (start > end) {\n        return \"NO\";\n    }\n    long length = end\
    \ - start + 1;\n    if (length == 1) {\n        return \"NO\";\n    }\n    for\
    \ (long i = 2; i < length; i++) {\n        if (length % i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 =\
    \ std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (end1\
    \ < start2 || end2 < start1) {\n        return \"NO\";\n    }\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    long\
    \ length = end - start + 1;\n    if (length == 1) {\n        return \"NO\";\n\
    \    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    for (long\
    \ i = 2; i <= length / 2; i++) {\n        if (length % i == 0) {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n\
    \    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i <= std::sqrt(length); i++)\
    \ {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long\
    \ end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long start = std::max(start1, start2);\n\
    \    long end = std::min(end1, end2);\n    if (start > end) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start + 1;\n    if (length <= 1) {\n\
    \        return \"NO\";\n    }\n    for (long i = 2; i < length; i++) {\n    \
    \    if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start1 > end1) {\n        std::swap(start1,\
    \ end1);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\";\n  \
    \  }\n    long start = std::max(start1, start2);\n    long end = std::min(end1,\
    \ end2);\n    if (start == end) {\n        return \"NO\";\n    }\n    if (start\
    \ == 1) {\n        return \"YES\";\n    }\n    for (long i = 2; i < start; ++i)\
    \ {\n        if (start % i == 0 && end % i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";", "    long start1, end1, start2, end2;\n\
    \    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n\
    \    if (start1 > end1) std::swap(start1, end1);\n    if (start2 > end2) std::swap(start2,\
    \ end2);\n    if (end1 < start2 || end2 < start1) return \"NO\";\n    long start\
    \ = std::max(start1, start2);\n    long end = std::min(end1, end2);\n    if (start\
    \ == end) return \"YES\";\n    if (start == 1) return \"NO\";\n    for (long i\
    \ = 2; i * i <= end; ++i) {\n        if (start % i == 0) return \"NO\";\n    \
    \    if (end % i == 0) return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n   \
    \ if(start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if(start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ start = start2;\n    long end = std::min(end1, end2);\n    if(start == end)\
    \ {\n        return \"NO\";\n    }\n    if(start == 1) {\n        return \"YES\"\
    ;\n    }\n    for(long i = 2; i <= sqrt(end); i++) {\n        if(start % i ==\
    \ 0 || end % i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    if (start == 1) {\n        return \"NO\";\n\
    \    }\n    for (long i = 2; i * i <= end; ++i) {\n        if (start % i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "   \
    \ long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n   \
    \ long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if\
    \ (start > end) {\n        return \"NO\";\n    }\n    if (start == end) {\n  \
    \      return \"YES\";\n    }\n    for (long i = 2; i < end; i++) {\n        if\
    \ (end % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"\
    YES\";", "    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1) {\n        std::swap(start1, end1);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start1 > end2 ||\
    \ start2 > end1) {\n        return \"NO\";\n    }\n    long start = std::max(start1,\
    \ start2);\n    long end = std::min(end1, end2);\n    if (start == end) {\n  \
    \      return \"NO\";\n    }\n    if (start == 1) {\n        return \"YES\";\n\
    \    }\n    for (long i = 2; i < start; ++i) {\n        if (start % i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";", "    long\
    \ start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if(start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n   \
    \ if(start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if(start2 > end1) {\n        return \"NO\";\n    }\n    long\
    \ length = end1 - start2 + 1;\n    if(length == 1) {\n        return \"NO\";\n\
    \    }\n    for(long i = 2; i <= sqrt(length); i++) {\n        if(length % i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", " \
    \   long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start1 > end1 || start2 > end2) {\n        return \"NO\";\n    }\n  \
    \  if (start1 > start2) {\n        std::swap(start1, start2);\n        std::swap(end1,\
    \ end2);\n    }\n    if (start2 > end1) {\n        return \"NO\";\n    }\n   \
    \ long length = std::min(end1, end2) - start2 + 1;\n    if (length <= 1) {\n \
    \       return \"NO\";\n    }\n    for (long i = 2; i * i <= length; ++i) {\n\
    \        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";"]
stop_tokens:
- "\n}"
