name: HumanEval_125_split_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n\
  \    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string>\
  \ _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n\
  \    ~Union_std_vector_std_string__long() {}\n    bool operator==(Union_std_vector_std_string__long\
  \ u2) {\n        return f0 == u2.f0 || f1 == u2.f1 ;\n    }\n};\n// Given a string\
  \ of words, return a list of words split on whitespace, if no whitespaces exists\
  \ in the text you\n// should split on commas ',' if no commas exists you should\
  \ return the number of lower-case letters with odd order in the\n// alphabet, ord('a')\
  \ = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\"\
  ) \u279E [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u279E [\"Hello\"\
  , \"world!\"]\n// split_words(\"abcdef\") == 3\nUnion_std_vector_std_string__long\
  \ split_words(std::string txt) {\n"
tests: "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"\
  Hello world!\")) == (Union_std_vector_std_string__long(std::string)\"world!\"})));\n\
  \    assert(candidate((\"Hello,world!\")) == (Union_std_vector_std_string__long(std::string)\"\
  world!\"})));\n    assert(candidate((\"Hello world,!\")) == (Union_std_vector_std_string__long(std::string)\"\
  world,!\"})));\n    assert(candidate((\"Hello,Hello,world !\")) == (Union_std_vector_std_string__long(std::string)\"\
  !\"})));\n    assert(candidate((\"abcdef\")) == (Union_std_vector_std_string__long(3)));\n\
  \    assert(candidate((\"aaabb\")) == (Union_std_vector_std_string__long(2)));\n\
  \    assert(candidate((\"aaaBb\")) == (Union_std_vector_std_string__long(1)));\n\
  \    assert(candidate((\"\")) == (Union_std_vector_std_string__long(0)));\n}\n"
completions: []
stop_tokens:
- "\n}"
