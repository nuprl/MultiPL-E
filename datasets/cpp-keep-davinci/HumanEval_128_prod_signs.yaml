name: HumanEval_128_prod_signs
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array arr\
  \ of integers and you need to return\n// sum of magnitudes of integers multiplied\
  \ by product of all signs\n// of each number in the array, represented by 1, -1\
  \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
  \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
  std::optional<long> prod_signs(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
  \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n  \
  \  assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1,\
  \ (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
completions: []
stop_tokens:
- "\n}"
