name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
  \ generate a list of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\n\
  std::vector<long> rolling_max(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
  \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3})))\
  \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
  }\n"
completions: ["    std::vector<long> result;\n    std::deque<long> dq;\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i]\
    \ >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n\
    \        if (i >= numbers.size() - 1) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - numbers.size() + 1) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (long i = 0; i < numbers.size(); i++) {\n        while\
    \ (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()]) {\n  \
    \          max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (max_elements.front() <= i - 3) {\n            max_elements.pop_front();\n\
    \        }\n        result.push_back(numbers[max_elements.front()]);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::stack<long> stack;\n\
    \    for (auto number : numbers) {\n        while (!stack.empty() && stack.top()\
    \ < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (auto n : numbers) {\n        while (!dq.empty() && dq.back() <\
    \ n) {\n            dq.pop_back();\n        }\n        dq.push_back(n);\n    \
    \    result.push_back(dq.front());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ q;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!q.empty()\
    \ && numbers[i] >= numbers[q.back()]) {\n            q.pop_back();\n        }\n\
    \        q.push_back(i);\n        if (i - q.front() >= 3) {\n            q.pop_front();\n\
    \        }\n        result.push_back(numbers[q.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    result.push_back(max);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i - dq.front() >= 3) {\n          \
    \  dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    for (auto i = 0; i < numbers.size(); i++) {\n       \
    \ if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push_back(max_so_far);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (max_queue.front() <= i - numbers.size())\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_value = numbers[0];\n    result.push_back(max_value);\n    for (int i =\
    \ 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_value) {\n     \
    \       max_value = numbers[i];\n        }\n        result.push_back(max_value);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    result.push_back(max);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i - dq.front() >= 3) {\n            dq.pop_front();\n\
    \        }\n        result.push_back(numbers[dq.front()]);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::deque<long> dq;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i]\
    \ >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n\
    \        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n \
    \       }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n \
    \       }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (auto number : numbers) {\n        while (!stack.empty() &&\
    \ stack.top() < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (long i = 0; i < numbers.size(); i++) {\n        long number\
    \ = numbers[i];\n        while (!window.empty() && window.back() < number) {\n\
    \            window.pop_back();\n        }\n        window.push_back(number);\n\
    \        if (i >= window.size() - 1) {\n            result.push_back(window.front());\n\
    \            if (window.front() == numbers[i - window.size() + 1]) {\n       \
    \         window.pop_front();\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ q;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!q.empty()\
    \ && numbers[i] >= numbers[q.back()]) {\n            q.pop_back();\n        }\n\
    \        q.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[q.front()]);\n\
    \        }\n        if (q.front() == i - 2) {\n            q.pop_front();\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (max_queue.front() <= i - 3)\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 3) {\n            result.push_back(numbers[dq.front()]);\n\
    \            if (dq.front() == i - 3) {\n                dq.pop_front();\n   \
    \         }\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      if (dq.empty()) {\n            dq.push_back(i);\n        } else {\n   \
    \         while (!dq.empty() && numbers[dq.back()] < numbers[i]) {\n         \
    \       dq.pop_back();\n            }\n            dq.push_back(i);\n        }\n\
    \        if (i - dq.front() >= 3) {\n            dq.pop_front();\n        }\n\
    \        result.push_back(numbers[dq.front()]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto\
    \ number : numbers) {\n        while (!max_queue.empty() && max_queue.back() <\
    \ number) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto\
    \ number : numbers) {\n        while (!max_queue.empty() && max_queue.back() <\
    \ number) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (dq.empty())\
    \ {\n            dq.push_back(i);\n        } else {\n            while (!dq.empty()\
    \ && numbers[dq.back()] < numbers[i]) {\n                dq.pop_back();\n    \
    \        }\n            dq.push_back(i);\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!deque.empty()\
    \ && numbers[deque.back()] <= numbers[i]) {\n            deque.pop_back();\n \
    \       }\n        deque.push_back(i);\n        if (deque.front() <= i - numbers.size())\
    \ {\n            deque.pop_front();\n        }\n        result.push_back(numbers[deque.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (long i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (max_queue.front() <= i - numbers.size())\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    result.push_back(max);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_deque;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_deque.empty() && numbers[i]\
    \ >= numbers[max_deque.back()]) {\n            max_deque.pop_back();\n       \
    \ }\n        max_deque.push_back(i);\n        if (i - max_deque.front() >= 3)\
    \ {\n            max_deque.pop_front();\n        }\n        result.push_back(numbers[max_deque.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ q;\n    for (auto i = 0; i < numbers.size(); i++) {\n        while (!q.empty()\
    \ && numbers[q.back()] <= numbers[i]) {\n            q.pop_back();\n        }\n\
    \        q.push_back(i);\n        if (q.front() == i - 3) {\n            q.pop_front();\n\
    \        }\n        result.push_back(numbers[q.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i - dq.front() >= 3) {\n          \
    \  dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push_back(max_so_far);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_numbers;\n    for (auto number : numbers) {\n        while (!max_numbers.empty()\
    \ && max_numbers.back() < number) {\n            max_numbers.pop_back();\n   \
    \     }\n        max_numbers.push_back(number);\n        result.push_back(max_numbers.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (auto i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number > max) {\n            max\
    \ = number;\n        }\n        result.push_back(max);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i - dq.front() >= 3) {\n          \
    \  dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> window;\n    for (auto number\
    \ : numbers) {\n        while (!window.empty() && window.back() < number) {\n\
    \            window.pop_back();\n        }\n        window.push_back(number);\n\
    \        result.push_back(window.front());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int i\
    \ = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n  \
    \          max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    result.push_back(max);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> max_numbers;\n    long max = 0;\n\
    \    for (auto number : numbers) {\n        if (number > max) {\n            max\
    \ = number;\n        }\n        max_numbers.push_back(max);\n    }\n    return\
    \ max_numbers;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    result.push_back(max_val);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n        result.push_back(max_val);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_elements;\n    for (auto\
    \ number : numbers) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < number) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = 0;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        long number\
    \ = numbers[i];\n        while (!max_queue.empty() && max_queue.back() < number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (auto n : numbers) {\n        max_so_far = std::max(max_so_far,\
    \ n);\n        result.push_back(max_so_far);\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::deque<long> dq;\n    for (long i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i - dq.front() >= numbers.size()) {\n            dq.pop_front();\n     \
    \   }\n        result.push_back(numbers[dq.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (max_queue.empty())\
    \ {\n            max_queue.push_back(i);\n        } else {\n            while\
    \ (!max_queue.empty() && numbers[max_queue.back()] < numbers[i]) {\n         \
    \       max_queue.pop_back();\n            }\n            max_queue.push_back(i);\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ deque;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!deque.empty()\
    \ && numbers[i] >= numbers[deque.back()]) {\n            deque.pop_back();\n \
    \       }\n        deque.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \            if (deque.front() == i - 2) {\n                deque.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i - dq.front() >= 3) {\n          \
    \  dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i - dq.front() >= numbers.size()) {\n\
    \            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ s;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!s.empty()\
    \ && s.top() < numbers[i]) {\n            s.pop();\n        }\n        s.push(numbers[i]);\n\
    \        result.push_back(s.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i - dq.front() >= numbers.size()) {\n\
    \            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!window.empty()\
    \ && window.back() < numbers[i]) {\n            window.pop_back();\n        }\n\
    \        window.push_back(numbers[i]);\n        if (i >= 3) {\n            if\
    \ (window.front() == numbers[i - 3]) {\n                window.pop_front();\n\
    \            }\n        }\n        result.push_back(window.front());\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> max_queue;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = 0;\n    for (auto number :\
    \ numbers) {\n        if (number > max_so_far) {\n            max_so_far = number;\n\
    \        }\n        result.push_back(max_so_far);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (long i\
    \ = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty() && numbers[i]\
    \ >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(i);\n        if (max_queue.front() <= i - numbers.size())\
    \ {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (auto number : numbers) {\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_value = numbers[0];\n    for (auto it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (*it > max_value) {\n            max_value = *it;\n    \
    \    }\n        result.push_back(max_value);\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (long i = 0; i < numbers.size(); i++) {\n        long number\
    \ = numbers[i];\n        while (!max_queue.empty() && max_queue.front() < i -\
    \ 1) {\n            max_queue.pop_front();\n        }\n        while (!max_queue.empty()\
    \ && numbers[max_queue.back()] < number) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_elements;\n    for (auto number : numbers) {\n        while (!max_elements.empty()\
    \ && max_elements.back() < number) {\n            max_elements.pop_back();\n \
    \       }\n        max_elements.push_back(number);\n        result.push_back(max_elements.front());\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_deque;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_deque.empty()\
    \ && numbers[i] >= numbers[max_deque.back()]) {\n            max_deque.pop_back();\n\
    \        }\n        max_deque.push_back(i);\n        if (i - max_deque.front()\
    \ >= 3) {\n            max_deque.pop_front();\n        }\n        result.push_back(numbers[max_deque.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (auto number : numbers) {\n        while (!stack.empty() &&\
    \ stack.top() < number) {\n            stack.pop();\n        }\n        stack.push(number);\n\
    \        result.push_back(stack.top());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n   \
    \ long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n\
    \            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!stack.empty()\
    \ && numbers[stack.top()] < numbers[i]) {\n            stack.pop();\n        }\n\
    \        if (stack.empty()) {\n            result.push_back(numbers[i]);\n   \
    \     } else {\n            result.push_back(numbers[stack.top()]);\n        }\n\
    \        stack.push(i);\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n           \
    \ dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[dq.front()]);\n        }\n        if (dq.front()\
    \ == i - 2) {\n            dq.pop_front();\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_numbers;\n    for (auto\
    \ number : numbers) {\n        while (!max_numbers.empty() && max_numbers.back()\
    \ < number) {\n            max_numbers.pop_back();\n        }\n        max_numbers.push_back(number);\n\
    \        result.push_back(max_numbers.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto\
    \ number : numbers) {\n        while (!max_queue.empty() && max_queue.back() <\
    \ number) {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::deque<long> window;\n    for (auto number\
    \ : numbers) {\n        while (!window.empty() && window.back() < number) {\n\
    \            window.pop_back();\n        }\n        window.push_back(number);\n\
    \        result.push_back(window.front());\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ q;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!q.empty()\
    \ && numbers[q.back()] <= numbers[i]) {\n            q.pop_back();\n        }\n\
    \        q.push_back(i);\n        if (q.front() == i - 3) {\n            q.pop_front();\n\
    \        }\n        result.push_back(numbers[q.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_queue;\n    for (auto number\
    \ : numbers) {\n        while (!max_queue.empty() && max_queue.back() < number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n\
    \        result.push_back(max_queue.front());\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (auto i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    result.push_back(max);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::deque<long> dq;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty() &&\
    \ numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n        }\n\
    \        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ window;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!window.empty()\
    \ && window.back() < numbers[i]) {\n            window.pop_back();\n        }\n\
    \        window.push_back(numbers[i]);\n        if (i >= 2) {\n            result.push_back(window.front());\n\
    \            if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max = numbers[0];\n    result.push_back(max);\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    result.push_back(max_element);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n        result.push_back(max_element);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::stack<long>\
    \ stack;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!stack.empty()\
    \ && numbers[stack.top()] < numbers[i]) {\n            stack.pop();\n        }\n\
    \        if (stack.empty()) {\n            result.push_back(numbers[i]);\n   \
    \     } else {\n            result.push_back(numbers[stack.top()]);\n        }\n\
    \        stack.push(i);\n    }\n    return result;", "    std::vector<long> result;\n\
    \    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n           \
    \ dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[dq.front()]);\n        }\n        if (dq.front()\
    \ == i - 2) {\n            dq.pop_front();\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    std::deque<long> window;\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        while (!window.empty()\
    \ && window.front() <= i - numbers.size()) {\n            window.pop_front();\n\
    \        }\n        while (!window.empty() && numbers[window.back()] <= numbers[i])\
    \ {\n            window.pop_back();\n        }\n        window.push_back(i);\n\
    \        result.push_back(numbers[window.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    long max = numbers[0];\n    result.push_back(max);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push_back(max_so_far);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> max_elements;\n    for (auto\
    \ number : numbers) {\n        while (!max_elements.empty() && max_elements.back()\
    \ < number) {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() ==\
    \ i - 3) {\n            max_queue.pop_front();\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ dq;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!dq.empty()\
    \ && numbers[i] >= numbers[dq.back()]) {\n            dq.pop_back();\n       \
    \ }\n        dq.push_back(i);\n        if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - 2) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ max_queue;\n    for (int i = 0; i < numbers.size(); i++) {\n        while (!max_queue.empty()\
    \ && numbers[i] >= numbers[max_queue.back()]) {\n            max_queue.pop_back();\n\
    \        }\n        max_queue.push_back(i);\n        if (max_queue.front() <=\
    \ i - numbers.size()) {\n            max_queue.pop_front();\n        }\n     \
    \   result.push_back(numbers[max_queue.front()]);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::deque<long> dq;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()])\
    \ {\n            dq.pop_back();\n        }\n        dq.push_back(i);\n       \
    \ if (i >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n\
    \        if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_number\
    \ = 0;\n    for (auto number : numbers) {\n        if (number > max_number) {\n\
    \            max_number = number;\n        }\n        result.push_back(max_number);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::deque<long>\
    \ maximums;\n    for (long i = 0; i < numbers.size(); i++) {\n        while (!maximums.empty()\
    \ && numbers[maximums.back()] <= numbers[i]) {\n            maximums.pop_back();\n\
    \        }\n        maximums.push_back(i);\n        if (maximums.front() <= i\
    \ - 3) {\n            maximums.pop_front();\n        }\n        result.push_back(numbers[maximums.front()]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max = numbers[0];\n\
    \    result.push_back(max);\n    for (int i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    result.push_back(max_so_far);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \        }\n        result.push_back(max_so_far);\n    }\n    return result;"]
stop_tokens:
- "\n}"
