name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n\
  // 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    // Write your code here\n    long count = 0;\n    std::set<char>\
    \ s;\n    for(int i = 0; i < string.length(); i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "\tlong count = 0;\n\tstd::set<char> s;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\ts.insert(tolower(string[i]));\n\
    \t}\n\treturn s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s(string.begin(),\
    \ string.end());\n    return s.size();", "    std::set<char> s;\n    for(char\
    \ c : string) {\n        s.insert(tolower(c));\n    }\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> set;\n  \
    \  for (char c : string) {\n        set.insert(tolower(c));\n    }\n    return\
    \ set.size();", "    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();",
  "    // your code goes here\n    long count = 0;\n    std::set<char> s;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    // your code goes here\n    long count=0;\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::vector<char> v;\n    for(int i=0;i<string.length();i++)\n    {\n   \
    \     if(std::find(v.begin(),v.end(),string[i])==v.end())\n        {\n       \
    \     v.push_back(string[i]);\n            count++;\n        }\n    }\n    return\
    \ count;", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n \
    \       s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    // Write your code here\n\
    \    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(auto c: string)\
    \ {\n        s.insert(std::tolower(c));\n    }\n    return s.size();", "    std::vector<char>\
    \ distinct_characters;\n    for (char character : string) {\n        if (std::find(distinct_characters.begin(),\
    \ distinct_characters.end(), character) == distinct_characters.end()) {\n    \
    \        distinct_characters.push_back(character);\n        }\n    }\n    return\
    \ distinct_characters.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(char c : string)\
    \ {\n        s.insert(tolower(c));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(std::tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n    }\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s(string.begin(), string.end());\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    return\
    \ s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::string str = \"\";\n    for (int i =\
    \ 0; i < string.length(); i++) {\n        if (str.find(string[i]) == std::string::npos)\
    \ {\n            str += string[i];\n        }\n    }\n    return str.length();",
  "    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();",
  "    std::set<char> distinct_characters;\n    for (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            count++;\n\
    \        }\n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n        \
    \    count++;\n        }\n    }\n    return count;", "    long count = 0;\n  \
    \  std::set<char> s;\n    for(char c : string)\n        s.insert(tolower(c));\n\
    \    return s.size();", "    std::set<char> distinct_characters;\n    for (char\
    \ c : string) {\n        distinct_characters.insert(tolower(c));\n    }\n    return\
    \ distinct_characters.size();", "    std::set<char> set;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n    }\n\
    \    return set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (auto c : string) {\n        set.insert(tolower(c));\n    }\n\
    \    return set.size();", "    std::set<char> char_set;\n    for (char c : string)\
    \ {\n        char_set.insert(tolower(c));\n    }\n    return char_set.size();",
  "    std::set<char> distinct_characters;\n    for (char character : string) {\n\
    \        distinct_characters.insert(tolower(character));\n    }\n    return distinct_characters.size();",
  "    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();",
  "    std::set<char> distinct_characters;\n    for (char character : string) {\n\
    \        distinct_characters.insert(tolower(character));\n    }\n    return distinct_characters.size();",
  "    long count = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();",
  "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    //\
    \ Write your code here\n    std::set<char> s;\n    for(auto i:string)\n      \
    \  s.insert(tolower(i));\n    return s.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    std::set<char> s;\n    for(char c : string) {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    std::set<char> s;\n  \
    \  for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(char c : string) {\n        s.insert(tolower(c));\n    }\n    return\
    \ s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    //\
    \ your code goes here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        s.insert(tolower(string[i]));\n    }\n    return s.size();", " \
    \   std::set<char> s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // Write your\
    \ code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> charSet;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        charSet.insert(tolower(string[i]));\n\
    \    }\n    return charSet.size();", "    std::set<char> char_set;\n    for (char\
    \ ch : string) {\n        char_set.insert(std::tolower(ch));\n    }\n    return\
    \ char_set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // your code\
    \ goes here\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> s(string.begin(), string.end());\n    return\
    \ s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> s;\n    for (char\
    \ c : string) {\n        s.insert(c);\n    }\n    return s.size();", "    // your\
    \ code goes here\n    int count = 0;\n    std::set<char> s;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        s.insert(tolower(string[i]));\n  \
    \  }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n   \
    \ for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (char c : string) {\n        set.insert(std::tolower(c));\n  \
    \  }\n    return set.size();", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s(string.begin(), string.end());\n\
    \    return s.size();", "    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> distinct_characters;\n    for (char character\
    \ : string) {\n        distinct_characters.insert(character);\n    }\n    return\
    \ distinct_characters.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::unordered_set<char>\
    \ chars;\n    for (char c : string) {\n        chars.insert(tolower(c));\n   \
    \ }\n    return chars.size();", "    long count = 0;\n    std::set<char> s;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    // Write your code here\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(char c : string) {\n        s.insert(tolower(c));\n    }\n    return\
    \ s.size();", "    long count = 0;\n    std::set<char> s;\n    for(int i = 0;\
    \ i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n    }\n\
    \    count = s.size();\n    return count;", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    long count = 0;\n    std::set<char> s;\n    for(char c : string)\
    \ {\n        s.insert(tolower(c));\n    }\n    return s.size();", "    long count\
    \ = 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    //\
    \ Write your code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> set;\n    for (char c : string)\
    \ {\n        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set(string.begin(),\
    \ string.end());\n    return set.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n    return\
    \ s.size();", "    std::set<char> set;\n    for (char c : string) {\n        set.insert(tolower(c));\n\
    \    }\n    return set.size();", "\tlong count = 0;\n\tstd::set<char> s;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\ts.insert(tolower(string[i]));\n\
    \t}\n\treturn s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n    }\n\
    \    return s.size();", "    std::set<char> set;\n    for (char c : string) {\n\
    \        set.insert(tolower(c));\n    }\n    return set.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(char c : string)\n\
    \        s.insert(tolower(c));\n    return s.size();", "    std::set<char> s;\n\
    \    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> distinct_characters;\n    for\
    \ (char c : string) {\n        distinct_characters.insert(std::tolower(c));\n\
    \    }\n    return distinct_characters.size();", "\t// Your code goes here\n\t\
    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\tstd::set<char>\
    \ s;\n\tfor (char c : string)\n\t\ts.insert(c);\n\treturn s.size();", "    long\
    \ count = 0;\n    std::set<char> set;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        set.insert(tolower(string[i]));\n    }\n    return set.size();",
  "    std::set<char> s;\n    for(char c : string) {\n        s.insert(tolower(c));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    // Write your\
    \ code here\n    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();", "    long count = 0;\n    std::set<char> s;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    long count =\
    \ 0;\n    std::set<char> s;\n    for(int i = 0; i < string.length(); i++) {\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "  std::set<char> s;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    s.insert(string[i]);\n  }\n  return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> s(string.begin(), string.end());\n\
    \    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(tolower(string[i]));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(char c : string)\
    \ {\n        s.insert(tolower(c));\n    }\n    return s.size();", "    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();", "    long count = 0;\n    std::set<char> s;\n \
    \   for(int i = 0; i < string.length(); i++) {\n        s.insert(tolower(string[i]));\n\
    \    }\n    count = s.size();\n    return count;", "    std::set<char> set;\n\
    \    for (char c : string) {\n        set.insert(std::tolower(c));\n    }\n  \
    \  return set.size();", "\tstd::set<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\ts.insert(string[i]);\n\t}\n\treturn s.size();", "    std::set<char>\
    \ char_set;\n    for (char c : string) {\n        char_set.insert(tolower(c));\n\
    \    }\n    return char_set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "    std::string\
    \ lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n    \
    \    lower_string += std::tolower(string[i]);\n    }\n    std::set<char> distinct_characters;\n\
    \    for (int i = 0; i < lower_string.length(); i++) {\n        distinct_characters.insert(lower_string[i]);\n\
    \    }\n    return distinct_characters.size();", "    std::set<char> set;\n  \
    \  for (char c : string) {\n        set.insert(tolower(c));\n    }\n    return\
    \ set.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();", "  std::set<char>\
    \ set;\n  for (int i = 0; i < string.length(); i++) {\n    set.insert(tolower(string[i]));\n\
    \  }\n  return set.size();", "    // Write your code here\n    long count = 0;\n\
    \    std::set<char> s;\n    for(int i = 0; i < string.length(); i++){\n      \
    \  s.insert(string[i]);\n    }\n    count = s.size();\n    return count;", " \
    \   std::set<char> s;\n    for(auto c: string) {\n        s.insert(std::tolower(c));\n\
    \    }\n    return s.size();", "    std::set<char> s;\n    for(int i=0;i<string.length();i++){\n\
    \        s.insert(string[i]);\n    }\n    return s.size();"]
stop_tokens:
- "\n}"
