name: HumanEval_114_minSubArraySum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
  \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
  // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\n\
  long minSubArraySum(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999})))\
  \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10,\
  \ (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10,\
  \ (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10})))\
  \ == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n  \
  \  assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n"
completions: ["    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;", "    long minSum = 0;\n  \
    \  long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n\
    \    }\n    return minSum;", "    long min_sum = INT_MAX;\n    long curr_sum =\
    \ 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n\
    \        if (curr_sum < min_sum) {\n            min_sum = curr_sum;\n        }\n\
    \        if (curr_sum > 0) {\n            curr_sum = 0;\n        }\n    }\n  \
    \  return min_sum;", "  long minSum = nums[0];\n  long currSum = nums[0];\n  for\
    \ (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return minSum;",
  "  long min_sum = nums[0];\n  long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n      min_sum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;", " \
    \   long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long min_sum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;", "  long minSum = nums[0];\n  long sum = 0;\n  for\
    \ (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum)\
    \ {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n \
    \ }\n  return minSum;", "  long minSum = nums[0];\n  long sum = 0;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n\
    \      minSum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n\
    \  return minSum;", "    long minSum = nums[0];\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;", "  long min = nums[0];\n \
    \ long sum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    if (sum < min) {\n      min = sum;\n    }\n    if (sum > 0) {\n      sum\
    \ = 0;\n    }\n  }\n  return min;", "  long minSum = nums[0];\n  long sum = 0;\n\
    \  for (long i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum\
    \ < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n\
    \    }\n  }\n  return minSum;", "  long minSum = nums[0];\n  long currSum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return minSum;",
  "  long min_sum = INT_MAX;\n  long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n      min_sum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;", " \
    \   long min_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n    }\n    return min_sum;", "  long min_sum = nums[0];\n\
    \  long curr_sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    curr_sum\
    \ = std::min(nums[i], curr_sum + nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n\
    \  }\n  return min_sum;", "    long minSum = 0;\n    long sum = 0;\n    for (auto\
    \ num : nums) {\n        sum += num;\n        if (sum < minSum) {\n          \
    \  minSum = sum;\n        }\n    }\n    return minSum;", "    long minSum = LONG_MAX;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n\
    \        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;",
  "  long minSum = nums[0];\n  long sum = 0;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n\
    \    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;", "    long\
    \ minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum\
    \ = std::min(minSum, currSum);\n    }\n    return minSum;", "  long minSum = nums[0];\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n   \
    \   sum = 0;\n    }\n  }\n  return minSum;", "    long min_sum = nums[0];\n  \
    \  long curr_sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n   \
    \     curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ curr_sum);\n    }\n    return min_sum;", "  long minSum = nums[0];\n  long currSum\
    \ = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return\
    \ minSum;", "    long minSum = nums[0];\n    long currentSum = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        currentSum = std::min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = std::min(minSum, currentSum);\n    }\n\
    \    return minSum;", "    long minSum = nums[0];\n    long sum = 0;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n        if (sum > 0) {\n\
    \            sum = 0;\n        }\n    }\n    return minSum;", "    long min =\
    \ 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n       \
    \ sum += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n\
    \    }\n    return min;", "  long minSum = 0;\n  long sum = 0;\n  for (int i =\
    \ 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n \
    \     minSum = sum;\n    }\n  }\n  return minSum;", "    long min = nums[0];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;",
  "    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;", "    long minSum = nums[0];\n    long currSum = nums[0];\n\
    \    for (int i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n  \
    \  return minSum;", "    long min_sum = 0;\n    long curr_sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum\
    \ < min_sum) {\n            min_sum = curr_sum;\n        }\n        if (curr_sum\
    \ > 0) {\n            curr_sum = 0;\n        }\n    }\n    return min_sum;", " \
    \   long minSum = 0;\n    long currSum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;", "    long min_sum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (auto num : nums) {\n        sum += num;\n       \
    \ min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum =\
    \ 0;\n        }\n    }\n    return min_sum;", "    long minSum = nums[0];\n  \
    \  long currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n    \
    \    currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum,\
    \ currSum);\n    }\n    return minSum;", "    long min_sum = nums[0];\n    long\
    \ curr_sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        curr_sum\
    \ = std::min(nums[i], curr_sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ curr_sum);\n    }\n    return min_sum;", "    long min_sum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (auto num : nums) {\n        sum += num;\n       \
    \ min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum =\
    \ 0;\n        }\n    }\n    return min_sum;", "    long min_sum = 0;\n    long\
    \ current_sum = 0;\n    for (long num : nums) {\n        current_sum += num;\n\
    \        if (current_sum < min_sum) {\n            min_sum = current_sum;\n  \
    \      }\n    }\n    return min_sum;", "    long min_sum = nums[0];\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min_sum)\n            min_sum = sum;\n        if (sum > 0)\n\
    \            sum = 0;\n    }\n    return min_sum;", "    long minSum = nums[0];\n\
    \    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n       \
    \ minSum = std::min(minSum, sum);\n        if (sum > 0) {\n            sum = 0;\n\
    \        }\n    }\n    return minSum;", "  long min_sum = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (auto num : nums) {\n    sum += num;\n    min_sum = std::min(min_sum,\
    \ sum);\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;", " \
    \   long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, curr_sum);\n    }\n    return min_sum;",
  "  long min_sum = nums[0];\n  long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n      min_sum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;", " \
    \   long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;", "  long min_sum = nums[0];\n\
    \  long curr_sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    curr_sum\
    \ = std::min(nums[i], curr_sum + nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n\
    \  }\n  return min_sum;", "    long minSum = nums[0];\n    long sum = 0;\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < minSum) {\n            minSum = sum;\n        }\n        if (sum > 0)\
    \ {\n            sum = 0;\n        }\n    }\n    return minSum;", "  long minSum\
    \ = 0;\n  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum +=\
    \ nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return\
    \ minSum;", "    long minSum = nums[0];\n    long currentSum = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        currentSum = std::min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = std::min(minSum, currentSum);\n    }\n\
    \    return minSum;", "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long minSum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;", "    long minSum = nums[0];\n    long currentSum\
    \ = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        currentSum\
    \ = std::min(currentSum + nums[i], nums[i]);\n        minSum = std::min(minSum,\
    \ currentSum);\n    }\n    return minSum;", "    long min = nums[0];\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min) {\n            min = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min;", "    long\
    \ minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (auto\
    \ num : nums) {\n        sum += num;\n        minSum = std::min(minSum, sum);\n\
    \        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    return minSum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long min_sum = nums[0];\n    long current_sum = nums[0];\n    for (int i =\
    \ 1; i < nums.size(); i++) {\n        current_sum = std::min(current_sum + nums[i],\
    \ nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n    }\n    return\
    \ min_sum;", "    long minSum = nums[0];\n    long sum = 0;\n    for (long i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;", "    long min = nums[0];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;",
  "    long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;", "  long minSum = 0;\n  long sum = 0;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n\
    \      minSum = sum;\n    }\n  }\n  return minSum;", "    long minSum = nums[0];\n\
    \    long currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n  \
    \      currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum,\
    \ currSum);\n    }\n    return minSum;", "    long minSum = nums[0];\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;", " \
    \ long min_sum = nums[0];\n  long current_sum = nums[0];\n  for (int i = 1; i\
    \ < nums.size(); i++) {\n    current_sum = std::min(current_sum + nums[i], nums[i]);\n\
    \    min_sum = std::min(min_sum, current_sum);\n  }\n  return min_sum;", "  long\
    \ minSum = nums[0];\n  long currSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;", "    long minSum = nums[0];\n    long sum\
    \ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;", " \
    \   long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;", "    long min_sum = 0;\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min_sum) {\n            min_sum = sum;\n        }\n    }\n    return min_sum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long minSum = 0;\n    long currSum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        currSum += nums[i];\n        if (currSum < minSum) {\n     \
    \       minSum = currSum;\n        }\n        if (currSum > 0) {\n           \
    \ currSum = 0;\n        }\n    }\n    return minSum;", "    long minSum = LONG_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ minSum;", "    long minSum = nums[0];\n    long currSum = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    return\
    \ minSum;", "  long minSum = std::numeric_limits<long>::max();\n  long sum = 0;\n\
    \  for (long num : nums) {\n    sum += num;\n    minSum = std::min(minSum, sum);\n\
    \    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;", "    long\
    \ minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n    }\n    return minSum;", "    long minSum = 0;\n    long sum =\
    \ 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n \
    \       if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n   \
    \ return minSum;", "    long min_sum = 0;\n    long sum = 0;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum)\
    \ {\n            min_sum = sum;\n        }\n    }\n    return min_sum;", "   \
    \ long min_sum = nums[0];\n    long sum = 0;\n    for (long num : nums) {\n  \
    \      sum += num;\n        min_sum = std::min(min_sum, sum);\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;", "    long\
    \ minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n        minSum\
    \ = std::min(minSum, currSum);\n    }\n    return minSum;", "    long min_sum\
    \ = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;", "    long minSum = 0;\n    long sum =\
    \ 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n \
    \       if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;", " \
    \   long min_sum = 0;\n    long current_sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        current_sum += nums[i];\n        if (current_sum < min_sum)\
    \ {\n            min_sum = current_sum;\n        }\n        if (current_sum >\
    \ 0) {\n            current_sum = 0;\n        }\n    }\n    return min_sum;",
  "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n    min_sum =\
    \ std::min(min_sum, curr_sum);\n  }\n  return min_sum;", "  long minSum = nums[0];\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n   \
    \   sum = 0;\n    }\n  }\n  return minSum;", "    long minSum = 0;\n    long sum\
    \ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n  \
    \  return minSum;", "    long minSum = nums[0];\n    long currSum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        currSum += nums[i];\n        if\
    \ (currSum < minSum) {\n            minSum = currSum;\n        }\n        if (currSum\
    \ > 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;", " \
    \   long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, curr_sum);\n    }\n    return min_sum;",
  "  long minSum = nums[0];\n  long currSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;", "  long minSum = 0;\n  long sum = 0;\n  for\
    \ (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum)\
    \ {\n      minSum = sum;\n    }\n  }\n  return minSum;", "    long minSum = nums[0];\n\
    \    long currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n  \
    \      currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum,\
    \ currSum);\n    }\n    return minSum;", "  long minSum = nums[0];\n  long sum\
    \ = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if\
    \ (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum\
    \ = 0;\n    }\n  }\n  return minSum;", "    long minSum = 0;\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return\
    \ minSum;", "    long minSum = nums[0];\n    long currSum = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n    return\
    \ minSum;", "    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;", "  long min_sum = nums[0];\n  long sum = 0;\n  for (int i = 0; i\
    \ < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n     \
    \ min_sum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min_sum;", "  long min_sum = nums[0];\n  long sum = 0;\n  for (int i = 0; i\
    \ < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n     \
    \ min_sum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min_sum;", "    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;", "    long minSum = nums[0];\n\
    \    long currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n  \
    \      currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum,\
    \ currSum);\n    }\n    return minSum;", "    long min_sum = nums[0];\n    long\
    \ sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        sum = std::min(nums[i],\
    \ sum + nums[i]);\n        min_sum = std::min(min_sum, sum);\n    }\n    return\
    \ min_sum;", "    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int\
    \ i = 1; i < nums.size(); i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, sum);\n    }\n    return min_sum;", "   \
    \ long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, curr_sum);\n    }\n    return min_sum;",
  "    long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n       \
    \ sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n    \
    \    }\n    }\n    return min_sum;", "    long minSum = nums[0];\n    long currSum\
    \ = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n  \
    \  return minSum;", "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n \
    \ for (int i = 1; i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;",
  "    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1;\
    \ i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n\
    \        min_sum = std::min(min_sum, curr_sum);\n    }\n    return min_sum;",
  "    long min_sum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n    }\n    return min_sum;", "    long min_sum = nums[0];\n\
    \    long curr_sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n \
    \       curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ curr_sum);\n    }\n    return min_sum;", "    long min_sum = 0;\n    long sum\
    \ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min_sum) {\n            min_sum = sum;\n        }\n    }\n\
    \    return min_sum;", "    long sum = 0;\n    long minSum = 0;\n    long min\
    \ = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    if (minSum\
    \ == 0) {\n        return min;\n    }\n    return minSum;", "    long minSum =\
    \ LONG_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n \
    \   return minSum;", "  long minSum = nums[0];\n  long currentSum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    currentSum = std::min(currentSum\
    \ + nums[i], nums[i]);\n    minSum = std::min(minSum, currentSum);\n  }\n  return\
    \ minSum;", "  long min_sum = nums[0];\n  long sum = 0;\n  for (int i = 0; i <\
    \ nums.size(); i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n      min_sum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;",
  "    long min_sum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;", "    long minSum = 0;\n    long sum = 0;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;",
  "  long minSum = nums[0];\n  long currSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;", "    long minSum = nums[0];\n    long sum\
    \ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;", " \
    \   long min_sum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;", "  long minSum = 0;\n  long sum = 0;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n\
    \      minSum = sum;\n    }\n  }\n  return minSum;", "    long minSum = nums[0];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n        }\n\
    \        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;",
  "  long minSum = nums[0];\n  long sum = 0;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n\
    \    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;", "  long minSum\
    \ = nums[0];\n  long currentSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currentSum = std::min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = std::min(minSum, currentSum);\n  }\n  return minSum;", "    long min_sum =\
    \ 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n       \
    \ sum += nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n\
    \        }\n    }\n    return min_sum;", "  long minSum = nums[0];\n  long currSum\
    \ = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return\
    \ minSum;", "    long minSum = LONG_MAX;\n    long sum = 0;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;", "  long minSum = nums[0];\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n   \
    \   sum = 0;\n    }\n  }\n  return minSum;", "    long minSum = 0;\n    long currentSum\
    \ = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n\
    \        if (currentSum < minSum) {\n            minSum = currentSum;\n      \
    \  }\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n\
    \    }\n    return minSum;", "    long minSum = 0;\n    long sum = 0;\n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;",
  "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n    min_sum =\
    \ std::min(min_sum, curr_sum);\n  }\n  return min_sum;", "  long minSum = 0;\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;", "    long min_sum = nums[0];\n\
    \    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n       \
    \ min_sum = std::min(min_sum, sum);\n        if (sum > 0) {\n            sum =\
    \ 0;\n        }\n    }\n    return min_sum;", "    long minSum = 0;\n    long\
    \ currSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currSum +=\
    \ nums[i];\n        if (currSum < minSum) {\n            minSum = currSum;\n \
    \       }\n        if (currSum > 0) {\n            currSum = 0;\n        }\n \
    \   }\n    return minSum;", "  long minSum = 0;\n  long sum = 0;\n  for (int i\
    \ = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n\
    \      minSum = sum;\n    }\n  }\n  return minSum;", "    long min_sum = nums[0];\n\
    \    long curr_sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n \
    \       curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ curr_sum);\n    }\n    return min_sum;", "    long min_sum = INT_MAX;\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min_sum) {\n            min_sum = sum;\n        }\n       \
    \ if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;",
  "    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;", "    long minSum = 0;\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n  \
    \  return minSum;", "  long minSum = 0;\n  long currSum = 0;\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    currSum += nums[i];\n    if (currSum < minSum)\
    \ {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;", "    long min_sum = INT_MAX;\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;", "  long\
    \ min_sum = nums[0];\n  long current_sum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    current_sum = std::min(current_sum + nums[i], nums[i]);\n    min_sum\
    \ = std::min(min_sum, current_sum);\n  }\n  return min_sum;", "    long minSum\
    \ = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n \
    \   return minSum;", "  long min = nums[0];\n  long sum = 0;\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;", "    long min_sum = nums[0];\n\
    \    long curr_sum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n \
    \       curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ curr_sum);\n    }\n    return min_sum;", "  long minSum = nums[0];\n  long sum\
    \ = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if\
    \ (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum\
    \ = 0;\n    }\n  }\n  return minSum;", "  long minSum = nums[0];\n  long sum =\
    \ 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum\
    \ < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n\
    \    }\n  }\n  return minSum;", "    long minSum = 0;\n    long sum = 0;\n   \
    \ for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if\
    \ (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;",
  "  long minSum = nums[0];\n  long currSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;", "  long minSum = nums[0];\n  long currSum\
    \ = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return\
    \ minSum;", "    long min_sum = nums[0];\n    long curr_sum = nums[0];\n    for\
    \ (int i = 1; i < nums.size(); i++) {\n        curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    return\
    \ min_sum;", "    long minSum = INT_MAX;\n    long sum = 0;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;", "    long minSum = nums[0];\n\
    \    long currentSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n\
    \        currentSum = std::min(currentSum + nums[i], nums[i]);\n        minSum\
    \ = std::min(minSum, currentSum);\n    }\n    return minSum;", "  long minSum\
    \ = nums[0];\n  long currentSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currentSum = std::min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = std::min(minSum, currentSum);\n  }\n  return minSum;", "    long minSum =\
    \ INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n \
    \   return minSum;", "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;",
  "    long min_sum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;", "  long min_sum = nums[0];\n  long current_sum =\
    \ nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    current_sum = std::min(current_sum\
    \ + nums[i], nums[i]);\n    min_sum = std::min(min_sum, current_sum);\n  }\n \
    \ return min_sum;", "  long minSum = nums[0];\n  long currSum = nums[0];\n  for\
    \ (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return minSum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long min_sum = 0;\n    long sum = 0;\n    for (auto num : nums) {\n       \
    \ sum += num;\n        if (sum < min_sum) {\n            min_sum = sum;\n    \
    \    }\n    }\n    return min_sum;", "  long min_sum = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    min_sum = std::min(min_sum, sum);\n    if (sum > 0) {\n      sum = 0;\n \
    \   }\n  }\n  return min_sum;", "  long min_sum = nums[0];\n  long current_sum\
    \ = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    current_sum = std::min(current_sum\
    \ + nums[i], nums[i]);\n    min_sum = std::min(min_sum, current_sum);\n  }\n \
    \ return min_sum;", "    long min_sum = nums[0];\n    long current_sum = nums[0];\n\
    \    for (int i = 1; i < nums.size(); i++) {\n        current_sum = std::min(current_sum\
    \ + nums[i], nums[i]);\n        min_sum = std::min(min_sum, current_sum);\n  \
    \  }\n    return min_sum;", "  long min_sum = nums[0];\n  long sum = 0;\n  for\
    \ (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < min_sum)\
    \ {\n      min_sum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n\
    \  }\n  return min_sum;", "    long minSum = 0;\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n    }\n    return minSum;", "    long\
    \ min_sum = nums[0];\n    long curr_sum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        curr_sum = std::min(nums[i], curr_sum + nums[i]);\n        min_sum\
    \ = std::min(min_sum, curr_sum);\n    }\n    return min_sum;", "  long minSum\
    \ = nums[0];\n  long currSum = nums[0];\n  for (int i = 1; i < nums.size(); i++)\
    \ {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;", "  long minSum = nums[0];\n  long currSum\
    \ = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return\
    \ minSum;", "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int\
    \ i = 1; i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum +\
    \ nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;",
  "    long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i\
    \ < nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  long\
    \ min_sum = nums[0];\n  long curr_sum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    curr_sum = std::min(nums[i], curr_sum + nums[i]);\n    min_sum =\
    \ std::min(min_sum, curr_sum);\n  }\n  return min_sum;", "    long minSum = nums[0];\n\
    \    long currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n  \
    \      currSum = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum,\
    \ currSum);\n    }\n    return minSum;", "    long minSum = nums[0];\n    long\
    \ currSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        currSum\
    \ = std::min(nums[i], currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n\
    \    }\n    return minSum;", "  long min_sum = nums[0];\n  long curr_sum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    curr_sum = std::min(nums[i], curr_sum\
    \ + nums[i]);\n    min_sum = std::min(min_sum, curr_sum);\n  }\n  return min_sum;",
  "  long min_sum = nums[0];\n  long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n    if (sum < min_sum) {\n      min_sum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;", " \
    \   long min_sum = INT_MAX;\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return min_sum;", "  long minSum = nums[0];\n  long currSum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return minSum;",
  "    long min_sum = nums[0];\n    long sum = 0;\n    for (long num : nums) {\n \
    \       sum += num;\n        min_sum = std::min(min_sum, sum);\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;", "  long\
    \ minSum = nums[0];\n  long currSum = nums[0];\n  for (int i = 1; i < nums.size();\
    \ i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n    minSum = std::min(minSum,\
    \ currSum);\n  }\n  return minSum;", "    long min_sum = 0;\n    long sum = 0;\n\
    \    for (auto num : nums) {\n        sum += num;\n        if (sum < min_sum)\
    \ {\n            min_sum = sum;\n        }\n    }\n    return min_sum;", "   \
    \ long minSum = nums[0];\n    long currSum = nums[0];\n    for (int i = 1; i <\
    \ nums.size(); i++) {\n        currSum = std::min(nums[i], currSum + nums[i]);\n\
    \        minSum = std::min(minSum, currSum);\n    }\n    return minSum;", "  \
    \  long minSum = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return minSum;", "  long minSum = nums[0];\n  long currentSum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    currentSum = std::min(currentSum\
    \ + nums[i], nums[i]);\n    minSum = std::min(minSum, currentSum);\n  }\n  return\
    \ minSum;", "  long minSum = nums[0];\n  long currSum = nums[0];\n  for (int i\
    \ = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum + nums[i]);\n\
    \    minSum = std::min(minSum, currSum);\n  }\n  return minSum;", "    long minSum\
    \ = nums[0];\n    long sum = nums[0];\n    for (int i = 1; i < nums.size(); i++)\
    \ {\n        sum = std::min(nums[i], sum + nums[i]);\n        minSum = std::min(minSum,\
    \ sum);\n    }\n    return minSum;", "  long min_sum = std::numeric_limits<long>::max();\n\
    \  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n\
    \    min_sum = std::min(min_sum, sum);\n    if (sum > 0) {\n      sum = 0;\n \
    \   }\n  }\n  return min_sum;", "    long minSum = nums[0];\n    long currSum\
    \ = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n        minSum = std::min(minSum, currSum);\n    }\n  \
    \  return minSum;", "    long min_sum = nums[0];\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min_sum)\
    \ {\n            min_sum = sum;\n        }\n        if (sum > 0) {\n         \
    \   sum = 0;\n        }\n    }\n    return min_sum;", "    long min_sum = LONG_MAX;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min_sum) {\n            min_sum = sum;\n       \
    \ }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min_sum;", "  long minSum = nums[0];\n  long currentSum = nums[0];\n  for (int\
    \ i = 1; i < nums.size(); i++) {\n    currentSum = std::min(currentSum + nums[i],\
    \ nums[i]);\n    minSum = std::min(minSum, currentSum);\n  }\n  return minSum;",
  "  long min_sum = nums[0];\n  long current_sum = nums[0];\n  for (int i = 1; i <\
    \ nums.size(); i++) {\n    current_sum = std::min(current_sum + nums[i], nums[i]);\n\
    \    min_sum = std::min(min_sum, current_sum);\n  }\n  return min_sum;", "  long\
    \ min_sum = 0;\n  long current_sum = 0;\n  for (long num : nums) {\n    current_sum\
    \ += num;\n    if (current_sum < min_sum) {\n      min_sum = current_sum;\n  \
    \  }\n  }\n  return min_sum;", "  long minSum = nums[0];\n  long currSum = nums[0];\n\
    \  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i], currSum\
    \ + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return minSum;",
  "    long min_sum = nums[0];\n    long sum = nums[0];\n    for (int i = 1; i < nums.size();\
    \ i++) {\n        sum = std::min(nums[i], sum + nums[i]);\n        min_sum = std::min(min_sum,\
    \ sum);\n    }\n    return min_sum;", "  long minSum = nums[0];\n  long currSum\
    \ = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    currSum = std::min(nums[i],\
    \ currSum + nums[i]);\n    minSum = std::min(minSum, currSum);\n  }\n  return\
    \ minSum;", "    long minSum = 0;\n    long sum = 0;\n    for (int i = 0; i <\
    \ nums.size(); i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n\
    \            minSum = sum;\n        }\n    }\n    return minSum;", "    long min_sum\
    \ = nums[0];\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < min_sum) {\n            min_sum =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min_sum;", "    long min_sum = LONG_MAX;\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n      \
    \  if (sum < min_sum) {\n            min_sum = sum;\n        }\n        if (sum\
    \ > 0) {\n            sum = 0;\n        }\n    }\n    return min_sum;", "    long\
    \ minSum = 0;\n    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n    }\n    return minSum;", "    long minSum = nums[0];\n    long\
    \ currentSum = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n       \
    \ currentSum = std::min(currentSum + nums[i], nums[i]);\n        minSum = std::min(minSum,\
    \ currentSum);\n    }\n    return minSum;"]
stop_tokens:
- "\n}"
