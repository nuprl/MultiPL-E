name: HumanEval_118_get_closest_vowel
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your\
  \ task is to find the closest vowel that stands between \n// two consonants from\
  \ the right side of the word (case sensitive).\n// Vowels in the beginning and ending\
  \ doesn't count. Return empty string if you didn't\n// find any vowel met the above\
  \ condition. \n// You may assume that the given string contains English letter only.\n\
  // Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"\
  FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"\
  ab\") ==> \"\"\nstd::string get_closest_vowel(std::string word) {\n"
tests: "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
  yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
  easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
  ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
  most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
  ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
  anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
  Above\")) == (\"o\"));\n}\n"
completions: ["    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "  // your code here\n  std::string vowels\
    \ = \"aeiouAEIOU\";\n  std::string result = \"\";\n  int index = -1;\n  for(int\
    \ i = word.length() - 1; i >= 0; i--) {\n    if(vowels.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  if(index == -1) {\n    return\
    \ result;\n  }\n  for(int i = index - 1; i >= 0; i--) {\n    if(vowels.find(word[i])\
    \ == std::string::npos) {\n      result = word[index];\n      break;\n    }\n\
    \  }\n  return result;", "  std::string vowels = \"aeiou\";\n  std::string result\
    \ = \"\";\n  int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) != std::string::npos) {\n      index = i;\n    \
    \  break;\n    }\n  }\n  if (index == -1) {\n    return result;\n  }\n  for (int\
    \ i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos)\
    \ {\n      result = word[index];\n      break;\n    }\n  }\n  return result;",
  "    std::string vowels = \"aeiou\";\n    int len = word.length();\n    int i =\
    \ len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    int distance = 0;\n   \
    \ for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.length();\
    \ j++) {\n                if (consonants.find(word[j]) != std::string::npos) {\n\
    \                    distance = j - i;\n                    if (distance < min_distance)\
    \ {\n                        min_distance = distance;\n                      \
    \  result = word[i];\n                    }\n                    break;\n    \
    \            }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.size()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int i = word.size() - 1;\n    int j = i;\n    while (i > 0) {\n       \
    \ if (consonants.find(word[i]) != std::string::npos) {\n            while (j >\
    \ 0) {\n                if (vowels.find(word[j]) != std::string::npos) {\n   \
    \                 return word.substr(j, 1);\n                }\n             \
    \   j--;\n            }\n        }\n        i--;\n    }\n    return \"\";", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    int len = word.length();\n\
    \    if(len == 0) return \"\";\n    if(len == 1) return \"\";\n    int i = len\
    \ - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u') {\n            if(i == len - 1)\
    \ return \"\";\n            if(i == 0) return \"\";\n            if(word[i-1]\
    \ == 'a' || word[i-1] == 'e' || word[i-1] == 'i' || word[i-1] == 'o' || word[i-1]\
    \ == 'u') {\n                return \"\";\n            }\n            if(word[i+1]\
    \ == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1]\
    \ == 'u') {\n                return \"\";\n            }\n            return word.substr(i,\
    \ 1);\n        }\n        i--;\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int vowel_index = -1;\n    int consonant_index = -1;\n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_index = i;\n        }\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            consonant_index = i;\n            break;\n\
    \        }\n    }\n    if (vowel_index == -1 || consonant_index == -1) {\n   \
    \     return \"\";\n    }\n    if (vowel_index > consonant_index) {\n        return\
    \ \"\";\n    }\n    return word.substr(vowel_index, 1);", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiou\";\n    std::string result = \"\";\n    int index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "  std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n  std::vector<char> consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'};\n  std::string result = \"\";\n  int index =\
    \ -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (std::find(consonants.begin(),\
    \ consonants.end(), word[i]) != consonants.end()) {\n      if (i == word.length()\
    \ - 1) {\n        return result;\n      }\n      for (int j = i + 1; j < word.length();\
    \ j++) {\n        if (std::find(vowels.begin(), vowels.end(), word[j]) != vowels.end())\
    \ {\n          if (index == -1) {\n            index = j;\n          } else {\n\
    \            if (j < index) {\n              index = j;\n            }\n     \
    \     }\n        }\n      }\n      if (index != -1) {\n        result = word[index];\n\
    \      }\n      return result;\n    }\n  }\n  return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int vowel_index = -1;\n    int consonant_index = -1;\n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_index = i;\n        }\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            consonant_index = i;\n            break;\n\
    \        }\n    }\n    if (vowel_index == -1 || consonant_index == -1) {\n   \
    \     return \"\";\n    }\n    if (vowel_index > consonant_index) {\n        return\
    \ \"\";\n    }\n    return word.substr(vowel_index, 1);", "\tstd::string vowels\
    \ = \"aeiouAEIOU\";\n\tstd::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n\tstd::string result = \"\";\n\tint index = -1;\n\tfor (int i = word.length()\
    \ - 1; i >= 0; i--) {\n\t\tif (consonants.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn\
    \ result;\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tresult = word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn result;", "    std::string vowels = \"aeiou\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance =\
    \ -1;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i; j < word.length(); j++) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    break;\n                }\n      \
    \          distance++;\n            }\n            if (distance > 0 && distance\
    \ < closest_vowel_distance) {\n                closest_vowel_distance = distance;\n\
    \                closest_vowel_index = i;\n            }\n        }\n    }\n \
    \   if (closest_vowel_index != -1) {\n        closest_vowel = word[closest_vowel_index];\n\
    \    }\n    return closest_vowel;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         index = j;\n                    break;\n                }\n        \
    \    }\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (consonants.find(word[i]) != std::string::npos) {\n            return result;\n\
    \        }\n        if (vowels.find(word[i]) != std::string::npos) {\n       \
    \     result = word[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while (j >=\
    \ 0) {\n                if (vowels.find(word[j]) != std::string::npos) {\n   \
    \                 return word.substr(j, 1);\n                }\n             \
    \   if (consonants.find(word[j]) != std::string::npos) {\n                   \
    \ break;\n                }\n                j--;\n            }\n        }\n\
    \        i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int min_dist = INT_MAX;\n    for (int i =\
    \ 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int dist = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                dist++;\n     \
    \       }\n            if (dist < min_dist) {\n                min_dist = dist;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n \
    \   for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiou\";\n    int len = word.length();\n   \
    \ int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n\
    \  int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ != std::string::npos) {\n      if (index == -1) {\n        index = i;\n    \
    \  } else {\n        if (i == 0) {\n          return \"\";\n        }\n      \
    \  if (vowels.find(word[i - 1]) == std::string::npos) {\n          return word[index];\n\
    \        }\n      }\n    }\n  }\n  return result;", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         break;\n                }\n            }\n            break;\n     \
    \   }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                if (j - i < distance) {\n             \
    \       distance = j - i;\n                    result = word[i];\n           \
    \     }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    int j = len - 1;\n\
    \    std::string res = \"\";\n    while(i >= 0) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(consonants.find(word[j]) != std::string::npos)\
    \ {\n                res = word[i];\n                break;\n            }\n \
    \       }\n        i--;\n        j--;\n    }\n    return res;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n\
    \  int min_distance = INT_MAX;\n  for (int i = 0; i < word.size(); i++) {\n  \
    \  for (int j = 0; j < vowels.size(); j++) {\n      if (word[i] == vowels[j])\
    \ {\n        int distance = 0;\n        for (int k = i + 1; k < word.size(); k++)\
    \ {\n          if (vowels.find(word[k]) == std::string::npos) {\n            distance++;\n\
    \          } else {\n            break;\n          }\n        }\n        if (distance\
    \ < min_distance) {\n          min_distance = distance;\n          result = word[i];\n\
    \        }\n      }\n    }\n  }\n  return result;", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            for(int j = i-1; j >= 0; j--) {\n     \
    \           if(vowels.find(word[j]) != std::string::npos) {\n                \
    \    return word.substr(j, 1);\n                }\n            }\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   result = word[i];\n            pos = i;\n            break;\n        }\n \
    \   }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return result;\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while (j >=\
    \ 0) {\n                if (vowels.find(word[j]) != std::string::npos) {\n   \
    \                 return word.substr(j, 1);\n                }\n             \
    \   if (consonants.find(word[j]) != std::string::npos) {\n                   \
    \ break;\n                }\n                j--;\n            }\n        }\n\
    \        i--;\n    }\n    return \"\";", "\tstd::string vowels = \"aeiouAEIOU\"\
    ;\n\tstd::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \tint len = word.length();\n\tint i = len - 1;\n\twhile (i >= 0) {\n\t\tif (consonants.find(word[i])\
    \ != std::string::npos) {\n\t\t\tint j = i - 1;\n\t\t\twhile (j >= 0) {\n\t\t\t\
    \tif (vowels.find(word[j]) != std::string::npos) {\n\t\t\t\t\treturn word.substr(j,\
    \ 1);\n\t\t\t\t}\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\ti--;\n\t}\n\treturn \"\";",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int\
    \ index = 0;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "  std::string vowels = \"aeiou\";\n \
    \ std::string result = \"\";\n  int distance = word.size();\n  for (int i = 0;\
    \ i < word.size(); i++) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      if (i > 0 && vowels.find(word[i - 1]) == std::string::npos) {\n   \
    \     if (i < distance) {\n          distance = i;\n          result = word[i];\n\
    \        }\n      }\n      if (i < word.size() - 1 && vowels.find(word[i + 1])\
    \ == std::string::npos) {\n        if (word.size() - i < distance) {\n       \
    \   distance = word.size() - i;\n          result = word[i];\n        }\n    \
    \  }\n    }\n  }\n  return result;", "    std::string vowels = \"aeiou\";\n  \
    \  std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int index\
    \ = 0;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string closest_vowel;\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    closest_vowel = word[i];\n                }\n           \
    \ }\n        }\n    }\n    return closest_vowel;", "  std::string vowels = \"\
    aeiou\";\n  std::string result = \"\";\n  int min_distance = INT_MAX;\n  for (int\
    \ i = 0; i < word.size(); i++) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      int distance = word.size() - i - 1;\n      if (distance < min_distance)\
    \ {\n        min_distance = distance;\n        result = word[i];\n      }\n  \
    \  }\n  }\n  return result;", "    std::string vowels = \"aeiou\";\n    int index\
    \ = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            if (index == word.size() - 1) {\n     \
    \           return \"\";\n            }\n            if (vowels.find(word[index\
    \ + 1]) == std::string::npos) {\n                return word.substr(index, 1);\n\
    \            }\n        }\n        index--;\n    }\n    return \"\";", "  std::string\
    \ vowels = \"aeiou\";\n  std::string result = \"\";\n  int index = -1;\n  for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n      index = i;\n      break;\n    }\n  }\n  if (index\
    \ == -1) {\n    return result;\n  }\n  for (int i = index - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) == std::string::npos) {\n      result = word[index];\n\
    \      break;\n    }\n  }\n  return result;", "    std::string vowels = \"aeiou\"\
    ;\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   int index = -1;\n    for(int i = word.length() - 1; i >= 0; i--) {\n     \
    \   if(consonants.find(word[i]) != std::string::npos) {\n            for(int j\
    \ = i - 1; j >= 0; j--) {\n                if(vowels.find(word[j]) != std::string::npos)\
    \ {\n                    index = j;\n                    break;\n            \
    \    }\n            }\n            break;\n        }\n    }\n    if(index == -1)\
    \ {\n        return \"\";\n    }\n    return word.substr(index, 1);", "  std::string\
    \ vowels = \"aeiou\";\n  int index = -1;\n  for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos) {\n      index\
    \ = i;\n      break;\n    }\n  }\n  if (index == -1) return \"\";\n  for (int\
    \ i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos)\
    \ {\n      return word.substr(index, 1);\n    }\n  }\n  return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_dist = INT_MAX;\n    for (int i\
    \ = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    if\
    \ (j - i < min_dist) {\n                        min_dist = j - i;\n          \
    \              result = word[i];\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int pos = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            if (pos == -1) {\n                pos = i;\n            } else\
    \ {\n                for (int j = pos; j >= i; j--) {\n                    if\
    \ (vowels.find(word[j]) != std::string::npos) {\n                        result\
    \ = word[j];\n                        break;\n                    }\n        \
    \        }\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int index = -1;\n   \
    \ for(int i = word.length() - 1; i >= 0; i--) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            if(i == word.length() - 1) {\n        \
    \        return \"\";\n            }\n            for(int j = i + 1; j < word.length();\
    \ j++) {\n                if(vowels.find(word[j]) != std::string::npos) {\n  \
    \                  index = j;\n                    break;\n                }\n\
    \            }\n            break;\n        }\n    }\n    if(index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(index, 1);", "    std::string\
    \ vowels = \"aeiou\";\n    int index = -1;\n    for (int i = word.size() - 1;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           index = i;\n            break;\n        }\n    }\n    if (index ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int index = -1;\n    for(int i = word.length() - 1; i >= 0; i--) {\n  \
    \      if(consonants.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if(index == -1) return \"\"\
    ;\n    for(int i = index + 1; i < word.length(); i++) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            return word.substr(i, 1);\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "  std::string vowels\
    \ = \"aeiou\";\n  int pos = -1;\n  for (int i = word.size() - 1; i >= 0; i--)\
    \ {\n    if (vowels.find(word[i]) != std::string::npos) {\n      pos = i;\n  \
    \    break;\n    }\n  }\n  if (pos == -1) return \"\";\n  for (int i = pos - 1;\
    \ i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos) {\n     \
    \ return word.substr(pos, 1);\n    }\n  }\n  return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int pos = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    pos = j;\n                    break;\n\
    \                }\n            }\n            break;\n        }\n    }\n    if\
    \ (pos != -1) {\n        result = word[pos];\n    }\n    return result;", "  std::string\
    \ vowels = \"aeiou\";\n  int pos = -1;\n  for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n    if (vowels.find(word[i]) != std::string::npos) {\n      pos = i;\n\
    \      break;\n    }\n  }\n  if (pos == -1) {\n    return \"\";\n  }\n  for (int\
    \ i = pos - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos)\
    \ {\n      return word.substr(pos, 1);\n    }\n  }\n  return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    int index = word.size() - 1;\n    int vowel_index =\
    \ -1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            vowel_index = index;\n            break;\n        }\n       \
    \ index--;\n    }\n    if (vowel_index == -1) {\n        return \"\";\n    }\n\
    \    index = vowel_index - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ == std::string::npos) {\n            return word[vowel_index];\n        }\n\
    \        index--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (vowels.find(word[j]) != std::string::npos) {\n                    if (j\
    \ - i < min_distance) {\n                        min_distance = j - i;\n     \
    \                   result = word[j];\n                    }\n               \
    \     break;\n                }\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string closest_vowel = \"\";\n    int min_distance = INT_MAX;\n  \
    \  for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            int j = i - 1;\n            while (j >= 0\
    \ && consonants.find(word[j]) == std::string::npos) {\n                j--;\n\
    \            }\n            if (j >= 0) {\n                int k = i + 1;\n  \
    \              while (k < word.size() && consonants.find(word[k]) == std::string::npos)\
    \ {\n                    k++;\n                }\n                if (k < word.size())\
    \ {\n                    if (min_distance > k - j) {\n                       \
    \ min_distance = k - j;\n                        closest_vowel = word[i];\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return closest_vowel;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = 0;\n    int min_index = 0;\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            for (int j = index + 1; j < word.length(); j++) {\n      \
    \          if (consonants.find(word[j]) != std::string::npos) {\n            \
    \        if (j - index < min_distance) {\n                        min_distance\
    \ = j - index;\n                        min_index = index;\n                 \
    \   }\n                    break;\n                }\n            }\n        }\n\
    \    }\n    if (min_distance != INT_MAX) {\n        result = word[min_index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    if\
    \ (j - i < min_distance) {\n                        min_distance = j - i;\n  \
    \                      result = word[i];\n                    }\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n    }\n    return\
    \ \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    while (i >= 0) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            break;\n        }\n        i--;\n    }\n    if (i == -1) {\n\
    \        return \"\";\n    }\n    int j = i - 1;\n    while (j >= 0) {\n     \
    \   if (vowels.find(word[j]) != std::string::npos) {\n            break;\n   \
    \     }\n        j--;\n    }\n    if (j == -1) {\n        return \"\";\n    }\n\
    \    return word.substr(j, 1);", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) == std::string::npos) {\n            return word[index];\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n\tstd::string result = \"\";\n\tint index = -1;\n\tint min_distance = INT_MAX;\n\
    \tfor (int i = 0; i < word.length(); i++) {\n\t\tif (vowels.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tint distance = 0;\n\t\t\tfor (int j = i; j < word.length(); j++) {\n\
    \t\t\t\tif (consonants.find(word[j]) != std::string::npos) {\n\t\t\t\t\tdistance\
    \ = j - i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (distance < min_distance)\
    \ {\n\t\t\t\tmin_distance = distance;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\
    }\n\tif (index != -1) {\n\t\tresult = word[index];\n\t}\n\treturn result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.length(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length();\n    int pos = len -\
    \ 1;\n    while(pos >= 0) {\n        if(vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if(pos == len - 1) return \"\";\n            if(vowels.find(word[pos\
    \ + 1]) == std::string::npos) return word.substr(pos, 1);\n        }\n       \
    \ pos--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    int len = word.length();\n    for(int i = len - 1; i >= 0; i--) {\n     \
    \   if(vowels.find(word[i]) != std::string::npos) {\n            if(i == len -\
    \ 1) {\n                return \"\";\n            }\n            if(vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n    }\n    return \"\";", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int min_distance = word.size();\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int k = i + 1;\n                while (k < word.size() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.size()) {\n                    if (min_distance > k -\
    \ j) {\n                        min_distance = k - j;\n                      \
    \  result = word[i];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if\
    \ (consonants.find(word[i]) != std::string::npos) {\n            pos = i;\n  \
    \          break;\n        }\n    }\n    if (pos == -1) return \"\";\n    for\
    \ (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            return std::string(1, word[i]);\n        }\n    }\n    return\
    \ \"\";", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\"\
    ;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tresult = word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn result;", "    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n \
    \   int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n      \
    \      break;\n        }\n    }\n    if (pos == -1) {\n        return \"\";\n\
    \    }\n    for (int i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(pos, 1);\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = 0;\n    for(int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if(consonants.find(word[i]) != std::string::npos) {\n   \
    \         index = i;\n            break;\n        }\n    }\n    for(int i = index\
    \ - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int pos = word.length()\
    \ - 1;\n    while (pos > 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (vowels.find(word[pos - 1]) == std::string::npos) {\n    \
    \            return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::vector<char> vowels = {'a', 'e', 'i', 'o',\
    \ 'u'};\n    std::vector<char> consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n   \
    \ std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (std::find(consonants.begin(), consonants.end(),\
    \ word[i]) != consonants.end()) {\n            index = i;\n            break;\n\
    \        }\n    }\n    if (index == -1) {\n        return result;\n    }\n   \
    \ int min_index = -1;\n    int min_distance = INT_MAX;\n    for (int i = index;\
    \ i >= 0; i--) {\n        if (std::find(vowels.begin(), vowels.end(), word[i])\
    \ != vowels.end()) {\n            if (min_distance > index - i) {\n          \
    \      min_distance = index - i;\n                min_index = i;\n           \
    \ }\n        }\n    }\n    if (min_index != -1) {\n        result = word[min_index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int word_size\
    \ = word.size();\n    int vowel_pos = -1;\n    int consonant_pos = -1;\n    for\
    \ (int i = word_size - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            vowel_pos = i;\n            break;\n     \
    \   }\n    }\n    for (int i = vowel_pos - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            consonant_pos = i;\n            break;\n\
    \        }\n    }\n    if (vowel_pos == -1 || consonant_pos == -1) {\n       \
    \ return \"\";\n    }\n    return word.substr(vowel_pos, 1);", "  std::string\
    \ vowels = \"aeiou\";\n  std::string consonants = \"bcdfghjklmnpqrstvwxyz\";\n\
    \  std::string result = \"\";\n  int index = 0;\n  for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n    if (consonants.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  for (int i = index; i >= 0;\
    \ i--) {\n    if (vowels.find(word[i]) != std::string::npos) {\n      result =\
    \ word[i];\n      break;\n    }\n  }\n  return result;", "    std::string vowels\
    \ = \"aeiou\";\n    int index = -1;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   index = i;\n            break;\n        }\n    }\n    if (index == -1) {\n\
    \        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n   \
    \     if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    for\
    \ (int k = j + 1; k < word.size(); k++) {\n                        if (vowels.find(word[k])\
    \ != std::string::npos) {\n                            if (k - i < min_distance)\
    \ {\n                                min_distance = k - i;\n                 \
    \               result = word[k];\n                            }\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiou\";\n  \
    \  std::string result = \"\";\n    int min_index = word.size();\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            if (i > 0 && vowels.find(word[i - 1]) == std::string::npos) {\n\
    \                if (i < min_index) {\n                    min_index = i;\n  \
    \                  result = word[i];\n                }\n            }\n     \
    \   }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    int i = word.size() - 1;\n    while (i >= 0) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            break;\n        }\n        i--;\n    }\n\
    \    if (i < 0) {\n        return \"\";\n    }\n    int j = i - 1;\n    while\
    \ (j >= 0) {\n        if (vowels.find(word[j]) != std::string::npos) {\n     \
    \       break;\n        }\n        j--;\n    }\n    if (j < 0) {\n        return\
    \ \"\";\n    }\n    return word.substr(j, 1);", "    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  if(i == len - 1) {\n                return \"\";\n            }\n         \
    \   else if(word[i - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' ||\
    \ word[i - 1] == 'o' || word[i - 1] == 'u') {\n                return \"\";\n\
    \            }\n            else {\n                return word.substr(i, 1);\n\
    \            }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            for(int j = i-1; j >= 0; j--) {\n     \
    \           if(vowels.find(word[j]) != std::string::npos) {\n                \
    \    return std::string(1, word[j]);\n                }\n            }\n     \
    \   }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n \
    \   std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    if\
    \ (j - i < min_distance) {\n                        min_distance = j - i;\n  \
    \                      result = word[i];\n                    }\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return result;\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n    }\n\
    \    return result;", "    int n = word.size();\n    for(int i = n-1; i >= 0;\
    \ i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            if(word[i+1] != 'a' && word[i+1] != 'e' &&\
    \ word[i+1] != 'i' && word[i+1] != 'o' && word[i+1] != 'u') {\n              \
    \  return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;", "\tstd::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\tint index\
    \ = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ != -1) {\n\t\tfor (int i = index - 1; i >= 0; i--) {\n\t\t\tif (vowels.find(word[i])\
    \ == std::string::npos) {\n\t\t\t\tresult = word[index];\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiou\";\n   \
    \ std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int i\
    \ = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size()) {\n                int distance = j - i;\n               \
    \ if (distance < min_distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (consonants.find(word[i]) != std::string::npos) {\n            pos = i;\n\
    \            break;\n        }\n    }\n    if (pos == -1) {\n        return \"\
    \";\n    }\n    for (int i = pos + 1; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            return word.substr(i, 1);\n        }\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    int\
    \ n = word.length();\n    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == n-1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "  std::string vowels = \"aeiouAEIOU\";\n  std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  std::string\
    \ result = \"\";\n  int index = -1;\n  for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n    if (consonants.find(word[i]) != std::string::npos) {\n      for\
    \ (int j = i; j >= 0; j--) {\n        if (vowels.find(word[j]) != std::string::npos)\
    \ {\n          index = j;\n          break;\n        }\n      }\n      break;\n\
    \    }\n  }\n  if (index != -1) {\n    for (int i = index; i >= 0; i--) {\n  \
    \    if (consonants.find(word[i]) != std::string::npos) {\n        result = word[index];\n\
    \        break;\n      }\n    }\n  }\n  return result;", "\tstd::string vowels\
    \ = \"aeiouAEIOU\";\n\tint index = word.size() - 1;\n\twhile (index >= 0) {\n\t\
    \tif (vowels.find(word[index]) != std::string::npos) {\n\t\t\tif (index == 0)\
    \ {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse if (vowels.find(word[index - 1])\
    \ == std::string::npos) {\n\t\t\t\treturn word.substr(index, 1);\n\t\t\t}\n\t\t\
    }\n\t\tindex--;\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = 0;\n    int min_index = 0;\n\
    \    int min_distance = 0;\n    int distance = 0;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       index = i;\n            for (int j = 0; j < vowels.length(); j++) {\n\
    \                if (word.find(vowels[j], index) != std::string::npos) {\n   \
    \                 distance = word.find(vowels[j], index) - index;\n          \
    \          if (distance < min_distance || min_distance == 0) {\n             \
    \           min_distance = distance;\n                        min_index = word.find(vowels[j],\
    \ index);\n                        result = vowels[j];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             distance++;\n            }\n            if (distance < min_distance)\
    \ {\n                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int min_distance = INT_MAX;\n    int min_index = -1;\n    for (int i =\
    \ 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i + 1;\n            while (j < word.size() && consonants.find(word[j])\
    \ != std::string::npos) {\n                j++;\n            }\n            if\
    \ (j < word.size() && vowels.find(word[j]) == std::string::npos) {\n         \
    \       if (j - i < min_distance) {\n                    min_distance = j - i;\n\
    \                    min_index = i;\n                }\n            }\n      \
    \  }\n    }\n    if (min_index == -1) {\n        return \"\";\n    }\n    return\
    \ word.substr(min_index, 1);", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    int pos\
    \ = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            if (i == 0) {\n                return result;\n\
    \            }\n            return word[index];\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.size(); j++)\
    \ {\n                if (consonants.find(word[j]) != std::string::npos) {\n  \
    \                  if (j - i < min_distance) {\n                        min_distance\
    \ = j - i;\n                        result = word[i];\n                    }\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          for (int j = i; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         index = j;\n                    break;\n                }\n        \
    \    }\n            break;\n        }\n    }\n    for (int i = index + 1; i <\
    \ word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = \"\";\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (closest_vowel_index == -1 ||\
    \ i - j < closest_vowel_index) {\n                        closest_vowel_index\
    \ = i - j;\n                        closest_vowel = word[j];\n               \
    \     }\n                }\n            }\n        }\n    }\n    return closest_vowel;",
  "    std::string vowels = \"aeiou\";\n    int pos = word.length() - 1;\n    while\
    \ (pos > 0) {\n        if (vowels.find(word[pos]) != std::string::npos) {\n  \
    \          if (vowels.find(word[pos - 1]) == std::string::npos) {\n          \
    \      return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    if\
    \ (j - i < min_distance) {\n                        min_distance = j - i;\n  \
    \                      result = word[i];\n                    }\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string result\
    \ = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i; j < word.length(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    distance = j - i;\n           \
    \         break;\n                }\n            }\n            if (distance <\
    \ min_distance) {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if (index != -1) {\n        result\
    \ = word[index];\n    }\n    return result;", "\tstd::string vowels = \"aeiou\"\
    ;\n\tint index = -1;\n\tfor (int i = word.size() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ == -1) {\n\t\treturn \"\";\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\
    \tif (vowels.find(word[i]) == std::string::npos) {\n\t\t\treturn word.substr(index,\
    \ 1);\n\t\t}\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    std::string result = \"\";\n    int index = -1;\n    int distance = INT_MAX;\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.length();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   if (j - i < distance) {\n                        distance\
    \ = j - i;\n                        index = j;\n                    }\n      \
    \          }\n            }\n        }\n    }\n    if (index != -1) {\n      \
    \  result = word[index];\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string res = \"\";\n    int min_dist = INT_MAX;\n    for (int i =\
    \ 0; i < word.size(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (vowels.find(word[j]) != std::string::npos) {\n                    if (j\
    \ - i < min_dist) {\n                        min_dist = j - i;\n             \
    \           res = word[j];\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return res;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int vowel_index = -1;\n    int consonant_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            vowel_index = i;\n            break;\n\
    \        }\n    }\n    for (int i = vowel_index - 1; i >= 0; i--) {\n        if\
    \ (consonants.find(word[i]) != std::string::npos) {\n            consonant_index\
    \ = i;\n            break;\n        }\n    }\n    if (vowel_index != -1 && consonant_index\
    \ != -1) {\n        result = word[vowel_index];\n    }\n    return result;", " \
    \   std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiou\";\n    std::string result\
    \ = \"\";\n    int distance = INT_MAX;\n    for (int i = word.size() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int temp = i - j;\n                if (temp < distance) {\n         \
    \           distance = temp;\n                    result = word[i];\n        \
    \        }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "  std::string vowels = \"aeiouAEIOU\";\n  int pos = word.size() -\
    \ 1;\n  while (pos >= 0) {\n    if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n      if (pos == 0) {\n        return \"\";\n      }\n      if (vowels.find(word[pos\
    \ - 1]) == std::string::npos) {\n        return word.substr(pos, 1);\n      }\n\
    \    }\n    pos--;\n  }\n  return \"\";", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int index = word.size() - 1;\n    while\
    \ (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      index = i;\n            break;\n        }\n    }\n    if (index == -1)\
    \ {\n        return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int len = word.length();\n    int i = len - 1;\n    while(i >= 0) {\n \
    \       if(consonants.find(word[i]) != std::string::npos) {\n            int j\
    \ = i - 1;\n            while(j >= 0) {\n                if(vowels.find(word[j])\
    \ != std::string::npos) {\n                    return word.substr(j, 1);\n   \
    \             }\n                j--;\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(consonants.find(word[i]) != std::string::npos)\
    \ {\n            for(int j = i-1; j >= 0; j--) {\n                if(vowels.find(word[j])\
    \ != std::string::npos) {\n                    return word.substr(j, 1);\n   \
    \             }\n            }\n        }\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiou\";\n    int pos = -1;\n    for (int i = word.size() - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         pos = i;\n            break;\n        }\n    }\n    if (pos == -1) {\n\
    \        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(pos,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = 0; j < vowels.size(); j++) {\n                if\
    \ (word.find(vowels[j]) != std::string::npos) {\n                    int distance\
    \ = abs(i - word.find(vowels[j]));\n                    if (distance < min_distance)\
    \ {\n                        min_distance = distance;\n                      \
    \  result = vowels[j];\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return result;", "  std::string vowels = \"aeiouAEIOU\"\
    ;\n  int index = -1;\n  for (int i = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ != std::string::npos) {\n      index = i;\n      break;\n    }\n  }\n  if (index\
    \ == -1) {\n    return \"\";\n  }\n  for (int i = index - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) == std::string::npos) {\n      return word.substr(index,\
    \ 1);\n    }\n  }\n  return \"\";", "    std::string vowels = \"aeiou\";\n   \
    \ std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n  int min_distance\
    \ = word.size();\n  for (int i = 0; i < word.size(); i++) {\n    for (int j =\
    \ 0; j < vowels.size(); j++) {\n      if (word[i] == vowels[j]) {\n        int\
    \ distance = word.size() - i - 1;\n        if (distance < min_distance) {\n  \
    \        min_distance = distance;\n          result = word[i];\n        }\n  \
    \    }\n    }\n  }\n  return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (consonants.find(word[i]) != std::string::npos) {\n            pos = i;\n\
    \            break;\n        }\n    }\n    if (pos == -1) {\n        return \"\
    \";\n    }\n    for (int i = pos + 1; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            return std::string(1, word[i]);\n     \
    \   }\n    }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.length(); j++) {\n             \
    \   if (vowels.find(word[j]) != std::string::npos) {\n                    if (index\
    \ == -1) {\n                        index = j;\n                    } else {\n\
    \                        if (j < index) {\n                            index =\
    \ j;\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    int\
    \ pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            break;\n        }\n        i--;\n    }\n\
    \    if(i < 0) {\n        return \"\";\n    }\n    int j = i - 1;\n    while(j\
    \ >= 0) {\n        if(vowels.find(word[j]) != std::string::npos) {\n         \
    \   break;\n        }\n        j--;\n    }\n    if(j < 0) {\n        return \"\
    \";\n    }\n    int k = i + 1;\n    while(k < len) {\n        if(vowels.find(word[k])\
    \ != std::string::npos) {\n            break;\n        }\n        k++;\n    }\n\
    \    if(k == len) {\n        return \"\";\n    }\n    if(k - i < i - j) {\n  \
    \      return word.substr(k, 1);\n    }\n    return word.substr(j, 1);", "   \
    \ std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (consonants.find(word[i]) != std::string::npos) {\n            pos = i;\n\
    \            break;\n        }\n    }\n    if (pos == -1) {\n        return \"\
    \";\n    }\n    for (int i = pos + 1; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            return std::string(1, word[i]);\n     \
    \   }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n \
    \   std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n       \
    \ if (consonants.find(word[i]) != std::string::npos) {\n            pos = i;\n\
    \            break;\n        }\n    }\n    if (pos == -1) return \"\";\n    int\
    \ min_dist = INT_MAX;\n    int min_pos = -1;\n    for (int i = 0; i < vowels.size();\
    \ i++) {\n        int pos_vowel = word.find(vowels[i]);\n        if (pos_vowel\
    \ != std::string::npos && pos_vowel < pos) {\n            if (pos - pos_vowel\
    \ < min_dist) {\n                min_dist = pos - pos_vowel;\n               \
    \ min_pos = pos_vowel;\n            }\n        }\n    }\n    if (min_pos == -1)\
    \ return \"\";\n    return word.substr(min_pos, 1);", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        for (int j = 0; j < vowels.size(); j++)\
    \ {\n            if (word[i] == vowels[j]) {\n                int distance = 0;\n\
    \                for (int k = i; k < word.size(); k++) {\n                   \
    \ if (consonants.find(word[k]) != std::string::npos) {\n                     \
    \   distance++;\n                    } else {\n                        break;\n\
    \                    }\n                }\n                if (distance < min_distance)\
    \ {\n                    min_distance = distance;\n                    result\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return result;",
  "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n\tstd::string result = \"\";\n\tint index = -1;\n\tfor (int i = word.length()\
    \ - 1; i >= 0; i--) {\n\t\tif (consonants.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tfor (int j = i - 1; j >= 0; j--) {\n\t\t\t\tif (vowels.find(word[j])\
    \ != std::string::npos) {\n\t\t\t\t\tindex = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index != -1) {\n\t\tresult = word[index];\n\
    \t}\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int pos = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    pos = j;\n                    break;\n\
    \                }\n            }\n            break;\n        }\n    }\n    if\
    \ (pos != -1) {\n        result = word[pos];\n    }\n    return result;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    for\
    \ (int k = j + 1; k < word.size(); k++) {\n                        if (vowels.find(word[k])\
    \ != std::string::npos) {\n                            if (k - i < min_distance)\
    \ {\n                                min_distance = k - i;\n                 \
    \               result = word[k];\n                            }\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int len = word.length();\n    for(int i = len - 1; i >= 0; i--) {\n   \
    \     if(vowels.find(word[i]) != std::string::npos) {\n            if(i == len\
    \ - 1)\n                return \"\";\n            if(vowels.find(word[i+1]) ==\
    \ std::string::npos)\n                return word.substr(i, 1);\n        }\n \
    \   }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    int min_dist = INT_MAX;\n    int\
    \ min_pos = -1;\n    for (int i = 0; i < vowels.size(); i++) {\n        int pos_vowel\
    \ = word.find(vowels[i]);\n        if (pos_vowel != std::string::npos && pos_vowel\
    \ > pos) {\n            if (pos_vowel - pos < min_dist) {\n                min_dist\
    \ = pos_vowel - pos;\n                min_pos = pos_vowel;\n            }\n  \
    \      }\n    }\n    if (min_pos == -1) return \"\";\n    return word.substr(min_pos,\
    \ 1);", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int distance\
    \ = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n            \
    \    if (vowels.find(word[j]) != std::string::npos) {\n                    break;\n\
    \                }\n                distance++;\n            }\n            if\
    \ (distance < min_distance) {\n                min_distance = distance;\n    \
    \            result = word[i];\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    int n = word.size();\n    for(int i =\
    \ n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n\
    \            if(i > 0 && vowels.find(word[i-1]) == std::string::npos) {\n    \
    \            return word.substr(i, 1);\n            }\n            if(i < n-1\
    \ && vowels.find(word[i+1]) == std::string::npos) {\n                return word.substr(i,\
    \ 1);\n            }\n        }\n    }\n    return \"\";", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (vowels.find(word[j]) != std::string::npos) {\n                    if (j\
    \ - i < min_distance) {\n                        min_distance = j - i;\n     \
    \                   result = word[j];\n                    }\n               \
    \     break;\n                }\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string closest_vowel = \"\";\n  \
    \  int closest_vowel_index = -1;\n    for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   if (closest_vowel_index == -1) {\n                closest_vowel_index = i;\n\
    \                closest_vowel = word[i];\n            } else {\n            \
    \    if (i < closest_vowel_index) {\n                    closest_vowel_index =\
    \ i;\n                    closest_vowel = word[i];\n                }\n      \
    \      }\n        } else {\n            if (closest_vowel_index != -1) {\n   \
    \             return closest_vowel;\n            }\n        }\n    }\n    return\
    \ \"\";", "  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int min_distance = INT_MAX;\n  for (int i = 0; i < word.size(); i++) {\n   \
    \ if (vowels.find(word[i]) != std::string::npos) {\n      int distance = 0;\n\
    \      for (int j = i + 1; j < word.size(); j++) {\n        if (vowels.find(word[j])\
    \ != std::string::npos) {\n          break;\n        }\n        distance++;\n\
    \      }\n      if (distance < min_distance) {\n        min_distance = distance;\n\
    \        result = word[i];\n      }\n    }\n  }\n  return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            if (closest_vowel_index == -1) {\n    \
    \            closest_vowel_index = i;\n                closest_vowel = word[i];\n\
    \            } else {\n                if (i < closest_vowel_index) {\n      \
    \              closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        } else {\n            if (closest_vowel_index\
    \ != -1) {\n                return closest_vowel;\n            }\n        }\n\
    \    }\n    return \"\";", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tstd::string\
    \ result = \"\";\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0;\
    \ i--) {\n\t\tif (consonants.find(word[i]) != std::string::npos) {\n\t\t\tfor\
    \ (int j = i - 1; j >= 0; j--) {\n\t\t\t\tif (vowels.find(word[j]) != std::string::npos)\
    \ {\n\t\t\t\t\tindex = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (index != -1) {\n\t\tresult = word[index];\n\t}\n\treturn result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string closest_vowel = \"\";\n    int closest_vowel_index = -1;\n\
    \    for (int i = word.length() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.length();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   if (closest_vowel_index == -1 || j < closest_vowel_index)\
    \ {\n                        closest_vowel_index = j;\n                      \
    \  closest_vowel = word[j];\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return closest_vowel;", "  std::string vowels\
    \ = \"aeiou\";\n  std::string result = \"\";\n  int min_distance = INT_MAX;\n\
    \  for (int i = 0; i < word.size(); i++) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      int j = i + 1;\n      while (j < word.size() && vowels.find(word[j])\
    \ != std::string::npos) {\n        j++;\n      }\n      if (j < word.size()) {\n\
    \        int distance = j - i;\n        if (distance < min_distance) {\n     \
    \     min_distance = distance;\n          result = word[i];\n        }\n     \
    \ }\n    }\n  }\n  return result;", "    std::string vowels = \"aeiouAEIOU\";\n\
    \    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n       \
    \ if (vowels.find(word[i]) != std::string::npos) {\n            pos = i;\n   \
    \         break;\n        }\n    }\n    if (pos == -1) return \"\";\n    for (int\
    \ i = pos - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (consonants.find(word[i]) != std::string::npos) {\n            for\
    \ (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (vowels.find(word[j]) != std::string::npos) {\n                    if (j\
    \ - i < min_distance) {\n                        min_distance = j - i;\n     \
    \                   result = word[j];\n                    }\n               \
    \     break;\n                }\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.size(); j++)\
    \ {\n                if (vowels.find(word[j]) == std::string::npos) {\n      \
    \              if (j - i < min_distance) {\n                        min_distance\
    \ = j - i;\n                        result = word[i];\n                    }\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int word_size\
    \ = word.size();\n    int i = word_size - 1;\n    while(i >= 0) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while(j >=\
    \ 0) {\n                if(vowels.find(word[j]) != std::string::npos) {\n    \
    \                return word.substr(j, 1);\n                }\n              \
    \  j--;\n            }\n        }\n        i--;\n    }\n    return \"\";", "\t\
    std::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\tint index = word.length()\
    \ - 1;\n\twhile (index >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos)\
    \ {\n\t\t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn\
    \ result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         index = j;\n                    break;\n                }\n        \
    \    }\n            if (index != -1) {\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    for (int i = index - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n         \
    \   result = word[index];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            if (i == 0) {\n                return \"\
    \";\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos)\
    \ {\n                return word.substr(i - 1, 1);\n            }\n        }\n\
    \        i--;\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    int n = word.length();\n    int i = n - 1;\n    while(i >= 0) {\n     \
    \   if(vowels.find(word[i]) != std::string::npos) {\n            if(i == n - 1)\
    \ {\n                return \"\";\n            }\n            if(vowels.find(word[i\
    \ + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n \
    \           }\n        }\n        i--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int index = word.size()\
    \ - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            result = word[index];\n            break;\n        }\n      \
    \  index--;\n    }\n    return result;", "    int i = word.size() - 1;\n    while\
    \ (i >= 0) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u') {\n            if (i == word.size() - 1) {\n\
    \                return \"\";\n            }\n            if (word[i - 1] == 'a'\
    \ || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i\
    \ - 1] == 'u') {\n                return \"\";\n            }\n            return\
    \ word.substr(i, 1);\n        }\n        i--;\n    }\n    return \"\";", "   \
    \ std::string vowels = \"aeiou\";\n    int pos = word.size() - 1;\n    while (pos\
    \ >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos) {\n      \
    \      if (pos > 0 && vowels.find(word[pos - 1]) == std::string::npos) {\n   \
    \             return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int min_index = -1;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (min_index == -1) {\n      \
    \                  min_index = j;\n                        result = word[j];\n\
    \                    } else if (j < min_index) {\n                        min_index\
    \ = j;\n                        result = word[j];\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int index = -1;\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) return \"\";\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            return word.substr(index,\
    \ 1);\n        }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    int index = 0;\n    int min_index = word.length();\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            if (index > 0 &&\
    \ index < min_index) {\n                if (vowels.find(word[index - 1]) == std::string::npos\
    \ && vowels.find(word[index + 1]) == std::string::npos) {\n                  \
    \  min_index = index;\n                    result = word[index];\n           \
    \     }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    int len = word.length();\n    for(int i = len - 1;\
    \ i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n  \
    \          if(i == len - 1) {\n                return \"\";\n            }\n \
    \           if(vowels.find(word[i + 1]) == std::string::npos) {\n            \
    \    return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiou\";\n    std::string result = \"\";\n \
    \   int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int distance\
    \ = word.size() - i - 1;\n            if (distance < min_distance) {\n       \
    \         min_distance = distance;\n                result = word[i];\n      \
    \      }\n        }\n    }\n    return result;", "    std::string vowels = \"\
    aeiou\";\n    std::string result = \"\";\n    int min_dist = INT_MAX;\n    for\
    \ (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int dist = 0;\n            for (int j = i + 1; j < word.size();\
    \ j++) {\n                if (vowels.find(word[j]) != std::string::npos) {\n \
    \                   break;\n                }\n                dist++;\n     \
    \       }\n            if (dist < min_dist) {\n                min_dist = dist;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\
    \";\n\tint distance = 0;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\
    \tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tif (i == word.length()\
    \ - 1) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tif (vowels.find(word[i + 1])\
    \ != std::string::npos) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (result == \"\"\
    ) {\n\t\t\t\tresult = word[i];\n\t\t\t\tdistance = word.length() - i;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tif (word.length() - i < distance) {\n\t\t\t\t\tresult\
    \ = word[i];\n\t\t\t\t\tdistance = word.length() - i;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          if (index == -1) {\n                index = i;\n            } else\
    \ {\n                if (vowels.find(word[i + 1]) != std::string::npos) {\n  \
    \                  result = word[i + 1];\n                    break;\n       \
    \         }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    int min_distance =\
    \ INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i; j < word.size(); j++) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    distance = 0;\n                } else\
    \ {\n                    distance++;\n                }\n                if (distance\
    \ > 1) {\n                    break;\n                }\n            }\n     \
    \       if (distance == 1) {\n                if (min_distance > distance) {\n\
    \                    min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;", "\t\
    std::string vowels = \"aeiou\";\n\tint len = word.length();\n\tint pos = len -\
    \ 1;\n\twhile (pos >= 0) {\n\t\tif (vowels.find(word[pos]) != std::string::npos)\
    \ {\n\t\t\tif (pos == 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tif (vowels.find(word[pos\
    \ - 1]) == std::string::npos) {\n\t\t\t\treturn word.substr(pos, 1);\n\t\t\t}\n\
    \t\t}\n\t\tpos--;\n\t}\n\treturn \"\";", "    std::string vowels = \"aeiou\";\n\
    \    int index = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word.substr(index, 1);\n       \
    \ }\n    }\n    return \"\";", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ int len = word.length();\n    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i])\
    \ != std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \ }\n    return \"\";", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;", "    std::string vowels = \"aeiou\";\n    int index = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            index = i;\n            break;\n        }\n\
    \    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int i =\
    \ index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";", "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\
    \";\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--) {\n\
    \        if (consonants.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    for (int i = index; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   result = word[i];\n            break;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result += word[index];\n    }\n    return\
    \ result;", "  std::string vowels = \"aeiouAEIOU\";\n  std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  std::string result = \"\
    \";\n  int pos = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if\
    \ (consonants.find(word[i]) != std::string::npos) {\n      for (int j = i - 1;\
    \ j >= 0; j--) {\n        if (vowels.find(word[j]) != std::string::npos) {\n \
    \         result = word[j];\n          pos = j;\n          break;\n        }\n\
    \      }\n      if (pos != -1) break;\n    }\n  }\n  return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int index = -1;\n    for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            if (index == -1) {\n                index = i;\n            }\
    \ else {\n                for (int j = i + 1; j < index; j++) {\n            \
    \        if (vowels.find(word[j]) != std::string::npos) {\n                  \
    \      result = word[j];\n                        break;\n                   \
    \ }\n                }\n                break;\n            }\n        }\n   \
    \ }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string\
    \ result = \"\";\n    int index = 0;\n    for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos) {\n  \
    \          index = i;\n            break;\n        }\n    }\n    for (int i =\
    \ index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    int distance = INT_MAX;\n    for (int i = word.size() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            int j = i - 1;\n            while (j >= 0 && vowels.find(word[j])\
    \ != std::string::npos) {\n                j--;\n            }\n            if\
    \ (j >= 0) {\n                if (i - j < distance) {\n                    distance\
    \ = i - j;\n                    result = word[i];\n                }\n       \
    \     }\n        }\n    }\n    return result;", "    std::string vowels = \"aeiou\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int j = i - 1;\n            while (j >= 0 && vowels.find(word[j])\
    \ != std::string::npos) {\n                j--;\n            }\n            if\
    \ (j >= 0) {\n                int distance = i - j;\n                if (distance\
    \ < min_distance) {\n                    min_distance = distance;\n          \
    \          result = word[i];\n                }\n            }\n        }\n  \
    \  }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n\
    \                if (vowels.find(word[j]) != std::string::npos) {\n          \
    \          break;\n                }\n                distance++;\n          \
    \  }\n            if (distance < min_distance) {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;", "    std::string vowels = \"aeiou\";\n    std::string\
    \ result = \"\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n\
    \            break;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    int pos = word.size() - 1;\n    while (pos >= 0) {\n\
    \        if (vowels.find(word[pos]) != std::string::npos) {\n            if (pos\
    \ == 0) {\n                return \"\";\n            }\n            if (vowels.find(word[pos\
    \ - 1]) == std::string::npos) {\n                return word.substr(pos, 1);\n\
    \            }\n        }\n        pos--;\n    }\n    return \"\";", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (vowels.find(word[j]) != std::string::npos) {\n                    if (j\
    \ - i < min_distance) {\n                        min_distance = j - i;\n     \
    \                   result = word[j];\n                    }\n               \
    \     break;\n                }\n            }\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    std::string result = \"\";\n    int min_distance = INT_MAX;\n    for (int\
    \ i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.size(); j++) {\n               \
    \ if (consonants.find(word[j]) != std::string::npos) {\n                    int\
    \ distance = j - i;\n                    if (distance < min_distance) {\n    \
    \                    min_distance = distance;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = word.size()\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;", "  std::string vowels = \"aeiou\";\n  int index = -1;\n  for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  if (index == -1) {\n    return\
    \ \"\";\n  }\n  for (int i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ == std::string::npos) {\n      return word.substr(index, 1);\n    }\n  }\n \
    \ return \"\";"]
stop_tokens:
- "\n}"
