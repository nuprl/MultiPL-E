name: HumanEval_51_remove_vowels
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function\
  \ that takes string and returns string without vowels.\n// >>> remove_vowels('')\n\
  // ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n\
  // ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\n\
  std::string remove_vowels(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"\
  ));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"\
  eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"\
  EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
completions: ["    std::string result;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (char c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string new_text = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            new_text += text[i];\n        }\n    }\n    return new_text;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (char c : text) {\n        if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result;\n    for (char c : text) {\n        if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "\tstd::string result;\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t\
    }\n\treturn result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (char c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "\tstd::string vowels\
    \ = \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (vowels.find(text[i]) == std::string::npos) {\n\t\t\tresult +=\
    \ text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string output = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            output += text[i];\n        }\n    }\n    return output;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "  std::string result;\n  for (int i = 0; i < text.size();\
    \ i++) {\n    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n      result += text[i];\n    }\n  }\n\
    \  return result;", "    std::string result;\n    for (char c : text) {\n    \
    \    if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A'\
    \ && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "\tstd::string result;\n\tfor (int i = 0;\
    \ i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tresult += text[i];\n\
    \t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\";\n   \
    \ std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result\
    \ = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (vowels.find(text[i])\
    \ == std::string::npos) {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;",
  "\tstd::string result;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result\
    \ = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (vowels.find(text[i])\
    \ == std::string::npos) {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    for (char c : text) {\n\
    \        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c !=\
    \ 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result.push_back(c);\n\
    \        }\n    }\n    return result;", "    std::string result;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (char c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    // your code here\n    std::string result;\n    for(int i=0;i<text.length();i++){\n\
    \        if(text[i]!='a' && text[i]!='e' && text[i]!='i' && text[i]!='o' && text[i]!='u'\
    \ && text[i]!='A' && text[i]!='E' && text[i]!='I' && text[i]!='O' && text[i]!='U'){\n\
    \            result+=text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "\tstd::string result;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (auto c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "\tstd::string result;\n\tfor (char c : text) {\n\t\tif (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c !=\
    \ 'O' && c != 'U') {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;", "\tstd::string\
    \ result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (auto c : text) {\n        if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\
    \tstd::string result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\t\
    if (vowels.find(text[i]) == std::string::npos) {\n\t\t\tresult += text[i];\n\t\
    \t}\n\t}\n\treturn result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "\tstd::string result;\n\
    \tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (char c : text) {\n        if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (char c : text) {\n     \
    \   if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' &&\
    \ c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result += text[i];\n        }\n    }\n    return result;", "\tstd::string\
    \ vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tfor (int i = 0; i\
    \ < text.length(); i++) {\n\t\tif (vowels.find(text[i]) == std::string::npos)\
    \ {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (char c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "\tstd::string vowels = \"aeiouAEIOU\";\n\
    \tstd::string result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\t\
    if (vowels.find(text[i]) == std::string::npos) {\n\t\t\tresult += text[i];\n\t\
    \t}\n\t}\n\treturn result;", "    std::string result;\n    for (char c : text)\
    \ {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c\
    \ != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result\
    \ += c;\n        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "\tstd::string vowels =\
    \ \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (vowels.find(text[i]) == std::string::npos) {\n\t\t\tresult +=\
    \ text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string result = \"\";\n \
    \   for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "\tstd::string result =\
    \ \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : text) {\n        if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ new_text = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if\
    \ (vowels.find(text[i]) == std::string::npos) {\n            new_text += text[i];\n\
    \        }\n    }\n    return new_text;", "    std::string result;\n    for (char\
    \ c : text) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n       \
    \     continue;\n        }\n        result += c;\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (vowels.find(text[i]) == std::string::npos)\
    \ {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "\tstd::string vowels\
    \ = \"aeiouAEIOU\";\n\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (vowels.find(text[i]) == std::string::npos) {\n\t\t\tresult +=\
    \ text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string result = \"\";\n \
    \   for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    // your code here\n\
    \    std::string result;\n    for(int i=0;i<text.length();i++){\n        if(text[i]!='a'\
    \ && text[i]!='e' && text[i]!='i' && text[i]!='o' && text[i]!='u' && text[i]!='A'\
    \ && text[i]!='E' && text[i]!='I' && text[i]!='O' && text[i]!='U'){\n        \
    \    result+=text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (char c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (auto c : text) {\n        if (c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "\tstd::string result = \"\";\n\tfor (int\
    \ i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tresult\
    \ += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result.push_back(c);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : text) {\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string result = \"\";\n    for (int i =\
    \ 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string new_text;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  new_text += text[i];\n        }\n    }\n    return new_text;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i]\
    \ != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (char c : text) {\n        if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "    std::string new_text = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            new_text\
    \ += text[i];\n        }\n    }\n    return new_text;", "\tstd::string result;\n\
    \tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (auto letter : text) {\n        if (letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n            result\
    \ += letter;\n        }\n    }\n    return result;", "    std::string vowels =\
    \ \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n         \
    \   result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (char c\
    \ : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n       \
    \     result += c;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    for (auto c : text) {\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n\
    \    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (char c : text) {\n  \
    \      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A'\
    \ && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (vowels.find(text[i]) == std::string::npos) {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    for (auto c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
  "\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\t\
    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i]\
    \ != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O'\
    \ && text[i] != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;",
  "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n      \
    \  if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result;\n    for (int i\
    \ = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e'\
    \ && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n          \
    \  result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n   \
    \ for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "\tstd::string result = \"\";\n\tfor (int i = 0; i < text.length();\
    \ i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n\t\t\tresult += text[i];\n\t\t}\n\t\
    }\n\treturn result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result;\n    for (char c : text) {\n  \
    \      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A'\
    \ && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] != 'a' && text[i]\
    \ != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A'\
    \ && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\
    \            result += text[i];\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (auto c : text) {\n        if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n   \
    \ return result;", "  std::string result = \"\";\n  for (int i = 0; i < text.length();\
    \ i++) {\n    if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i]\
    \ != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n      result += text[i];\n    }\n  }\n\
    \  return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i])\
    \ == std::string::npos) {\n            result += text[i];\n        }\n    }\n\
    \    return result;", "    std::string result = \"\";\n    for (int i = 0; i <\
    \ text.length(); i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i]\
    \ != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E'\
    \ && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] !=\
    \ 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I'\
    \ && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n   \
    \     }\n    }\n    return result;", "    std::string result = \"\";\n    for\
    \ (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n\
    \            result += c;\n        }\n    }\n    return result;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos)\
    \ {\n            result += text[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    for (int i = 0; i < text.length(); i++) {\n     \
    \   if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n   \
    \ }\n    return result;"]
stop_tokens:
- "\n}"
