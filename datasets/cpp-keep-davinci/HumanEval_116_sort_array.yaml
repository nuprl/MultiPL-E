name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort an array of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1,\
  \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
  \ -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nstd::vector<long>\
  \ sort_array(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["    std::vector<long> sorted_array;\n    std::vector<long> sorted_array_ones;\n\
    \    std::vector<long> sorted_array_zeros;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == 0) {\n            sorted_array_zeros.push_back(arr[i]);\n\
    \        } else {\n            sorted_array_ones.push_back(arr[i]);\n        }\n\
    \    }\n    std::sort(sorted_array_ones.begin(), sorted_array_ones.end());\n \
    \   std::sort(sorted_array_zeros.begin(), sorted_array_zeros.end());\n    sorted_array.insert(sorted_array.end(),\
    \ sorted_array_ones.begin(), sorted_array_ones.end());\n    sorted_array.insert(sorted_array.end(),\
    \ sorted_array_zeros.begin(), sorted_array_zeros.end());\n    return sorted_array;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto i : map) {\n\
    \    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    long num = i;\n    while (num) {\n      if (num & 1) {\n\
    \        count++;\n      }\n      num >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<long> temp_arr;\n\
    \  std::vector<long> temp_arr_2;\n  std::vector<long> temp_arr_3;\n  std::vector<long>\
    \ temp_arr_4;\n  std::vector<long> temp_arr_5;\n  std::vector<long> temp_arr_6;\n\
    \  std::vector<long> temp_arr_7;\n  std::vector<long> temp_arr_8;\n  std::vector<long>\
    \ temp_arr_9;\n  std::vector<long> temp_arr_10;\n  std::vector<long> temp_arr_11;\n\
    \  std::vector<long> temp_arr_12;\n  std::vector<long> temp_arr_13;\n  std::vector<long>\
    \ temp_arr_14;\n  std::vector<long> temp_arr_15;\n  std::vector<long> temp_arr_16;\n\
    \  std::vector<long> temp_arr_17;\n  std::vector<long> temp_arr_18;\n  std::vector<long>\
    \ temp_arr_19;\n  std::vector<long> temp_arr_20;\n  std::vector<long> temp_arr_21;\n\
    \  std::vector<long> temp_arr_22;\n  std::vector<long> temp_arr_23;\n  std::vector<long>\
    \ temp_arr_24;\n  std::vector<long> temp_arr_25;\n  std::vector<long> temp_arr_26;\n\
    \  std::vector<long> temp_arr_27;\n  std::vector<long> temp_arr_28;\n  std::vector<long>\
    \ temp_arr_29;\n  std::vector<long> temp_arr_30;\n  std::vector<long> temp_arr_31;\n\
    \  std::vector<long> temp_arr_32;\n  std::vector<long> temp_arr_33;\n  std::vector<long>\
    \ temp_arr_34;\n  std::vector<long> temp_arr_35;\n  std::vector<long> temp_arr_",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  // your code here\n  std::vector<long> sorted;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> negs;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      negs.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else if\
    \ (arr[i] == 1) {\n      ones.push_back(arr[i]);\n    } else {\n      sorted.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  std::sort(negs.begin(),\
    \ negs.end());\n  std::reverse(negs.begin(), negs.end());\n  std::vector<long>\
    \ result;\n  result.insert(result.end(), negs.begin(), negs.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  result.insert(result.end(), sorted.begin(), sorted.end());\n  return result;",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i\
    \ < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  for (int i =\
    \ 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  return sorted;",
  "  std::vector<long> result;\n  std::vector<std::pair<long, long>> temp;\n  for\
    \ (auto i : arr) {\n    long count = 0;\n    long num = i;\n    while (num) {\n\
    \      if (num & 1) {\n        count++;\n      }\n      num >>= 1;\n    }\n  \
    \  temp.push_back(std::make_pair(count, i));\n  }\n  std::sort(temp.begin(), temp.end());\n\
    \  for (auto i : temp) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  return result;", "    std::vector<long> sorted_arr;\n    std::vector<long>\
    \ temp_arr;\n    std::vector<long> temp_arr2;\n    std::vector<long> temp_arr3;\n\
    \    std::vector<long> temp_arr4;\n    std::vector<long> temp_arr5;\n    std::vector<long>\
    \ temp_arr6;\n    std::vector<long> temp_arr7;\n    std::vector<long> temp_arr8;\n\
    \    std::vector<long> temp_arr9;\n    std::vector<long> temp_arr10;\n    std::vector<long>\
    \ temp_arr11;\n    std::vector<long> temp_arr12;\n    std::vector<long> temp_arr13;\n\
    \    std::vector<long> temp_arr14;\n    std::vector<long> temp_arr15;\n    std::vector<long>\
    \ temp_arr16;\n    std::vector<long> temp_arr17;\n    std::vector<long> temp_arr18;\n\
    \    std::vector<long> temp_arr19;\n    std::vector<long> temp_arr20;\n    std::vector<long>\
    \ temp_arr21;\n    std::vector<long> temp_arr22;\n    std::vector<long> temp_arr23;\n\
    \    std::vector<long> temp_arr24;\n    std::vector<long> temp_arr25;\n    std::vector<long>\
    \ temp_arr26;\n    std::vector<long> temp_arr27;\n    std::vector<long> temp_arr28;\n\
    \    std::vector<long> temp_arr29;\n    std::vector<long> temp_arr30;\n    std::vector<long>\
    \ temp_arr31;\n    std::vector<long> temp_arr32;\n    std::vector<long> temp_arr33;\n\
    \    std::vector<long> temp_arr34;\n    std::vector<long> temp_arr35;\n    std::vector<long>\
    \ temp_arr36;\n    std::vector<long> temp_arr37;\n    std::vector<long> temp_arr38;\n\
    \    std::vector<long", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long> zeros_count;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    long count = 0;\n    long num = arr[i];\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    if (count == 0) {\n      zeros_count.push_back(arr[i]);\n    } else {\n \
    \     ones_count.push_back(count);\n    }\n  }\n  std::sort(zeros_count.begin(),\
    \ zeros_count.end());\n  std::sort(ones_count.begin(), ones_count.end());\n  for\
    \ (long i = 0; i < zeros_count.size(); i++) {\n    sorted_arr.push_back(zeros_count[i]);\n\
    \  }\n  for (long i = 0; i < ones_count.size(); i++) {\n    sorted_arr.push_back(ones_count[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else {\n      if\
    \ (__builtin_popcount(arr[i]) == 0) {\n        zeros.push_back(arr[i]);\n    \
    \  } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  return result;", "    std::vector<long> sorted_arr;\n    std::vector<std::pair<int,\
    \ long>> ones_and_decimal;\n    for (auto i : arr) {\n        int ones = 0;\n\
    \        long decimal = i;\n        while (decimal > 0) {\n            ones +=\
    \ decimal % 2;\n            decimal /= 2;\n        }\n        ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n    }\n    std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \    for (auto i : ones_and_decimal) {\n        sorted_arr.push_back(i.second);\n\
    \    }\n    return sorted_arr;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> temp;\n  for (long i = 0; i < arr.size(); i++) {\n    long count = 0;\n\
    \    long num = arr[i];\n    while (num) {\n      count += num & 1;\n      num\
    \ >>= 1;\n    }\n    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (long i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<long,\
    \ long>> ones_count;\n  for (auto i : arr) {\n    long count = 0;\n    long num\
    \ = i;\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n\
    \    ones_count.push_back(std::make_pair(count, i));\n  }\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  for (auto i : ones_count) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int temp = arr[i];\n    while (temp) {\n      if (temp & 1)\n        count++;\n\
    \      temp = temp >> 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (auto i : arr) {\n\
    \    int count = 0;\n    int num = i;\n    while (num > 0) {\n      count += num\
    \ % 2;\n      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_arr;\n  std::vector<long> zeros_arr;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else\
    \ {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  sorted_arr.insert(sorted_arr.end(),\
    \ zeros_arr.begin(), zeros_arr.end());\n  sorted_arr.insert(sorted_arr.end(),\
    \ ones_arr.begin(), ones_arr.end());\n  return sorted_arr;", "    std::vector<long>\
    \ ans;\n    std::map<int, std::vector<long>> m;\n    for (auto i : arr) {\n  \
    \      int count = 0;\n        while (i) {\n            count += i & 1;\n    \
    \        i >>= 1;\n        }\n        m[count].push_back(i);\n    }\n    for (auto\
    \ i : m) {\n        std::sort(i.second.begin(), i.second.end());\n        ans.insert(ans.end(),\
    \ i.second.begin(), i.second.end());\n    }\n    return ans;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones;\n  std::vector<long> sorted_arr_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_zeros;\n  std::vector<long> sorted_arr_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_ones_zeros;\n  std::vector<long> sorted_arr_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_zeros;\n  std::vector<long> sorted_arr_ones_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_ones_ones_ones_ones;\n  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones;\n  std::vector<long>\
    \ sorted_arr_ones_ones_ones_ones_ones_ones_zeros;\n  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones_ones_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_ones_ones_ones_ones_ones_ones_ones;\n  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones_ones_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_ones_ones_ones_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones_ones_ones_", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> zero_arr;\n  std::vector<long> one_arr;\n \
    \ std::vector<long> two_arr;\n  std::vector<long> three_arr;\n  std::vector<long>\
    \ four_arr;\n  std::vector<long> five_arr;\n  std::vector<long> six_arr;\n  std::vector<long>\
    \ seven_arr;\n  std::vector<long> eight_arr;\n  std::vector<long> nine_arr;\n\
    \  std::vector<long> ten_arr;\n  std::vector<long> eleven_arr;\n  std::vector<long>\
    \ twelve_arr;\n  std::vector<long> thirteen_arr;\n  std::vector<long> fourteen_arr;\n\
    \  std::vector<long> fifteen_arr;\n  std::vector<long> sixteen_arr;\n  std::vector<long>\
    \ seventeen_arr;\n  std::vector<long> eighteen_arr;\n  std::vector<long> nineteen_arr;\n\
    \  std::vector<long> twenty_arr;\n  std::vector<long> twenty_one_arr;\n  std::vector<long>\
    \ twenty_two_arr;\n  std::vector<long> twenty_three_arr;\n  std::vector<long>\
    \ twenty_four_arr;\n  std::vector<long> twenty_five_arr;\n  std::vector<long>\
    \ twenty_six_arr;\n  std::vector<long> twenty_seven_arr;\n  std::vector<long>\
    \ twenty_eight_arr;\n  std::vector<long> twenty_nine_arr;\n  std::vector<long>\
    \ thirty_arr;\n  std::vector<long> thirty_one_arr;\n  std::vector<long> thirty_two_arr;\n\
    \  std::vector<long> thirty_three_arr;\n  std::vector<long> thirty_four_arr;\n\
    \  std::vector<long> thirty_five_arr;\n  std::vector<long> thirty_six_arr;\n \
    \ std::vector<long> thirty_seven_arr;\n  std::vector<long> thirty_eight_", " \
    \ std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long>\
    \ zeros_arr;\n  std::vector<long> temp_arr;\n  std::vector<long> temp_arr2;\n\
    \  std::vector<long> temp_arr3;\n  std::vector<long> temp_arr4;\n  std::vector<long>\
    \ temp_arr5;\n  std::vector<long> temp_arr6;\n  std::vector<long> temp_arr7;\n\
    \  std::vector<long> temp_arr8;\n  std::vector<long> temp_arr9;\n  std::vector<long>\
    \ temp_arr10;\n  std::vector<long> temp_arr11;\n  std::vector<long> temp_arr12;\n\
    \  std::vector<long> temp_arr13;\n  std::vector<long> temp_arr14;\n  std::vector<long>\
    \ temp_arr15;\n  std::vector<long> temp_arr16;\n  std::vector<long> temp_arr17;\n\
    \  std::vector<long> temp_arr18;\n  std::vector<long> temp_arr19;\n  std::vector<long>\
    \ temp_arr20;\n  std::vector<long> temp_arr21;\n  std::vector<long> temp_arr22;\n\
    \  std::vector<long> temp_arr23;\n  std::vector<long> temp_arr24;\n  std::vector<long>\
    \ temp_arr25;\n  std::vector<long> temp_arr26;\n  std::vector<long> temp_arr27;\n\
    \  std::vector<long> temp_arr28;\n  std::vector<long> temp_arr29;\n  std::vector<long>\
    \ temp_arr30;\n  std::vector<long> temp_arr31;\n  std::vector<long> temp_arr32;\n\
    \  std::vector<long> temp_arr33;\n  std::vector<long> temp_arr34;\n  std::vector<long>\
    \ temp_arr35;\n  std::vector<long> temp_arr36;\n  std::vector<long>", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      result.push_back(i);\n    } else {\n   \
    \   int count = 0;\n      int temp = i;\n      while (temp > 0) {\n        if\
    \ (temp % 2 == 1) {\n          count++;\n        }\n        temp /= 2;\n     \
    \ }\n      if (count == 0) {\n        zeros.push_back(i);\n      } else {\n  \
    \      ones.push_back(i);\n      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n\
    \  std::sort(ones.begin(), ones.end());\n  for (auto i : zeros) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n  std::vector<long>\
    \ zeros_count;\n  std::vector<long>::iterator it;\n  std::vector<long>::iterator\
    \ it2;\n  std::vector<long>::iterator it3;\n  std::vector<long>::iterator it4;\n\
    \  std::vector<long>::iterator it5;\n  std::vector<long>::iterator it6;\n  std::vector<long>::iterator\
    \ it7;\n  std::vector<long>::iterator it8;\n  std::vector<long>::iterator it9;\n\
    \  std::vector<long>::iterator it10;\n  std::vector<long>::iterator it11;\n  std::vector<long>::iterator\
    \ it12;\n  std::vector<long>::iterator it13;\n  std::vector<long>::iterator it14;\n\
    \  std::vector<long>::iterator it15;\n  std::vector<long>::iterator it16;\n  std::vector<long>::iterator\
    \ it17;\n  std::vector<long>::iterator it18;\n  std::vector<long>::iterator it19;\n\
    \  std::vector<long>::iterator it20;\n  std::vector<long>::iterator it21;\n  std::vector<long>::iterator\
    \ it22;\n  std::vector<long>::iterator it23;\n  std::vector<long>::iterator it24;\n\
    \  std::vector<long>::iterator it25;\n  std::vector<long>::iterator it26;\n  std::vector<long>::iterator\
    \ it27;\n  std::vector<long>::iterator it28;\n  std::vector<long>::iterator it29;\n\
    \  std::vector<long>::iterator it30;\n  std::vector<long>::iterator it31;\n  std::vector<long>::iterator\
    \ it32;\n  std::vector<long>::iterator it33;\n  std::vector<long>::iterator it34;\n\
    \  std::vector<long>::iterator it35;\n  std::vector<long>::iterator it36;\n  std::vector<long>",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> m;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    while (i) {\n      count += i & 1;\n   \
    \   i >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto i : m) {\n \
    \   std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long>\
    \ negs;\n  for (auto i : arr) {\n    if (i < 0) {\n      negs.push_back(i);\n\
    \    } else if (i == 0) {\n      zeros.push_back(i);\n    } else {\n      ones.push_back(i);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(negs.begin(),\
    \ negs.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (auto i : negs)\
    \ {\n    result.push_back(i);\n  }\n  for (auto i : zeros) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> sorted_arr(arr.size());\n  std::vector<long> ones_count(arr.size());\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long count\
    \ = 0;\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n\
    \    ones_count[i] = count;\n  }\n  std::vector<long> sorted_ones_count = ones_count;\n\
    \  std::sort(sorted_ones_count.begin(), sorted_ones_count.end());\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    for (int j = 0; j < arr.size(); j++) {\n\
    \      if (ones_count[j] == sorted_ones_count[i]) {\n        sorted_arr[i] = arr[j];\n\
    \        ones_count[j] = -1;\n        break;\n      }\n    }\n  }\n  return sorted_arr;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long>\
    \ zeros_arr;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n\
    \      zeros_arr.push_back(arr[i]);\n    } else {\n      ones_arr.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones_arr.begin(), ones_arr.end());\n  std::sort(zeros_arr.begin(),\
    \ zeros_arr.end());\n  sorted_arr.insert(sorted_arr.end(), zeros_arr.begin(),\
    \ zeros_arr.end());\n  sorted_arr.insert(sorted_arr.end(), ones_arr.begin(), ones_arr.end());\n\
    \  return sorted_arr;", "  std::vector<long> sorted;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n \
    \     if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    sorted.push_back(count);\n  }\n  std::sort(sorted.begin(), sorted.end());\n\
    \  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n    \
    \  if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> res;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while\
    \ (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    if (count)\
    \ {\n      ones.push_back(i);\n    } else {\n      zeros.push_back(i);\n    }\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(), zeros.end());\n\
    \  res.insert(res.end(), ones.begin(), ones.end());\n  res.insert(res.end(), zeros.begin(),\
    \ zeros.end());\n  return res;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ sorted_ones;\n  std::vector<long> sorted_zeros;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (__builtin_popcount(arr[i]) == 0) {\n      sorted_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_ones.begin(),\
    \ sorted_ones.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  sorted.insert(sorted.end(), sorted_ones.begin(), sorted_ones.end());\n  sorted.insert(sorted.end(),\
    \ sorted_zeros.begin(), sorted_zeros.end());\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n  for (auto\
    \ i : arr) {\n    long ones = 0;\n    long decimal = i;\n    while (decimal >\
    \ 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n      }\n      decimal\
    \ /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n\
    \  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n  for (auto i\
    \ : ones_and_decimal) {\n    sorted.push_back(i.second);\n  }\n  return sorted;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long>\
    \ sorted_arr_zeros;\n  std::vector<long> sorted_arr_zeros_dec;\n  std::vector<long>\
    \ sorted_arr_ones_dec;\n  std::vector<long> sorted_arr_dec;\n  std::vector<long>\
    \ sorted_arr_dec_ones;\n  std::vector<long> sorted_arr_dec_zeros;\n  std::vector<long>\
    \ sorted_arr_dec_zeros_ones;\n  std::vector<long> sorted_arr_dec_ones_zeros;\n\
    \  std::vector<long> sorted_arr_dec_ones_zeros_dec;\n  std::vector<long> sorted_arr_dec_zeros_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec_zeros_dec;\n  std::vector<long> sorted_arr_dec_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec_dec;\n  std::vector<long> sorted_arr_dec_dec_ones;\n\
    \  std::vector<long> sorted_arr_dec_dec_zeros;\n  std::vector<long> sorted_arr_dec_dec_zeros_ones;\n\
    \  std::vector<long> sorted_arr_dec_dec_ones_zeros;\n  std::vector<long> sorted_arr_dec_dec_ones_zeros_dec;\n\
    \  std::vector<long> sorted_arr_dec_dec_zeros_ones_dec;\n  std::vector<long> sorted_arr_dec_dec_zeros_dec;\n\
    \  std::vector<long> sorted_arr_dec_dec_ones_dec;\n  std::vector<long> sorted_arr_dec_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_dec_dec_ones;\n  std::vector<long> sorted_arr_dec_dec_dec_zeros;\n\
    \  std::vector<long> sorted_arr_dec_dec_dec_zeros_ones;\n  std::vector<long> sorted_",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long>\
    \ zeros_arr;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n\
    \      zeros_arr.push_back(arr[i]);\n    } else {\n      ones_arr.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones_arr.begin(), ones_arr.end());\n  sorted_arr.insert(sorted_arr.end(),\
    \ zeros_arr.begin(), zeros_arr.end());\n  sorted_arr.insert(sorted_arr.end(),\
    \ ones_arr.begin(), ones_arr.end());\n  return sorted_arr;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones;\n  std::vector<long> sorted_arr_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_zeros;\n  std::vector<long> sorted_arr_ones_ones;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros;\n  std::vector<long> sorted_arr_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_ones_ones;\n  std::vector<long> sorted_arr_zeros_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_ones;\n  std::vector<long> sorted_arr_ones_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_zeros;\n  std::vector<long> sorted_arr_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_zeros_ones;\n  std::vector<long> sorted_arr_ones_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_zeros_zeros_zeros_zeros;\n  std::vector<long>\
    \ sorted_arr_zeros_ones_ones_ones;\n  std::vector<long> sorted_arr_ones_zeros_zeros_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_zeros_zeros;\n  std::vector<long> sorted_arr_ones_zeros_ones_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_ones_zeros_ones_ones;\n  std::vector<long>\
    \ sorted_arr_ones_ones_ones_zeros_ones;\n  std::vector<long> sorted_arr_ones_ones_ones_ones_ones;\n\
    \  std::vector<long> sorted_arr_zeros_zeros_zeros_zer", "  std::vector<long> sorted_arr;\n\
    \  std::vector<long> sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_dec;\n  std::vector<long> sorted_arr_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec;\n  std::vector<long> sorted_arr_dec_ones;\n\
    \  std::vector<long> sorted_arr_dec_zeros;\n  std::vector<long> sorted_arr_dec_zeros_ones;\n\
    \  std::vector<long> sorted_arr_dec_ones_zeros;\n  std::vector<long> sorted_arr_dec_zeros_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_zeros_dec;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec_dec;\n  std::vector<long>\
    \ sorted_arr_dec_zeros_dec_ones_dec_dec_dec;\n  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec_dec_dec_dec;\n  std::vector<long>\
    \ sorted_arr_dec_ones_dec_zeros_dec_dec_dec_dec;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec_dec_dec_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec_dec_dec_dec_dec", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> temp;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num) {\n     \
    \ count += num & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    result.push_back(temp[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones_and_index;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long num =\
    \ arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n\
    \      }\n      num /= 2;\n    }\n    ones_and_index.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones_and_index.begin(), ones_and_index.end());\n  for\
    \ (int i = 0; i < ones_and_index.size(); i++) {\n    result.push_back(arr[ones_and_index[i].second]);\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long> zeros_count;\n  std::vector<long> zero_arr;\n\
    \  std::vector<long> one_arr;\n  std::vector<long> two_arr;\n  std::vector<long>\
    \ three_arr;\n  std::vector<long> four_arr;\n  std::vector<long> five_arr;\n \
    \ std::vector<long> six_arr;\n  std::vector<long> seven_arr;\n  std::vector<long>\
    \ eight_arr;\n  std::vector<long> nine_arr;\n  std::vector<long> ten_arr;\n  std::vector<long>\
    \ eleven_arr;\n  std::vector<long> twelve_arr;\n  std::vector<long> thirteen_arr;\n\
    \  std::vector<long> fourteen_arr;\n  std::vector<long> fifteen_arr;\n  std::vector<long>\
    \ sixteen_arr;\n  std::vector<long> seventeen_arr;\n  std::vector<long> eighteen_arr;\n\
    \  std::vector<long> nineteen_arr;\n  std::vector<long> twenty_arr;\n  std::vector<long>\
    \ twentyone_arr;\n  std::vector<long> twentytwo_arr;\n  std::vector<long> twentythree_arr;\n\
    \  std::vector<long> twentyfour_arr;\n  std::vector<long> twentyfive_arr;\n  std::vector<long>\
    \ twentysix_arr;\n  std::vector<long> twentyseven_arr;\n  std::vector<long> twentyeight_arr;\n\
    \  std::vector<long> twentynine_arr;\n  std::vector<long> thirty_arr;\n  std::vector<long>\
    \ thirtyone_arr;\n  std::vector<long> thirtytwo_arr;\n  std::vector<long> thirtythree_arr;\n\
    \  std::vector<long> thirtyfour_arr;\n  std::vector<long> thirtyfive_arr;\n  std::vector<long>\
    \ thirtysix_arr;\n  std::vector<long> thirtyseven_arr;\n", "  std::vector<long>\
    \ res;\n  std::vector<std::pair<int, int>> v;\n  for (auto i : arr) {\n    int\
    \ count = 0;\n    while (i) {\n      count += i & 1;\n      i >>= 1;\n    }\n\
    \    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(), v.end());\n\
    \  for (auto i : v) {\n    res.push_back(i.second);\n  }\n  return res;", "  //\
    \ your code here\n  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n\
    \  std::vector<long> sorted_zeros;\n  std::vector<long> sorted_neg;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_neg.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else\
    \ if (arr[i] == 1) {\n      sorted_ones.push_back(arr[i]);\n    } else {\n   \
    \   sorted.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n\
    \  std::sort(sorted_neg.begin(), sorted_neg.end());\n  std::sort(sorted_zeros.begin(),\
    \ sorted_zeros.end());\n  std::sort(sorted_ones.begin(), sorted_ones.end());\n\
    \  std::vector<long> result;\n  for (int i = 0; i < sorted_neg.size(); i++) {\n\
    \    result.push_back(sorted_neg[i]);\n  }\n  for (int i = 0; i < sorted_zeros.size();\
    \ i++) {\n    result.push_back(sorted_zeros[i]);\n  }\n  for (int i = 0; i < sorted_ones.size();\
    \ i++) {\n    result.push_back(sorted_ones[i]);\n  }\n  for (int i = 0; i < sorted.size();\
    \ i++) {\n    result.push_back(sorted[i]);\n  }\n  return result;", "    std::vector<long>\
    \ sorted_arr;\n    std::vector<long> sorted_arr_ones;\n    std::vector<long> sorted_arr_zeros;\n\
    \    std::vector<long> sorted_arr_neg;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < 0) {\n            sorted_arr_neg.push_back(arr[i]);\n\
    \        } else if (arr[i] == 0) {\n            sorted_arr_zeros.push_back(arr[i]);\n\
    \        } else if (arr[i] == 1) {\n            sorted_arr_ones.push_back(arr[i]);\n\
    \        } else {\n            sorted_arr.push_back(arr[i]);\n        }\n    }\n\
    \    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::sort(sorted_arr_neg.begin(),\
    \ sorted_arr_neg.end());\n    std::sort(sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \    std::sort(sorted_arr_ones.begin(), sorted_arr_ones.end());\n    std::vector<long>\
    \ result;\n    result.insert(result.end(), sorted_arr_neg.begin(), sorted_arr_neg.end());\n\
    \    result.insert(result.end(), sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \    result.insert(result.end(), sorted_arr_ones.begin(), sorted_arr_ones.end());\n\
    \    result.insert(result.end(), sorted_arr.begin(), sorted_arr.end());\n    return\
    \ result;", "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    int\
    \ count_a = std::bitset<32>(a).count();\n    int count_b = std::bitset<32>(b).count();\n\
    \    if (count_a == count_b) {\n      return a < b;\n    }\n    return count_a\
    \ < count_b;\n  });\n  return arr;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ temp;\n  std::vector<long> temp1;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>",
  "  std::vector<long> sorted;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  std::vector<long> one_count_sorted;\n  std::vector<long> zero_count_sorted;\n\
    \  std::vector<long> one_count_sorted_sorted;\n  std::vector<long> zero_count_sorted_sorted;\n\
    \  std::vector<long> zero_count_sorted_sorted_sorted;\n  std::vector<long> one_count_sorted_sorted_sorted;\n\
    \  std::vector<long> one_count_sorted_sorted_sorted_sorted;\n  std::vector<long>\
    \ zero_count_sorted_sorted_sorted_sorted;\n  std::vector<long> zero_count_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> one_count_sorted_sorted_sorted_sorted_sorted;\n  std::vector<long>\
    \ one_count_sorted_sorted_sorted_sorted_sorted_sorted;\n  std::vector<long> zero_count_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> zero_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> one_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> one_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> zero_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> zero_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \  std::vector<long> one_count_sorted_sorted_sorted_sorted_sorted_sorted_s", " \
    \ std::vector<long> sorted_arr;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    long ones = 0;\n    long decimal = i;\n    while\
    \ (decimal > 0) {\n      ones += decimal % 2;\n      decimal /= 2;\n    }\n  \
    \  ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_and_decimal.begin(),\
    \ ones_and_decimal.end());\n  for (auto i : ones_and_decimal) {\n    sorted_arr.push_back(i.second);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ zeros;\n  std::vector<long> ones;\n  std::vector<long> twos;\n  std::vector<long>\
    \ threes;\n  std::vector<long> fours;\n  std::vector<long> fives;\n  std::vector<long>\
    \ sixes;\n  std::vector<long> sevens;\n  std::vector<long> eights;\n  std::vector<long>\
    \ nines;\n  std::vector<long> tens;\n  std::vector<long> elevens;\n  std::vector<long>\
    \ twelves;\n  std::vector<long> thirteens;\n  std::vector<long> fourteens;\n \
    \ std::vector<long> fifteens;\n  std::vector<long> sixteens;\n  std::vector<long>\
    \ seventeens;\n  std::vector<long> eighteens;\n  std::vector<long> ninteens;\n\
    \  std::vector<long> twenties;\n  std::vector<long> thirties;\n  std::vector<long>\
    \ fourties;\n  std::vector<long> fifties;\n  std::vector<long> sixties;\n  std::vector<long>\
    \ seventies;\n  std::vector<long> eighties;\n  std::vector<long> ninties;\n  std::vector<long>\
    \ hundreds;\n  std::vector<long> thousands;\n  std::vector<long> tenThousands;\n\
    \  std::vector<long> hundredThousands;\n  std::vector<long> millions;\n  std::vector<long>\
    \ tenMillions;\n  std::vector<long> hundredMillions;\n  std::vector<long> billions;\n\
    \  std::vector<long> tenBillions;\n  std::vector<long> hundredBillions;\n  std::vector<long>\
    \ trillions;\n  std::vector<long> tenTrillions;\n  std::vector<long> hundredTrillions;\n\
    \  std::vector<long> quadrillions;\n  std::vector<long> tenQuadrillions;\n  std::vector<long>\
    \ hundredQuadrillions;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    int\
    \ count = 0;\n    int num = arr[i];\n    while (num > 0) {\n      if (num % 2\
    \ == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    if (count ==\
    \ 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> one_count;\n\
    \  std::vector<long> zero_count;\n  std::vector<long>::iterator it;\n  int count\
    \ = 0;\n  for (it = arr.begin(); it != arr.end(); it++) {\n    count = 0;\n  \
    \  long num = *it;\n    while (num > 0) {\n      if (num % 2 == 1) {\n       \
    \ count++;\n      }\n      num = num / 2;\n    }\n    one_count.push_back(count);\n\
    \    zero_count.push_back(count);\n  }\n  std::sort(one_count.begin(), one_count.end());\n\
    \  for (int i = 0; i < one_count.size(); i++) {\n    for (int j = 0; j < zero_count.size();\
    \ j++) {\n      if (one_count[i] == zero_count[j]) {\n        sorted.push_back(arr[j]);\n\
    \        zero_count[j] = -1;\n        break;\n      }\n    }\n  }\n  return sorted;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n  std::vector<long>\
    \ zeros_count;\n  std::vector<long>::iterator it;\n  long count = 0;\n  long temp\
    \ = 0;\n  for (it = arr.begin(); it != arr.end(); it++) {\n    temp = *it;\n \
    \   count = 0;\n    while (temp != 0) {\n      if (temp % 2 == 1) {\n        count++;\n\
    \      }\n      temp = temp / 2;\n    }\n    ones_count.push_back(count);\n  \
    \  zeros_count.push_back(count);\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n\
    \  std::sort(zeros_count.begin(), zeros_count.end());\n  for (it = ones_count.begin();\
    \ it != ones_count.end(); it++) {\n    for (long i = 0; i < arr.size(); i++) {\n\
    \      if (ones_count[i] == zeros_count[i]) {\n        sorted_arr.push_back(arr[i]);\n\
    \      }\n    }\n  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::map<int,\
    \ std::vector<long>> map;\n  for (auto i : arr) {\n    int count = 0;\n    long\
    \ temp = i;\n    while (temp) {\n      if (temp & 1) {\n        count++;\n   \
    \   }\n      temp = temp >> 1;\n    }\n    map[count].push_back(i);\n  }\n  for\
    \ (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "    std::vector<long>\
    \ sorted;\n    std::vector<std::pair<int, long>> ones;\n    for (auto i : arr)\
    \ {\n        int count = 0;\n        long num = i;\n        while (num) {\n  \
    \          count += num & 1;\n            num >>= 1;\n        }\n        ones.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(ones.begin(), ones.end());\n    for (auto i : ones)\
    \ {\n        sorted.push_back(i.second);\n    }\n    return sorted;", "  std::vector<long>\
    \ res;\n  std::map<int, std::vector<long>> m;\n  for (auto i : arr) {\n    int\
    \ count = 0;\n    long n = i;\n    while (n) {\n      count += n & 1;\n      n\
    \ >>= 1;\n    }\n    m[count].push_back(i);\n  }\n  for (auto it = m.begin();\
    \ it != m.end(); it++) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    for (auto i : it->second) {\n      res.push_back(i);\n    }\n  }\n  return\
    \ res;", "  std::vector<long> res;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long num = i;\n    while (num)\
    \ {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    res.push_back(i.second);\n  }\n  return res;", "  std::vector<long> sorted;\n\
    \  std::vector<std::pair<int, long>> ones_and_values;\n  for (auto val : arr)\
    \ {\n    int ones = 0;\n    long temp = val;\n    while (temp) {\n      ones +=\
    \ temp & 1;\n      temp >>= 1;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ val));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n\
    \  for (auto val : ones_and_values) {\n    sorted.push_back(val.second);\n  }\n\
    \  return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  std::vector<long> zero_arr;\n  std::vector<long>\
    \ one_arr;\n  std::vector<long> two_arr;\n  std::vector<long> three_arr;\n  std::vector<long>\
    \ four_arr;\n  std::vector<long> five_arr;\n  std::vector<long> six_arr;\n  std::vector<long>\
    \ seven_arr;\n  std::vector<long> eight_arr;\n  std::vector<long> nine_arr;\n\
    \  std::vector<long> ten_arr;\n  std::vector<long> eleven_arr;\n  std::vector<long>\
    \ twelve_arr;\n  std::vector<long> thirteen_arr;\n  std::vector<long> fourteen_arr;\n\
    \  std::vector<long> fifteen_arr;\n  std::vector<long> sixteen_arr;\n  std::vector<long>\
    \ seventeen_arr;\n  std::vector<long> eighteen_arr;\n  std::vector<long> nineteen_arr;\n\
    \  std::vector<long> twenty_arr;\n  std::vector<long> twentyone_arr;\n  std::vector<long>\
    \ twentytwo_arr;\n  std::vector<long> twentythree_arr;\n  std::vector<long> twentyfour_arr;\n\
    \  std::vector<long> twentyfive_arr;\n  std::vector<long> twentysix_arr;\n  std::vector<long>\
    \ twentyseven_arr;\n  std::vector<long> twentyeight_arr;\n  std::vector<long>\
    \ twentynine_arr;\n  std::vector<long> thirty_arr;\n  std::vector<long> thirtyone_arr;\n\
    \  std::vector<long> thirtytwo_arr;\n  std::vector<long> thirtythree_arr;\n  std::vector<long>\
    \ thirtyfour_arr;\n  std::vector<long> thirtyfive_arr;\n  std::vector<long> thirtysix_arr;\n\
    \  std::vector<long> thirtyseven_arr;\n", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> temp;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int x = arr[i];\n    while (x) {\n      count += x & 1;\n      x >>= 1;\n\
    \    }\n    temp.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    result.push_back(temp[i].second);\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    long num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n  \
    \      count++;\n      }\n      num /= 2;\n    }\n    ones_count.push_back(count);\n\
    \  }\n  std::vector<long> sorted_ones_count = ones_count;\n  std::sort(sorted_ones_count.begin(),\
    \ sorted_ones_count.end());\n  for (int i = 0; i < sorted_ones_count.size(); i++)\
    \ {\n    for (int j = 0; j < ones_count.size(); j++) {\n      if (sorted_ones_count[i]\
    \ == ones_count[j]) {\n        sorted_arr.push_back(arr[j]);\n        ones_count[j]\
    \ = -1;\n        break;\n      }\n    }\n  }\n  return sorted_arr;", "    std::vector<long>\
    \ sorted;\n    std::vector<long> one_count;\n    std::vector<long> zero_count;\n\
    \    std::vector<long> zero_count_sorted;\n    std::vector<long> one_count_sorted;\n\
    \    std::vector<long> one_count_sorted_decimal;\n    std::vector<long> zero_count_sorted_decimal;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        long count = 0;\n       \
    \ long num = arr[i];\n        while (num) {\n            count += num & 1;\n \
    \           num >>= 1;\n        }\n        if (count == 0) {\n            zero_count.push_back(arr[i]);\n\
    \        } else {\n            one_count.push_back(arr[i]);\n        }\n    }\n\
    \    std::sort(zero_count.begin(), zero_count.end());\n    std::sort(one_count.begin(),\
    \ one_count.end());\n    for (int i = 0; i < zero_count.size(); i++) {\n     \
    \   zero_count_sorted.push_back(zero_count[i]);\n    }\n    for (int i = 0; i\
    \ < one_count.size(); i++) {\n        one_count_sorted.push_back(one_count[i]);\n\
    \    }\n    std::sort(one_count_sorted.begin(), one_count_sorted.end());\n   \
    \ std::sort(zero_count_sorted.begin(), zero_count_sorted.end());\n    for (int\
    \ i = 0; i < one_count_sorted.size(); i++) {\n        one_count_sorted_decimal.push_back(one_count_sorted[i]);\n\
    \    }\n    for (int i = 0; i < zero_count_sorted.size(); i++) {\n        zero_count_sorted_decimal.push_back(zero_count_sorted[i]);\n\
    \    }\n    std::sort(one_count_sorted_decimal.begin(), one_count_sorted_decimal.end());\n\
    \    std::sort", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  std::vector<long>::iterator it;\n  std::vector<long>::iterator\
    \ it_ones;\n  std::vector<long>::iterator it_zeros;\n  std::vector<long>::iterator\
    \ it_sorted;\n  std::vector<long>::iterator it_sorted_ones;\n  std::vector<long>::iterator\
    \ it_sorted_zeros;\n  std::vector<long>::iterator it_sorted_arr;\n  std::vector<long>::iterator\
    \ it_sorted_arr_ones;\n  std::vector<long>::iterator it_sorted_arr_zeros;\n  long\
    \ ones_count_temp;\n  long zeros_count_temp;\n  long temp;\n  long temp_ones;\n\
    \  long temp_zeros;\n  long temp_sorted;\n  long temp_sorted_ones;\n  long temp_sorted_zeros;\n\
    \  long temp_sorted_arr;\n  long temp_sorted_arr_ones;\n  long temp_sorted_arr_zeros;\n\
    \  long i;\n  long j;\n  long k;\n  long l;\n  long m;\n  long n;\n  long o;\n\
    \  long p;\n  long q;\n  long r;\n  long s;\n  long t;\n  long u;\n  long v;\n\
    \  long w;\n  long x;\n  long y;\n  long z;\n  long aa;\n  long bb;\n  long cc;\n\
    \  long dd;\n  long ee;\n  long ff;\n  long gg;\n  long hh;\n  long ii;\n  long\
    \ jj;\n  long kk;\n  long ll;\n  long mm;\n  long nn;\n  long oo;\n  long pp;\n\
    \  long qq;\n  long rr;\n  long ss;\n  long tt;\n  long uu;\n  long vv;\n  long\
    \ ww;\n  long xx;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ ones;\n  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n   \
    \   if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    ones[count].push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  return sorted;", "  // your code here\n  std::vector<long> sorted;\n \
    \ std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n\
    \      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i]);\n  }\n  for (int i = 0; i < zeros.size();\
    \ i++) {\n    sorted.push_back(zeros[i]);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> one_count;\n  std::vector<long> zero_count;\n\
    \  std::vector<long> zero_sorted;\n  std::vector<long> one_sorted;\n  std::vector<long>\
    \ zero_sorted_arr;\n  std::vector<long> one_sorted_arr;\n  std::vector<long> sorted_arr_one;\n\
    \  std::vector<long> sorted_arr_zero;\n  std::vector<long> sorted_arr_one_zero;\n\
    \  std::vector<long> sorted_arr_zero_one;\n  std::vector<long> sorted_arr_one_zero_one;\n\
    \  std::vector<long> sorted_arr_zero_one_zero;\n  std::vector<long> sorted_arr_zero_one_zero_one;\n\
    \  std::vector<long> sorted_arr_one_zero_one_zero;\n  std::vector<long> sorted_arr_one_zero_one_zero_one;\n\
    \  std::vector<long> sorted_arr_zero_one_zero_one_zero;\n  std::vector<long> sorted_arr_zero_one_zero_one_zero_one;\n\
    \  std::vector<long> sorted_arr_one_zero_one_zero_one_zero;\n  std::vector<long>\
    \ sorted_arr_one_zero_one_zero_one_zero_one;\n  std::vector<long> sorted_arr_zero_one_zero_one_zero_one_zero;\n\
    \  std::vector<long> sorted_arr_zero_one_zero_one_zero_one_zero_one;\n  std::vector<long>\
    \ sorted_arr_one_zero_one_zero_one_zero_one_zero;\n  std::vector<long> sorted_arr_one_zero_one_zero_one_zero_one_zero_one;\n\
    \  std::vector<long> sorted_arr_zero_one_zero_one_zero_one_zero_one_zero;\n  std::vector<long>\
    \ sorted_arr_zero_one_zero_one_zero_one_", "  std::vector<long> sorted_arr;\n\
    \  std::vector<std::pair<long, long>> ones_count_arr;\n  for (long i = 0; i <\
    \ arr.size(); i++) {\n    long ones_count = 0;\n    long num = arr[i];\n    while\
    \ (num > 0) {\n      ones_count += num & 1;\n      num >>= 1;\n    }\n    ones_count_arr.push_back(std::make_pair(ones_count,\
    \ arr[i]));\n  }\n  std::sort(ones_count_arr.begin(), ones_count_arr.end());\n\
    \  for (long i = 0; i < ones_count_arr.size(); i++) {\n    sorted_arr.push_back(ones_count_arr[i].second);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i = 0; i < arr.size(); i++) {\n    int count = 0;\n    long\
    \ num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n\
    \      }\n      num /= 2;\n    }\n    map[count].push_back(arr[i]);\n  }\n  for\
    \ (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (auto i = 0; i < it->second.size(); i++) {\n   \
    \   result.push_back(it->second[i]);\n    }\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  for (long i = 0; i\
    \ < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  for (long i\
    \ = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  return\
    \ sorted;", "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i) {\n      count += i\
    \ & 1;\n      i >>= 1;\n    }\n    map[count].push_back(i);\n  }\n  for (auto\
    \ i : map) {\n    std::sort(i.second.begin(), i.second.end());\n    result.insert(result.end(),\
    \ i.second.begin(), i.second.end());\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::map<int, std::vector<long>> map;\n  for (auto i : arr) {\n \
    \   int count = 0;\n    long temp = i;\n    while (temp) {\n      if (temp % 2\
    \ == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    std::sort(it->second.begin(),\
    \ it->second.end());\n    for (auto i : it->second) {\n      result.push_back(i);\n\
    \    }\n  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n  for (long i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_arr_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(),\
    \ sorted_arr_zeros.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  return sorted_arr;", "  std::vector<long> result;\n\
    \  std::vector<std::pair<long, long>> ones_and_decimal;\n  for (auto i : arr)\
    \ {\n    long ones = 0;\n    long decimal = i;\n    while (decimal > 0) {\n  \
    \    if (decimal % 2 == 1) {\n        ones++;\n      }\n      decimal /= 2;\n\
    \    }\n    ones_and_decimal.push_back(std::make_pair(ones, i));\n  }\n  std::sort(ones_and_decimal.begin(),\
    \ ones_and_decimal.end());\n  for (auto i : ones_and_decimal) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::vector<std::pair<int,\
    \ long>> ones_and_values;\n    for (auto i : arr) {\n        int ones = 0;\n \
    \       long value = i;\n        while (value > 0) {\n            ones += value\
    \ & 1;\n            value >>= 1;\n        }\n        ones_and_values.push_back(std::make_pair(ones,\
    \ i));\n    }\n    std::sort(ones_and_values.begin(), ones_and_values.end());\n\
    \    for (auto i : ones_and_values) {\n        result.push_back(i.second);\n \
    \   }\n    return result;", "  std::vector<long> sorted_arr;\n  std::vector<std::pair<int,\
    \ long>> ones_and_nums;\n  for (auto num : arr) {\n    int ones = 0;\n    for\
    \ (int i = 0; i < sizeof(num) * 8; i++) {\n      if (num & (1 << i)) {\n     \
    \   ones++;\n      }\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    sorted_arr.push_back(pair.second);\n  }\n\
    \  return sorted_arr;", "    std::vector<long> ones;\n    std::vector<long> zeros;\n\
    \    for (auto i : arr) {\n        if (i == 0) {\n            zeros.push_back(i);\n\
    \        } else {\n            ones.push_back(i);\n        }\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    std::sort(zeros.begin(), zeros.end());\n    std::vector<long>\
    \ result;\n    result.insert(result.end(), zeros.begin(), zeros.end());\n    result.insert(result.end(),\
    \ ones.begin(), ones.end());\n    return result;", "  std::vector<long> sorted_arr;\n\
    \  std::vector<long> sorted_arr_dec;\n  std::vector<long> sorted_arr_bin;\n  std::vector<long>\
    \ sorted_arr_bin_dec;\n  std::vector<long> sorted_arr_bin_dec_final;\n  std::vector<long>\
    \ sorted_arr_bin_final;\n  std::vector<long> sorted_arr_final;\n  std::vector<long>\
    \ sorted_arr_final_final;\n  std::vector<long> sorted_arr_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final;\n  std::vector<long>\
    \ sorted_arr_final_final_final_final_final;\n  std::vector<long> sorted_arr_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final;\n \
    \ std::vector<long> sorted_arr_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n\
    \ ", "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_1;\n\
    \  std::vector<long> sorted_arr_0;\n  std::vector<long> sorted_arr_2;\n  std::vector<long>\
    \ sorted_arr_3;\n  std::vector<long> sorted_arr_4;\n  std::vector<long> sorted_arr_5;\n\
    \  std::vector<long> sorted_arr_6;\n  std::vector<long> sorted_arr_7;\n  std::vector<long>\
    \ sorted_arr_8;\n  std::vector<long> sorted_arr_9;\n  std::vector<long> sorted_arr_10;\n\
    \  std::vector<long> sorted_arr_11;\n  std::vector<long> sorted_arr_12;\n  std::vector<long>\
    \ sorted_arr_13;\n  std::vector<long> sorted_arr_14;\n  std::vector<long> sorted_arr_15;\n\
    \  std::vector<long> sorted_arr_16;\n  std::vector<long> sorted_arr_17;\n  std::vector<long>\
    \ sorted_arr_18;\n  std::vector<long> sorted_arr_19;\n  std::vector<long> sorted_arr_20;\n\
    \  std::vector<long> sorted_arr_21;\n  std::vector<long> sorted_arr_22;\n  std::vector<long>\
    \ sorted_arr_23;\n  std::vector<long> sorted_arr_24;\n  std::vector<long> sorted_arr_25;\n\
    \  std::vector<long> sorted_arr_26;\n  std::vector<long> sorted_arr_27;\n  std::vector<long>\
    \ sorted_arr_28;\n  std::vector<long> sorted_arr_29;\n  std::vector<long> sorted_arr_30;\n\
    \  std::vector<long> sorted_arr_31;\n  std::vector<long> sorted_arr_32;\n  std::vector<long>\
    \ sorted_arr_33;\n  std::vector<long> sorted_arr_34;\n  std::vector<long> sorted_",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (auto i : arr) {\n    if (i < 0) {\n      result.push_back(i);\n    } else\
    \ {\n      if (i == 0) {\n        zeros.push_back(i);\n      } else {\n      \
    \  ones.push_back(i);\n      }\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n\
    \  std::sort(zeros.begin(), zeros.end());\n  for (auto i : ones) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : zeros) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> zero_arr;\n  std::vector<long>\
    \ one_arr;\n  std::vector<long> two_arr;\n  std::vector<long> three_arr;\n  std::vector<long>\
    \ four_arr;\n  std::vector<long> five_arr;\n  std::vector<long> six_arr;\n  std::vector<long>\
    \ seven_arr;\n  std::vector<long> eight_arr;\n  std::vector<long> nine_arr;\n\
    \  std::vector<long> ten_arr;\n  std::vector<long> eleven_arr;\n  std::vector<long>\
    \ twelve_arr;\n  std::vector<long> thirteen_arr;\n  std::vector<long> fourteen_arr;\n\
    \  std::vector<long> fifteen_arr;\n  std::vector<long> sixteen_arr;\n  std::vector<long>\
    \ seventeen_arr;\n  std::vector<long> eighteen_arr;\n  std::vector<long> nineteen_arr;\n\
    \  std::vector<long> twenty_arr;\n  std::vector<long> twentyone_arr;\n  std::vector<long>\
    \ twentytwo_arr;\n  std::vector<long> twentythree_arr;\n  std::vector<long> twentyfour_arr;\n\
    \  std::vector<long> twentyfive_arr;\n  std::vector<long> twentysix_arr;\n  std::vector<long>\
    \ twentyseven_arr;\n  std::vector<long> twentyeight_arr;\n  std::vector<long>\
    \ twentynine_arr;\n  std::vector<long> thirty_arr;\n  std::vector<long> thirtyone_arr;\n\
    \  std::vector<long> thirtytwo_arr;\n  std::vector<long> thirtythree_arr;\n  std::vector<long>\
    \ thirtyfour_arr;\n  std::vector<long> thirtyfive_arr;\n  std::vector<long> thirtysix_arr;\n\
    \  std::vector<long> thirtyseven_arr;\n  std::vector<long> thirtyeight_arr;\n\
    \  std::vector<long> thirtynine_arr;", "  std::vector<std::pair<int, int>> vec;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    while (i > 0) {\n      if (i\
    \ % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n    }\n    vec.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(vec.begin(), vec.end());\n  std::vector<long> result;\n\
    \  for (auto i : vec) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else {\n      int count = 0;\n      long num = arr[i];\n      while (num\
    \ > 0) {\n        if (num % 2 == 1) {\n          count++;\n        }\n       \
    \ num /= 2;\n      }\n      if (count == 0) {\n        zeros.push_back(arr[i]);\n\
    \      } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;",
  "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  std::vector<long> sorted_ones_count;\n  std::vector<long>\
    \ sorted_zeros_count;\n  std::vector<long> sorted_ones_count_index;\n  std::vector<long>\
    \ sorted_zeros_count_index;\n  long count = 0;\n  long count_one = 0;\n  long\
    \ count_zero = 0;\n  long temp = 0;\n  long temp_one = 0;\n  long temp_zero =\
    \ 0;\n  long index = 0;\n  long index_one = 0;\n  long index_zero = 0;\n  for\
    \ (long i = 0; i < arr.size(); i++) {\n    count = 0;\n    temp = arr[i];\n  \
    \  while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n\
    \      temp = temp / 2;\n    }\n    ones_count.push_back(count);\n  }\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    count = 0;\n    temp = arr[i];\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 0) {\n        count++;\n      }\n      temp\
    \ = temp / 2;\n    }\n    zeros_count.push_back(count);\n  }\n  for (long i =\
    \ 0; i < ones_count.size(); i++) {\n    count_one = 0;\n    temp_one = ones_count[i];\n\
    \    index_one = i;\n    for (long j = 0; j < ones_count.size(); j++) {\n    \
    \  if (temp_one > ones_count[j]) {\n        count_one++;\n      }\n    }\n   \
    \ sorted_ones_count.push_back(count_one);\n    sorted_ones_count_index.push_back(index_one);\n\
    \  }\n  for (long i = 0; i < zeros_count.size(); i++) {\n    count_zero = 0;\n\
    \    temp_zero =", "  std::vector<long> sorted;\n  std::vector<long> zeros;\n\
    \  std::vector<long> ones;\n  std::vector<long> twos;\n  std::vector<long> threes;\n\
    \  std::vector<long> fours;\n  std::vector<long> fives;\n  std::vector<long> sixes;\n\
    \  std::vector<long> sevens;\n  std::vector<long> eights;\n  std::vector<long>\
    \ nines;\n  std::vector<long> tens;\n  std::vector<long> elevens;\n  std::vector<long>\
    \ twelves;\n  std::vector<long> thirteens;\n  std::vector<long> fourteens;\n \
    \ std::vector<long> fifteens;\n  std::vector<long> sixteens;\n  std::vector<long>\
    \ seventeens;\n  std::vector<long> eighteens;\n  std::vector<long> ninteens;\n\
    \  std::vector<long> twenteens;\n  std::vector<long> twentyones;\n  std::vector<long>\
    \ twentytwos;\n  std::vector<long> twentythrees;\n  std::vector<long> twentyfours;\n\
    \  std::vector<long> twentyfives;\n  std::vector<long> twentysixes;\n  std::vector<long>\
    \ twentysevens;\n  std::vector<long> twentyeights;\n  std::vector<long> twentynines;\n\
    \  std::vector<long> thirtys;\n  std::vector<long> thirtyones;\n  std::vector<long>\
    \ thirtytwos;\n  std::vector<long> thirtythrees;\n  std::vector<long> thirtyfours;\n\
    \  std::vector<long> thirtyfives;\n  std::vector<long> thirtysixes;\n  std::vector<long>\
    \ thirtysevens;\n  std::vector<long> thirtyeights;\n  std::vector<long> thirtynines;\n\
    \  std::vector<long> fourtys;\n  std::vector<long> fourtyones;\n  std::vector<long>\
    \ fourtytwos", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones_and_nums;\n\
    \  for (auto num : arr) {\n    int ones = 0;\n    while (num > 0) {\n      ones\
    \ += num % 2;\n      num /= 2;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto pair : ones_and_nums) {\n    result.push_back(pair.second);\n  }\n  return\
    \ result;", "    std::vector<long> res;\n    std::map<int, std::vector<long>>\
    \ m;\n    for (auto i : arr) {\n        int count = 0;\n        while (i) {\n\
    \            if (i & 1) {\n                count++;\n            }\n         \
    \   i = i >> 1;\n        }\n        m[count].push_back(i);\n    }\n    for (auto\
    \ i : m) {\n        std::sort(i.second.begin(), i.second.end());\n        res.insert(res.end(),\
    \ i.second.begin(), i.second.end());\n    }\n    return res;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones;\n  std::vector<long> sorted_arr_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros;\n  std::vector<long> sorted_arr_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros;\n  std::vector<long> sorted_arr_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_zeros_ones_zeros_ones;\n  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones;\n  std::vector<long>\
    \ sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros;\n  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      zeros.push_back(i);\n    } else {\n   \
    \   ones.push_back(i);\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n\
    \  std::sort(ones.begin(), ones.end());\n  for (auto i : zeros) {\n    sorted.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    sorted.push_back(i);\n  }\n  return sorted;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n  std::vector<long>\
    \ zeros_count;\n  std::vector<long> temp;\n  std::vector<long> temp_ones;\n  std::vector<long>\
    \ temp_zeros;\n  long count = 0;\n  long count_ones = 0;\n  long count_zeros =\
    \ 0;\n  for (int i = 0; i < arr.size(); i++) {\n    count = 0;\n    count_ones\
    \ = 0;\n    count_zeros = 0;\n    temp.clear();\n    temp_ones.clear();\n    temp_zeros.clear();\n\
    \    while (arr[i] > 0) {\n      if (arr[i] % 2 == 1) {\n        count_ones++;\n\
    \      } else {\n        count_zeros++;\n      }\n      temp.push_back(arr[i]\
    \ % 2);\n      arr[i] = arr[i] / 2;\n      count++;\n    }\n    for (int j = 0;\
    \ j < count; j++) {\n      if (temp[j] == 1) {\n        temp_ones.push_back(count\
    \ - j - 1);\n      } else {\n        temp_zeros.push_back(count - j - 1);\n  \
    \    }\n    }\n    ones_count.push_back(count_ones);\n    zeros_count.push_back(count_zeros);\n\
    \  }\n  for (int i = 0; i < arr.size(); i++) {\n    for (int j = 0; j < arr.size()\
    \ - 1; j++) {\n      if (ones_count[j] > ones_count[j + 1]) {\n        std::swap(ones_count[j],\
    \ ones_count[j + 1]);\n        std::swap(zeros_count[j], zeros_count[j + 1]);\n\
    \        std::swap(arr[j], arr[j + 1]);\n      } else if (ones_count[j] == ones_count[j\
    \ + 1]) {\n        if (zeros_count[j] > zeros_count[j + 1", "  std::vector<long>\
    \ sorted;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> sorted_array;\n  std::vector<long>\
    \ sorted_array_temp;\n  std::vector<long> sorted_array_temp_temp;\n  std::vector<long>\
    \ sorted_array_temp_temp_temp;\n  std::vector<long> sorted_array_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp;\n  std::vector<long>\
    \ sorted_array_temp_temp_temp_temp_temp_temp;\n  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp;\n \
    \ std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \  std::vector<long> sorted_array_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    std::vector<long> result;\n    std::vector<std::pair<long, long>> temp;\n \
    \   for (auto i : arr) {\n        long count = 0;\n        long num = i;\n   \
    \     while (num > 0) {\n            if (num % 2 == 1) {\n                count++;\n\
    \            }\n            num /= 2;\n        }\n        temp.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i : temp)\
    \ {\n        result.push_back(i.second);\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> count;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int ones = 0;\n    int temp = arr[i];\n    while (temp) {\n    \
    \  ones += temp & 1;\n      temp >>= 1;\n    }\n    count.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(count.begin(), count.end());\n  for (int i = 0;\
    \ i < count.size(); i++) {\n    result.push_back(count[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted_array;\n  std::vector<long> one_count;\n\
    \  std::vector<long> zero_count;\n  std::vector<long> temp;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n    while\
    \ (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num\
    \ = num / 2;\n    }\n    one_count.push_back(count);\n    zero_count.push_back(count);\n\
    \  }\n  std::sort(one_count.begin(), one_count.end());\n  for (int i = 0; i <\
    \ one_count.size(); i++) {\n    for (int j = 0; j < zero_count.size(); j++) {\n\
    \      if (one_count[i] == zero_count[j]) {\n        temp.push_back(arr[j]);\n\
    \        zero_count[j] = -1;\n        break;\n      }\n    }\n  }\n  return temp;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long>\
    \ zeros_arr;\n  std::vector<long> temp_arr;\n  std::vector<long> temp_arr2;\n\
    \  std::vector<long> temp_arr3;\n  std::vector<long> temp_arr4;\n  std::vector<long>\
    \ temp_arr5;\n  std::vector<long> temp_arr6;\n  std::vector<long> temp_arr7;\n\
    \  std::vector<long> temp_arr8;\n  std::vector<long> temp_arr9;\n  std::vector<long>\
    \ temp_arr10;\n  std::vector<long> temp_arr11;\n  std::vector<long> temp_arr12;\n\
    \  std::vector<long> temp_arr13;\n  std::vector<long> temp_arr14;\n  std::vector<long>\
    \ temp_arr15;\n  std::vector<long> temp_arr16;\n  std::vector<long> temp_arr17;\n\
    \  std::vector<long> temp_arr18;\n  std::vector<long> temp_arr19;\n  std::vector<long>\
    \ temp_arr20;\n  std::vector<long> temp_arr21;\n  std::vector<long> temp_arr22;\n\
    \  std::vector<long> temp_arr23;\n  std::vector<long> temp_arr24;\n  std::vector<long>\
    \ temp_arr25;\n  std::vector<long> temp_arr26;\n  std::vector<long> temp_arr27;\n\
    \  std::vector<long> temp_arr28;\n  std::vector<long> temp_arr29;\n  std::vector<long>\
    \ temp_arr30;\n  std::vector<long> temp_arr31;\n  std::vector<long> temp_arr32;\n\
    \  std::vector<long> temp_arr33;\n  std::vector<long> temp_arr34;\n  std::vector<long>\
    \ temp_arr35;\n  std::vector<long> temp_arr36;\n  std::vector<long>", "    std::vector<long>\
    \ result;\n    std::vector<std::pair<int, int>> temp;\n    for (auto i : arr)\
    \ {\n        int count = 0;\n        int n = i;\n        while (n) {\n       \
    \     count += n & 1;\n            n >>= 1;\n        }\n        temp.push_back(std::make_pair(count,\
    \ i));\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i : temp)\
    \ {\n        result.push_back(i.second);\n    }\n    return result;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_count;\n  std::vector<long> zeros_count;\n\
    \  std::vector<long> zero_arr;\n  std::vector<long> one_arr;\n  std::vector<long>\
    \ two_arr;\n  std::vector<long> three_arr;\n  std::vector<long> four_arr;\n  std::vector<long>\
    \ five_arr;\n  std::vector<long> six_arr;\n  std::vector<long> seven_arr;\n  std::vector<long>\
    \ eight_arr;\n  std::vector<long> nine_arr;\n  std::vector<long> ten_arr;\n  std::vector<long>\
    \ eleven_arr;\n  std::vector<long> twelve_arr;\n  std::vector<long> thirteen_arr;\n\
    \  std::vector<long> fourteen_arr;\n  std::vector<long> fifteen_arr;\n  std::vector<long>\
    \ sixteen_arr;\n  std::vector<long> seventeen_arr;\n  std::vector<long> eighteen_arr;\n\
    \  std::vector<long> nineteen_arr;\n  std::vector<long> twenty_arr;\n  std::vector<long>\
    \ twentyone_arr;\n  std::vector<long> twentytwo_arr;\n  std::vector<long> twentythree_arr;\n\
    \  std::vector<long> twentyfour_arr;\n  std::vector<long> twentyfive_arr;\n  std::vector<long>\
    \ twentysix_arr;\n  std::vector<long> twentyseven_arr;\n  std::vector<long> twentyeight_arr;\n\
    \  std::vector<long> twentynine_arr;\n  std::vector<long> thirty_arr;\n  std::vector<long>\
    \ thirtyone_arr;\n  std::vector<long> thirtytwo_arr;\n  std::vector<long> thirtythree_arr;\n\
    \  std::vector<long> thirtyfour_arr;\n  std::vector<long> thirtyfive_arr;\n  std::vector<long>\
    \ thirtysix_arr;\n  std::vector<long> thirtyseven_arr;\n", "  std::vector<std::pair<int,\
    \ long>> v;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      if (temp & 1) {\n        count++;\n      }\n      temp\
    \ = temp >> 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> ans;\n  for (auto i : v) {\n    ans.push_back(i.second);\n\
    \  }\n  return ans;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> result;\n  std::vector<long> one_count;\n\
    \  std::vector<long> zero_count;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n      if (num\
    \ % 2 == 1) {\n        count++;\n      }\n      num = num / 2;\n    }\n    if\
    \ (count == 0) {\n      zero_count.push_back(arr[i]);\n    } else {\n      one_count.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zero_count.begin(), zero_count.end());\n  std::sort(one_count.begin(),\
    \ one_count.end());\n  result.insert(result.end(), zero_count.begin(), zero_count.end());\n\
    \  result.insert(result.end(), one_count.begin(), one_count.end());\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<std::pair<int, int>>\
    \ ones_count;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    long num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n  \
    \      count++;\n      }\n      num /= 2;\n    }\n    ones_count.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n  for (int\
    \ i = 0; i < ones_count.size(); i++) {\n    sorted_arr.push_back(ones_count[i].second);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else {\n      if\
    \ (arr[i] % 2 == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n    \
    \    ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    result.push_back(ones[i]);\n  }\n  return result;",
  "  std::vector<long> bin_arr;\n  std::vector<long> dec_arr;\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < arr.size(); i++) {\n    bin_arr.push_back(std::bitset<32>(arr[i]).count());\n\
    \    dec_arr.push_back(arr[i]);\n  }\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    int min_index = std::min_element(bin_arr.begin(), bin_arr.end()) - bin_arr.begin();\n\
    \    result.push_back(dec_arr[min_index]);\n    bin_arr.erase(bin_arr.begin()\
    \ + min_index);\n    dec_arr.erase(dec_arr.begin() + min_index);\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    long count = 0;\n    long num = arr[i];\n    while (num > 0) {\n      if\
    \ (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n    if\
    \ (count == 0) {\n      zeros_count.push_back(arr[i]);\n    } else {\n      ones_count.push_back(count);\n\
    \    }\n  }\n  std::sort(zeros_count.begin(), zeros_count.end());\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  for (int i = 0; i < ones_count.size(); i++) {\n    for\
    \ (int j = 0; j < arr.size(); j++) {\n      long count = 0;\n      long num =\
    \ arr[j];\n      while (num > 0) {\n        if (num % 2 == 1) {\n          count++;\n\
    \        }\n        num /= 2;\n      }\n      if (count == ones_count[i]) {\n\
    \        sorted_arr.push_back(arr[j]);\n      }\n    }\n  }\n  for (int i = 0;\
    \ i < zeros_count.size(); i++) {\n    sorted_arr.push_back(zeros_count[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> sorted;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (long i : arr) {\n    int count = 0;\n    while (i) {\n \
    \     if (i & 1) {\n        count++;\n      }\n      i >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    sorted.push_back(i.second);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_ones;\n\
    \  std::vector<long> sorted_arr_zeros;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n    }\
    \ else {\n      sorted_arr_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(),\
    \ sorted_arr_zeros.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  return sorted_arr;", "  std::vector<long> sorted_arr;\n\
    \  std::vector<long> sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_dec;\n  std::vector<long> sorted_arr_ones_dec;\n\
    \  std::vector<long> sorted_arr_zeros_dec_final;\n  std::vector<long> sorted_arr_ones_dec_final;\n\
    \  std::vector<long> sorted_arr_final;\n  std::vector<long> sorted_arr_ones_final;\n\
    \  std::vector<long> sorted_arr_zeros_final;\n  std::vector<long> sorted_arr_ones_dec_final_final;\n\
    \  std::vector<long> sorted_arr_zeros_dec_final_final;\n  std::vector<long> sorted_arr_final_final;\n\
    \  std::vector<long> sorted_arr_ones_final_final;\n  std::vector<long> sorted_arr_zeros_final_final;\n\
    \  std::vector<long> sorted_arr_ones_dec_final_final_final;\n  std::vector<long>\
    \ sorted_arr_zeros_dec_final_final_final;\n  std::vector<long> sorted_arr_final_final_final;\n\
    \  std::vector<long> sorted_arr_ones_final_final_final;\n  std::vector<long> sorted_arr_zeros_final_final_final;\n\
    \  std::vector<long> sorted_arr_ones_dec_final_final_final_final;\n  std::vector<long>\
    \ sorted_arr_zeros_dec_final_final_final_final;\n  std::vector<long> sorted_arr_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_ones_final_final_final_final;\n  std::vector<long>\
    \ sorted_arr_zeros_final_final_final_final;\n  std::vector<long> sorted_arr_ones_dec_final_final_final_final_final;\n\
    \  std::vector<long> sorted_arr_zeros_dec", "  std::vector<long> sorted_arr;\n\
    \  std::vector<long> ones_count;\n  std::vector<long> zeros_count;\n  std::vector<long>\
    \ zeros_arr;\n  std::vector<long> ones_arr;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else\
    \ {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  for (int i = 0; i < ones_arr.size();\
    \ i++) {\n    int count = 0;\n    while (ones_arr[i] != 0) {\n      count += ones_arr[i]\
    \ & 1;\n      ones_arr[i] >>= 1;\n    }\n    ones_count.push_back(count);\n  }\n\
    \  for (int i = 0; i < zeros_arr.size(); i++) {\n    int count = 0;\n    while\
    \ (zeros_arr[i] != 0) {\n      count += zeros_arr[i] & 1;\n      zeros_arr[i]\
    \ >>= 1;\n    }\n    zeros_count.push_back(count);\n  }\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  std::sort(zeros_count.begin(), zeros_count.end());\n \
    \ for (int i = 0; i < ones_count.size(); i++) {\n    for (int j = 0; j < ones_arr.size();\
    \ j++) {\n      int count = 0;\n      while (ones_arr[j] != 0) {\n        count\
    \ += ones_arr[j] & 1;\n        ones_arr[j] >>= 1;\n      }\n      if (count ==\
    \ ones_count[i]) {\n        sorted_arr.push_back(ones_arr[j]);\n      }\n    }\n\
    \  }\n  for (int i = 0; i < zeros_count.size(); i++) {\n    for (int j = 0; j\
    \ < zeros_arr.size(); j++) {", "  std::sort(arr.begin(), arr.end(), [](long a,\
    \ long b) {\n    int count_a = std::bitset<32>(a).count();\n    int count_b =\
    \ std::bitset<32>(b).count();\n    if (count_a == count_b) {\n      return a <\
    \ b;\n    }\n    return count_a < count_b;\n  });\n  return arr;", "    std::vector<long>\
    \ res;\n    std::map<int, std::vector<long>> m;\n    for (auto i : arr) {\n  \
    \      int count = 0;\n        while (i > 0) {\n            if (i % 2 == 1)\n\
    \                count++;\n            i /= 2;\n        }\n        m[count].push_back(i);\n\
    \    }\n    for (auto i : m) {\n        std::sort(i.second.begin(), i.second.end());\n\
    \        for (auto j : i.second)\n            res.push_back(j);\n    }\n    return\
    \ res;", "  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones;\n\
    \  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp)\
    \ {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<long, long>> temp;\n  for (auto i : arr) {\n\
    \    long count = 0;\n    long num = i;\n    while (num) {\n      count += num\
    \ & 1;\n      num >>= 1;\n    }\n    temp.push_back(std::make_pair(count, i));\n\
    \  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n    result.push_back(i.second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n\
    \    int num = arr[i];\n    while (num > 0) {\n      count += num & 1;\n     \
    \ num >>= 1;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n\
    \  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size(); i++)\
    \ {\n    result.push_back(ones[i].second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> zeros;\n  std::vector<long> ones;\n  std::vector<long>\
    \ twos;\n  std::vector<long> threes;\n  std::vector<long> fours;\n  std::vector<long>\
    \ fives;\n  std::vector<long> sixes;\n  std::vector<long> sevens;\n  std::vector<long>\
    \ eights;\n  std::vector<long> nines;\n  std::vector<long> tens;\n  std::vector<long>\
    \ elevens;\n  std::vector<long> twelves;\n  std::vector<long> thirteens;\n  std::vector<long>\
    \ fourteens;\n  std::vector<long> fifteens;\n  std::vector<long> sixteens;\n \
    \ std::vector<long> seventeens;\n  std::vector<long> eighteens;\n  std::vector<long>\
    \ ninteens;\n  std::vector<long> twentys;\n  std::vector<long> twentys_ones;\n\
    \  std::vector<long> twentys_twos;\n  std::vector<long> twentys_threes;\n  std::vector<long>\
    \ twentys_fours;\n  std::vector<long> twentys_fives;\n  std::vector<long> twentys_sixes;\n\
    \  std::vector<long> twentys_sevens;\n  std::vector<long> twentys_eights;\n  std::vector<long>\
    \ twentys_nines;\n  std::vector<long> thirties;\n  std::vector<long> thirties_ones;\n\
    \  std::vector<long> thirties_twos;\n  std::vector<long> thirties_threes;\n  std::vector<long>\
    \ thirties_fours;\n  std::vector<long> thirties_fives;\n  std::vector<long> thirties_sixes;\n\
    \  std::vector<long> thirties_sevens;\n  std::vector<long> thirties_eights;\n\
    \  std::vector<long", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    long count = 0;\n    long num\
    \ = arr[i];\n    while (num) {\n      count += num & 1;\n      num >>= 1;\n  \
    \  }\n    ones_count.push_back(count);\n  }\n  std::vector<long> sorted_ones_count\
    \ = ones_count;\n  std::sort(sorted_ones_count.begin(), sorted_ones_count.end());\n\
    \  for (long i = 0; i < sorted_ones_count.size(); i++) {\n    long count = sorted_ones_count[i];\n\
    \    for (long j = 0; j < ones_count.size(); j++) {\n      if (ones_count[j] ==\
    \ count) {\n        sorted_arr.push_back(arr[j]);\n        ones_count[j] = -1;\n\
    \        break;\n      }\n    }\n  }\n  return sorted_arr;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long>\
    \ temp3;\n  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long>\
    \ temp6;\n  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long>\
    \ temp9;\n  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n  std::vector<long>", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (auto i : arr) {\n    if (i < 0) {\n\
    \      result.push_back(i);\n    } else {\n      int count = 0;\n      while (i)\
    \ {\n        if (i & 1) {\n          count++;\n        }\n        i >>= 1;\n \
    \     }\n      if (count == 0) {\n        zeros.push_back(i);\n      } else {\n\
    \        ones.push_back(i);\n      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n\
    \  std::sort(ones.begin(), ones.end());\n  for (auto i : zeros) {\n    result.push_back(i);\n\
    \  }\n  for (auto i : ones) {\n    result.push_back(i);\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    long num = arr[i];\n    long count = 0;\n    while (num > 0) {\n\
    \      if (num % 2 == 1) {\n        count++;\n      }\n      num /= 2;\n    }\n\
    \    ones.push_back(count);\n  }\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   long min = *std::min_element(ones.begin(), ones.end());\n    int index = std::distance(ones.begin(),\
    \ std::find(ones.begin(), ones.end(), min));\n    sorted.push_back(arr[index]);\n\
    \    ones[index] = INT_MAX;\n  }\n  return sorted;", "  std::vector<std::pair<long,\
    \ long>> v;\n  for (auto i : arr) {\n    long count = 0;\n    long temp = i;\n\
    \    while (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    v.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> result;\n \
    \ for (auto i : v) {\n    result.push_back(i.second);\n  }\n  return result;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long>\
    \ sorted_arr_zeros;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n    } else {\n      sorted_arr_ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted_arr_ones.begin(), sorted_arr_ones.end());\n  std::sort(sorted_arr_zeros.begin(),\
    \ sorted_arr_zeros.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(),\
    \ sorted_arr_zeros.end());\n  return sorted_arr;", "  std::vector<long> result;\n\
    \  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n\
    \    } else {\n      int count = 0;\n      long num = arr[i];\n      while (num\
    \ > 0) {\n        if (num % 2 == 1) {\n          count++;\n        }\n       \
    \ num /= 2;\n      }\n      if (count == 0) {\n        zeros.push_back(arr[i]);\n\
    \      } else {\n        ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  return result;", "  std::vector<long> sorted_array;\n  std::vector<long> sorted_array_ones;\n\
    \  std::vector<long> sorted_array_zeros;\n  std::vector<long> sorted_array_negatives;\n\
    \  std::vector<long> sorted_array_positives;\n  std::vector<long> sorted_array_negatives_ones;\n\
    \  std::vector<long> sorted_array_negatives_zeros;\n  std::vector<long> sorted_array_positives_ones;\n\
    \  std::vector<long> sorted_array_positives_zeros;\n  std::vector<long> sorted_array_negatives_ones_zeros;\n\
    \  std::vector<long> sorted_array_positives_ones_zeros;\n  std::vector<long> sorted_array_negatives_zeros_ones;\n\
    \  std::vector<long> sorted_array_positives_zeros_ones;\n  std::vector<long> sorted_array_negatives_ones_zeros_positives;\n\
    \  std::vector<long> sorted_array_negatives_zeros_ones_positives;\n  std::vector<long>\
    \ sorted_array_positives_ones_zeros_negatives;\n  std::vector<long> sorted_array_positives_zeros_ones_negatives;\n\
    \  std::vector<long> sorted_array_negatives_ones_zeros_positives_zeros;\n  std::vector<long>\
    \ sorted_array_negatives_zeros_ones_positives_zeros;\n  std::vector<long> sorted_array_positives_ones_zeros_negatives_zeros;\n\
    \  std::vector<long> sorted_array_positives_zeros_ones_negatives_zeros;\n  std::vector<long>\
    \ sorted_array_negatives_ones_zeros_positives_ones;\n  std::vector<long> sorted_array_negatives_zeros_ones_positives_ones;\n\
    \  std::vector<long> sorted_array_positives_ones_zeros_negatives_ones;\n  std::vector<long>\
    \ sorted_array_positives_zeros_ones_", "    std::vector<long> sorted_arr;\n  \
    \  std::vector<long> ones_count;\n    for (auto i : arr) {\n        int count\
    \ = 0;\n        int num = i;\n        while (num) {\n            count += num\
    \ & 1;\n            num >>= 1;\n        }\n        ones_count.push_back(count);\n\
    \    }\n    std::sort(arr.begin(), arr.end(), [&ones_count](long a, long b) {\n\
    \        if (ones_count[a] == ones_count[b]) {\n            return a < b;\n  \
    \      }\n        return ones_count[a] < ones_count[b];\n    });\n    return arr;",
  "  std::vector<long> sorted;\n  std::vector<std::pair<int, int>> ones;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int num = arr[i];\n    int count = 0;\n \
    \   while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    ones.push_back(std::make_pair(count, arr[i]));\n\
    \  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    sorted.push_back(ones[i].second);\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long> zeros_arr;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n\
    \    } else {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  for (int i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (int i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ long>> temp;\n  for (auto i : arr) {\n    int count = 0;\n    long n = i;\n\
    \    while (n) {\n      count += n & 1;\n      n >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (auto i : temp) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "    std::vector<long>\
    \ sorted_arr;\n    std::vector<long> ones_count;\n    std::vector<long> zeros_count;\n\
    \    std::vector<long> sorted_ones_count;\n    std::vector<long> sorted_zeros_count;\n\
    \    std::vector<long> sorted_ones_count_index;\n    std::vector<long> sorted_zeros_count_index;\n\
    \    std::vector<long> sorted_ones_count_index_decimal;\n    std::vector<long>\
    \ sorted_zeros_count_index_decimal;\n    std::vector<long> sorted_ones_count_index_decimal_index;\n\
    \    std::vector<long> sorted_zeros_count_index_decimal_index;\n    std::vector<long>\
    \ sorted_ones_count_index_decimal_index_index;\n    std::vector<long> sorted_zeros_count_index_decimal_index_index;\n\
    \    std::vector<long> sorted_ones_count_index_decimal_index_index_index;\n  \
    \  std::vector<long> sorted_zeros_count_index_decimal_index_index_index;\n   \
    \ std::vector<long> sorted_ones_count_index_decimal_index_index_index_index;\n\
    \    std::vector<long> sorted_zeros_count_index_decimal_index_index_index_index;\n\
    \    std::vector<long> sorted_ones_count_index_decimal_index_index_index_index_index;\n\
    \    std::vector<long> sorted_zeros_count_index_decimal_index_index_index_index_index;\n\
    \    std::vector<long> sorted_ones_count_index_decimal_index_index_index_index_index_index;\n\
    \    std::vector<long> sorted_zeros_count_index_decimal_index_index_index_index_index_index;\n\
    \    std::vector<long> sorted_ones_count_index_decimal_index_index_index_index_index_index_index;\n\
    \    std::vector<long> sorted_zeros_count_index_decimal_index_index", "    std::vector<long>\
    \ result;\n    std::vector<long> one_count;\n    std::vector<long> zero_count;\n\
    \    std::vector<long> zero_count_sorted;\n    std::vector<long> one_count_sorted;\n\
    \    std::vector<long> temp;\n    std::vector<long> temp_sorted;\n    std::vector<long>\
    \ temp_sorted_sorted;\n    std::vector<long> temp_sorted_sorted_sorted;\n    int\
    \ count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] ==\
    \ 0) {\n            count = 0;\n            zero_count.push_back(count);\n   \
    \     } else {\n            count = 0;\n            while (arr[i] != 0) {\n  \
    \              arr[i] = arr[i] / 2;\n                count++;\n            }\n\
    \            one_count.push_back(count);\n        }\n    }\n    one_count_sorted\
    \ = one_count;\n    zero_count_sorted = zero_count;\n    std::sort(one_count_sorted.begin(),\
    \ one_count_sorted.end());\n    std::sort(zero_count_sorted.begin(), zero_count_sorted.end());\n\
    \    for (int i = 0; i < one_count_sorted.size(); i++) {\n        for (int j =\
    \ 0; j < one_count.size(); j++) {\n            if (one_count_sorted[i] == one_count[j])\
    \ {\n                temp.push_back(arr[j]);\n            }\n        }\n    }\n\
    \    for (int i = 0; i < zero_count_sorted.size(); i++) {\n        for (int j\
    \ = 0; j < zero_count.size(); j++) {\n            if (zero_count_sorted[i] ==\
    \ zero_count[j]) {\n                temp.push_back(arr[j]);\n            }\n \
    \       }\n    }\n    temp_sorted = temp;\n    std::sort(temp_sorted.begin(),\
    \ temp_sorted.end());", "  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n\
    \  std::vector<long> sorted_zeros;\n  std::vector<long> sorted_negatives;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_negatives.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else\
    \ if (arr[i] == 1) {\n      sorted_ones.push_back(arr[i]);\n    } else {\n   \
    \   sorted.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n\
    \  std::sort(sorted_negatives.begin(), sorted_negatives.end());\n  std::sort(sorted_zeros.begin(),\
    \ sorted_zeros.end());\n  std::sort(sorted_ones.begin(), sorted_ones.end());\n\
    \  sorted.insert(sorted.end(), sorted_negatives.begin(), sorted_negatives.end());\n\
    \  sorted.insert(sorted.end(), sorted_zeros.begin(), sorted_zeros.end());\n  sorted.insert(sorted.end(),\
    \ sorted_ones.begin(), sorted_ones.end());\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> temp;\n  std::vector<long> temp2;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    temp.push_back(arr[i]);\n  }\n  std::sort(temp.begin(),\
    \ temp.end());\n  for (int i = 0; i < temp.size(); i++) {\n    if (temp[i] < 0)\
    \ {\n      sorted.push_back(temp[i]);\n    }\n  }\n  for (int i = 0; i < temp.size();\
    \ i++) {\n    if (temp[i] >= 0) {\n      temp2.push_back(temp[i]);\n    }\n  }\n\
    \  std::sort(temp2.begin(), temp2.end(), [](long a, long b) {\n    int countA\
    \ = 0;\n    int countB = 0;\n    while (a > 0) {\n      if (a % 2 == 1) {\n  \
    \      countA++;\n      }\n      a = a / 2;\n    }\n    while (b > 0) {\n    \
    \  if (b % 2 == 1) {\n        countB++;\n      }\n      b = b / 2;\n    }\n  \
    \  if (countA == countB) {\n      return a < b;\n    }\n    return countA < countB;\n\
    \  });\n  for (int i = 0; i < temp2.size(); i++) {\n    sorted.push_back(temp2[i]);\n\
    \  }\n  return sorted;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  for (auto i : arr) {\n    int count = 0;\n\
    \    while (i) {\n      count += i & 1;\n      i >>= 1;\n    }\n    ones_count.push_back(count);\n\
    \    zeros_count.push_back(count);\n  }\n  std::sort(ones_count.begin(), ones_count.end());\n\
    \  for (auto i : ones_count) {\n    for (int j = 0; j < zeros_count.size(); j++)\
    \ {\n      if (zeros_count[j] == i) {\n        sorted_arr.push_back(arr[j]);\n\
    \        zeros_count[j] = -1;\n        break;\n      }\n    }\n  }\n  return sorted_arr;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long>\
    \ zeros_arr;\n  std::vector<long> negative_arr;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] < 0) {\n      negative_arr.push_back(arr[i]);\n    }\
    \ else if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else {\n\
    \      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(negative_arr.begin(),\
    \ negative_arr.end());\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  sorted_arr.insert(sorted_arr.end(), negative_arr.begin(),\
    \ negative_arr.end());\n  sorted_arr.insert(sorted_arr.end(), zeros_arr.begin(),\
    \ zeros_arr.end());\n  sorted_arr.insert(sorted_arr.end(), ones_arr.begin(), ones_arr.end());\n\
    \  return sorted_arr;", "  std::vector<long> sorted;\n  std::vector<long> sorted_ones;\n\
    \  std::vector<long> sorted_zeros;\n  std::vector<long> sorted_neg;\n  std::vector<long>\
    \ sorted_pos;\n  std::vector<long> sorted_neg_ones;\n  std::vector<long> sorted_neg_zeros;\n\
    \  std::vector<long> sorted_pos_ones;\n  std::vector<long> sorted_pos_zeros;\n\
    \  std::vector<long> sorted_neg_ones_pos;\n  std::vector<long> sorted_neg_zeros_pos;\n\
    \  std::vector<long> sorted_pos_ones_pos;\n  std::vector<long> sorted_pos_zeros_pos;\n\
    \  std::vector<long> sorted_neg_ones_neg;\n  std::vector<long> sorted_neg_zeros_neg;\n\
    \  std::vector<long> sorted_pos_ones_neg;\n  std::vector<long> sorted_pos_zeros_neg;\n\
    \  std::vector<long> sorted_neg_ones_pos_neg;\n  std::vector<long> sorted_neg_zeros_pos_neg;\n\
    \  std::vector<long> sorted_pos_ones_pos_neg;\n  std::vector<long> sorted_pos_zeros_pos_neg;\n\
    \  std::vector<long> sorted_neg_ones_neg_neg;\n  std::vector<long> sorted_neg_zeros_neg_neg;\n\
    \  std::vector<long> sorted_pos_ones_neg_neg;\n  std::vector<long> sorted_pos_zeros_neg_neg;\n\
    \  std::vector<long> sorted_neg_ones_pos_pos;\n  std::vector<long> sorted_neg_zeros_pos_pos;\n\
    \  std::vector<long> sorted_pos_ones_pos_pos;\n  std::vector<long> sorted_pos_zeros_pos_pos;\n\
    \  std::vector<long> sorted_neg_ones_neg_pos;\n  std::vector<long> sorted_neg_zeros_neg_pos;\n\
    \  std::", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, int>> temp;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int n = arr[i];\n   \
    \ while (n > 0) {\n      count += n & 1;\n      n >>= 1;\n    }\n    temp.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    result.push_back(temp[i].second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n \
    \ sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;", " \
    \   std::vector<long> sorted_arr;\n    std::vector<long> ones_arr;\n    std::vector<long>\
    \ zeros_arr;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            zeros_arr.push_back(arr[i]);\n        } else {\n    \
    \        ones_arr.push_back(arr[i]);\n        }\n    }\n    std::sort(zeros_arr.begin(),\
    \ zeros_arr.end());\n    std::sort(ones_arr.begin(), ones_arr.end());\n    sorted_arr.insert(sorted_arr.end(),\
    \ zeros_arr.begin(), zeros_arr.end());\n    sorted_arr.insert(sorted_arr.end(),\
    \ ones_arr.begin(), ones_arr.end());\n    return sorted_arr;", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> zero_ones;\n  std::vector<long> one_ones;\n\
    \  std::vector<long> two_ones;\n  std::vector<long> three_ones;\n  std::vector<long>\
    \ four_ones;\n  std::vector<long> five_ones;\n  std::vector<long> six_ones;\n\
    \  std::vector<long> seven_ones;\n  std::vector<long> eight_ones;\n  std::vector<long>\
    \ nine_ones;\n  std::vector<long> ten_ones;\n  std::vector<long> eleven_ones;\n\
    \  std::vector<long> twelve_ones;\n  std::vector<long> thirteen_ones;\n  std::vector<long>\
    \ fourteen_ones;\n  std::vector<long> fifteen_ones;\n  std::vector<long> sixteen_ones;\n\
    \  std::vector<long> seventeen_ones;\n  std::vector<long> eighteen_ones;\n  std::vector<long>\
    \ nineteen_ones;\n  std::vector<long> twenty_ones;\n  std::vector<long> twentyone_ones;\n\
    \  std::vector<long> twentytwo_ones;\n  std::vector<long> twentythree_ones;\n\
    \  std::vector<long> twentyfour_ones;\n  std::vector<long> twentyfive_ones;\n\
    \  std::vector<long> twentysix_ones;\n  std::vector<long> twentyseven_ones;\n\
    \  std::vector<long> twentyeight_ones;\n  std::vector<long> twentynine_ones;\n\
    \  std::vector<long> thirty_ones;\n  std::vector<long> thirtyone_ones;\n  std::vector<long>\
    \ thirtytwo_ones;\n  std::vector<long> thirtythree_ones;\n  std::vector<long>\
    \ thirtyfour_ones;\n  std::vector<long> thirtyfive_ones;\n  std::vector<long>\
    \ thirtysix_ones;\n  std::vector<long> thirtyseven_ones;\n  std::vector<long>\
    \ thirtyeight_ones;\n  std::vector<long> thirtynine_ones;", "  std::vector<long>\
    \ sorted_array;\n  std::vector<long> ones_count;\n  std::vector<long> zeros_count;\n\
    \  std::vector<long> zeros_array;\n  std::vector<long> ones_array;\n  std::vector<long>\
    \ final_array;\n  std::vector<long>::iterator it;\n  long count = 0;\n  long count_ones\
    \ = 0;\n  long count_zeros = 0;\n  long num = 0;\n  long num_ones = 0;\n  long\
    \ num_zeros = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    num = arr[i];\n\
    \    count = 0;\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n\
    \      }\n      num = num / 2;\n    }\n    sorted_array.push_back(count);\n  }\n\
    \  for (int i = 0; i < sorted_array.size(); i++) {\n    if (sorted_array[i] ==\
    \ 0) {\n      zeros_count.push_back(arr[i]);\n    } else {\n      ones_count.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros_count.begin(), zeros_count.end());\n  std::sort(ones_count.begin(),\
    \ ones_count.end());\n  for (int i = 0; i < zeros_count.size(); i++) {\n    num_zeros\
    \ = zeros_count[i];\n    count_zeros = 0;\n    while (num_zeros > 0) {\n     \
    \ if (num_zeros % 2 == 1) {\n        count_zeros++;\n      }\n      num_zeros\
    \ = num_zeros / 2;\n    }\n    zeros_array.push_back(count_zeros);\n  }\n  for\
    \ (int i = 0; i < ones_count.size(); i++) {\n    num_ones = ones_count[i];\n \
    \   count_ones = 0;\n    while (num_ones > 0) {\n      if (num_ones % 2", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      zeros.push_back(i);\n    } else {\n   \
    \   ones.push_back(i);\n    }\n  }\n  std::sort(ones.begin(), ones.end());\n \
    \ std::sort(zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return\
    \ sorted;", "  std::vector<long> sorted;\n  std::vector<long> zeros;\n  std::vector<long>\
    \ ones;\n  std::vector<long> twos;\n  std::vector<long> threes;\n  std::vector<long>\
    \ fours;\n  std::vector<long> fives;\n  std::vector<long> sixes;\n  std::vector<long>\
    \ sevens;\n  std::vector<long> eights;\n  std::vector<long> nines;\n  std::vector<long>\
    \ tens;\n  std::vector<long> elevens;\n  std::vector<long> twelves;\n  std::vector<long>\
    \ thirteens;\n  std::vector<long> fourteens;\n  std::vector<long> fifteens;\n\
    \  std::vector<long> sixteens;\n  std::vector<long> seventeens;\n  std::vector<long>\
    \ eighteens;\n  std::vector<long> ninteens;\n  std::vector<long> twenty;\n  std::vector<long>\
    \ twentyone;\n  std::vector<long> twentytwo;\n  std::vector<long> twentythree;\n\
    \  std::vector<long> twentyfour;\n  std::vector<long> twentyfive;\n  std::vector<long>\
    \ twentysix;\n  std::vector<long> twentyseven;\n  std::vector<long> twentyeight;\n\
    \  std::vector<long> twentynine;\n  std::vector<long> thirty;\n  std::vector<long>\
    \ thirtyone;\n  std::vector<long> thirtytwo;\n  std::vector<long> thirtythree;\n\
    \  std::vector<long> thirtyfour;\n  std::vector<long> thirtyfive;\n  std::vector<long>\
    \ thirtysix;\n  std::vector<long> thirtyseven;\n  std::vector<long> thirtyeight;\n\
    \  std::vector<long> thirtynine;\n  std::vector<long> forty;\n  std::vector<long>\
    \ fortyone;\n  std::vector<long> fortytwo;\n  std::vector<long> fortythree;\n\
    \  std::vector<long> fortyfour;", "  std::vector<long> sorted;\n  std::vector<long>\
    \ sorted_ones;\n  std::vector<long> sorted_zeros;\n  std::vector<long> sorted_neg;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sorted_neg.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      sorted_zeros.push_back(arr[i]);\n    } else\
    \ if (arr[i] == 1) {\n      sorted_ones.push_back(arr[i]);\n    } else {\n   \
    \   sorted.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n\
    \  std::sort(sorted_neg.begin(), sorted_neg.end());\n  std::reverse(sorted_neg.begin(),\
    \ sorted_neg.end());\n  std::sort(sorted_zeros.begin(), sorted_zeros.end());\n\
    \  std::sort(sorted_ones.begin(), sorted_ones.end());\n  sorted.insert(sorted.end(),\
    \ sorted_neg.begin(), sorted_neg.end());\n  sorted.insert(sorted.end(), sorted_zeros.begin(),\
    \ sorted_zeros.end());\n  sorted.insert(sorted.end(), sorted_ones.begin(), sorted_ones.end());\n\
    \  return sorted;", "  std::vector<long> result;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] % 2 == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (long i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, long>> ones_and_nums;\n\
    \  for (auto num : arr) {\n    int ones = 0;\n    int n = num;\n    while (n >\
    \ 0) {\n      ones += n & 1;\n      n >>= 1;\n    }\n    ones_and_nums.push_back(std::make_pair(ones,\
    \ num));\n  }\n  std::sort(ones_and_nums.begin(), ones_and_nums.end());\n  for\
    \ (auto p : ones_and_nums) {\n    result.push_back(p.second);\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n\
    \  std::vector<long> result;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      sorted.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(sorted.begin(), sorted.end());\n  for (int i = 0; i <\
    \ sorted.size(); i++) {\n    int count = 0;\n    int temp = sorted[i];\n    while\
    \ (temp != 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n     \
    \ temp = temp / 2;\n    }\n    ones.push_back(count);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    for (int j = i + 1; j < ones.size(); j++) {\n \
    \     if (ones[i] > ones[j]) {\n        int temp = ones[i];\n        ones[i] =\
    \ ones[j];\n        ones[j] = temp;\n        temp = sorted[i];\n        sorted[i]\
    \ = sorted[j];\n        sorted[j] = temp;\n      }\n    }\n  }\n  for (int i =\
    \ 0; i < sorted.size(); i++) {\n    result.push_back(sorted[i]);\n  }\n  for (int\
    \ i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  std::vector<long> sorted_ones_count;\n  std::vector<long>\
    \ sorted_zeros_count;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long>\
    \ sorted_arr_zeros;\n  std::vector<long> sorted_arr_ones_zeros;\n  std::vector<long>\
    \ sorted_arr_zeros_ones;\n  long count_ones = 0;\n  long count_zeros = 0;\n  long\
    \ i = 0;\n  long j = 0;\n  long k = 0;\n  long l = 0;\n  long m = 0;\n  long n\
    \ = 0;\n  long o = 0;\n  long p = 0;\n  long q = 0;\n  long r = 0;\n  long s =\
    \ 0;\n  long t = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n\
    \  long y = 0;\n  long z = 0;\n  long aa = 0;\n  long bb = 0;\n  long cc = 0;\n\
    \  long dd = 0;\n  long ee = 0;\n  long ff = 0;\n  long gg = 0;\n  long hh = 0;\n\
    \  long ii = 0;\n  long jj = 0;\n  long kk = 0;\n  long ll = 0;\n  long mm = 0;\n\
    \  long nn = 0;\n  long oo = 0;\n  long pp = 0;\n  long qq = 0;\n  long rr = 0;\n\
    \  long ss = 0;\n  long tt = 0;\n  long uu = 0;\n  long vv = 0;\n  long ww = 0;\n\
    \  long xx = 0;\n  long yy = 0;\n  long zz = 0;\n  long aaa = 0;\n  long bbb =\
    \ 0;\n  long ccc = 0;\n  long ddd = 0;\n  long eee = 0", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp) {\n   \
    \   count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i\
    \ < ones.size(); i++) {\n    result.push_back(ones[i].second);\n  }\n  return\
    \ result;", "    std::vector<long> result;\n    std::vector<std::pair<long, long>>\
    \ temp;\n    for (auto i : arr) {\n        long count = 0;\n        long num =\
    \ i;\n        while (num) {\n            count += num & 1;\n            num >>=\
    \ 1;\n        }\n        temp.push_back(std::make_pair(count, i));\n    }\n  \
    \  std::sort(temp.begin(), temp.end());\n    for (auto i : temp) {\n        result.push_back(i.second);\n\
    \    }\n    return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n  for (int i = 0; i\
    \ < arr.size(); i++) {\n    if (arr[i] == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_arr_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(),\
    \ sorted_arr_zeros.end());\n  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  return sorted_arr;", "  std::vector<long> result;\n\
    \  std::vector<std::pair<int, int>> ones_and_values;\n  for (auto i : arr) {\n\
    \    int ones = 0;\n    int value = i;\n    while (value) {\n      ones += value\
    \ % 2;\n      value /= 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n  for\
    \ (auto i : ones_and_values) {\n    result.push_back(i.second);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long> zeros_count;\n  std::vector<long> zeros_arr;\n\
    \  std::vector<long> ones_arr;\n  std::vector<long>::iterator it;\n  std::vector<long>::iterator\
    \ it2;\n  std::vector<long>::iterator it3;\n  std::vector<long>::iterator it4;\n\
    \  std::vector<long>::iterator it5;\n  std::vector<long>::iterator it6;\n  std::vector<long>::iterator\
    \ it7;\n  std::vector<long>::iterator it8;\n  std::vector<long>::iterator it9;\n\
    \  std::vector<long>::iterator it10;\n  std::vector<long>::iterator it11;\n  std::vector<long>::iterator\
    \ it12;\n  std::vector<long>::iterator it13;\n  std::vector<long>::iterator it14;\n\
    \  std::vector<long>::iterator it15;\n  std::vector<long>::iterator it16;\n  std::vector<long>::iterator\
    \ it17;\n  std::vector<long>::iterator it18;\n  std::vector<long>::iterator it19;\n\
    \  std::vector<long>::iterator it20;\n  std::vector<long>::iterator it21;\n  std::vector<long>::iterator\
    \ it22;\n  std::vector<long>::iterator it23;\n  std::vector<long>::iterator it24;\n\
    \  std::vector<long>::iterator it25;\n  std::vector<long>::iterator it26;\n  std::vector<long>::iterator\
    \ it27;\n  std::vector<long>::iterator it28;\n  std::vector<long>::iterator it29;\n\
    \  std::vector<long>::iterator it30;\n  std::vector<long>::iterator it31;\n  std::vector<long>::iterator\
    \ it32;\n  std::vector<long>::iterator it33;\n  std::vector<long>::iterator it34;\n\
    \  std::vector<long>::", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    long temp = i;\n    while\
    \ (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp\
    \ /= 2;\n    }\n    map[count].push_back(i);\n  }\n  for (auto it = map.begin();\
    \ it != map.end(); it++) {\n    std::sort(it->second.begin(), it->second.end());\n\
    \    for (auto i : it->second) {\n      result.push_back(i);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n  std::vector<long>\
    \ zeros;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n \
    \     zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), zeros.begin(), zeros.end());\n\
    \  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return sorted;",
  "  std::vector<long> result;\n  std::map<int, std::vector<long>> map;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    long temp = i;\n    while (temp) {\n   \
    \   if (temp & 1) {\n        count++;\n      }\n      temp = temp >> 1;\n    }\n\
    \    map[count].push_back(i);\n  }\n  for (auto i : map) {\n    std::sort(i.second.begin(),\
    \ i.second.end());\n    result.insert(result.end(), i.second.begin(), i.second.end());\n\
    \  }\n  return result;", "  // your code here\n  std::vector<long> result;\n \
    \ std::vector<long> temp;\n  std::vector<long> temp2;\n  std::vector<long> temp3;\n\
    \  std::vector<long> temp4;\n  std::vector<long> temp5;\n  std::vector<long> temp6;\n\
    \  std::vector<long> temp7;\n  std::vector<long> temp8;\n  std::vector<long> temp9;\n\
    \  std::vector<long> temp10;\n  std::vector<long> temp11;\n  std::vector<long>\
    \ temp12;\n  std::vector<long> temp13;\n  std::vector<long> temp14;\n  std::vector<long>\
    \ temp15;\n  std::vector<long> temp16;\n  std::vector<long> temp17;\n  std::vector<long>\
    \ temp18;\n  std::vector<long> temp19;\n  std::vector<long> temp20;\n  std::vector<long>\
    \ temp21;\n  std::vector<long> temp22;\n  std::vector<long> temp23;\n  std::vector<long>\
    \ temp24;\n  std::vector<long> temp25;\n  std::vector<long> temp26;\n  std::vector<long>\
    \ temp27;\n  std::vector<long> temp28;\n  std::vector<long> temp29;\n  std::vector<long>\
    \ temp30;\n  std::vector<long> temp31;\n  std::vector<long> temp32;\n  std::vector<long>\
    \ temp33;\n  std::vector<long> temp34;\n  std::vector<long> temp35;\n  std::vector<long>\
    \ temp36;\n  std::vector<long> temp37;\n  std::vector<long> temp38;\n  std::vector<long>\
    \ temp39;\n  std::vector<long> temp40;\n  std::vector<long> temp41;\n  std::vector<long>\
    \ temp42;\n  std::vector<long> temp43;\n  std::vector<long> temp44;\n  std::vector<long>\
    \ temp45;\n ", "  std::vector<long> sorted;\n  std::vector<long> one_count;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n\
    \      num /= 2;\n    }\n    one_count.push_back(count);\n  }\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    int min = INT_MAX;\n    int index = 0;\n    for\
    \ (int j = 0; j < arr.size(); j++) {\n      if (one_count[j] < min) {\n      \
    \  min = one_count[j];\n        index = j;\n      }\n    }\n    sorted.push_back(arr[index]);\n\
    \    one_count[index] = INT_MAX;\n  }\n  return sorted;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long>\
    \ temp;\n  std::vector<long> temp2;\n  std::vector<long> temp3;\n  std::vector<long>\
    \ temp4;\n  std::vector<long> temp5;\n  std::vector<long> temp6;\n  std::vector<long>\
    \ temp7;\n  std::vector<long> temp8;\n  std::vector<long> temp9;\n  std::vector<long>\
    \ temp10;\n  std::vector<long> temp11;\n  std::vector<long> temp12;\n  std::vector<long>\
    \ temp13;\n  std::vector<long> temp14;\n  std::vector<long> temp15;\n  std::vector<long>\
    \ temp16;\n  std::vector<long> temp17;\n  std::vector<long> temp18;\n  std::vector<long>\
    \ temp19;\n  std::vector<long> temp20;\n  std::vector<long> temp21;\n  std::vector<long>\
    \ temp22;\n  std::vector<long> temp23;\n  std::vector<long> temp24;\n  std::vector<long>\
    \ temp25;\n  std::vector<long> temp26;\n  std::vector<long> temp27;\n  std::vector<long>\
    \ temp28;\n  std::vector<long> temp29;\n  std::vector<long> temp30;\n  std::vector<long>\
    \ temp31;\n  std::vector<long> temp32;\n  std::vector<long> temp33;\n  std::vector<long>\
    \ temp34;\n  std::vector<long> temp35;\n  std::vector<long> temp36;\n  std::vector<long>\
    \ temp37;\n  std::vector<long> temp38;\n  std::vector<long> temp39;\n  std::vector<long>\
    \ temp40;\n  std::vector<long> temp41;\n  std::vector<long> temp42;\n  std::vector<long>\
    \ temp43;\n  std::vector<long> temp", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long> zeros_count;\n  std::vector<long> zeros_arr;\n\
    \  std::vector<long> ones_arr;\n  std::vector<long>::iterator it;\n  std::vector<long>::iterator\
    \ it2;\n  std::vector<long>::iterator it3;\n  std::vector<long>::iterator it4;\n\
    \  std::vector<long>::iterator it5;\n  std::vector<long>::iterator it6;\n  std::vector<long>::iterator\
    \ it7;\n  std::vector<long>::iterator it8;\n  std::vector<long>::iterator it9;\n\
    \  std::vector<long>::iterator it10;\n  std::vector<long>::iterator it11;\n  std::vector<long>::iterator\
    \ it12;\n  std::vector<long>::iterator it13;\n  std::vector<long>::iterator it14;\n\
    \  std::vector<long>::iterator it15;\n  std::vector<long>::iterator it16;\n  std::vector<long>::iterator\
    \ it17;\n  std::vector<long>::iterator it18;\n  std::vector<long>::iterator it19;\n\
    \  std::vector<long>::iterator it20;\n  std::vector<long>::iterator it21;\n  std::vector<long>::iterator\
    \ it22;\n  std::vector<long>::iterator it23;\n  std::vector<long>::iterator it24;\n\
    \  std::vector<long>::iterator it25;\n  std::vector<long>::iterator it26;\n  std::vector<long>::iterator\
    \ it27;\n  std::vector<long>::iterator it28;\n  std::vector<long>::iterator it29;\n\
    \  std::vector<long>::iterator it30;\n  std::vector<long>::iterator it31;\n  std::vector<long>::iterator\
    \ it32;\n  std::vector<long>::iterator it33;\n  std::vector<long>::iterator it34;\n\
    \  std::vector<long>::", "  std::vector<long> result;\n  std::map<int, std::vector<long>>\
    \ map;\n  for (auto i : arr) {\n    int count = 0;\n    int temp = i;\n    while\
    \ (temp) {\n      count += temp & 1;\n      temp >>= 1;\n    }\n    map[count].push_back(i);\n\
    \  }\n  for (auto i : map) {\n    std::sort(i.second.begin(), i.second.end());\n\
    \    result.insert(result.end(), i.second.begin(), i.second.end());\n  }\n  return\
    \ result;", "  std::vector<long> sorted;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  int count = 0;\n  int count2 = 0;\n  int count3 = 0;\n  int count4\
    \ = 0;\n  int count5 = 0;\n  int count6 = 0;\n  int count7 = 0;\n  int count8\
    \ = 0;\n  int count9 = 0;\n  int count10 = 0;\n  int count11 = 0;\n  int count12\
    \ = 0;\n  int count13 = 0;\n  int count14 = 0;\n  int count15 = 0;\n  int count16\
    \ = 0;\n  int count17 = 0;\n  int count18 = 0;\n  int count19 = 0;\n  int count20\
    \ = 0;\n  int count21 = 0;\n  int count22 = 0;\n  int count23 = 0;\n  int count24\
    \ = 0;\n  int count25 = 0;\n  int count26 = 0;\n  int count27 = 0;\n  int count28\
    \ = 0;\n  int count29 = 0;\n  int count30 = 0;\n  int count31 = 0;\n  int count32\
    \ = 0;\n  int count33 = 0;\n  int count34 = 0;\n  int count35 = 0;\n  int count36\
    \ = 0;\n  int count37 = 0;\n  int count38 = 0;\n  int count39 = 0;\n  int count40\
    \ = 0;\n  int count41 = 0;\n  int count42 = 0;\n  int count43 = 0;\n  int count44\
    \ = 0;\n  int count45 = 0;\n  int count46 = 0;\n  int count47 = 0;\n  int count48\
    \ = 0;\n  int count49 = 0;\n  int count50 = 0;\n  int count51 = 0;\n  int count52\
    \ = 0;\n  int count53 = 0;\n  int count54 = 0;\n  int count55 = 0;\n  int count56\
    \ = 0;\n  int count57 = 0;\n  int count58 = 0;\n  int count59 = 0;\n  int count60\
    \ = 0;\n ", "  // your code here\n  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  std::vector<long> temp;\n  for (int i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      temp.push_back(arr[i]);\n    }\n  }\n  for (int i = 0; i\
    \ < temp.size(); i++) {\n    int count = 0;\n    while (temp[i] > 0) {\n     \
    \ if (temp[i] % 2 == 1) {\n        count++;\n      }\n      temp[i] = temp[i]\
    \ / 2;\n    }\n    ones.push_back(count);\n  }\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    for (int j = i + 1; j < ones.size(); j++) {\n      if (ones[i] >\
    \ ones[j]) {\n        int temp = ones[i];\n        ones[i] = ones[j];\n      \
    \  ones[j] = temp;\n        temp = arr[i];\n        arr[i] = arr[j];\n       \
    \ arr[j] = temp;\n      }\n    }\n  }\n  for (int i = 0; i < ones.size(); i++)\
    \ {\n    for (int j = i + 1; j < ones.size(); j++) {\n      if (ones[i] == ones[j])\
    \ {\n        if (arr[i] > arr[j]) {\n          int temp = arr[i];\n          arr[i]\
    \ = arr[j];\n          arr[j] = temp;\n        }\n      }\n    }\n  }\n  for (int\
    \ i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n  }\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    result.push_back(arr[i]);\n  }\n  return\
    \ result;", "  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long>\
    \ temp2;\n  std::vector<long> temp3;\n  std::vector<long> temp4;\n  std::vector<long>\
    \ temp5;\n  std::vector<long> temp6;\n  std::vector<long> temp7;\n  std::vector<long>\
    \ temp8;\n  std::vector<long> temp9;\n  std::vector<long> temp10;\n  std::vector<long>\
    \ temp11;\n  std::vector<long> temp12;\n  std::vector<long> temp13;\n  std::vector<long>\
    \ temp14;\n  std::vector<long> temp15;\n  std::vector<long> temp16;\n  std::vector<long>\
    \ temp17;\n  std::vector<long> temp18;\n  std::vector<long> temp19;\n  std::vector<long>\
    \ temp20;\n  std::vector<long> temp21;\n  std::vector<long> temp22;\n  std::vector<long>\
    \ temp23;\n  std::vector<long> temp24;\n  std::vector<long> temp25;\n  std::vector<long>\
    \ temp26;\n  std::vector<long> temp27;\n  std::vector<long> temp28;\n  std::vector<long>\
    \ temp29;\n  std::vector<long> temp30;\n  std::vector<long> temp31;\n  std::vector<long>\
    \ temp32;\n  std::vector<long> temp33;\n  std::vector<long> temp34;\n  std::vector<long>\
    \ temp35;\n  std::vector<long> temp36;\n  std::vector<long> temp37;\n  std::vector<long>\
    \ temp38;\n  std::vector<long> temp39;\n  std::vector<long> temp40;\n  std::vector<long>\
    \ temp41;\n  std::vector<long> temp42;\n  std::vector<long> temp43;\n  std::vector<long>\
    \ temp44;\n  std::vector<long> temp45;\n  std::vector<long>", "  std::vector<long>\
    \ sorted_array;\n  std::vector<long> ones_count;\n  std::vector<long> zeros_count;\n\
    \  std::vector<long> zero_array;\n  std::vector<long> one_array;\n  std::vector<long>\
    \ two_array;\n  std::vector<long> three_array;\n  std::vector<long> four_array;\n\
    \  std::vector<long> five_array;\n  std::vector<long> six_array;\n  std::vector<long>\
    \ seven_array;\n  std::vector<long> eight_array;\n  std::vector<long> nine_array;\n\
    \  std::vector<long> ten_array;\n  std::vector<long> eleven_array;\n  std::vector<long>\
    \ twelve_array;\n  std::vector<long> thirteen_array;\n  std::vector<long> fourteen_array;\n\
    \  std::vector<long> fifteen_array;\n  std::vector<long> sixteen_array;\n  std::vector<long>\
    \ seventeen_array;\n  std::vector<long> eighteen_array;\n  std::vector<long> nineteen_array;\n\
    \  std::vector<long> twenty_array;\n  std::vector<long> twentyone_array;\n  std::vector<long>\
    \ twentytwo_array;\n  std::vector<long> twentythree_array;\n  std::vector<long>\
    \ twentyfour_array;\n  std::vector<long> twentyfive_array;\n  std::vector<long>\
    \ twentysix_array;\n  std::vector<long> twentyseven_array;\n  std::vector<long>\
    \ twentyeight_array;\n  std::vector<long> twentynine_array;\n  std::vector<long>\
    \ thirty_array;\n  std::vector<long> thirtyone_array;\n  std::vector<long> thirtytwo_array;\n\
    \  std::vector<long> thirtythree_array;\n  std::vector<long> thirtyfour_array;\n\
    \  std::vector<long> thirtyfive_array;\n  std::vector<long> thirtysix_array;\n\
    \  std::vector<long> thirtyseven_array;\n", "  std::vector<long> sorted_arr;\n\
    \  std::vector<long> ones_arr;\n  std::vector<long> zeros_arr;\n  long n = arr.size();\n\
    \  for (long i = 0; i < n; i++) {\n    if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n\
    \    } else {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  for (long\
    \ i = 0; i < ones_arr.size(); i++) {\n    sorted_arr.push_back(ones_arr[i]);\n\
    \  }\n  for (long i = 0; i < zeros_arr.size(); i++) {\n    sorted_arr.push_back(zeros_arr[i]);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] < 0) {\n      result.push_back(arr[i]);\n    } else {\n      int\
    \ count = 0;\n      long num = arr[i];\n      while (num) {\n        if (num &\
    \ 1) {\n          count++;\n        }\n        num = num >> 1;\n      }\n    \
    \  if (count == 0) {\n        zeros.push_back(arr[i]);\n      } else {\n     \
    \   ones.push_back(arr[i]);\n      }\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n\
    \  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i < zeros.size(); i++)\
    \ {\n    result.push_back(zeros[i]);\n  }\n  for (int i = 0; i < ones.size();\
    \ i++) {\n    result.push_back(ones[i]);\n  }\n  return result;", "  std::vector<long>\
    \ result;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  std::sort(zeros.begin(), zeros.end());\n  result.insert(result.end(),\
    \ zeros.begin(), zeros.end());\n  result.insert(result.end(), ones.begin(), ones.end());\n\
    \  return result;", "  std::vector<long> sorted_arr;\n  std::vector<long> sorted_arr_ones;\n\
    \  std::vector<long> sorted_arr_zeros;\n  std::vector<long> sorted_arr_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros;\n  std::vector<long> sorted_arr_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones;\n  std::vector<long> sorted_arr_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros;\n  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones;\n  std::vector<long>\
    \ sorted_arr_zeros_ones_zeros_ones_zeros_ones;\n  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros;\n  std::vector<long>\
    \ sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones;\n  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros_ones_zeros;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_ones_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_zeros_ones_zeros_ones_zeros_ones_zeros_ones_zeros_ones;\n\
    \  std::vector<long> sorted_arr_ones_zeros_ones_zeros_", "  std::vector<long>\
    \ result;\n  std::vector<long> one_count;\n  std::vector<long> zero_count;\n \
    \ std::vector<long> one_count_sorted;\n  std::vector<long> zero_count_sorted;\n\
    \  std::vector<long> one_count_sorted_index;\n  std::vector<long> zero_count_sorted_index;\n\
    \  std::vector<long> one_count_sorted_index_sorted;\n  std::vector<long> zero_count_sorted_index_sorted;\n\
    \  std::vector<long> zero_count_sorted_index_sorted_index;\n  std::vector<long>\
    \ one_count_sorted_index_sorted_index;\n  std::vector<long> one_count_sorted_index_sorted_index_sorted;\n\
    \  std::vector<long> zero_count_sorted_index_sorted_index_sorted;\n  std::vector<long>\
    \ zero_count_sorted_index_sorted_index_sorted_index;\n  std::vector<long> one_count_sorted_index_sorted_index_sorted_index;\n\
    \  std::vector<long> one_count_sorted_index_sorted_index_sorted_index_sorted;\n\
    \  std::vector<long> zero_count_sorted_index_sorted_index_sorted_index_sorted;\n\
    \  std::vector<long> zero_count_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \  std::vector<long> one_count_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \  std::vector<long> one_count_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \  std::vector<long> zero_count_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \  std::vector<long> zero_count_sorted_index_sorted_index_sorted_index_sorted_index_",
  "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    int a_ones = std::bitset<32>(a).count();\n\
    \    int b_ones = std::bitset<32>(b).count();\n    return a_ones == b_ones ? a\
    \ < b : a_ones < b_ones;\n  });\n  return arr;", "  std::vector<long> sorted;\n\
    \  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  for (int i = 0; i <\
    \ zeros.size(); i++) {\n    sorted.push_back(zeros[i]);\n  }\n  for (int i = 0;\
    \ i < ones.size(); i++) {\n    sorted.push_back(ones[i]);\n  }\n  return sorted;",
  "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n  std::vector<long>\
    \ zeros_arr;\n  std::vector<long>::iterator it;\n  for (it = arr.begin(); it !=\
    \ arr.end(); it++) {\n    if (*it < 0) {\n      sorted_arr.push_back(*it);\n \
    \   } else {\n      int ones = 0;\n      int num = *it;\n      while (num) {\n\
    \        ones += num & 1;\n        num >>= 1;\n      }\n      if (ones == 0) {\n\
    \        zeros_arr.push_back(*it);\n      } else {\n        ones_arr.push_back(*it);\n\
    \      }\n    }\n  }\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  sorted_arr.insert(sorted_arr.end(), zeros_arr.begin(), zeros_arr.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), ones_arr.begin(), ones_arr.end());\n  return\
    \ sorted_arr;", "  std::vector<long> sorted_arr;\n  std::vector<std::pair<int,\
    \ int>> ones_and_decimal;\n  for (int i = 0; i < arr.size(); i++) {\n    int decimal\
    \ = arr[i];\n    int ones = 0;\n    while (decimal > 0) {\n      ones += decimal\
    \ % 2;\n      decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ arr[i]));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (int i = 0; i < ones_and_decimal.size(); i++) {\n    sorted_arr.push_back(ones_and_decimal[i].second);\n\
    \  }\n  return sorted_arr;", "  std::vector<long> result;\n  std::vector<long>\
    \ ones;\n  std::vector<long> zeros;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n    } else {\n      ones.push_back(arr[i]);\n\
    \    }\n  }\n  std::sort(ones.begin(), ones.end());\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  for (int i = 0; i < zeros.size(); i++) {\n    result.push_back(zeros[i]);\n\
    \  }\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i]);\n\
    \  }\n  return result;", "  std::vector<long> sorted;\n  std::vector<long> ones;\n\
    \  std::vector<long> zeros;\n  for (auto i : arr) {\n    int count = 0;\n    while\
    \ (i != 0) {\n      if (i % 2 == 1) {\n        count++;\n      }\n      i /= 2;\n\
    \    }\n    if (count == 0) {\n      zeros.push_back(i);\n    } else {\n     \
    \ ones.push_back(i);\n    }\n  }\n  std::sort(zeros.begin(), zeros.end());\n \
    \ std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(), zeros.begin(),\
    \ zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n  return\
    \ sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_count;\n\
    \  std::vector<long> zeros_count;\n  std::vector<long> sorted_ones_count;\n  std::vector<long>\
    \ sorted_zeros_count;\n  std::vector<long> sorted_ones_count_index;\n  std::vector<long>\
    \ sorted_zeros_count_index;\n  for (int i = 0; i < arr.size(); i++) {\n    long\
    \ count = 0;\n    long num = arr[i];\n    while (num > 0) {\n      if (num % 2\
    \ == 1) {\n        count++;\n      }\n      num = num / 2;\n    }\n    if (count\
    \ == 0) {\n      zeros_count.push_back(arr[i]);\n      sorted_zeros_count.push_back(arr[i]);\n\
    \      sorted_zeros_count_index.push_back(i);\n    } else {\n      ones_count.push_back(count);\n\
    \      sorted_ones_count.push_back(count);\n      sorted_ones_count_index.push_back(i);\n\
    \    }\n  }\n  std::sort(sorted_ones_count.begin(), sorted_ones_count.end());\n\
    \  std::sort(sorted_zeros_count.begin(), sorted_zeros_count.end());\n  for (int\
    \ i = 0; i < sorted_ones_count.size(); i++) {\n    for (int j = 0; j < ones_count.size();\
    \ j++) {\n      if (sorted_ones_count[i] == ones_count[j]) {\n        sorted_arr.push_back(arr[sorted_ones_count_index[j]]);\n\
    \        ones_count[j] = -1;\n        break;\n      }\n    }\n  }\n  for (int\
    \ i = 0; i < sorted_zeros_count.size(); i++) {\n    for (int j = 0; j < zeros_count.size();\
    \ j++) {\n      if (sorted_zeros_count[i] == zeros_count[j]) {\n        sorted",
  "  std::vector<long> sorted_array;\n  std::vector<long> one_count;\n  std::vector<long>\
    \ zero_count;\n  std::vector<long>::iterator it;\n  long count = 0;\n  for (it\
    \ = arr.begin(); it != arr.end(); it++) {\n    count = 0;\n    while (*it > 0)\
    \ {\n      if (*it % 2 == 1) {\n        count++;\n      }\n      *it = *it / 2;\n\
    \    }\n    one_count.push_back(count);\n    zero_count.push_back(count);\n  }\n\
    \  std::sort(one_count.begin(), one_count.end());\n  for (it = one_count.begin();\
    \ it != one_count.end(); it++) {\n    for (int i = 0; i < arr.size(); i++) {\n\
    \      if (*it == zero_count[i]) {\n        sorted_array.push_back(arr[i]);\n\
    \        zero_count[i] = -1;\n        break;\n      }\n    }\n  }\n  return sorted_array;",
  "  std::vector<long> result;\n  std::vector<std::pair<int, int>> ones;\n  for (auto\
    \ i : arr) {\n    int count = 0;\n    int temp = i;\n    while (temp) {\n    \
    \  count += temp & 1;\n      temp >>= 1;\n    }\n    ones.push_back(std::make_pair(count,\
    \ i));\n  }\n  std::sort(ones.begin(), ones.end());\n  for (auto i : ones) {\n\
    \    result.push_back(i.second);\n  }\n  return result;", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  std::vector<long>\
    \ twos;\n  std::vector<long> threes;\n  std::vector<long> fours;\n  std::vector<long>\
    \ fives;\n  std::vector<long> sixes;\n  std::vector<long> sevens;\n  std::vector<long>\
    \ eights;\n  std::vector<long> nines;\n  std::vector<long> tens;\n  std::vector<long>\
    \ elevens;\n  std::vector<long> twelves;\n  std::vector<long> thirteens;\n  std::vector<long>\
    \ fourteens;\n  std::vector<long> fifteens;\n  std::vector<long> sixteens;\n \
    \ std::vector<long> seventeens;\n  std::vector<long> eighteens;\n  std::vector<long>\
    \ ninteens;\n  std::vector<long> twentys;\n  std::vector<long> twentys_ones;\n\
    \  std::vector<long> twentys_twos;\n  std::vector<long> twentys_threes;\n  std::vector<long>\
    \ twentys_fours;\n  std::vector<long> twentys_fives;\n  std::vector<long> twentys_sixes;\n\
    \  std::vector<long> twentys_sevens;\n  std::vector<long> twentys_eights;\n  std::vector<long>\
    \ twentys_nines;\n  std::vector<long> thirties;\n  std::vector<long> thirties_ones;\n\
    \  std::vector<long> thirties_twos;\n  std::vector<long> thirties_threes;\n  std::vector<long>\
    \ thirties_fours;\n  std::vector<long> thirties_fives;\n  std::vector<long> thirties_sixes;\n\
    \  std::vector<long> thirties_sevens;\n  std::vector<long> thirties_eights;\n\
    \  std::vector<long", "  std::vector<std::pair<long, long>> v;\n  for (auto i\
    \ : arr) {\n    long count = 0;\n    while (i) {\n      count += i & 1;\n    \
    \  i >>= 1;\n    }\n    v.push_back(std::make_pair(count, i));\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::vector<long> res;\n  for (auto i : v) {\n    res.push_back(i.second);\n\
    \  }\n  return res;", "  std::vector<long> result;\n  std::vector<long> one_count;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n    int num = arr[i];\n\
    \    while (num) {\n      count += num & 1;\n      num >>= 1;\n    }\n    one_count.push_back(count);\n\
    \  }\n  std::vector<long> sorted_arr = arr;\n  std::sort(sorted_arr.begin(), sorted_arr.end());\n\
    \  std::vector<long> sorted_one_count = one_count;\n  std::sort(sorted_one_count.begin(),\
    \ sorted_one_count.end());\n  for (int i = 0; i < sorted_one_count.size(); i++)\
    \ {\n    for (int j = 0; j < one_count.size(); j++) {\n      if (sorted_one_count[i]\
    \ == one_count[j]) {\n        result.push_back(sorted_arr[j]);\n        one_count[j]\
    \ = -1;\n        break;\n      }\n    }\n  }\n  return result;", "    std::vector<long>\
    \ sorted_arr;\n    std::map<long, long> map_arr;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        long count = 0;\n        long num = arr[i];\n        while (num\
    \ > 0) {\n            if (num % 2 == 1) {\n                count++;\n        \
    \    }\n            num /= 2;\n        }\n        map_arr[count] = arr[i];\n \
    \   }\n    for (auto it = map_arr.begin(); it != map_arr.end(); it++) {\n    \
    \    sorted_arr.push_back(it->second);\n    }\n    return sorted_arr;", "  std::vector<long>\
    \ result;\n  std::vector<std::pair<int, int>> ones;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int count = 0;\n    int temp = arr[i];\n    while (temp > 0) {\n\
    \      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n   \
    \ }\n    ones.push_back(std::make_pair(count, arr[i]));\n  }\n  std::sort(ones.begin(),\
    \ ones.end());\n  for (int i = 0; i < ones.size(); i++) {\n    result.push_back(ones[i].second);\n\
    \  }\n  return result;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> ones_and_values;\n  for (auto i : arr) {\n    int ones = 0;\n    int value\
    \ = i;\n    while (value > 0) {\n      if (value % 2 == 1) {\n        ones++;\n\
    \      }\n      value /= 2;\n    }\n    ones_and_values.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_values.begin(), ones_and_values.end());\n  for\
    \ (auto i : ones_and_values) {\n    result.push_back(i.second);\n  }\n  return\
    \ result;", "  std::vector<long> sorted_arr;\n  std::vector<long> ones_arr;\n\
    \  std::vector<long> zeros_arr;\n  std::vector<long> neg_arr;\n  for (long i =\
    \ 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      neg_arr.push_back(arr[i]);\n\
    \    } else if (arr[i] == 0) {\n      zeros_arr.push_back(arr[i]);\n    } else\
    \ {\n      ones_arr.push_back(arr[i]);\n    }\n  }\n  std::sort(neg_arr.begin(),\
    \ neg_arr.end());\n  std::sort(zeros_arr.begin(), zeros_arr.end());\n  std::sort(ones_arr.begin(),\
    \ ones_arr.end());\n  sorted_arr.insert(sorted_arr.end(), neg_arr.begin(), neg_arr.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), zeros_arr.begin(), zeros_arr.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), ones_arr.begin(), ones_arr.end());\n  return\
    \ sorted_arr;", "    std::vector<long> result;\n    std::vector<std::pair<int,\
    \ long>> ones;\n    for (auto i : arr) {\n        int count = 0;\n        long\
    \ temp = i;\n        while (temp) {\n            if (temp & 1) {\n           \
    \     count++;\n            }\n            temp = temp >> 1;\n        }\n    \
    \    ones.push_back(std::make_pair(count, i));\n    }\n    std::sort(ones.begin(),\
    \ ones.end());\n    for (auto i : ones) {\n        result.push_back(i.second);\n\
    \    }\n    return result;", "    std::vector<long> sorted;\n    std::vector<long>\
    \ ones;\n    std::vector<long> zeros;\n    for (auto i : arr) {\n        if (i\
    \ < 0) {\n            sorted.push_back(i);\n        } else {\n            int\
    \ count = 0;\n            long temp = i;\n            while (temp > 0) {\n   \
    \             if (temp % 2 == 1) {\n                    count++;\n           \
    \     }\n                temp /= 2;\n            }\n            if (count == 0)\
    \ {\n                zeros.push_back(i);\n            } else {\n             \
    \   ones.push_back(i);\n            }\n        }\n    }\n    std::sort(zeros.begin(),\
    \ zeros.end());\n    std::sort(ones.begin(), ones.end());\n    for (auto i : zeros)\
    \ {\n        sorted.push_back(i);\n    }\n    for (auto i : ones) {\n        sorted.push_back(i);\n\
    \    }\n    return sorted;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ ones_count;\n  std::vector<long> zeros_count;\n  std::vector<long> sorted_ones_count;\n\
    \  std::vector<long> sorted_zeros_count;\n  std::vector<long> sorted_ones_count_index;\n\
    \  std::vector<long> sorted_zeros_count_index;\n  std::vector<long> sorted_ones_count_index_sorted;\n\
    \  std::vector<long> sorted_zeros_count_index_sorted;\n  std::vector<long> sorted_ones_count_index_sorted_final;\n\
    \  std::vector<long> sorted_zeros_count_index_sorted_final;\n  std::vector<long>\
    \ sorted_zeros_count_index_sorted_final_final;\n  std::vector<long> sorted_ones_count_index_sorted_final_final;\n\
    \  std::vector<long> sorted_ones_count_index_sorted_final_final_final;\n  std::vector<long>\
    \ sorted_zeros_count_index_sorted_final_final_final;\n  std::vector<long> sorted_zeros_count_index_sorted_final_final_final_final;\n\
    \  std::vector<long> sorted_ones_count_index_sorted_final_final_final_final;\n\
    \  std::vector<long> sorted_ones_count_index_sorted_final_final_final_final_final;\n\
    \  std::vector<long> sorted_zeros_count_index_sorted_final_final_final_final_final;\n\
    \  std::vector<long> sorted_zeros_count_index_sorted_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_ones_count_index_sorted_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_ones_count_index_sorted_final_final_final_final_final_final_final;\n\
    \  std::vector<long> sorted_zeros_count_index_sorted_final_final", "  std::vector<long>\
    \ sorted_arr;\n  std::vector<long> sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      sorted_arr_zeros.push_back(arr[i]);\n\
    \    } else {\n      sorted_arr_ones.push_back(arr[i]);\n    }\n  }\n  std::sort(sorted_arr_ones.begin(),\
    \ sorted_arr_ones.end());\n  std::sort(sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), sorted_arr_ones.begin(), sorted_arr_ones.end());\n\
    \  sorted_arr.insert(sorted_arr.end(), sorted_arr_zeros.begin(), sorted_arr_zeros.end());\n\
    \  return sorted_arr;", "  std::vector<long> sorted_arr;\n  std::vector<long>\
    \ sorted_arr_ones;\n  std::vector<long> sorted_arr_zeros;\n  std::vector<long>\
    \ sorted_arr_zeros_dec;\n  std::vector<long> sorted_arr_ones_dec;\n  std::vector<long>\
    \ sorted_arr_dec;\n  std::vector<long> sorted_arr_dec_ones;\n  std::vector<long>\
    \ sorted_arr_dec_zeros;\n  std::vector<long> sorted_arr_dec_zeros_ones;\n  std::vector<long>\
    \ sorted_arr_dec_ones_zeros;\n  std::vector<long> sorted_arr_dec_zeros_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_zeros_dec;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec_dec;\n  std::vector<long>\
    \ sorted_arr_dec_zeros_dec_ones_dec_dec_dec;\n  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec_dec_dec_dec;\n  std::vector<long>\
    \ sorted_arr_dec_ones_dec_zeros_dec_dec_dec_dec;\n  std::vector<long> sorted_arr_dec_zeros_dec_ones_dec_dec_dec_dec_dec;\n\
    \  std::vector<long> sorted_arr_dec_ones_dec_zeros_dec_dec_dec_dec_dec", "  std::vector<long>\
    \ sorted;\n  std::vector<long> ones;\n  std::vector<long> zeros;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] == 0) {\n      zeros.push_back(arr[i]);\n\
    \    } else {\n      ones.push_back(arr[i]);\n    }\n  }\n  std::sort(zeros.begin(),\
    \ zeros.end());\n  std::sort(ones.begin(), ones.end());\n  sorted.insert(sorted.end(),\
    \ zeros.begin(), zeros.end());\n  sorted.insert(sorted.end(), ones.begin(), ones.end());\n\
    \  return sorted;", "    std::vector<long> sorted_arr;\n    std::vector<long>\
    \ ones_count;\n    std::vector<long> zeros_count;\n    std::vector<long> zero_index;\n\
    \    std::vector<long> one_index;\n    std::vector<long>::iterator it;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        long num\
    \ = arr[i];\n        while (num > 0) {\n            if (num % 2 == 1) {\n    \
    \            count++;\n            }\n            num /= 2;\n        }\n     \
    \   if (count == 0) {\n            zero_index.push_back(i);\n            zeros_count.push_back(arr[i]);\n\
    \        } else {\n            one_index.push_back(i);\n            ones_count.push_back(count);\n\
    \        }\n    }\n    std::sort(zeros_count.begin(), zeros_count.end());\n  \
    \  std::sort(ones_count.begin(), ones_count.end());\n    for (long i = 0; i <\
    \ zero_index.size(); i++) {\n        arr[zero_index[i]] = zeros_count[i];\n  \
    \  }\n    for (long i = 0; i < one_index.size(); i++) {\n        arr[one_index[i]]\
    \ = ones_count[i];\n    }\n    return arr;", "  std::vector<long> result;\n  std::vector<std::pair<int,\
    \ int>> vec;\n  for (int i = 0; i < arr.size(); i++) {\n    int count = 0;\n \
    \   int temp = arr[i];\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n \
    \       count++;\n      }\n      temp /= 2;\n    }\n    vec.push_back(std::make_pair(count,\
    \ arr[i]));\n  }\n  std::sort(vec.begin(), vec.end());\n  for (int i = 0; i <\
    \ vec.size(); i++) {\n    result.push_back(vec[i].second);\n  }\n  return result;",
  "  std::vector<long> sorted;\n  std::vector<std::pair<long, long>> ones_and_decimal;\n\
    \  for (auto i : arr) {\n    long ones = 0;\n    long decimal = i;\n    while\
    \ (decimal > 0) {\n      if (decimal % 2 == 1) {\n        ones++;\n      }\n \
    \     decimal /= 2;\n    }\n    ones_and_decimal.push_back(std::make_pair(ones,\
    \ i));\n  }\n  std::sort(ones_and_decimal.begin(), ones_and_decimal.end());\n\
    \  for (auto i : ones_and_decimal) {\n    sorted.push_back(i.second);\n  }\n \
    \ return sorted;"]
stop_tokens:
- "\n}"
