name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i ==\
    \ 1) {\n      count += 1;\n    } else {\n      count += 9 * std::pow(10, i - 2);\n\
    \    }\n  }\n  return count;", "  assert(n > 0);\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long dp[n + 1];\n  memset(dp, 0,\
    \ sizeof(dp));\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] * 9 + pow(10, i - 1);\n  }\n  return dp[n];", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n \
    \ dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = 9 * pow(10, i -\
    \ 2) + dp[i - 1];\n  }\n  return dp[n];", "    if (n == 1) {\n        return 10;\n\
    \    }\n    if (n == 2) {\n        return 19;\n    }\n    long dp[n + 1];\n  \
    \  dp[0] = 0;\n    dp[1] = 10;\n    dp[2] = 19;\n    for (long i = 3; i <= n;\
    \ i++) {\n        dp[i] = 9 * dp[i - 1] + 9 * dp[i - 2];\n    }\n    return dp[n];",
  "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int\
    \ i=2;i<=n;i++){\n    dp[i] = dp[i-1]*10 + pow(10,i-1);\n  }\n  return dp[n];",
  "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return\
    \ 3;\n    }\n    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] =\
    \ 3;\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i -\
    \ 2];\n    }\n    return dp[n];", "  // Write your code here\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = 9\
    \ * pow(10, i - 2) + dp[i - 1];\n  }\n  return dp[n];", "  if (n == 1) {\n   \
    \ return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long count = 11;\n \
    \ long temp = 10;\n  for (long i = 3; i <= n; i++) {\n    temp = temp * 10;\n\
    \    count = count + temp;\n  }\n  return count;", "    long count = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return\
    \ count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i ==\
    \ 1) {\n      count += 1;\n    } else {\n      count += 9 * pow(10, i - 2);\n\
    \    }\n  }\n  return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count = 10;\n\
    \  long start = 10;\n  long end = 10;\n  for (long i = 2; i <= n; i++) {\n   \
    \ start = start * (9 - i + 2);\n    end = end * (10 - i + 1);\n    count += start\
    \ + end;\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n;\
    \ i++) {\n    long temp = i;\n    while (temp > 0) {\n      if (temp % 10 == 1)\
    \ {\n        count++;\n        break;\n      }\n      temp /= 10;\n    }\n  }\n\
    \  return count;", "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n\
    \        if (i == 1) {\n            count += 1;\n        } else {\n          \
    \  count += 9 * pow(10, i - 2);\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i\
    \ - 1);\n    }\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  long\
    \ count = 0;\n  // start with 1\n  count += 9 * std::pow(10, n - 2);\n  // end\
    \ with 1\n  count += 9 * std::pow(10, n - 1);\n  return count;", "    long count\
    \ = 0;\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n     \
    \   return 10;\n    }\n    if (n == 3) {\n        return 100;\n    }\n    if (n\
    \ == 4) {\n        return 1000;\n    }\n    if (n == 5) {\n        return 10000;\n\
    \    }\n    if (n == 6) {\n        return 100000;\n    }\n    if (n == 7) {\n\
    \        return 1000000;\n    }\n    if (n == 8) {\n        return 10000000;\n\
    \    }\n    if (n == 9) {\n        return 100000000;\n    }\n    if (n == 10)\
    \ {\n        return 1000000000;\n    }\n    if (n == 11) {\n        return 10000000000;\n\
    \    }\n    if (n == 12) {\n        return 100000000000;\n    }\n    if (n ==\
    \ 13) {\n        return 1000000000000;\n    }\n    if (n == 14) {\n        return\
    \ 10000000000000;\n    }\n    if (n == 15) {\n        return 100000000000000;\n\
    \    }\n    if (n == 16) {\n        return 1000000000000000;\n    }\n    if (n\
    \ == 17) {\n        return 10000000000000000;\n    }\n    if (n == 18) {\n   \
    \     return 100000000000000000;\n    }\n    if (n == 19) {\n        return 1000000000000000000;\n\
    \    }\n    if (n == 20) {\n        return 10000000000000000000;\n    }\n    if\
    \ (n == 21) {\n        return 100000000000000000000;\n    }\n    if (n == 22)\
    \ {\n        return 1000000000000000000000;\n    }\n    if (n == 23) {\n     \
    \   return 10000000000000000000000;\n    }\n    if (n == 24) {\n        return\
    \ 100000000000000000000000;\n    }\n    if (n == 25) {\n        return 1000000000000000000000000;\n\
    \    }\n    if (n == 26) {\n        return 10000000000000000000000000;\n    }\n\
    \    if (n == 27) {\n        return 100000000000000000000000000;\n    }\n    if\
    \ (n == 28)", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long\
    \ i = 2; i <= n; i++) {\n        dp[i] = 9 * pow(10, i-2) + dp[i-1];\n    }\n\
    \    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n \
    \   return 10;\n  }\n  long count = 10;\n  long count_prev = 10;\n  long count_prev_prev\
    \ = 1;\n  for (long i = 3; i <= n; i++) {\n    count = (count_prev * 9) + (count_prev_prev\
    \ * 9);\n    count_prev_prev = count_prev;\n    count_prev = count;\n  }\n  return\
    \ count;", "  // Write your code here\n  if (n == 1) {\n    return 2;\n  }\n \
    \ if (n == 2) {\n    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 2;\n  dp[2] = 3;\n  for (int i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n  for (long i = 2;\
    \ i < n; i++) {\n    count = (count * 10) - (count * 9);\n  }\n  return count;",
  "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return\
    \ 10;\n    }\n    long count = 0;\n    for (long i = 1; i <= n - 2; i++) {\n \
    \       count += 9 * pow(10, i - 1);\n    }\n    return count * 2 + 10;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "    long dp[n + 1];\n \
    \   dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i]\
    \ = dp[i - 1] + (dp[i - 1] * 9);\n    }\n    return dp[n];", "  if (n == 1) return\
    \ 1;\n  if (n == 2) return 10;\n  long count = 10;\n  long start = 10;\n  long\
    \ end = 10;\n  for (long i = 3; i <= n; i++) {\n    start = start + 9 * pow(10,\
    \ i - 2);\n    end = end + 9 * pow(10, i - 2);\n    count = start + end;\n  }\n\
    \  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n   \
    \ if (i == 1) {\n      count += 1;\n    } else {\n      count += 9 * pow(10, i\
    \ - 2);\n    }\n  }\n  return count;", "    long dp[n + 1];\n    memset(dp, 0,\
    \ sizeof(dp));\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i]\
    \ = dp[i - 1] * 9 + pow(10, i - 1);\n    }\n    return dp[n];", "  if (n == 1)\
    \ return 2;\n  if (n == 2) return 3;\n  long prev = 3;\n  long prev_prev = 2;\n\
    \  long result = 0;\n  for (long i = 3; i <= n; i++) {\n    result = prev + prev_prev;\n\
    \    prev_prev = prev;\n    prev = result;\n  }\n  return result;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long dp[n\
    \ + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n;\
    \ i++) {\n    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n  }\n  return dp[n];",
  "  // Write your code here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int\
    \ i=2;i<=n;i++){\n    dp[i] = dp[i-1]*10 + pow(10,i-1);\n  }\n  return dp[n];",
  "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n;\
    \ i++) {\n        dp[i] = dp[i-1] + (dp[i-1] * 9);\n    }\n    return dp[n];",
  "    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return\
    \ 10;\n    }\n    long count = 10;\n    long start = 10;\n    long end = 1;\n\
    \    for (long i = 3; i <= n; i++) {\n        start = start * 9;\n        end\
    \ = end * 10;\n        count = count + start + end;\n    }\n    return count;",
  "    if (n == 1) return 1;\n    if (n == 2) return 10;\n    long count = 10;\n \
    \   for (long i = 2; i <= n; i++) {\n        count += 9 * pow(10, i - 2);\n  \
    \  }\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2)\
    \ {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2]\
    \ = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = 9 * pow(10, i - 2) + dp[i\
    \ - 1];\n  }\n  return dp[n];", "    long dp[n + 1];\n    dp[0] = 0;\n    dp[1]\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + 9 * pow(10,\
    \ i - 2);\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n \
    \ if (n == 2) {\n    return 2;\n  }\n  long count = 0;\n  for (long i = 1; i <\
    \ n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count * 2;", "  long\
    \ dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + (i - 1) * dp[i - 2];\n  }\n  return dp[n];", "  if (n\
    \ == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long dp[n\
    \ + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n;\
    \ i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];",
  "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);", "  long count = 0;\n  for\
    \ (long i = 1; i <= n; i++) {\n    count += (pow(10, i - 1) - pow(10, i - 2));\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n  long power\
    \ = 10;\n  for (long i = 3; i <= n; i++) {\n    count += 9 * power;\n    power\
    \ *= 10;\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n;\
    \ i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  // Write your\
    \ code here\n  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2);", "    long\
    \ dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i\
    \ = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] * 10 - dp[i - 2];\n    }\n  \
    \  return dp[n];", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for(long\
    \ i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + 9*pow(10, i-2);\n    }\n  \
    \  return dp[n];", "    if (n == 1) {\n        return 10;\n    }\n    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n\
    \    }\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2)\
    \ {\n    return 10;\n  }\n  long count = 0;\n  long start_one = 9;\n  long end_one\
    \ = 1;\n  long rest = n - 2;\n  while (rest > 0) {\n    count += start_one * end_one;\n\
    \    start_one *= 10;\n    end_one *= 10;\n    rest--;\n  }\n  return count;",
  "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);", "    if (n == 1) {\n    \
    \    return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i\
    \ - 1);\n    }\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  if\
    \ (n == 2) {\n    return 10;\n  }\n  long count = 10;\n  long prev = 10;\n  for\
    \ (long i = 3; i <= n; i++) {\n    long temp = count;\n    count = count + prev;\n\
    \    prev = temp;\n  }\n  return count;", "  assert(n > 0);\n  if (n == 1) {\n\
    \    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n  \
    \  count += std::pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n  \
    \  return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n\
    \  long last_digit = 10;\n  for (long i = 3; i <= n; i++) {\n    last_digit =\
    \ last_digit * 10;\n    count += last_digit;\n  }\n  return count;", "    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i <\
    \ n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    count += start;\n\
    \    count += end;\n    count += (start - 1) * 9;\n    return count;", "  long\
    \ dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for (int i = 2; i <= n; i++) {\n   \
    \ dp[i] = dp[i-1] + 9*pow(10, i-2);\n  }\n  return dp[n];", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += 9 * pow(10, i - 1);\n  }\n  return\
    \ count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i ==\
    \ 1) {\n      count += 1;\n    } else {\n      count += 9 * std::pow(10, i - 2);\n\
    \    }\n  }\n  return count;", "    if (n == 1) return 1;\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    for (long i = start; i <\
    \ end; i++) {\n        if (i % 10 == 1) count++;\n    }\n    return count;", " \
    \   long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <=\
    \ n; i++) {\n        dp[i] = dp[i - 1] + pow(10, i - 1);\n    }\n    return dp[n];",
  "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10,\
    \ i - 1);\n    }\n    return count;", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + (long)pow(10,\
    \ i - 1);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  if (n\
    \ == 2) {\n    return 3;\n  }\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    long num\
    \ = pow(10, i - 1);\n    count += 9 * num;\n  }\n  return count;", "  if (n ==\
    \ 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  long start_one = 9;\n  long end_one = 10;\n  for (long i = 3; i <= n;\
    \ i++) {\n    count += start_one + end_one;\n    start_one = start_one * 9;\n\
    \    end_one = end_one * 10;\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 2;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  for (long i = 2; i\
    \ <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", " \
    \ if (n == 1) return 1;\n  if (n == 2) return 10;\n  long dp[n + 1];\n  dp[0]\
    \ = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i]\
    \ = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return dp[n];", "  // Write your code\
    \ here\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 1;\n  for(int i=2;i<=n;i++){\n\
    \    dp[i] = dp[i-1]*9 + pow(10,i-1);\n  }\n  return dp[n];", "  if (n == 1) {\n\
    \    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n\
    \  long prev = 10;\n  for (long i = 3; i <= n; i++) {\n    count = prev + 9 *\
    \ pow(10, i - 2);\n    prev = count;\n  }\n  return count;", "  if (n == 1) {\n\
    \    return 2;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n  \
    \  count += pow(10, i - 1);\n  }\n  return count * 2;", "  if (n == 1) {\n   \
    \ return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n \
    \ for (int i = 2; i < n; i++) {\n    count = count * 9;\n  }\n  return count;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    long num = pow(10, i\
    \ - 1);\n    count += (num * 9);\n  }\n  return count;", "  if (n == 1) {\n  \
    \  return 1;\n  }\n  long count = 0;\n  long start = 1;\n  long end = 1;\n  for\
    \ (long i = 1; i < n; i++) {\n    start *= 10;\n    end = end * 10 + 1;\n  }\n\
    \  count += end - start + 1;\n  count += 9 * (n - 1) * start;\n  return count;",
  "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 3;\n  }\n  long\
    \ count = 2;\n  long last_digit = 1;\n  long first_digit = 1;\n  for (int i =\
    \ 3; i <= n; i++) {\n    count = count * 2 + last_digit;\n    last_digit = first_digit;\n\
    \    first_digit = count;\n  }\n  return count;", "    long count = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        if (i == 1) {\n            count += 1;\n\
    \        } else {\n            count += 9 * pow(10, i - 2);\n        }\n    }\n\
    \    return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  long count = 0;\n  long start_one\
    \ = 1;\n  long end_one = 1;\n  long temp = 0;\n  for (long i = 3; i <= n; i++)\
    \ {\n    temp = start_one;\n    start_one = end_one;\n    end_one = temp + end_one;\n\
    \  }\n  count = start_one + end_one;\n  return count;", "  if (n == 1) return\
    \ 1;\n  if (n == 2) return 10;\n  long count = 0;\n  for (long i = 1; i <= n;\
    \ i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long result\
    \ = 0;\n  long start_with_one = 1;\n  long end_with_one = 1;\n  long start_with_zero\
    \ = 0;\n  long end_with_zero = 0;\n  for (int i = 1; i < n; i++) {\n    start_with_one\
    \ = start_with_zero + end_with_zero;\n    end_with_one = start_with_one + end_with_one;\n\
    \    start_with_zero = start_with_one + end_with_one;\n    end_with_zero = start_with_zero\
    \ + end_with_zero;\n  }\n  result = start_with_one + end_with_one;\n  return result;",
  "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n     \
    \ count += 1;\n    } else {\n      count += 9 * pow(10, i - 2);\n    }\n  }\n\
    \  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n   \
    \ long start = pow(10, i - 1);\n    long end = pow(10, i) - 1;\n    count += end\
    \ - start + 1;\n  }\n  return count;", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + (dp[i - 1]\
    \ * 9);\n  }\n  return dp[n];", "    if (n == 1) {\n        return 10;\n    }\n\
    \    long count = 0;\n    long start_one = 1;\n    long end_one = 1;\n    for\
    \ (long i = 1; i < n; i++) {\n        start_one *= 9;\n        end_one *= 10;\n\
    \    }\n    count += start_one;\n    count += end_one;\n    return count;", " \
    \ long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  long start_one = 1;\n  long end_one = 1;\n  for (int i = 1; i < n; i++)\
    \ {\n    start_one = start_one * 10;\n    end_one = end_one * 10 + 1;\n  }\n \
    \ count = start_one + end_one;\n  return count;", "    if (n == 1) {\n       \
    \ return 10;\n    }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n\
    \        count += pow(10, i - 1);\n    }\n    return count;", "  if (n == 1) {\n\
    \    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n\
    \  long base = 10;\n  for (long i = 3; i <= n; i++) {\n    count += 9 * base;\n\
    \    base *= 10;\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n\
    \  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i\
    \ - 1);\n  }\n  return count;", "  long count = 0;\n  long start = 1;\n  long\
    \ end = 1;\n  for (int i = 1; i < n; i++) {\n    start *= 10;\n    end = end *\
    \ 10 + 1;\n  }\n  count = start + end;\n  return count;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n\
    \  }\n  long *dp = new long[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n\
    \  }\n  return dp[n];", "    if (n == 1) {\n        return 10;\n    }\n    if\
    \ (n == 2) {\n        return 19;\n    }\n    long count = 0;\n    long dp[n +\
    \ 1];\n    dp[0] = 0;\n    dp[1] = 10;\n    dp[2] = 19;\n    for (long i = 3;\
    \ i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "    long count = 0;\n    for (long i = 1; i <= n; i++)\
    \ {\n        count += pow(10, i - 1);\n    }\n    return count;", "  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += (pow(10, i) - pow(10,\
    \ i - 1));\n  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    if (i == 1) {\n      count += 1;\n    } else {\n      count +=\
    \ 9 * pow(10, i - 2);\n    }\n  }\n  return count;", "    long count = 0;\n  \
    \  for (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n\
    \    return count;", "    if (n == 1) {\n        return 1;\n    }\n    if (n ==\
    \ 2) {\n        return 10;\n    }\n    long count = 0;\n    for (long i = 1; i\
    \ <= 9; i++) {\n        count += starts_one_ends(n - 1);\n    }\n    return count;",
  "    long dp[n+1];\n    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for(long\
    \ i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + (i-1)*dp[i-2];\n    }\n   \
    \ return dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for\
    \ (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return\
    \ dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  long result = 0;\n  for (long\
    \ i = 1; i < n; i++) {\n    result += pow(10, i);\n  }\n  return result * 2;",
  "  long ans = 0;\n  for (long i = 1; i <= n; i++) {\n    ans += pow(10, i - 1);\n\
    \  }\n  return ans;", "    long count = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    count += start;\n    count += end;\n    count += (n - 2)\
    \ * 9 * start;\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  long\
    \ result = 0;\n  long power_of_ten = 1;\n  for (long i = 0; i < n - 1; i++) {\n\
    \    power_of_ten *= 10;\n  }\n  result += 9 * power_of_ten;\n  result += starts_one_ends(n\
    \ - 1);\n  return result;", "  if (n == 1) return 1;\n  if (n == 2) return 2;\n\
    \  long *dp = new long[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 2;\n  for\
    \ (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  long\
    \ result = dp[n] + dp[n - 1];\n  delete[] dp;\n  return result;", "  assert(n\
    \ >= 1);\n  if (n == 1) return 1;\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += pow(9, i - 1);\n  }\n  return count;", "    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n\
    \    }\n    return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2)\
    \ {\n    return 2;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2]\
    \ = 2;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n\
    \  }\n  return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += std::pow(10, i - 1);\n  }\n \
    \ return count;", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return\
    \ 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for\
    \ (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return\
    \ dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n\
    \  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 11;\n  for (long\
    \ i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n  }\n  return\
    \ dp[n];", "  if (n == 1) return 2;\n  if (n == 2) return 3;\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "    if (n == 1) return\
    \ 1;\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        count\
    \ += pow(10, i - 1);\n    }\n    return count;", "  long dp[n + 1];\n  dp[0] =\
    \ 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = 9 * pow(10,\
    \ i - 2) + dp[i - 1];\n  }\n  return dp[n];", "    if (n == 1) return 2;\n   \
    \ long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n    for (long i = 2; i <= n;\
    \ i++) {\n        dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n    }\n    return dp[n];",
  "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    long num = pow(10, i - 1);\n    count += 9 * num;\n  }\n  return count;",
  "  long count = 0;\n  for (int i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count =\
    \ 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n \
    \ return count;", "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n \
    \ for (long i = 1; i <= 9; i++) {\n    count += pow(10, n - 1);\n  }\n  return\
    \ count;", "    if (n == 1) {\n        return 10;\n    }\n    long dp[n + 1];\n\
    \    memset(dp, 0, sizeof(dp));\n    dp[1] = 10;\n    for (long i = 2; i <= n;\
    \ i++) {\n        dp[i] = 9 * pow(10, i - 1) + dp[i - 1];\n    }\n    return dp[n];",
  "  if (n == 1) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  if (n ==\
    \ 1) return 1;\n  if (n == 2) return 2;\n  if (n == 3) return 3;\n  long dp[n\
    \ + 1];\n  dp[1] = 1;\n  dp[2] = 2;\n  dp[3] = 3;\n  for (long i = 4; i <= n;\
    \ i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if (n\
    \ == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "    if (n == 1) {\n        return 10;\n    }\n    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n\
    \    }\n    return count;", "  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n \
    \ for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n\
    \  }\n  return dp[n];", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    if (i == 1) {\n      count += 1;\n    } else {\n      count += 9 * std::pow(10,\
    \ i - 2);\n    }\n  }\n  return count;", "    long count = 0;\n    for (long i\
    \ = 1; i <= n; i++) {\n        count += (pow(10, i - 1) + pow(10, n - i));\n \
    \   }\n    return count;", "    if (n == 1) return 1;\n    if (n == 2) return\
    \ 2;\n    long dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n  \
    \  for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n \
    \   }\n    return 2 * dp[n] - dp[n - 1];", "  if (n == 1) {\n    return 1;\n \
    \ }\n  if (n == 2) {\n    return 11;\n  }\n  long count = 11;\n  long power =\
    \ 10;\n  for (long i = 3; i <= n; i++) {\n    count += 9 * power;\n    power *=\
    \ 10;\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n \
    \ dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = (dp[i - 1] * 10)\
    \ - (dp[i - 2] * 9);\n  }\n  return dp[n];", "  long count = 0;\n  for (long i\
    \ = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", " \
    \ long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += std::pow(10,\
    \ i - 1);\n  }\n  return count;", "    if (n == 1) {\n        return 2;\n    }\n\
    \    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);", "    if (n == 1) {\n        return 2;\n    }\n \
    \   if (n == 2) {\n        return 3;\n    }\n    long dp[n + 1];\n    dp[0] =\
    \ 0;\n    dp[1] = 2;\n    dp[2] = 3;\n    for (long i = 3; i <= n; i++) {\n  \
    \      dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];", "  if (n ==\
    \ 1) return 1;\n  if (n == 2) return 10;\n  long count = 10;\n  long base = 9;\n\
    \  for (long i = 3; i <= n; i++) {\n    base *= 10;\n    count += base;\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10, i - 2);\n\
    \  }\n  return dp[n];", "  long result = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    result += pow(10, i - 1);\n  }\n  return result;", "  long count = 0;\n \
    \ if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  if\
    \ (n == 3) {\n    return 19;\n  }\n  if (n == 4) {\n    return 28;\n  }\n  if\
    \ (n == 5) {\n    return 37;\n  }\n  if (n == 6) {\n    return 46;\n  }\n  if\
    \ (n == 7) {\n    return 55;\n  }\n  if (n == 8) {\n    return 64;\n  }\n  if\
    \ (n == 9) {\n    return 73;\n  }\n  if (n == 10) {\n    return 82;\n  }\n  if\
    \ (n == 11) {\n    return 91;\n  }\n  if (n == 12) {\n    return 100;\n  }\n \
    \ if (n == 13) {\n    return 109;\n  }\n  if (n == 14) {\n    return 118;\n  }\n\
    \  if (n == 15) {\n    return 127;\n  }\n  if (n == 16) {\n    return 136;\n \
    \ }\n  if (n == 17) {\n    return 145;\n  }\n  if (n == 18) {\n    return 154;\n\
    \  }\n  if (n == 19) {\n    return 163;\n  }\n  if (n == 20) {\n    return 172;\n\
    \  }\n  if (n == 21) {\n    return 181;\n  }\n  if (n == 22) {\n    return 190;\n\
    \  }\n  if (n == 23) {\n    return 199;\n  }\n  if (n == 24) {\n    return 208;\n\
    \  }\n  if (n == 25) {\n    return 217;\n  }\n  if (n == 26) {\n    return 226;\n\
    \  }\n  if (n == 27) {\n    return 235;\n  }\n  if (n == 28) {\n    return 244;\n\
    \  }\n  if (n == 29) {\n    return 253;\n  }\n  if (n == 30) {\n    return", " \
    \ long count = 0;\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return\
    \ 10;\n  }\n  if (n == 3) {\n    return 100;\n  }\n  if (n == 4) {\n    return\
    \ 1000;\n  }\n  if (n == 5) {\n    return 10000;\n  }\n  if (n == 6) {\n    return\
    \ 100000;\n  }\n  if (n == 7) {\n    return 1000000;\n  }\n  if (n == 8) {\n \
    \   return 10000000;\n  }\n  if (n == 9) {\n    return 100000000;\n  }\n  if (n\
    \ == 10) {\n    return 1000000000;\n  }\n  if (n == 11) {\n    return 10000000000;\n\
    \  }\n  if (n == 12) {\n    return 100000000000;\n  }\n  if (n == 13) {\n    return\
    \ 1000000000000;\n  }\n  if (n == 14) {\n    return 10000000000000;\n  }\n  if\
    \ (n == 15) {\n    return 100000000000000;\n  }\n  if (n == 16) {\n    return\
    \ 1000000000000000;\n  }\n  if (n == 17) {\n    return 10000000000000000;\n  }\n\
    \  if (n == 18) {\n    return 100000000000000000;\n  }\n  if (n == 19) {\n   \
    \ return 1000000000000000000;\n  }\n  if (n == 20) {\n    return 10000000000000000000;\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] =\
    \ 11;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + 9 * pow(10,\
    \ i - 2);\n  }\n  return dp[n];", "    if (n == 1) {\n        return 1;\n    }\n\
    \    if (n == 2) {\n        return 10;\n    }\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    count += start;\n    count += end;\n   \
    \ count += (n - 2) * 9 * start;\n    return count;", "  if (n == 1) {\n    return\
    \ 10;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  long\
    \ count = 0;\n  for (int i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n\
    \    return 11;\n  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n \
    \   count += pow(10, i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 10;\n  long i\
    \ = 2;\n  while (i <= n) {\n    count += 9 * pow(10, i - 1);\n    i++;\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 2;\n  }\n  long count = 0;\n \
    \ for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count += 9;\n    }\
    \ else {\n      count += pow(10, i - 1);\n    }\n  }\n  return count;", "  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n      count\
    \ += 9;\n    } else {\n      count += 9 * pow(10, i - 1);\n    }\n  }\n  return\
    \ count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n\
    \  }\n  long count = 0;\n  long power = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    power *= 10;\n  }\n  count += power;\n  count += (n - 1) * 9 * power / 10;\n\
    \  return count;", "  long count = 0;\n  if (n == 1) {\n    return 1;\n  }\n \
    \ if (n == 2) {\n    return 10;\n  }\n  if (n == 3) {\n    return 100;\n  }\n\
    \  if (n == 4) {\n    return 1000;\n  }\n  if (n == 5) {\n    return 10000;\n\
    \  }\n  if (n == 6) {\n    return 100000;\n  }\n  if (n == 7) {\n    return 1000000;\n\
    \  }\n  if (n == 8) {\n    return 10000000;\n  }\n  if (n == 9) {\n    return\
    \ 100000000;\n  }\n  if (n == 10) {\n    return 1000000000;\n  }\n  if (n == 11)\
    \ {\n    return 10000000000;\n  }\n  if (n == 12) {\n    return 100000000000;\n\
    \  }\n  if (n == 13) {\n    return 1000000000000;\n  }\n  if (n == 14) {\n   \
    \ return 10000000000000;\n  }\n  if (n == 15) {\n    return 100000000000000;\n\
    \  }\n  if (n == 16) {\n    return 1000000000000000;\n  }\n  if (n == 17) {\n\
    \    return 10000000000000000;\n  }\n  if (n == 18) {\n    return 100000000000000000;\n\
    \  }\n  if (n == 19) {\n    return 1000000000000000000;\n  }\n  if (n == 20) {\n\
    \    return 10000000000000000000;\n  }\n  if (n == 21) {\n    return 100000000000000000000;\n\
    \  }\n  if (n == 22) {\n    return 1000000000000000000000;\n  }\n  if (n == 23)\
    \ {\n    return 10000000000000000000000;\n  }\n  if (n == 24) {\n    return 100000000000000000000000;\n\
    \  }\n  if (n == 25) {\n    return 1000000000000000000000000;\n  }\n  if (n ==\
    \ 26) {\n    return 10000000000000000000000000;\n  }\n  if (n == 27) {\n    return\
    \ 100000000000000000000000000;\n  }\n  if (n == 28)", "    if (n == 1) {\n   \
    \     return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += pow(10, i\
    \ - 1);\n    }\n    return count;", "    long dp[n+1];\n    dp[0] = 0;\n    dp[1]\
    \ = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + 9*pow(10,\
    \ i-2);\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if\
    \ (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ 9; i++) {\n    count += starts_one_ends(n - 1);\n  }\n  return count;", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  long\
    \ count = 0;\n  long start_with_one = 9;\n  long end_with_one = 10;\n  for (long\
    \ i = 3; i <= n; i++) {\n    count = start_with_one + end_with_one;\n    start_with_one\
    \ = start_with_one * 10 + 9;\n    end_with_one = end_with_one * 10 + 1;\n  }\n\
    \  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n   \
    \ return 10;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n\
    \  for (long i = 3; i <= n; i++) {\n    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n\
    \  }\n  return dp[n];", "  if (n == 1) {\n    return 2;\n  }\n  if (n == 2) {\n\
    \    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] =\
    \ 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n\
    \  }\n  return dp[n];", "  if (n == 1) return 2;\n  if (n == 2) return 3;\n  long\
    \ dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <=\
    \ n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if\
    \ (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n\
    \  }\n  return count;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n\
    \    count += pow(10, i - 1);\n  }\n  return count;", "    if (n == 1) {\n   \
    \     return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ result = 0;\n    long start_one = 9;\n    long end_one = 1;\n    long other_digits\
    \ = 9;\n    for (long i = 3; i <= n; i++) {\n        result += start_one * other_digits\
    \ + end_one * other_digits;\n        start_one = start_one * 10 + 9;\n       \
    \ end_one = end_one * 10 + 1;\n        other_digits *= 10;\n    }\n    return\
    \ result;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i ==\
    \ 1) {\n      count += 1;\n    } else {\n      count += 9 * pow(10, i - 2);\n\
    \    }\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  if (n ==\
    \ 2) {\n    return 10;\n  }\n  long count = 0;\n  long start = 1;\n  long end\
    \ = 1;\n  for (long i = 1; i < n; i++) {\n    start *= 10;\n    end *= 10;\n \
    \ }\n  count += start;\n  count += end;\n  count += (n - 2) * 9 * start;\n  return\
    \ count;", "  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end = end * 10 + 1;\n  }\n  count += end - start + 1;\n\
    \  count += starts_one_ends(n - 1) * 9;\n  return count;", "  long count = 0;\n\
    \  for (long i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return\
    \ count;", "    // Write your code here\n    long dp[n+1];\n    dp[0] = 0;\n \
    \   dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] +\
    \ pow(10, i-1);\n    }\n    return dp[n];", "  if (n == 1) {\n    return 2;\n\
    \  }\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10,\
    \ i - 1);\n  }\n  return count * 2;", "  long a = 1, b = 1, c = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    a = a + b + c;\n    c = b;\n    b = a;\n  }\n  return\
    \ a;", "  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10,\
    \ i - 1);\n  }\n  return count;", "    long count = 0;\n    for (long i = 1; i\
    \ <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return count;", " \
    \ long count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, i -\
    \ 1);\n  }\n  return count;", "  long count = 0;\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  count = 9;\n  for (long i =\
    \ 1; i < n - 1; i++) {\n    count *= 10;\n  }\n  return count;", "  if (n == 1)\
    \ {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long dp[n + 1];\n\
    \  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3;\
    \ i <= n; i++) {\n    dp[i] = 9 * dp[i - 1] + pow(10, i - 2);\n  }\n  return dp[n];",
  "  if (n == 1) {\n    return 1;\n  }\n  long count = 0;\n  for (long i = 1; i <=\
    \ n; i++) {\n    count += std::pow(10, i - 1);\n  }\n  return count;", "    long\
    \ dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i\
    \ = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] * 9 + pow(10, i - 1);\n    }\n\
    \    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n \
    \   return 10;\n  }\n  long count = 10;\n  long d = 1;\n  long i = 2;\n  while\
    \ (i < n) {\n    d = d * 10;\n    count = count + 9 * d;\n    i++;\n  }\n  return\
    \ count;", "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n       \
    \ count += pow(10, i - 1);\n    }\n    return count;", "    if (n == 1) {\n  \
    \      return 10;\n    }\n    if (n == 2) {\n        return 100;\n    }\n    long\
    \ count = 0;\n    for (long i = 1; i <= n; i++) {\n        count += 9 * pow(10,\
    \ i - 1);\n    }\n    return count;", "    if (n == 1) return 1;\n    if (n ==\
    \ 2) return 10;\n    long count = 9;\n    long pow = 9;\n    for (long i = 1;\
    \ i < n - 1; i++) {\n        pow *= 10;\n        count += pow;\n    }\n    return\
    \ count;", "  if (n == 1) {\n    return 10;\n  }\n  long dp[n + 1];\n  memset(dp,\
    \ 0, sizeof(dp));\n  dp[1] = 10;\n  for (long i = 2; i <= n; i++) {\n    dp[i]\
    \ = 9 * pow(10, i - 1) + dp[i - 1];\n  }\n  return dp[n];", "    if (n == 1) {\n\
    \        return 1;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i <\
    \ n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    count += start;\n\
    \    count += end;\n    count += (n - 2) * 9 * start;\n    return count;", " \
    \ long count = 0;\n  long start_with_one = 1;\n  long end_with_one = 1;\n  long\
    \ start_with_one_end_with_zero = 0;\n  long start_with_zero_end_with_one = 0;\n\
    \  long start_with_zero_end_with_zero = 0;\n  for (int i = 1; i < n; i++) {\n\
    \    start_with_one_end_with_zero = start_with_one + start_with_zero_end_with_one;\n\
    \    start_with_zero_end_with_one = start_with_one + start_with_zero_end_with_zero;\n\
    \    start_with_zero_end_with_zero = start_with_one_end_with_zero + start_with_zero_end_with_one;\n\
    \    start_with_one = start_with_one_end_with_zero;\n  }\n  count = start_with_one\
    \ + start_with_zero_end_with_one;\n  return count;", "  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count = 0;\n  long start_one\
    \ = 9;\n  long end_one = 10;\n  for (long i = 3; i <= n; i++) {\n    count +=\
    \ start_one + end_one;\n    start_one = start_one * 9;\n    end_one = end_one\
    \ * 10;\n  }\n  return count;", "  if (n == 1) {\n    return 1;\n  }\n  long count\
    \ = 0;\n  long start = 1;\n  long end = 1;\n  for (long i = 1; i < n; i++) {\n\
    \    start *= 10;\n    end *= 10;\n  }\n  count += start;\n  count += end;\n \
    \ count += (n - 2) * 9 * start;\n  return count;", "    long count = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        long num = pow(10, i - 1);\n        count\
    \ += 9 * num;\n    }\n    return count;", "  long count = 0;\n  for (long i =\
    \ 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n  return count;", "  \
    \  if (n == 1) return 1;\n    if (n == 2) return 2;\n    long dp[n+1];\n    dp[0]\
    \ = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    for (long i = 3; i <= n; i++) {\n\
    \        dp[i] = dp[i-1] + dp[i-2];\n    }\n    return dp[n];", "  if (n == 1)\
    \ {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long dp[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i = 3; i <= n; i++) {\n\
    \    dp[i] = 9 * pow(10, i - 2) + dp[i - 1];\n  }\n  return dp[n];", "  if (n\
    \ == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = 0;\n  for (int i = 1; i <= n; i++) {\n    count += pow(10, i - 1);\n  }\n\
    \  return count;", "    long dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[1]\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] * 10 -\
    \ dp[i - 2];\n    }\n    return dp[n];", "  if (n == 1) {\n    return 1;\n  }\n\
    \  if (n == 2) {\n    return 11;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  dp[2] = 11;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + (dp[i - 2] * 9);\n  }\n  return dp[n];", "  if (n == 1) {\n    return 2;\n\
    \  }\n  if (n == 2) {\n    return 3;\n  }\n  long dp[n + 1];\n  dp[0] = 0;\n \
    \ dp[1] = 2;\n  dp[2] = 3;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] + dp[i - 2];\n  }\n  return dp[n];", "  if (n == 1) {\n    return 2;\n\
    \  }\n  long count = 0;\n  for (int i = 1; i <= n; i++) {\n    count += pow(10,\
    \ i - 1);\n  }\n  return count;", "  if (n == 1) {\n    return 2;\n  }\n  long\
    \ count = 0;\n  for (long i = 1; i <= n; i++) {\n    count += pow(10, n - i);\n\
    \  }\n  return count * 2;", "  if (n == 1) return 1;\n  if (n == 2) return 2;\n\
    \  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 2;\n  for (long i =\
    \ 3; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];",
  "  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return\
    \ 10;\n  }\n  long count = 0;\n  for (int i = 1; i <= n; i++) {\n    count +=\
    \ pow(10, i - 1);\n  }\n  return count;", "  long dp[n+1];\n  dp[0] = 0;\n  dp[1]\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i-1] + 9*(pow(10, i-2));\n\
    \  }\n  return dp[n];"]
stop_tokens:
- "\n}"
