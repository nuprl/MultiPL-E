name: HumanEval_157_right_angle_triangle
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
  \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
  \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
  \ a, long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
  \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
  \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
  \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n \
  \   assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8),\
  \ (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
  \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
completions: ["  // Write your code here\n  long max = std::max(a, std::max(b, c));\n\
    \  long sum = a + b + c;\n  if (max * max == sum - max)\n    return true;\n  return\
    \ false;", "    if(a == 0 || b == 0 || c == 0) return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == min * min + mid * mid;", '    return
    (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a);', "    // Write your\
    \ code here\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n        return true;\n    return false;", "  std::vector<long>\
    \ sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "    // TODO: Implement\
    \ your solution here\n    return false;", "    // Write your code here\n    long\
    \ max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return (max * max == mid * mid + min\
    \ * min);", "    if(a == 0 || b == 0 || c == 0) return false;\n    if(a < 0 ||\
    \ b < 0 || c < 0) return false;\n    if(a == b && b == c) return false;\n    if(a\
    \ == b || b == c || a == c) return false;\n    if(a > b && a > c) {\n        if(a*a\
    \ == b*b + c*c) return true;\n        else return false;\n    }\n    if(b > a\
    \ && b > c) {\n        if(b*b == a*a + c*c) return true;\n        else return\
    \ false;\n    }\n    if(c > a && c > b) {\n        if(c*c == a*a + b*b) return\
    \ true;\n        else return false;\n    }\n    return false;", "  // Write your\
    \ code here\n  long max = std::max(a, std::max(b, c));\n  long sum = a + b + c;\n\
    \  return (max * max) == (sum - max) * (sum - max);", "    // Write your code\
    \ here\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n \
    \   v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n        return true;\n    return false;", "    // Write your\
    \ code here\n    long x=a*a;\n    long y=b*b;\n    long z=c*c;\n    if(x+y==z\
    \ || x+z==y || y+z==x)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }", "  // your code here\n  if(a == 0 || b == 0 ||\
    \ c == 0)\n    return false;\n  long max = std::max(a, std::max(b, c));\n  long\
    \ min = std::min(a, std::min(b, c));\n  long mid = a + b + c - max - min;\n  return\
    \ (max * max == mid * mid + min * min);", "    // your code here\n    long max\
    \ = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    if (max * max == min * min + mid *\
    \ mid) {\n        return true;\n    }\n    return false;", "  // your code here\n\
    \  long max = std::max(a, std::max(b, c));\n  long min = std::min(a, std::min(b,\
    \ c));\n  long mid = (a + b + c) - (max + min);\n  if (max * max == (min * min\
    \ + mid * mid)) {\n    return true;\n  }\n  return false;", "    // Write your\
    \ code here\n    std::vector<long> vec = {a, b, c};\n    std::sort(vec.begin(),\
    \ vec.end());\n    return vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2];",
  "  // Write your code here\n  long arr[3] = {a, b, c};\n  std::sort(arr, arr+3);\n\
    \  if(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n    return true;\n  return\
    \ false;", "    // Write your code here\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long sum = a + b + c;\n\
    \    long mid = sum - max - min;\n    if (max * max == mid * mid + min * min)\
    \ {\n        return true;\n    }\n    return false;", "    // Write your code\
    \ here\n    if(a*a+b*b==c*c)\n        return true;\n    else if(a*a+c*c==b*b)\n\
    \        return true;\n    else if(b*b+c*c==a*a)\n        return true;\n    else\n\
    \        return false;", "    // TODO: Implement your solution here\n    return\
    \ false;", "    std::vector<long> v = {a, b, c};\n    std::sort(v.begin(), v.end());\n\
    \    return (v[0] * v[0] + v[1] * v[1] == v[2] * v[2]);", "    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);", "    // Write your code here\n\
    \    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n\
    \    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1] == v[2]*v[2])\n\
    \        return true;\n    return false;", "    // Write your code here\n    std::vector<long>\
    \ v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    if(v[0]*v[0] + v[1]*v[1] == v[2]*v[2])\n        return true;\n\
    \    return false;", "    // TODO: Implement your solution here\n    return false;",
  "    if(a == 0 || b == 0 || c == 0) return false;\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c\
    \ - max - min;\n    if(max * max == min * min + mid * mid) return true;\n    return\
    \ false;", "    if(a == 0 || b == 0 || c == 0)\n        return false;\n    long\
    \ max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return (max * max == min * min + mid\
    \ * mid);", "    long max = std::max(a, std::max(b, c));\n    long min = std::min(a,\
    \ std::min(b, c));\n    long mid = a + b + c - max - min;\n    return max * max\
    \ == min * min + mid * mid;", "    // Write your code here\n    std::vector<long>\
    \ v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    if(v[0]*v[0] + v[1]*v[1] == v[2]*v[2])\n        return true;\n\
    \    return false;", "  if(a == 0 || b == 0 || c == 0) return false;\n  std::vector<long>\
    \ sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  return (sides[0]\
    \ * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);", "    // Write\
    \ your code here\n    long max = std::max(a, std::max(b, c));\n    long min =\
    \ std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ max * max == min * min + mid * mid;", "  // your code here\n  long max = std::max(a,\
    \ std::max(b, c));\n  long sum = a + b + c;\n  return (max * max == sum - max);",
  "    // Write your code here\n    std::vector<long> v = {a, b, c};\n    std::sort(v.begin(),\
    \ v.end());\n    return pow(v[0], 2) + pow(v[1], 2) == pow(v[2], 2);", "    //\
    \ Write your code here\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a*a + b*b == c*c)\n \
    \       return true;\n    if(a*a + c*c == b*b)\n        return true;\n    if(b*b\
    \ + c*c == a*a)\n        return true;\n    return false;", "  // TODO: Implement\
    \ me\n  long max = std::max(a, std::max(b, c));\n  long min = std::min(a, std::min(b,\
    \ c));\n  long mid = a + b + c - max - min;\n  return max * max == mid * mid +\
    \ min * min;", "  // TODO: Implement the function\n  return false;", "    long\
    \ max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return max * max == mid * mid + min\
    \ * min;", "    std::vector<long> v{a, b, c};\n    std::sort(v.begin(), v.end());\n\
    \    return v[0] * v[0] + v[1] * v[1] == v[2] * v[2];", "    std::vector<long>\
    \ v = {a, b, c};\n    std::sort(v.begin(), v.end());\n    return v[0] * v[0] +\
    \ v[1] * v[1] == v[2] * v[2];", "    // Write your code here\n    long x=a*a,y=b*b,z=c*c;\n\
    \    if(x+y==z||y+z==x||x+z==y)\n    return true;\n    else\n    return false;",
  "    if(a > b && a > c) {\n        if(a*a == b*b + c*c) {\n            return true;\n\
    \        }\n    } else if(b > a && b > c) {\n        if(b*b == a*a + c*c) {\n\
    \            return true;\n        }\n    } else if(c > a && c > b) {\n      \
    \  if(c*c == a*a + b*b) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    // Write your code here\n    long x = a*a;\n    long y = b*b;\n\
    \    long z = c*c;\n    if(x+y==z || x+z==y || y+z==x)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }", "    // TODO:\
    \ Implement your solution here\n    if(a<=0 || b<=0 || c<=0)\n        return false;\n\
    \    if(a*a + b*b == c*c)\n        return true;\n    if(a*a + c*c == b*b)\n  \
    \      return true;\n    if(b*b + c*c == a*a)\n        return true;\n    return\
    \ false;", "    // Write your code here\n    long arr[3] = {a, b, c};\n    std::sort(arr,\
    \ arr+3);\n    return (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]);", "  \
    \  // Write your code here\n    if(a*a + b*b == c*c)\n        return true;\n \
    \   else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c ==\
    \ a*a)\n        return true;\n    else\n        return false;", "    // Write\
    \ your code here\n    long max = std::max(a, std::max(b, c));\n    long min =\
    \ std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ (max * max == min * min + mid * mid);", "    // Write your code here\n    //\
    \ To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s = %d\\n\", \"a\", a);\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    if (max * max == sum - max * max) {\n        return\
    \ true;\n    }\n    return false;", "  // TODO: Implement me\n  return false;",
  "    long max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b,\
    \ c));\n    long mid = a + b + c - max - min;\n    return max * max == min * min\
    \ + mid * mid;", "    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \        return false;\n    if(a*a + b*b == c*c)\n        return true;\n    if(a*a\
    \ + c*c == b*b)\n        return true;\n    if(b*b + c*c == a*a)\n        return\
    \ true;\n    return false;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use Printf\n    // Example: Printf(\"%s\\n\"\
    , \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n    long min\
    \ = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ max * max == min * min + mid * mid;", "    if(a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2]\
    \ * sides[2]);", "    // Write your code here\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c\
    \ - max - min;\n    return max * max == mid * mid + min * min;", "    // TODO:\
    \ Implement your solution here\n    return false;", "    // Your code here\n \
    \   long max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b,\
    \ c));\n    long mid = a + b + c - max - min;\n    return max * max == mid * mid\
    \ + min * min;", "    // Write your code here\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c\
    \ - max - min;\n    return max * max == min * min + mid * mid;", "  // Write your\
    \ code here\n  long max = std::max(a, std::max(b, c));\n  long min = std::min(a,\
    \ std::min(b, c));\n  long mid = a + b + c - max - min;\n  return max * max ==\
    \ mid * mid + min * min;", "    // Write your code here\n    std::vector<long>\
    \ v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    if(v[0]*v[0] + v[1]*v[1] == v[2]*v[2])\n        return true;\n\
    \    return false;", "    // Write your code here\n    if(a>b && a>c)\n    {\n\
    \        if(a*a == b*b + c*c)\n            return true;\n        else\n      \
    \      return false;\n    }\n    else if(b>a && b>c)\n    {\n        if(b*b ==\
    \ a*a + c*c)\n            return true;\n        else\n            return false;\n\
    \    }\n    else\n    {\n        if(c*c == a*a + b*b)\n            return true;\n\
    \        else\n            return false;\n    }", "    if(a <= 0 || b <= 0 ||\
    \ c <= 0) return false;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c\
    \ == b*b) return true;\n    if(b*b + c*c == a*a) return true;\n    return false;",
  "    // Write your code here\n    std::vector<long> v;\n    v.push_back(a);\n  \
    \  v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n\
    \    if (v[0] * v[0] + v[1] * v[1] == v[2] * v[2]) {\n        return true;\n \
    \   }\n    return false;", "    // Write your code here\n    long arr[3] = {a,\
    \ b, c};\n    std::sort(arr, arr+3);\n    if(arr[0]*arr[0] + arr[1]*arr[1] ==\
    \ arr[2]*arr[2])\n        return true;\n    return false;", "  // Write your code\
    \ here\n  long max_side = std::max(a, std::max(b, c));\n  long min_side = std::min(a,\
    \ std::min(b, c));\n  long mid_side = a + b + c - max_side - min_side;\n  return\
    \ max_side * max_side == min_side * min_side + mid_side * mid_side;", "    //\
    \ Write your code here\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;", "    std::vector<long> v = {a,\
    \ b, c};\n    std::sort(v.begin(), v.end());\n    return v[0] * v[0] + v[1] *\
    \ v[1] == v[2] * v[2];", '    return (a*a + b*b == c*c) || (a*a + c*c == b*b)
    || (b*b + c*c == a*a);', "    // Write your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    return (max * max == sum -\
    \ max);", "    // Write your code here\n    if(a*a + b*b == c*c)\n        return\
    \ true;\n    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b\
    \ + c*c == a*a)\n        return true;\n    else\n        return false;", "   \
    \ // Your code here\n    if(a*a + b*b == c*c)\n        return true;\n    else\
    \ if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n\
    \        return true;\n    else\n        return false;", "    // Write your code\
    \ here\n    long max = std::max(a, std::max(b, c));\n    long min = std::min(a,\
    \ std::min(b, c));\n    long mid = a + b + c - max - min;\n    return max * max\
    \ == min * min + mid * mid;", "    // your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    if (max * max == sum - max)\
    \ {\n        return true;\n    }\n    return false;", "    std::vector<long> sides\
    \ = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", '    return (a*a
    + b*b == c*c);', "    // Write your code here\n    long max = std::max(a, std::max(b,\
    \ c));\n    long sum = a + b + c;\n    if (max == a) {\n        return (b * b\
    \ + c * c == a * a);\n    } else if (max == b) {\n        return (a * a + c *\
    \ c == b * b);\n    } else {\n        return (a * a + b * b == c * c);\n    }",
  "    // Write your code here\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;", "    // Write your code here\n\
    \    std::vector<long> vec = {a, b, c};\n    std::sort(vec.begin(), vec.end());\n\
    \    return (vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2]);", "    //\
    \ Write your code here\n    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    long max = std::max(a,std::max(b,c));\n    long sum = a+b+c;\n    if(max*max\
    \ == sum-max)\n        return true;\n    return false;", "  // Write your code\
    \ here\n  return false;", "    if(a==0 || b==0 || c==0)\n        return false;\n\
    \    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n        return true;\n\
    \    return false;", "    // TODO: Implement me!\n    std::vector<long> v;\n \
    \   v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    return (v[0]*v[0] + v[1]*v[1] == v[2]*v[2]);", "    // Write\
    \ your code here\n    long x = a*a;\n    long y = b*b;\n    long z = c*c;\n  \
    \  if(x+y==z || x+z==y || y+z==x)\n        return true;\n    else\n        return\
    \ false;", "    // Write your code here\n    // To print results to the standard\
    \ output you can use Printf\n    // Example: Printf(\"%s = %s\\n\", \"My variable\"\
    , some_variable);\n    long max = std::max(a, std::max(b, c));\n    long min =\
    \ std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    if(max\
    \ * max == min * min + mid * mid)\n        return true;\n    return false;", " \
    \   if(a == 0 || b == 0 || c == 0) return false;\n    if(a < 0 || b < 0 || c <\
    \ 0) return false;\n    if(a > b && a > c) {\n        return a*a == b*b + c*c;\n\
    \    }\n    if(b > a && b > c) {\n        return b*b == a*a + c*c;\n    }\n  \
    \  if(c > a && c > b) {\n        return c*c == a*a + b*b;\n    }\n    return false;",
  "    // Write your code here\n    // return true if the three sides form a right-angled\
    \ triangle, False otherwise.\n    if(a*a + b*b == c*c)\n        return true;\n\
    \    else if(a*a + c*c == b*b)\n        return true;\n    else if(b*b + c*c ==\
    \ a*a)\n        return true;\n    else\n        return false;", "  // Write your\
    \ code here\n  long sides[3] = {a, b, c};\n  std::sort(sides, sides + 3);\n  return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "  // your\
    \ code here\n  if(a*a+b*b==c*c)\n  return true;\n  else\n  return false;", " \
    \   // Write your code here\n    long max = std::max(a, std::max(b, c));\n   \
    \ long min = std::min(a, std::min(b, c));\n    long sum = a + b + c;\n    if (min\
    \ == 0 || max > sum - max) {\n        return false;\n    }\n    return max * max\
    \ == min * min + (sum - max - min) * (sum - max - min);", "    // Write your code\
    \ here\n    long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n    if(arr[0]*arr[0]\
    \ + arr[1]*arr[1] == arr[2]*arr[2])\n        return true;\n    return false;",
  "    // Write your code here\n    long max = std::max(a, std::max(b, c));\n    long\
    \ sum = a + b + c;\n    return (max * max == sum - max);", "    // Write your\
    \ code here\n    long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n    if\
    \ (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]) {\n        return true;\n \
    \   }\n    return false;", "  // TODO: Write your code here\n  std::vector<long>\
    \ v = {a, b, c};\n  std::sort(v.begin(), v.end());\n  return (v[0] * v[0] + v[1]\
    \ * v[1] == v[2] * v[2]);", "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];", "    // Write your code here\n    long max = std::max(a, std::max(b,\
    \ c));\n    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c\
    \ - max - min;\n    if (max * max == min * min + mid * mid)\n        return true;\n\
    \    return false;", "    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long max = std::max(a, std::max(b, c));\n    if(max == a)\n        return\
    \ (b*b + c*c == a*a);\n    else if(max == b)\n        return (a*a + c*c == b*b);\n\
    \    else\n        return (a*a + b*b == c*c);", "    // TODO: Implement your solution\
    \ here\n    long max = std::max(a, std::max(b, c));\n    long sum = a + b + c;\n\
    \    return (max * max == sum - max);", "    std::vector<long> sides = {a, b,\
    \ c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];", "    if(a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    long max = std::max(a, std::max(b, c));\n\
    \    long sum = a + b + c;\n    return (max * max) == (sum - max) * (sum - max);",
  "    // Write your code here\n    long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n\
    \    if(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n        return true;\n\
    \    return false;", "    // Write your code here\n    // Hint: Use the Pythagorean\
    \ theorem\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 == c^2\n    // a^2 + b^2 -\
    \ c^2 == 0\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2\
    \ + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2\
    \ < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2\
    \ + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2\
    \ < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2\
    \ + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2\
    \ < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.0001\n\
    \    // a^2 + b^2 - c^2 < 0.0001\n    // a^2 + b^2 - c^2 < 0.", "    // Write\
    \ your code here\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n        return true;\n    return false;", "    // Write your\
    \ code here\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n\
    \    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n        return true;\n    return false;", "    // Write your\
    \ code here\n    long max = std::max(a, std::max(b, c));\n    long sum = a + b\
    \ + c;\n    if (max == a) {\n        return (a * a == b * b + c * c);\n    } else\
    \ if (max == b) {\n        return (b * b == a * a + c * c);\n    } else {\n  \
    \      return (c * c == a * a + b * b);\n    }", "    if(a*a + b*b == c*c)\n \
    \       return true;\n    else if(a*a + c*c == b*b)\n        return true;\n  \
    \  else if(b*b + c*c == a*a)\n        return true;\n    else\n        return false;",
  '    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);', " \
    \   // Write your code here\n    long max = std::max(a, std::max(b, c));\n   \
    \ long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return (max * max == min * min + mid * mid);", "  // Write your code here\n\
    \  std::vector<long> sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n\
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];",
  "    if (a == 0 || b == 0 || c == 0) return false;\n    std::vector<long> sides\
    \ = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "  // Write your\
    \ code here\n  long max = std::max(a, std::max(b, c));\n  long sum = a + b + c;\n\
    \  return (max * max) == (sum - max) * (sum - max);", "    // Write your code\
    \ here\n    std::vector<long> sides;\n    sides.push_back(a);\n    sides.push_back(b);\n\
    \    sides.push_back(c);\n    std::sort(sides.begin(), sides.end());\n    return\
    \ (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);", "  // Write\
    \ your code here\n  return a*a+b*b==c*c;", "    if(a == 0 || b == 0 || c == 0)\
    \ return false;\n    long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n  \
    \  if(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]) return true;\n    return\
    \ false;", "    // Write your code here\n    // Hint: You can use the Pythagorean\
    \ theorem.\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 == c^2\n    // a^2 + b^2\
    \ - c^2 == 0\n    long a_sq = a * a;\n    long b_sq = b * b;\n    long c_sq =\
    \ c * c;\n    if (a_sq + b_sq == c_sq) {\n        return true;\n    }\n    return\
    \ false;", "  // Write your code here\n  long max = std::max(a, std::max(b, c));\n\
    \  long sum = a + b + c;\n  return (max * max) == (sum - max) * (sum - max);",
  "    std::vector<long> v = {a, b, c};\n    std::sort(v.begin(), v.end());\n    return\
    \ v[0] * v[0] + v[1] * v[1] == v[2] * v[2];", "    // Your code here\n    long\
    \ x=a*a;\n    long y=b*b;\n    long z=c*c;\n    if(x+y==z||x+z==y||y+z==x)\n \
    \   return true;\n    else\n    return false;", "    if(a == 0 || b == 0 || c\
    \ == 0) return false;\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(),\
    \ sides.end());\n    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2]\
    \ * sides[2]);", "    // Write your code here\n    // return true;\n    std::vector<long>\
    \ v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(),\
    \ v.end());\n    if (v[0]*v[0] + v[1]*v[1] == v[2]*v[2]) {\n        return true;\n\
    \    }\n    return false;", "    // TODO: Implement your solution here\n    long\
    \ max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return (max * max == min * min + mid\
    \ * mid);", "    // Write your code here\n    // To print results to the standard\
    \ output you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\"\
    );\n    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a + c*c == b*b)\n\
    \        return true;\n    else if(b*b + c*c == a*a)\n        return true;\n \
    \   else\n        return false;", "    std::vector<long> sides = {a, b, c};\n\
    \    std::sort(sides.begin(), sides.end());\n    return (sides[0] * sides[0] +\
    \ sides[1] * sides[1]) == (sides[2] * sides[2]);", "    // Write your code here\n\
    \    if(a>b && a>c)\n    {\n        if(a*a == b*b + c*c)\n            return true;\n\
    \        else\n            return false;\n    }\n    else if(b>a && b>c)\n   \
    \ {\n        if(b*b == a*a + c*c)\n            return true;\n        else\n  \
    \          return false;\n    }\n    else if(c>a && c>b)\n    {\n        if(c*c\
    \ == a*a + b*b)\n            return true;\n        else\n            return false;\n\
    \    }\n    else\n        return false;", "    std::vector<long> v = {a, b, c};\n\
    \    std::sort(v.begin(), v.end());\n    return pow(v[0], 2) + pow(v[1], 2) ==\
    \ pow(v[2], 2);", "    if (a == 0 || b == 0 || c == 0) {\n        return false;\n\
    \    }\n    if (a == b && b == c) {\n        return false;\n    }\n    if (a ==\
    \ b || b == c || a == c) {\n        return false;\n    }\n    if (a * a + b *\
    \ b == c * c) {\n        return true;\n    }\n    if (a * a + c * c == b * b)\
    \ {\n        return true;\n    }\n    if (b * b + c * c == a * a) {\n        return\
    \ true;\n    }\n    return false;", "  // Write your code here\n  // To print\
    \ results to the standard output you can use Printf\n  // Example: Printf(\"%s\
    \ = %d\\n\", varName, value);\n  long max = std::max(a, std::max(b, c));\n  long\
    \ sum = a + b + c - max;\n  return max * max == sum * sum;", "    // Write your\
    \ code here\n    // To print results to the standard output you can use Printf\n\
    \    // Example: Printf(\"%s\\n\", \"Hello world!\");\n    long x,y,z;\n    x=a*a;\n\
    \    y=b*b;\n    z=c*c;\n    if(x+y==z || x+z==y || y+z==x)\n        return true;\n\
    \    else\n        return false;", "    // Write your code here\n    // To print\
    \ results to the standard output you can use Printf\n    // Example: Printf(\"\
    %s\\n\", \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n   \
    \ long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == min * min + mid * mid) {\n        return true;\n    }\n\
    \    return false;", "    long max = std::max(a, std::max(b, c));\n    long min\
    \ = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ max * max == min * min + mid * mid;", "    long max = std::max(a, std::max(b,\
    \ c));\n    long sum = a + b + c;\n    return (max * max) == (sum - max) * (sum\
    \ - max);", "    long max = std::max(a, std::max(b, c));\n    long min = std::min(a,\
    \ std::min(b, c));\n    long mid = a + b + c - max - min;\n    return max * max\
    \ == mid * mid + min * min;", "    // your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return (max * max == min * min + mid * mid);",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use Printf\n    // Example: Printf(\"%s\\n\", \"Hello world!\");\n    long\
    \ max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return max * max == min * min + mid\
    \ * mid;", "    if(a == 0 || b == 0 || c == 0) return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == mid * mid + min * min;", " \
    \   // Write your code here\n    long arr[3] = {a, b, c};\n    std::sort(arr,\
    \ arr+3);\n    return (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]);", "  \
    \  std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];",
  "  // Write your code here\n  // To print results to the standard output you can\
    \ use Printf\n  // Example: Printf(\"%s\\n\", \"Hello world!\");\n  long max =\
    \ std::max(a, std::max(b, c));\n  long sum = a + b + c;\n  if (max == a) {\n \
    \   return (b * b + c * c == a * a);\n  } else if (max == b) {\n    return (a\
    \ * a + c * c == b * b);\n  } else {\n    return (a * a + b * b == c * c);\n \
    \ }", "    // Write your code here\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    return max * max == mid * mid + min * min;", "    // Write your code\
    \ here\n    long side1, side2, side3;\n    side1 = a*a;\n    side2 = b*b;\n  \
    \  side3 = c*c;\n    if(side1 + side2 == side3 || side1 + side3 == side2 || side2\
    \ + side3 == side1)\n        return true;\n    else\n        return false;", " \
    \   // Write your code here\n    // Hint: Use the Pythagorean theorem.\n    //\
    \ a^2 + b^2 = c^2\n    long max = std::max(a, std::max(b, c));\n    long min =\
    \ std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ (max * max == mid * mid + min * min);", "    std::vector<long> sides = {a, b,\
    \ c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];", "    if (a == 0 || b == 0 ||\
    \ c == 0) return false;\n    if (a*a + b*b == c*c) return true;\n    if (a*a +\
    \ c*c == b*b) return true;\n    if (b*b + c*c == a*a) return true;\n    return\
    \ false;", "    // your code here\n    std::vector<long> v;\n    v.push_back(a);\n\
    \    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n\
    \    if(v[0]*v[0] + v[1]*v[1] == v[2]*v[2])\n        return true;\n    return\
    \ false;", "    if(a == 0 || b == 0 || c == 0) return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == mid * mid + min * min;", " \
    \   long max = std::max(a, std::max(b, c));\n    long sum = a + b + c;\n    return\
    \ (max * max) == (sum - max) * (sum - max);", "    // Write your code here\n \
    \   long max = std::max(a, std::max(b, c));\n    long sum = a + b + c;\n    return\
    \ max * max == sum - max;", "    long arr[3] = {a, b, c};\n    std::sort(arr,\
    \ arr+3);\n    return (arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2]);", "  \
    \  std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];",
  "    // TODO: Implement this function\n    // Hint: You can use std::sort()\n  \
    \  // Hint: You can use std::pow()\n    // Hint: You can use std::sqrt()\n   \
    \ std::vector<long> vec;\n    vec.push_back(a);\n    vec.push_back(b);\n    vec.push_back(c);\n\
    \    std::sort(vec.begin(), vec.end());\n    if (vec[0] * vec[0] + vec[1] * vec[1]\
    \ == vec[2] * vec[2]) {\n        return true;\n    }\n    return false;", "  \
    \  long max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b,\
    \ c));\n    long mid = a + b + c - max - min;\n    return max * max == mid * mid\
    \ + min * min;", "  // Write your code here\n  if(a==0 || b==0 || c==0)\n    return\
    \ false;\n  if(a*a + b*b == c*c)\n    return true;\n  if(a*a + c*c == b*b)\n \
    \   return true;\n  if(b*b + c*c == a*a)\n    return true;\n  return false;",
  "  // Write your code here\n  if(a==0 || b==0 || c==0)\n    return false;\n  long\
    \ max = std::max(a, std::max(b, c));\n  long min = std::min(a, std::min(b, c));\n\
    \  long sum = a+b+c;\n  if(max*max == (sum-max-min)*(sum-max-min) + min*min)\n\
    \    return true;\n  return false;", "    if(a == 0 || b == 0 || c == 0)\n   \
    \     return false;\n    long max = std::max(a, std::max(b, c));\n    long min\
    \ = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ max * max == mid * mid + min * min;", "  // Write your code here\n  std::vector<long>\
    \ sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  return (sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);", "    // Write your\
    \ code here\n    long max = std::max(a, std::max(b, c));\n    long min = std::min(a,\
    \ std::min(b, c));\n    long mid = a + b + c - max - min;\n    return max * max\
    \ == mid * mid + min * min;", "    // Write your code here\n    // To print results\
    \ to the standard output you can use Printf\n    // Example: Printf(\"%s\\n\"\
    , \"Hello world!\");\n    long max = std::max(a, std::max(b, c));\n    long sum\
    \ = a + b + c;\n    return (sum - max) > max;", "    // your code here\n    if(a\
    \ == 0 || b == 0 || c == 0)\n        return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    if(max * max == mid * mid + min * min)\n     \
    \   return true;\n    return false;", "    std::vector<long> sides = {a, b, c};\n\
    \    std::sort(sides.begin(), sides.end());\n    return sides[0] * sides[0] +\
    \ sides[1] * sides[1] == sides[2] * sides[2];", '    return (a*a + b*b == c*c)
    || (a*a + c*c == b*b) || (b*b + c*c == a*a);', "    // Write your code here\n\
    \    if(a == 0 || b == 0 || c == 0)\n        return false;\n    long arr[3] =\
    \ {a, b, c};\n    std::sort(arr, arr+3);\n    if(arr[0]*arr[0] + arr[1]*arr[1]\
    \ == arr[2]*arr[2])\n        return true;\n    return false;", "    // TODO: Implement\
    \ your solution here\n    return false;", "    // Write your code here\n    long\
    \ max = std::max(a, std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return max * max == mid * mid + min\
    \ * min;", "    std::vector<long> v{a, b, c};\n    std::sort(v.begin(), v.end());\n\
    \    return v[0] * v[0] + v[1] * v[1] == v[2] * v[2];", "    // Write your code\
    \ here\n    long max = std::max(a, std::max(b, c));\n    long min = std::min(a,\
    \ std::min(b, c));\n    long mid = a + b + c - max - min;\n    return max * max\
    \ == min * min + mid * mid;", "    // Write your code here\n    if(a==0 || b==0\
    \ || c==0)\n        return false;\n    if(a<0 || b<0 || c<0)\n        return false;\n\
    \    if(a>b && a>c)\n    {\n        if(a*a==b*b+c*c)\n            return true;\n\
    \        else\n            return false;\n    }\n    else if(b>a && b>c)\n   \
    \ {\n        if(b*b==a*a+c*c)\n            return true;\n        else\n      \
    \      return false;\n    }\n    else if(c>a && c>b)\n    {\n        if(c*c==a*a+b*b)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else\n        return false;", "    // Write your code here\n    // check if\
    \ the triangle is right angled or not\n    // if yes return true\n    // else\
    \ return false\n    // hint: use the pythagoras theorem\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 == c^2\n    // a^2 + b^2 - c^2 == 0\n    // a^2 + b^2 - c^2\
    \ < 0\n    // a^2 + b^2 - c^2 > 0\n    // a^2 + b^2 - c^2 <= 0\n    // a^2 + b^2\
    \ - c^2 >= 0\n    // a^2 + b^2 - c^2 < epsilon\n    // a^2 + b^2 - c^2 > epsilon\n\
    \    // a^2 + b^2 - c^2 <= epsilon\n    // a^2 + b^2 - c^2 >= epsilon\n    //\
    \ a^2 + b^2 - c^2 < 1e-9\n    // a^2 + b^2 - c^2 > 1e-9\n    // a^2 + b^2 - c^2\
    \ <= 1e-9\n    // a^2 + b^2 - c^2 >= 1e-9\n    // a^2 + b^2 - c^2 < 1e-6\n   \
    \ // a^2 + b^2 - c^2 > 1e-6\n    // a^2 + b^2 - c^2 <= 1e-6\n    // a^2 + b^2\
    \ - c^2 >= 1e-6\n    // a^2 + b^2 - c^2 < 1e-3\n    // a^2 + b^2 - c^2 > 1e-3\n\
    \    // a^2 + b^2 - c^2 <= 1e-3\n    // a^2 + b^2 - c^2 >= 1e-3\n    // a^2 +\
    \ b^2 - c^2 < 1e-2\n    // a^2 + b^2 - c^2 > 1e-2\n    // a^2 + b^2 - c^2 <= 1e-2\n\
    \    //", "    if(a*a + b*b == c*c)\n        return true;\n    else if(a*a + c*c\
    \ == b*b)\n        return true;\n    else if(b*b + c*c == a*a)\n        return\
    \ true;\n    else\n        return false;", "    std::vector<long> sides = {a,\
    \ b, c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];", "    // Write your code here\n\
    \    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);",
  "  if(a*a + b*b == c*c)\n    return true;\n  else if(a*a + c*c == b*b)\n    return\
    \ true;\n  else if(b*b + c*c == a*a)\n    return true;\n  else\n    return false;",
  "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];",
  "    // Write your code here\n    long max = std::max(a, std::max(b, c));\n    long\
    \ min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == min * min + mid * mid;", "    if (a == 0 || b == 0 ||\
    \ c == 0) {\n        return false;\n    }\n    if (a < 0 || b < 0 || c < 0) {\n\
    \        return false;\n    }\n    if (a == b && b == c) {\n        return false;\n\
    \    }\n    if (a > b && a > c) {\n        return (a * a == b * b + c * c);\n\
    \    }\n    if (b > a && b > c) {\n        return (b * b == a * a + c * c);\n\
    \    }\n    if (c > a && c > b) {\n        return (c * c == a * a + b * b);\n\
    \    }\n    return false;", "    // TODO: Implement your solution here\n    long\
    \ max = std::max(a, std::max(b, c));\n    long sum = a + b + c - max;\n    return\
    \ max * max == sum * sum;", "    std::vector<long> v = {a, b, c};\n    std::sort(v.begin(),\
    \ v.end());\n    return v[0] * v[0] + v[1] * v[1] == v[2] * v[2];", "  // Write\
    \ your code here\n  std::vector<long> v;\n  v.push_back(a);\n  v.push_back(b);\n\
    \  v.push_back(c);\n  std::sort(v.begin(), v.end());\n  if(v[0]*v[0] + v[1]*v[1]\
    \ == v[2]*v[2])\n    return true;\n  return false;", "    // Write your code here\n\
    \    long x = std::max(a, std::max(b, c));\n    long y = std::min(a, std::min(b,\
    \ c));\n    long z = a + b + c - x - y;\n    return x * x == y * y + z * z;",
  "    if(a == 0 || b == 0 || c == 0)\n        return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    return (sum - max) > max;",
  "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];",
  "    if(a == 0 || b == 0 || c == 0)\n        return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == min * min + mid * mid;", " \
    \   long max = std::max(a, std::max(b, c));\n    long sum = a + b + c;\n    return\
    \ (max * max) == (sum - max) * (sum - max);", "    std::vector<long> sides = {a,\
    \ b, c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];", "    // Write your code here\n\
    \    if(a==0 || b==0 || c==0)\n        return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a+b+c-max-min;\n    if(max*max == mid*mid + min*min)\n        return true;\n\
    \    return false;", "    // Write your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    return (max * max) == (sum\
    \ - max) * (sum - max);", "  // Write your code here\n  return false;", "    //\
    \ Write your code here\n    // Hint: use the Pythagorean theorem\n    // a^2 +\
    \ b^2 = c^2\n    // a^2 + b^2 - c^2 = 0\n    // a^2 + b^2 - c^2 < 0.001\n    //\
    \ a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 -\
    \ c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n\
    \    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 +\
    \ b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 <\
    \ 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    //\
    \ a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 -\
    \ c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n\
    \    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 +\
    \ b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 <\
    \ 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    // a^2 + b^2 - c^2 < 0.001\n    //\
    \ a^2 + b^2 - c^", "    // Write your code here\n    if(a==0 || b==0 || c==0)\n\
    \    {\n        return false;\n    }\n    long arr[3] = {a,b,c};\n    std::sort(arr,arr+3);\n\
    \    if(arr[0]*arr[0] + arr[1]*arr[1] == arr[2]*arr[2])\n    {\n        return\
    \ true;\n    }\n    return false;", "    // Write your code here\n    std::vector<long>\
    \ sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];", "    // TODO: Implement\
    \ this function\n    return false;", "  // Write your code here\n  long sides[3]\
    \ = {a, b, c};\n  std::sort(sides, sides + 3);\n  long a2 = sides[0] * sides[0];\n\
    \  long b2 = sides[1] * sides[1];\n  long c2 = sides[2] * sides[2];\n  return\
    \ a2 + b2 == c2;", "  // Write your code here\n  std::vector<long> v;\n  v.push_back(a);\n\
    \  v.push_back(b);\n  v.push_back(c);\n  std::sort(v.begin(), v.end());\n  return\
    \ (v[0]*v[0] + v[1]*v[1] == v[2]*v[2]);", "    // Write your code here\n    //\
    \ To print results to the standard output you can use Printf\n    // Example:\
    \ Printf(\"%s\\n\", \"Hello world!\");\n    if(a*a+b*b==c*c)\n        return true;\n\
    \    else if(a*a+c*c==b*b)\n        return true;\n    else if(b*b+c*c==a*a)\n\
    \        return true;\n    else\n        return false;", "    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == min * min + mid * mid;", " \
    \   // Write your code here\n    long max = std::max(a, std::max(b, c));\n   \
    \ long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    if (max * max == mid * mid + min * min) {\n        return true;\n    }\n\
    \    return false;", "  // Write your code here\n  // Hint:\n  // 1. Sort the\
    \ three sides in ascending order.\n  // 2. If the square of the longest side is\
    \ equal to the sum of the squares of\n  // the other two sides, then the triangle\
    \ is right-angled.\n  // 3. Otherwise, the triangle is not right-angled.\n  //\
    \ 4. You can use the pow() function to calculate the square of a number.\n  //\
    \ 5. You can use the sort() function to sort the three sides.\n  // 6. You can\
    \ use the std::vector<T>::begin() and std::vector<T>::end() to\n  // get the iterator\
    \ to the first and last elements of a vector.\n  // 7. You can use the std::vector<T>::size()\
    \ to get the size of a vector.\n  // 8. You can use the std::vector<T>::at() to\
    \ get the element at a specific\n  // index of a vector.\n  // 9. You can use\
    \ the std::vector<T>::push_back() to add an element to the\n  // end of a vector.\n\
    \  // 10. You can use the std::vector<T>::pop_back() to remove the last element\n\
    \  // of a vector.\n  // 11. You can use the std::vector<T>::empty() to check\
    \ if a vector is empty.\n  // 12. You can use the std::vector<T>::clear() to remove\
    \ all elements of a\n  // vector.\n  // 13. You can use the std::vector<T>::erase()\
    \ to remove a specific element\n  // of a vector.\n  std::vector<long> sides;\n\
    \  sides.push_back(a);\n  sides.push_back(b);\n  sides.push_back(c);\n  std::sort(sides.begin(),\
    \ sides.end());\n  if (pow(sides.at(2), 2) == pow(sides.at(0), 2) + pow(sides.at(1),\
    \ 2)) {\n    return true;\n  }\n  return false;", '    return (a*a + b*b == c*c);',
  "    if(a == 0 || b == 0 || c == 0)\n        return false;\n    long max = std::max(a,\
    \ std::max(b, c));\n    long sum = a + b + c;\n    return (max * max == sum -\
    \ max);", '    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==
    a*a);', "    // Write your code here\n    long max = std::max(a, std::max(b, c));\n\
    \    long min = std::min(a, std::min(b, c));\n    long mid = a + b + c - max -\
    \ min;\n    if (max * max == min * min + mid * mid) {\n        return true;\n\
    \    }\n    return false;", "    // Write your code here\n    long max = std::max(a,\
    \ std::max(b, c));\n    long min = std::min(a, std::min(b, c));\n    long mid\
    \ = a + b + c - max - min;\n    return max * max == mid * mid + min * min;", " \
    \   std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);",
  "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1]) == sides[2] * sides[2];",
  "    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];"]
stop_tokens:
- "\n}"
