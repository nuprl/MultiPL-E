name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a list of extensions.\n// The extensions are to be used\
  \ to load additional classes to the class. The\n// strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the list.\n// For example, if you are given \"Slices\"\
  \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
  , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
  Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\"\
  , (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
  t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"\
  NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n   \
  \ assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"\
  TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n  \
  \  assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\"\
  , (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"\
  __HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
  HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
  Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
  NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n\
  \    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"\
  91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"\
  671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["\tstd::string result = class_name;\n\tdouble max_strength = 0;\n\t\
    for (auto extension : extensions) {\n\t\tdouble strength = 0;\n\t\tfor (auto c\
    \ : extension) {\n\t\t\tif (isupper(c)) {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tresult = class_name + \".\" + extension;\n\
    \t\t}\n\t}\n\treturn result;", "    int max_strength = 0;\n    std::string strongest_extension;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n\
    \        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n        \
    \    } else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n      \
    \          strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto letter\
    \ : extension) {\n            if (isupper(letter)) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (auto letter : extension) {\n       \
    \     if (isupper(letter)) {\n                cap++;\n            } else {\n \
    \               sm++;\n            }\n        }\n        int strength = cap -\
    \ sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (auto extension : extensions) {\n     \
    \   int upper_case_count = 0;\n        int lower_case_count = 0;\n        for\
    \ (auto letter : extension) {\n            if (isupper(letter)) {\n          \
    \      upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "    int\
    \ max_strength = INT_MIN;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else if (islower(c)) {\n                strength--;\n          \
    \  }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension = \"\";\n    for (auto extension :\
    \ extensions) {\n        int strength = 0;\n        for (auto c : extension) {\n\
    \            if (isupper(c)) {\n                strength++;\n            } else\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    float strongest_strength = 0;\n\
    \    for (auto extension : extensions) {\n        int upper_case_count = 0;\n\
    \        int lower_case_count = 0;\n        for (auto letter : extension) {\n\
    \            if (isupper(letter)) {\n                upper_case_count++;\n   \
    \         } else {\n                lower_case_count++;\n            }\n     \
    \   }\n        float strength = (float)upper_case_count - (float)lower_case_count;\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        int strength = cap\
    \ - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = -1;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              strength++;\n            } else if (islower(c)) {\n           \
    \     strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0;\n        int sm = 0;\n     \
    \   for (auto c : extension) {\n            if (isupper(c)) {\n              \
    \  cap++;\n            } else {\n                sm++;\n            }\n      \
    \  }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = -1;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength\
    \ = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n           \
    \ if (isupper(extensions[i][j])) {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = -1;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int strength = 0;\n        for (auto c : extension) {\n         \
    \   if (isupper(c)) {\n                strength++;\n            } else if (islower(c))\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    std::string strongest_extension = \"\";\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n     \
    \   for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int upper_case_count = 0;\n       \
    \ int lower_case_count = 0;\n        for (auto c : extension) {\n            if\
    \ (isupper(c)) {\n                upper_case_count++;\n            } else {\n\
    \                lower_case_count++;\n            }\n        }\n        int strength\
    \ = upper_case_count - lower_case_count;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string strongest_extension = \"\";\n    double strongest_strength = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n   \
    \     int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n\
    \            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n     \
    \           cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        double strength = (double)cap - (double)sm;\n        if (strength\
    \ > strongest_strength) {\n            strongest_strength = strength;\n      \
    \      strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = -1;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int upper_case_count\
    \ = 0;\n        int lower_case_count = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                upper_case_count++;\n\
    \            } else {\n                lower_case_count++;\n            }\n  \
    \      }\n        int strength = upper_case_count - lower_case_count;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int CAP\
    \ = 0, SM = 0;\n        for (auto c : extension) {\n            if (isupper(c))\
    \ {\n                CAP++;\n            } else {\n                SM++;\n   \
    \         }\n        }\n        int strength = CAP - SM;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max = 0;\n    int max_index = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j\
    \ < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j])) {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        if (cap - sm > max) {\n            max = cap - sm;\n\
    \            max_index = i;\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[max_index];", "    int max_strength = -1;\n    std::string strongest_extension\
    \ = \"\";\n    for (auto extension : extensions) {\n        int CAP = 0;\n   \
    \     int SM = 0;\n        for (auto c : extension) {\n            if (isupper(c))\
    \ {\n                CAP++;\n            } else {\n                SM++;\n   \
    \         }\n        }\n        int strength = CAP - SM;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (auto extension : extensions) {\n     \
    \   int CAP = 0;\n        int SM = 0;\n        for (auto c : extension) {\n  \
    \          if (isupper(c)) {\n                CAP++;\n            } else {\n \
    \               SM++;\n            }\n        }\n        int strength = CAP -\
    \ SM;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = -1;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int CAP\
    \ = 0;\n        int SM = 0;\n        for (auto c : extension) {\n            if\
    \ (isupper(c)) {\n                CAP++;\n            } else {\n             \
    \   SM++;\n            }\n        }\n        int strength = CAP - SM;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = -1;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              strength++;\n            } else if (islower(c)) {\n           \
    \     strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension = \"\";\n    for\
    \ (std::string extension : extensions) {\n        int strength = 0;\n        for\
    \ (char c : extension) {\n            if (isupper(c)) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        int strength = cap - sm;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string str = class_name;\n    int max = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j\
    \ < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        if (cap - sm > max) {\n            max = cap\
    \ - sm;\n            str = class_name + \".\" + extensions[i];\n        }\n  \
    \  }\n    return str;", "\tstd::string result = class_name;\n\tdouble max_strength\
    \ = 0;\n\tfor (auto extension : extensions) {\n\t\tdouble strength = 0;\n\t\t\
    for (auto c : extension) {\n\t\t\tif (isupper(c))\n\t\t\t\tstrength++;\n\t\t\t\
    else if (islower(c))\n\t\t\t\tstrength--;\n\t\t}\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tresult = class_name + \".\" + extension;\n\
    \t\t}\n\t}\n\treturn result;", "\tint max_strength = 0;\n\tstd::string strongest_extension;\n\
    \tfor (auto extension : extensions) {\n\t\tint upper_case_count = 0;\n\t\tint\
    \ lower_case_count = 0;\n\t\tfor (auto letter : extension) {\n\t\t\tif (isupper(letter))\
    \ {\n\t\t\t\tupper_case_count++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlower_case_count++;\n\
    \t\t\t}\n\t\t}\n\t\tint strength = upper_case_count - lower_case_count;\n\t\t\
    if (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    double strongest_strength = 0;\n\
    \    for (auto extension : extensions) {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              cap++;\n            } else {\n                sm++;\n         \
    \   }\n        }\n        double strength = cap - sm;\n        if (strength >\
    \ strongest_strength) {\n            strongest_strength = strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int upper_case_count\
    \ = 0;\n        int lower_case_count = 0;\n        for (auto character : extension)\
    \ {\n            if (isupper(character)) {\n                upper_case_count++;\n\
    \            } else {\n                lower_case_count++;\n            }\n  \
    \      }\n        int strength = upper_case_count - lower_case_count;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    // your code here\n    std::string result\
    \ = class_name;\n    int max_strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int strength = 0;\n        for (auto letter : extension) {\n    \
    \        if (isupper(letter)) {\n                strength++;\n            } else\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            result\
    \ += \".\" + extension;\n        }\n    }\n    return result;", "    int max =\
    \ 0;\n    std::string result = \"\";\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j\
    \ < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        if (cap - sm > max) {\n            max = cap\
    \ - sm;\n            result = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + result;", "    int max_strength = 0;\n    std::string strongest_extension;\n\
    \    for (auto extension : extensions) {\n        int strength = 0;\n        for\
    \ (auto letter : extension) {\n            if (isupper(letter)) {\n          \
    \      strength++;\n            } else {\n                strength--;\n      \
    \      }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int upper_case_count = 0;\n        int lower_case_count = 0;\n  \
    \      for (auto letter : extension) {\n            if (isupper(letter)) {\n \
    \               upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = -1;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > max_strength) {\n            max_strength\
    \ = cap - sm;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int CAP = 0;\n        int SM = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                CAP++;\n            } else\
    \ {\n                SM++;\n            }\n        }\n        int strength = CAP\
    \ - SM;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "\tint max_strength = 0;\n\tstd::string strongest_extension\
    \ = \"\";\n\tfor (auto extension : extensions) {\n\t\tint strength = 0;\n\t\t\
    for (auto letter : extension) {\n\t\t\tif (isupper(letter)) {\n\t\t\t\tstrength++;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength >\
    \ max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    int max_strength = -1;\n    std::string strongest_extension;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for\
    \ (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "\t\
    // your code here\n\t// return \"\";\n\tint max_strength = -1;\n\tstd::string\
    \ strongest_extension;\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\t\
    int CAP = 0;\n\t\tint SM = 0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++)\
    \ {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\t\t\
    CAP++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >= 'a' && extensions[i][j] <=\
    \ 'z') {\n\t\t\t\tSM++;\n\t\t\t}\n\t\t}\n\t\tint strength = CAP - SM;\n\t\tif\
    \ (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    int max_index = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (isupper(extensions[i][j])) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_index = i;\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[max_index];", "    int max_strength = INT_MIN;\n    std::string strongest_extension\
    \ = \"\";\n    for (auto extension : extensions) {\n        int strength = 0;\n\
    \        for (auto c : extension) {\n            if (isupper(c)) {\n         \
    \       strength++;\n            } else {\n                strength--;\n     \
    \       }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int strength = 0;\n        for (auto c : extension) {\n         \
    \   if (isupper(c)) {\n                strength++;\n            } else {\n   \
    \             strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (int i\
    \ = 0; i < extensions.size(); i++) {\n        int upper_case_count = 0;\n    \
    \    int lower_case_count = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (isupper(extensions[i][j])) {\n                upper_case_count++;\n\
    \            } else {\n                lower_case_count++;\n            }\n  \
    \      }\n        int strength = upper_case_count - lower_case_count;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "\tint max_strength = -1;\n\tstd::string strongest_extension\
    \ = \"\";\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\tint strength =\
    \ 0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (isupper(extensions[i][j]))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (islower(extensions[i][j])) {\n\
    \t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength) {\n\t\t\t\
    max_strength = strength;\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t\
    }\n\treturn class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = -1;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int strength = 0;\n        for (auto c : extension) {\n         \
    \   if (isupper(c)) {\n                strength++;\n            } else if (islower(c))\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto\
    \ ch : extension) {\n            if (isupper(ch)) {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   int strength = cap - sm;\n        if (strength > max_strength) {\n       \
    \     max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ int strength = cap - sm;\n        if (strength > max_strength) {\n         \
    \   max_strength = strength;\n            strongest_extension = extension;\n \
    \       }\n    }\n    return class_name + \".\" + strongest_extension;", "\tint\
    \ max = 0;\n\tint max_index = 0;\n\tfor (int i = 0; i < extensions.size(); i++)\
    \ {\n\t\tint cap = 0;\n\t\tint sm = 0;\n\t\tfor (int j = 0; j < extensions[i].size();\
    \ j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\
    \t\tcap++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsm++;\n\t\t\t}\n\t\t}\n\t\tif (cap\
    \ - sm > max) {\n\t\t\tmax = cap - sm;\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + extensions[max_index];", "    int max_strength = 0;\n \
    \   std::string strongest_extension;\n    for (auto extension : extensions) {\n\
    \        int strength = 0;\n        for (auto letter : extension) {\n        \
    \    if (isupper(letter)) {\n                strength++;\n            } else {\n\
    \                strength--;\n            }\n        }\n        if (strength >\
    \ max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "\tint max = 0;\n\tint index = 0;\n\tfor (int i = 0; i < extensions.size(); i++)\
    \ {\n\t\tint cap = 0;\n\t\tint sm = 0;\n\t\tfor (int j = 0; j < extensions[i].size();\
    \ j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\
    \t\tcap++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n\t\t\t\tsm++;\n\t\t\t}\n\t\t}\n\t\tif (cap - sm > max) {\n\t\t\t\
    max = cap - sm;\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn class_name + \".\" + extensions[index];",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0;\n        int sm = 0;\n     \
    \   for (auto c : extension) {\n            if (isupper(c)) {\n              \
    \  cap++;\n            } else {\n                sm++;\n            }\n      \
    \  }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string strongest_extension = \"\";\n    double strongest_strength = 0;\n\
    \    for (auto extension : extensions) {\n        int upper_case_count = 0;\n\
    \        int lower_case_count = 0;\n        for (auto letter : extension) {\n\
    \            if (isupper(letter)) {\n                upper_case_count++;\n   \
    \         } else if (islower(letter)) {\n                lower_case_count++;\n\
    \            }\n        }\n        double strength = (double)upper_case_count\
    \ - (double)lower_case_count;\n        if (strength > strongest_strength) {\n\
    \            strongest_strength = strength;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    float strongest_extension_strength\
    \ = 0;\n    for (std::string extension : extensions) {\n        float extension_strength\
    \ = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n  \
    \              extension_strength++;\n            } else if (islower(c)) {\n \
    \               extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        if (cap - sm > max_strength)\
    \ {\n            max_strength = cap - sm;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "\t\
    int max_strength = INT_MIN;\n\tstd::string strongest_extension;\n\tfor (int i\
    \ = 0; i < extensions.size(); i++) {\n\t\tint strength = 0;\n\t\tfor (int j =\
    \ 0; j < extensions[i].size(); j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z') {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >=\
    \ 'a' && extensions[i][j] <= 'z') {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\t\
    if (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    double strongest_extension_strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0;\n      \
    \  int sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else if (c >= 'a' && c <=\
    \ 'z') {\n                sm++;\n            }\n        }\n        double strength\
    \ = (double)cap - (double)sm;\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (int i\
    \ = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int\
    \ j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto ch :\
    \ extension) {\n            if (isupper(ch)) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (std::string extension : extensions) {\n     \
    \   int strength = 0;\n        for (char c : extension) {\n            if (isupper(c))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "    int\
    \ max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0;\n        int sm = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ int strength = cap - sm;\n        if (strength > max_strength) {\n         \
    \   max_strength = strength;\n            strongest_extension = extension;\n \
    \       }\n    }\n    return class_name + \".\" + strongest_extension;", "   \
    \ std::string strongest_extension;\n    double strongest_extension_strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int upper_case_count =\
    \ 0;\n        int lower_case_count = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                upper_case_count++;\n\
    \            } else if (islower(letter)) {\n                lower_case_count++;\n\
    \            }\n        }\n        double strength = upper_case_count - lower_case_count;\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int strength = 0;\n        for (auto c : extension) {\n         \
    \   if (isupper(c)) {\n                strength++;\n            } else if (islower(c))\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    double strongest_strength = 0;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n   \
    \     int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n\
    \            if (isupper(extensions[i][j])) {\n                cap++;\n      \
    \      } else {\n                sm++;\n            }\n        }\n        double\
    \ strength = cap - sm;\n        if (strength > strongest_strength) {\n       \
    \     strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    int max_index\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int CAP = 0;\n\
    \        int SM = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n\
    \            if (isupper(extensions[i][j])) {\n                CAP++;\n      \
    \      } else {\n                SM++;\n            }\n        }\n        if (CAP\
    \ - SM > max_strength) {\n            max_strength = CAP - SM;\n            max_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (auto extension : extensions) {\n     \
    \   int cap = 0;\n        int sm = 0;\n        for (auto c : extension) {\n  \
    \          if (isupper(c)) {\n                cap++;\n            } else {\n \
    \               sm++;\n            }\n        }\n        int strength = cap -\
    \ sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "\tint max_strength = 0;\n\tstd::string max_extension\
    \ = \"\";\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\tint strength =\
    \ 0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (isupper(extensions[i][j]))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrength--;\n\t\t\t}\n\
    \t\t}\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\
    \tmax_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;",
  "    std::string result = class_name;\n    double strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0;\n        int sm = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ double curr_strength = (double)cap - sm;\n        if (curr_strength > strength)\
    \ {\n            strength = curr_strength;\n            result = class_name +\
    \ \".\" + extension;\n        }\n    }\n    return result;", "    int max_strength\
    \ = 0;\n    int max_index = 0;\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (isupper(extensions[i][j])) {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > max_strength) {\n            max_strength = cap - sm;\n   \
    \         max_index = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ int strength = cap - sm;\n        if (strength > max_strength) {\n         \
    \   max_strength = strength;\n            strongest_extension = extension;\n \
    \       }\n    }\n    return class_name + \".\" + strongest_extension;", "   \
    \ std::string result = class_name;\n    int max_strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                CAP++;\n  \
    \          } else {\n                SM++;\n            }\n        }\n       \
    \ int strength = CAP - SM;\n        if (strength > max_strength) {\n         \
    \   max_strength = strength;\n            result += \".\" + extension;\n     \
    \   }\n    }\n    return result;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto ch : extension) {\n            if (isupper(ch)) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "    int\
    \ max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension\
    \ : extensions) {\n        int strength = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // your code here\n    int max_strength = 0;\n    std::string strongest_extension;\n\
    \    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n\
    \        for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    int max_strength_index = 0;\n    for (int i = 0;\
    \ i < extensions.size(); i++) {\n        int capital_count = 0;\n        int small_count\
    \ = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                capital_count++;\n\
    \            } else {\n                small_count++;\n            }\n       \
    \ }\n        if (capital_count - small_count > max_strength) {\n            max_strength\
    \ = capital_count - small_count;\n            max_strength_index = i;\n      \
    \  }\n    }\n    return class_name + \".\" + extensions[max_strength_index];",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int strength = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                strength++;\n\
    \            } else if (islower(c)) {\n                strength--;\n         \
    \   }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "\tint max_strength =\
    \ -1;\n\tstd::string strongest_extension;\n\tfor (auto extension : extensions)\
    \ {\n\t\tint strength = 0;\n\t\tfor (auto letter : extension) {\n\t\t\tif (isupper(letter))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrength--;\n\t\t\t}\n\
    \t\t}\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\
    \tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" +\
    \ strongest_extension;", "    int max_strength = 0;\n    std::string strongest_extension;\n\
    \    for (auto extension : extensions) {\n        int strength = 0;\n        for\
    \ (auto letter : extension) {\n            if (isupper(letter)) {\n          \
    \      strength++;\n            } else {\n                strength--;\n      \
    \      }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    int max_strength_index = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int upper_case_count = 0;\n        int lower_case_count = 0;\n\
    \        for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int strength = upper_case_count\
    \ - lower_case_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            max_strength_index = i;\n        }\n    }\n    return\
    \ class_name + \".\" + extensions[max_strength_index];", "\t// your code here\n\
    \tstd::string result = class_name;\n\tdouble max_strength = 0;\n\tfor (int i =\
    \ 0; i < extensions.size(); i++) {\n\t\tint upper_count = 0;\n\t\tint lower_count\
    \ = 0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (isupper(extensions[i][j]))\
    \ {\n\t\t\t\tupper_count++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlower_count++;\n\t\
    \t\t}\n\t\t}\n\t\tdouble strength = (double)upper_count - (double)lower_count;\n\
    \t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tresult\
    \ = class_name + \".\" + extensions[i];\n\t\t}\n\t}\n\treturn result;", "    int\
    \ max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0;\n        int sm = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ int strength = cap - sm;\n        if (strength > max_strength) {\n         \
    \   max_strength = strength;\n            strongest_extension = extension;\n \
    \       }\n    }\n    return class_name + \".\" + strongest_extension;", "   \
    \ int max_strength = INT_MIN;\n    std::string strongest_extension = \"\";\n \
    \   for (auto extension : extensions) {\n        int upper_case_count = 0;\n \
    \       int lower_case_count = 0;\n        for (auto c : extension) {\n      \
    \      if (isupper(c)) {\n                upper_case_count++;\n            } else\
    \ {\n                lower_case_count++;\n            }\n        }\n        int\
    \ strength = upper_case_count - lower_case_count;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension = \"\";\n    for\
    \ (auto extension : extensions) {\n        int strength = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    std::string strongest_extension;\n   \
    \ double strongest_extension_strength = -1;\n    for (auto extension : extensions)\
    \ {\n        int upper_case_count = 0;\n        int lower_case_count = 0;\n  \
    \      for (auto c : extension) {\n            if (isupper(c)) {\n           \
    \     upper_case_count++;\n            } else if (islower(c)) {\n            \
    \    lower_case_count++;\n            }\n        }\n        double strength =\
    \ (double)upper_case_count - lower_case_count;\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else if (islower(c)) {\n                strength--;\n          \
    \  }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = INT_MIN;\n    std::string strongest_extension;\n    for (auto extension :\
    \ extensions) {\n        int upper_case_count = 0;\n        int lower_case_count\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "\tstd::string strongest_extension;\n\tint\
    \ strongest_extension_strength = 0;\n\tfor (int i = 0; i < extensions.size();\
    \ i++) {\n\t\tint extension_strength = 0;\n\t\tfor (int j = 0; j < extensions[i].size();\
    \ j++) {\n\t\t\tif (isupper(extensions[i][j])) {\n\t\t\t\textension_strength++;\n\
    \t\t\t}\n\t\t\telse if (islower(extensions[i][j])) {\n\t\t\t\textension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif (extension_strength > strongest_extension_strength) {\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (std::string extension : extensions) {\n        int upper_case_count = 0;\n\
    \        int lower_case_count = 0;\n        for (char c : extension) {\n     \
    \       if (isupper(c)) {\n                upper_case_count++;\n            }\
    \ else if (islower(c)) {\n                lower_case_count++;\n            }\n\
    \        }\n        int strength = upper_case_count - lower_case_count;\n    \
    \    if (strength > max_strength) {\n            max_strength = strength;\n  \
    \          strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    std::string result = class_name;\n   \
    \ double strength = 0;\n    for (auto ext : extensions) {\n        int cap = 0;\n\
    \        int sm = 0;\n        for (auto c : ext) {\n            if (isupper(c))\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > strength) {\n            strength\
    \ = cap - sm;\n            result += \".\" + ext;\n        }\n    }\n    return\
    \ result;", "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n\
    \    for (auto extension : extensions) {\n        int strength = 0;\n        for\
    \ (auto ch : extension) {\n            if (isupper(ch)) {\n                strength++;\n\
    \            } else if (islower(ch)) {\n                strength--;\n        \
    \    }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = INT_MIN;\n    int max_index = -1;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int caps = 0;\n        int smalls = 0;\n        for (int j =\
    \ 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A'\
    \ && extensions[i][j] <= 'Z') {\n                caps++;\n            } else {\n\
    \                smalls++;\n            }\n        }\n        int strength = caps\
    \ - smalls;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            max_index = i;\n        }\n    }\n    return class_name\
    \ + \".\" + extensions[max_index];", "    int max_strength = -1;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              strength++;\n            } else if (islower(c)) {\n           \
    \     strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int n = extensions.size();\n    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for(int i = 0; i < n; i++) {\n        int upper_case_count\
    \ = 0;\n        int lower_case_count = 0;\n        for(int j = 0; j < extensions[i].length();\
    \ j++) {\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\
    \                upper_case_count++;\n            }\n            else if(extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if(strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n\
    \    int max_strength_index = -1;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j\
    \ < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        if (cap - sm > max_strength) {\n          \
    \  max_strength = cap - sm;\n            max_strength_index = i;\n        }\n\
    \    }\n    return class_name + \".\" + extensions[max_strength_index];", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int CAP = 0;\n        int SM = 0;\n     \
    \   for (auto letter : extension) {\n            if (isupper(letter)) {\n    \
    \            CAP++;\n            } else {\n                SM++;\n           \
    \ }\n        }\n        int strength = CAP - SM;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "\t\
    int max_strength = 0;\n\tstd::string strongest_extension;\n\tfor (auto extension\
    \ : extensions) {\n\t\tint strength = 0;\n\t\tfor (auto letter : extension) {\n\
    \t\t\tif (isupper(letter)) {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (islower(letter))\
    \ {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength) {\n\
    \t\t\tmax_strength = strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    double strongest_strength = 0;\n    for (std::string extension\
    \ : extensions) {\n        int upper_case_letters = 0;\n        int lower_case_letters\
    \ = 0;\n        for (char c : extension) {\n            if (isupper(c)) {\n  \
    \              upper_case_letters++;\n            } else if (islower(c)) {\n \
    \               lower_case_letters++;\n            }\n        }\n        double\
    \ strength = (double) upper_case_letters - lower_case_letters;\n        if (strength\
    \ > strongest_strength) {\n            strongest_strength = strength;\n      \
    \      strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      int upper_case_count = 0;\n        int lower_case_count = 0;\n        for\
    \ (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                upper_case_count++;\n\
    \            } else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n\
    \                lower_case_count++;\n            }\n        }\n        int strength\
    \ = upper_case_count - lower_case_count;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else if (islower(c)) {\n                strength--;\n          \
    \  }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = INT_MIN;\n    std::string strongest_extension;\n    for (auto extension :\
    \ extensions) {\n        int upper_case_count = 0;\n        int lower_case_count\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int strength = upper_case_count\
    \ - lower_case_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max = -1;\n \
    \   std::string result = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > max) {\n            max = cap -\
    \ sm;\n            result = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + result;", "\tint max_strength = -1;\n\tstd::string strongest_extension;\n\
    \tfor (int i = 0; i < extensions.size(); i++) {\n\t\tint strength = 0;\n\t\tfor\
    \ (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (isupper(extensions[i][j]))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (islower(extensions[i][j])) {\n\
    \t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength) {\n\t\t\t\
    max_strength = strength;\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t\
    }\n\treturn class_name + \".\" + strongest_extension;", "\tint max_strength =\
    \ 0;\n\tstd::string strongest_extension;\n\tfor (std::string extension : extensions)\
    \ {\n\t\tint strength = 0;\n\t\tfor (char letter : extension) {\n\t\t\tif (isupper(letter))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrength--;\n\t\t\t}\n\
    \t\t}\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\
    \tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" +\
    \ strongest_extension;", "    std::string strongest_extension = \"\";\n    int\
    \ strongest_strength = 0;\n    for (auto ext : extensions) {\n        int strength\
    \ = 0;\n        for (auto c : ext) {\n            if (isupper(c)) {\n        \
    \        strength++;\n            } else if (islower(c)) {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = ext;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "\t\
    int max_strength = 0;\n\tint max_strength_index = 0;\n\tfor (int i = 0; i < extensions.size();\
    \ i++) {\n\t\tint CAP = 0;\n\t\tint SM = 0;\n\t\tfor (int j = 0; j < extensions[i].size();\
    \ j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\
    \t\tCAP++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n\t\t\t\tSM++;\n\t\t\t}\n\t\t}\n\t\tif (CAP - SM > max_strength) {\n\
    \t\t\tmax_strength = CAP - SM;\n\t\t\tmax_strength_index = i;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + extensions[max_strength_index];", "\tint max_strength\
    \ = INT_MIN;\n\tstd::string strongest_extension;\n\tfor (auto extension : extensions)\
    \ {\n\t\tint strength = 0;\n\t\tfor (auto letter : extension) {\n\t\t\tif (isupper(letter))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrength--;\n\t\t\t}\n\
    \t\t}\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\
    \tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" +\
    \ strongest_extension;", "    int max_strength = -1;\n    std::string strongest_extension;\n\
    \    for (auto extension : extensions) {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              cap++;\n            } else {\n                sm++;\n         \
    \   }\n        }\n        int strength = cap - sm;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension = \"\";\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n     \
    \   for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  // Write your code here\n    int max_strength = INT_MIN;\n    int max_index\
    \ = 0;\n    for(int i = 0; i < extensions.size(); i++) {\n        int CAP = 0;\n\
    \        int SM = 0;\n        for(int j = 0; j < extensions[i].size(); j++) {\n\
    \            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n      \
    \          CAP++;\n            }\n            else {\n                SM++;\n\
    \            }\n        }\n        if(CAP - SM > max_strength) {\n           \
    \ max_strength = CAP - SM;\n            max_index = i;\n        }\n    }\n   \
    \ return class_name + \".\" + extensions[max_index];", "    int max = -1;\n  \
    \  std::string result = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > max) {\n            max = cap -\
    \ sm;\n            result = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + result;", "    int max_strength = 0;\n    std::string strongest_extension\
    \ = \"\";\n    for (auto extension : extensions) {\n        int strength = 0;\n\
    \        for (auto c : extension) {\n            if (isupper(c)) {\n         \
    \       strength++;\n            } else {\n                strength--;\n     \
    \       }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    float strongest_strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int upper_case_count = 0;\n        int lower_case_count = 0;\n  \
    \      for (auto letter : extension) {\n            if (isupper(letter)) {\n \
    \               upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        float strength = (float)upper_case_count -\
    \ (float)lower_case_count;\n        if (strength > strongest_strength) {\n   \
    \         strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    int max_index\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n\
    \        int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n\
    \            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n     \
    \           cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        int strength = cap - sm;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            max_index = i;\n      \
    \  }\n    }\n    return class_name + \".\" + extensions[max_index];", "    int\
    \ max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension\
    \ : extensions) {\n        int strength = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      int upper_case_count = 0;\n        int lower_case_count = 0;\n        for\
    \ (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int strength = upper_case_count\
    \ - lower_case_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension = \"\";\n    for (auto extension :\
    \ extensions) {\n        int upper_case_count = 0;\n        int lower_case_count\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int strength = upper_case_count\
    \ - lower_case_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    double max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                cap++;\n            }\
    \ else {\n                sm++;\n            }\n        }\n        double strength\
    \ = cap - sm;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension = \"\";\n    for (auto extension :\
    \ extensions) {\n        int strength = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      int caps = 0;\n        int smalls = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (isupper(extensions[i][j])) {\n                caps++;\n\
    \            } else {\n                smalls++;\n            }\n        }\n \
    \       int strength = caps - smalls;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  float max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0;\n        int sm = 0;\n     \
    \   for (auto letter : extension) {\n            if (std::isupper(letter)) {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        float strength = (float)cap - sm;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) CAP++;\n            else if (islower(c))\
    \ SM++;\n        }\n        if (CAP - SM > max_strength) {\n            max_strength\
    \ = CAP - SM;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "\tint max_strength =\
    \ 0;\n\tstd::string strongest_extension;\n\tfor (auto extension : extensions)\
    \ {\n\t\tint CAP = 0, SM = 0;\n\t\tfor (auto c : extension) {\n\t\t\tif (isupper(c))\
    \ {\n\t\t\t\tCAP++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSM++;\n\t\t\t}\n\t\t}\n\t\t\
    int strength = CAP - SM;\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength\
    \ = strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "\tint\
    \ max_strength = 0;\n\tint max_index = 0;\n\tfor (int i = 0; i < extensions.size();\
    \ i++) {\n\t\tint CAP = 0;\n\t\tint SM = 0;\n\t\tfor (int j = 0; j < extensions[i].size();\
    \ j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\
    \t\tCAP++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n\t\t\t\tSM++;\n\t\t\t}\n\t\t}\n\t\tif (CAP - SM > max_strength) {\n\
    \t\t\tmax_strength = CAP - SM;\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + extensions[max_index];", "    std::string strongest_extension = \"\
    \";\n    int strongest_extension_strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int upper_case_letters = 0;\n        int lower_case_letters = 0;\n\
    \        for (auto letter : extension) {\n            if (isupper(letter)) {\n\
    \                upper_case_letters++;\n            } else {\n               \
    \ lower_case_letters++;\n            }\n        }\n        int extension_strength\
    \ = upper_case_letters - lower_case_letters;\n        if (extension_strength >\
    \ strongest_extension_strength) {\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension;", "    // your code\
    \ here\n    int max_strength = INT_MIN;\n    std::string strongest_extension;\n\
    \    for(auto extension : extensions) {\n        int upper_case_count = 0;\n \
    \       int lower_case_count = 0;\n        for(auto c : extension) {\n       \
    \     if(isupper(c)) {\n                upper_case_count++;\n            } else\
    \ {\n                lower_case_count++;\n            }\n        }\n        int\
    \ strength = upper_case_count - lower_case_count;\n        if(strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength\
    \ = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n\
    \            } else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n\
    \                strength--;\n            }\n        }\n        if (strength >\
    \ strongest_extension_strength) {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extensions[i];\n        }\n   \
    \ }\n    return class_name + \".\" + strongest_extension;", "    std::string result\
    \ = class_name;\n    int max_strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int upper_case = 0;\n        int lower_case = 0;\n        for (auto\
    \ letter : extension) {\n            if (letter >= 'A' && letter <= 'Z') {\n \
    \               upper_case++;\n            } else if (letter >= 'a' && letter\
    \ <= 'z') {\n                lower_case++;\n            }\n        }\n       \
    \ int strength = upper_case - lower_case;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            result += \".\" + extension;\n\
    \        }\n    }\n    return result;", "    int max = 0;\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < extensions.size(); i++) {\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > max) {\n            max = cap -\
    \ sm;\n            result = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + result;", "    int max_strength = 0;\n    std::string strongest_extension;\n\
    \    for (auto extension : extensions) {\n        int strength = 0;\n        for\
    \ (auto c : extension) {\n            if (isupper(c)) {\n                strength++;\n\
    \            } else if (islower(c)) {\n                strength--;\n         \
    \   }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = INT_MIN;\n    std::string strongest_extension;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else if (extensions[i][j] >= 'a'\
    \ && extensions[i][j] <= 'z') {\n                strength--;\n            }\n\
    \        }\n        if (strength > max_strength) {\n            max_strength =\
    \ strength;\n            strongest_extension = extensions[i];\n        }\n   \
    \ }\n    return class_name + \".\" + strongest_extension;", "    std::string strongest_extension;\n\
    \    int strongest_extension_strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int extension_strength = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                extension_strength++;\n\
    \            } else if (islower(letter)) {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (std::string extension : extensions) {\n     \
    \   int strength = 0;\n        for (char c : extension) {\n            if (isupper(c))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "    std::string\
    \ strongest_extension = \"\";\n    double strongest_strength = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n        int sm =\
    \ 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if\
    \ (isupper(extensions[i][j])) {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        double strength = (double)cap\
    \ - (double)sm;\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int upper_case_count = 0;\n        int lower_case_count = 0;\n  \
    \      for (auto letter : extension) {\n            if (isupper(letter)) {\n \
    \               upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      int strength = 0;\n        for (int j = 0; j < extensions[i].size(); j++)\
    \ {\n            if (isupper(extensions[i][j])) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    int max_strength = 0;\n   \
    \ int max_strength_index = 0;\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int upper_case_count = 0;\n        int lower_case_count = 0;\n  \
    \      for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int strength = upper_case_count\
    \ - lower_case_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            max_strength_index = i;\n        }\n    }\n    return\
    \ class_name + \".\" + extensions[max_strength_index];", "    std::string result\
    \ = class_name;\n    double max_strength = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        double strength = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else if (extensions[i][j] >= 'a'\
    \ && extensions[i][j] <= 'z') {\n                strength--;\n            }\n\
    \        }\n        if (strength > max_strength) {\n            max_strength =\
    \ strength;\n            result = class_name + \".\" + extensions[i];\n      \
    \  }\n    }\n    return result;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int upper_case_count\
    \ = 0;\n        int lower_case_count = 0;\n        for (auto c : extension) {\n\
    \            if (isupper(c)) {\n                upper_case_count++;\n        \
    \    } else {\n                lower_case_count++;\n            }\n        }\n\
    \        int strength = upper_case_count - lower_case_count;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto letter\
    \ : extension) {\n            if (isupper(letter)) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (auto extension : extensions) {\n     \
    \   int strength = 0;\n        for (auto letter : extension) {\n            if\
    \ (isupper(letter)) {\n                strength++;\n            } else {\n   \
    \             strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int CAP = 0;\n        int SM = 0;\n     \
    \   for (auto c : extension) {\n            if (isupper(c)) {\n              \
    \  CAP++;\n            } else {\n                SM++;\n            }\n      \
    \  }\n        int strength = CAP - SM;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  // your code here\n    int max_strength = 0;\n    std::string strongest_extension;\n\
    \    for (auto extension : extensions) {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              cap++;\n            } else {\n                sm++;\n         \
    \   }\n        }\n        int strength = cap - sm;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension = \"\";\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n        int\
    \ sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n        \
    \    if (isupper(extensions[i][j])) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        if (cap - sm > max_strength)\
    \ {\n            max_strength = cap - sm;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string strongest_extension;\n    float strongest_strength = 0;\n    for\
    \ (auto extension : extensions) {\n        int upper_case_count = 0;\n       \
    \ int lower_case_count = 0;\n        for (auto c : extension) {\n            if\
    \ (isupper(c)) {\n                upper_case_count++;\n            } else if (islower(c))\
    \ {\n                lower_case_count++;\n            }\n        }\n        float\
    \ strength = (float)upper_case_count - (float)lower_case_count;\n        if (strength\
    \ > strongest_strength) {\n            strongest_strength = strength;\n      \
    \      strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int upper_case_count\
    \ = 0;\n        int lower_case_count = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                upper_case_count++;\n\
    \            } else {\n                lower_case_count++;\n            }\n  \
    \      }\n        int strength = upper_case_count - lower_case_count;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max = 0;\n    std::string result =\
    \ \"\";\n    for (int i = 0; i < extensions.size(); i++) {\n        int cap =\
    \ 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++)\
    \ {\n            if (isupper(extensions[i][j])) {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ if (cap - sm > max) {\n            max = cap - sm;\n            result = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + result;", "    std::string\
    \ result = class_name;\n    double strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int upper = 0;\n        int lower = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                upper++;\n            } else\
    \ {\n                lower++;\n            }\n        }\n        double current_strength\
    \ = (double)upper - (double)lower;\n        if (current_strength > strength) {\n\
    \            strength = current_strength;\n            result += \".\" + extension;\n\
    \        }\n    }\n    return result;", "    std::string strongest_extension =\
    \ \"\";\n    double strongest_strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int CAP = 0;\n        int SM = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                CAP++;\n            } else\
    \ {\n                SM++;\n            }\n        }\n        double strength\
    \ = (double)CAP - SM;\n        if (strength > strongest_strength) {\n        \
    \    strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int caps = 0;\n        int smalls = 0;\n\
    \        for (auto c : extension) {\n            if (isupper(c)) {\n         \
    \       caps++;\n            } else {\n                smalls++;\n           \
    \ }\n        }\n        int strength = caps - smalls;\n        if (strength >\
    \ max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "\tint max_strength = 0;\n\tstd::string strongest_extension = \"\";\n\tfor (int\
    \ i = 0; i < extensions.size(); i++) {\n\t\tint strength = 0;\n\t\tfor (int j\
    \ = 0; j < extensions[i].size(); j++) {\n\t\t\tif (extensions[i][j] >= 'A' &&\
    \ extensions[i][j] <= 'Z') {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\
    \tif (strength > max_strength) {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0;\n        int sm = 0;\n     \
    \   for (auto c : extension) {\n            if (isupper(c)) {\n              \
    \  cap++;\n            } else {\n                sm++;\n            }\n      \
    \  }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n\
    \            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  int max_strength = 0;\n    int max_strength_index = 0;\n    for (int i = 0;\
    \ i < extensions.size(); i++) {\n        int upper_case_count = 0;\n        int\
    \ lower_case_count = 0;\n        for (int j = 0; j < extensions[i].size(); j++)\
    \ {\n            if (isupper(extensions[i][j])) {\n                upper_case_count++;\n\
    \            } else {\n                lower_case_count++;\n            }\n  \
    \      }\n        int strength = upper_case_count - lower_case_count;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        max_strength_index = i;\n        }\n    }\n    return class_name + \"\
    .\" + extensions[max_strength_index];", "    int max_strength = -1;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (auto c : extension) {\n            if\
    \ (isupper(c)) {\n                cap++;\n            } else {\n             \
    \   sm++;\n            }\n        }\n        int strength = cap - sm;\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "\tint max_strength = INT_MIN;\n\tstd::string\
    \ strongest_extension;\n\tfor (auto extension : extensions) {\n\t\tint lowercase_count\
    \ = 0;\n\t\tint uppercase_count = 0;\n\t\tfor (auto c : extension) {\n\t\t\tif\
    \ (c >= 'a' && c <= 'z') {\n\t\t\t\tlowercase_count++;\n\t\t\t}\n\t\t\telse if\
    \ (c >= 'A' && c <= 'Z') {\n\t\t\t\tuppercase_count++;\n\t\t\t}\n\t\t}\n\t\tint\
    \ strength = uppercase_count - lowercase_count;\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        int strength = cap\
    \ - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (isupper(extensions[i][j])) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    int max_strength = 0;\n   \
    \ std::string strongest_extension;\n    for (auto extension : extensions) {\n\
    \        int upper_case_count = 0;\n        int lower_case_count = 0;\n      \
    \  for (auto letter : extension) {\n            if (isupper(letter)) {\n     \
    \           upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "\tint max_strength = -1;\n\tstd::string strongest_extension;\n\
    \tfor (auto extension : extensions) {\n\t\tint strength = 0;\n\t\tfor (auto letter\
    \ : extension) {\n\t\t\tif (isupper(letter)) {\n\t\t\t\tstrength++;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength)\
    \ {\n\t\t\tmax_strength = strength;\n\t\t\tstrongest_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + strongest_extension;", "\t// your code\
    \ here\n\tint max_strength = INT_MIN;\n\tstd::string strongest_extension;\n\t\
    for (int i = 0; i < extensions.size(); i++) {\n\t\tint upper_case_count = 0;\n\
    \t\tint lower_case_count = 0;\n\t\tfor (int j = 0; j < extensions[i].length();\
    \ j++) {\n\t\t\tif (isupper(extensions[i][j])) {\n\t\t\t\tupper_case_count++;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tlower_case_count++;\n\t\t\t}\n\t\t}\n\t\tint strength\
    \ = upper_case_count - lower_case_count;\n\t\tif (strength > max_strength) {\n\
    \t\t\tmax_strength = strength;\n\t\t\tstrongest_extension = extensions[i];\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        int strength = cap\
    \ - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    std::string result = class_name;\n   \
    \ double max_strength = 0;\n    for (auto &extension : extensions) {\n       \
    \ int CAP = 0;\n        int SM = 0;\n        for (auto &c : extension) {\n   \
    \         if (std::isupper(c)) {\n                CAP++;\n            } else {\n\
    \                SM++;\n            }\n        }\n        double strength = (double)CAP\
    \ - SM;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            result += \".\" + extension;\n        }\n    }\n    return result;",
  "    int max_strength = 0;\n    std::string strongest_extension = \"\";\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n     \
    \   for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "\t\
    int max_strength = 0;\n\tstd::string strongest_extension;\n\tfor (auto extension\
    \ : extensions) {\n\t\tint strength = 0;\n\t\tfor (auto c : extension) {\n\t\t\
    \tif (isupper(c)) {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (islower(c))\
    \ {\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength) {\n\
    \t\t\tmax_strength = strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    int strongest_extension_strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int upper_case_count = 0;\n        int lower_case_count\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int extension_strength\
    \ = upper_case_count - lower_case_count;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      int cap = 0, sm = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                cap++;\n            } else if (extensions[i][j] >= 'a' &&\
    \ extensions[i][j] <= 'z') {\n                sm++;\n            }\n        }\n\
    \        if (cap - sm > max_strength) {\n            max_strength = cap - sm;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    std::string result = class_name;\n\
    \    int max_strength = -1;\n    for (int i = 0; i < extensions.size(); i++) {\n\
    \        int strength = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (isupper(extensions[i][j])) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            result = class_name + \".\" + extensions[i];\n        }\n    }\n\
    \    return result;", "    int max_strength = 0;\n    std::string strongest_extension\
    \ = \"\";\n    for (auto extension : extensions) {\n        int cap = 0;\n   \
    \     int sm = 0;\n        for (auto ch : extension) {\n            if (isupper(ch))\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        int strength = cap - sm;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        int upper_case_count = 0;\n\
    \        int lower_case_count = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                upper_case_count++;\n            } else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    int max_strength = 0;\n   \
    \ std::string strongest_extension;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int caps = 0;\n        int smalls = 0;\n        for (int j =\
    \ 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A'\
    \ && extensions[i][j] <= 'Z') {\n                caps++;\n            } else {\n\
    \                smalls++;\n            }\n        }\n        if (caps - smalls\
    \ > max_strength) {\n            max_strength = caps - smalls;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = 0;\n    int max_index = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int upper = 0;\n        int lower = 0;\n        for (int j =\
    \ 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                upper++;\n            } else {\n                lower++;\n\
    \            }\n        }\n        int strength = upper - lower;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            max_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (isupper(c)) {\n                strength++;\n \
    \           } else if (islower(c)) {\n                strength--;\n          \
    \  }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = INT_MIN;\n    std::string strongest_extension;\n    for (auto extension :\
    \ extensions) {\n        int upper_case_count = 0;\n        int lower_case_count\
    \ = 0;\n        for (auto c : extension) {\n            if (isupper(c)) {\n  \
    \              upper_case_count++;\n            } else {\n                lower_case_count++;\n\
    \            }\n        }\n        int strength = upper_case_count - lower_case_count;\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "  int max_strength = INT_MIN;\n  std::string\
    \ strongest_extension;\n  for (auto extension : extensions) {\n    int cap = 0,\
    \ sm = 0;\n    for (auto c : extension) {\n      if (isupper(c)) cap++;\n    \
    \  else sm++;\n    }\n    if (cap - sm > max_strength) {\n      max_strength =\
    \ cap - sm;\n      strongest_extension = extension;\n    }\n  }\n  return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    int max_index\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n\
    \        int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n\
    \            if (isupper(extensions[i][j])) {\n                cap++;\n      \
    \      } else {\n                sm++;\n            }\n        }\n        if (cap\
    \ - sm > max_strength) {\n            max_strength = cap - sm;\n            max_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];",
  "    int max_strength = 0;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto letter\
    \ : extension) {\n            if (isupper(letter)) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = INT_MIN;\n    std::string\
    \ strongest_extension;\n    for (auto extension : extensions) {\n        int strength\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > max_strength) {\n          \
    \  max_strength = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;", "    int\
    \ max_strength = 0;\n    std::string strongest_extension;\n    for (auto extension\
    \ : extensions) {\n        int strength = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int max_strength = -1;\n    std::string strongest_extension;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        int CAP = 0;\n        int SM =\
    \ 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if\
    \ (isupper(extensions[i][j])) {\n                CAP++;\n            } else {\n\
    \                SM++;\n            }\n        }\n        if (CAP - SM > max_strength)\
    \ {\n            max_strength = CAP - SM;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string strongest_extension = \"\";\n    double strongest_extension_strength\
    \ = -1;\n    for (auto extension : extensions) {\n        int CAP = 0;\n     \
    \   int SM = 0;\n        for (auto c : extension) {\n            if (isupper(c))\
    \ {\n                CAP++;\n            } else {\n                SM++;\n   \
    \         }\n        }\n        double strength = (double)CAP - SM;\n        if\
    \ (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension = \"\";\n    for (auto extension :\
    \ extensions) {\n        int lowercase_count = 0;\n        int uppercase_count\
    \ = 0;\n        for (auto letter : extension) {\n            if (isupper(letter))\
    \ {\n                uppercase_count++;\n            } else {\n              \
    \  lowercase_count++;\n            }\n        }\n        int strength = uppercase_count\
    \ - lowercase_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "\tint max_strength =\
    \ 0;\n\tstd::string strongest_extension;\n\tfor (auto extension : extensions)\
    \ {\n\t\tint strength = 0;\n\t\tfor (auto letter : extension) {\n\t\t\tif (isupper(letter))\
    \ {\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if (islower(letter)) {\n\t\t\t\t\
    strength--;\n\t\t\t}\n\t\t}\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength\
    \ = strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;", "\tint max_strength = INT_MIN;\n\tstd::string\
    \ strongest_extension;\n\tfor (std::string extension : extensions) {\n\t\tint\
    \ CAP = 0, SM = 0;\n\t\tfor (char c : extension) {\n\t\t\tif (isupper(c)) {\n\t\
    \t\t\tCAP++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSM++;\n\t\t\t}\n\t\t}\n\t\tif (CAP\
    \ - SM > max_strength) {\n\t\t\tmax_strength = CAP - SM;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int CAP = 0, SM = 0;\n        for (auto\
    \ c : extension) {\n            if (isupper(c)) {\n                CAP++;\n  \
    \          } else {\n                SM++;\n            }\n        }\n       \
    \ int strength = CAP - SM;\n        if (strength > max_strength) {\n         \
    \   max_strength = strength;\n            strongest_extension = extension;\n \
    \       }\n    }\n    return class_name + \".\" + strongest_extension;", "   \
    \ int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for (auto\
    \ extension : extensions) {\n        int upper_case_count = 0;\n        int lower_case_count\
    \ = 0;\n        for (auto character : extension) {\n            if (isupper(character))\
    \ {\n                upper_case_count++;\n            } else {\n             \
    \   lower_case_count++;\n            }\n        }\n        int strength = upper_case_count\
    \ - lower_case_count;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = -1;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int strength = 0;\n        for (auto c : extension) {\n         \
    \   if (isupper(c)) {\n                strength++;\n            } else if (islower(c))\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    double strongest_extension_strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int upper_case_letters\
    \ = 0;\n        int lower_case_letters = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                upper_case_letters++;\n\
    \            } else {\n                lower_case_letters++;\n            }\n\
    \        }\n        double strength = (double)upper_case_letters - (double)lower_case_letters;\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension = \"\";\n    for (auto extension :\
    \ extensions) {\n        int strength = 0;\n        for (auto letter : extension)\
    \ {\n            if (isupper(letter)) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > max_strength) {\n            max_strength = strength;\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    float max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        float strength = 0;\n        for (int j = 0; j < extensions[i].size();\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                strength++;\n            } else if (extensions[i][j] >= 'a'\
    \ && extensions[i][j] <= 'z') {\n                strength--;\n            }\n\
    \        }\n        if (strength > max_strength) {\n            max_strength =\
    \ strength;\n            strongest_extension = extensions[i];\n        }\n   \
    \ }\n    return class_name + \".\" + strongest_extension;", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        int strength = cap\
    \ - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        int uppercase_count = 0;\n        int lowercase_count = 0;\n    \
    \    for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                uppercase_count++;\n            } else {\n              \
    \  lowercase_count++;\n            }\n        }\n        if (uppercase_count -\
    \ lowercase_count > max_strength) {\n            max_strength = uppercase_count\
    \ - lowercase_count;\n            strongest_extension = extensions[i];\n     \
    \   }\n    }\n    return class_name + \".\" + strongest_extension;", "    int\
    \ max_strength = 0;\n    int max_index = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int upper = 0;\n        int lower = 0;\n        for (int j =\
    \ 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j]))\
    \ {\n                upper++;\n            } else {\n                lower++;\n\
    \            }\n        }\n        int strength = upper - lower;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            max_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];",
  "    int max_strength = INT_MIN;\n    std::string strongest_extension;\n    for\
    \ (auto extension : extensions) {\n        int strength = 0;\n        for (auto\
    \ ch : extension) {\n            if (isupper(ch)) {\n                strength++;\n\
    \            } else if (islower(ch)) {\n                strength--;\n        \
    \    }\n        }\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "\tint max_strength =\
    \ 0;\n\tint max_index = 0;\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\
    \tint cap = 0;\n\t\tint sm = 0;\n\t\tfor (int j = 0; j < extensions[i].size();\
    \ j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\
    \t\tcap++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsm++;\n\t\t\t}\n\t\t}\n\t\tif (cap\
    \ - sm > max_strength) {\n\t\t\tmax_strength = cap - sm;\n\t\t\tmax_index = i;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + extensions[max_index];", "    int max_strength\
    \ = 0;\n    std::string strongest_extension;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (isupper(c)) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        int strength = cap\
    \ - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    int max_strength = 0;\n    int max_strength_index\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength\
    \ = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n           \
    \ if (isupper(extensions[i][j])) {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            max_strength_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_strength_index];"]
stop_tokens:
- "\n}"
