name: HumanEval_151_double_the_difference
language: python
prompt: "from typing import List\n\ndef double_the_difference(lst: List[float]) ->\
  \ int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the\
  \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
  \ integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\
  \    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2])\
  \ == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty,\
  \ return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR\
    \ CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE\
    \ HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n\
    \            sum += i ** 2\n    return sum\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR\
    \ CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    return 0\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # Your code here\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    return 0\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    return 0\n", "    return sum([num ** 2 for num in lst if num % 2 == 1 and\
    \ num > 0])\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", " \
    \   return 0\n", "    return sum(x**2 for x in lst if x % 2 == 1 and x >= 0)\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \    ", "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    return 0\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n    ", "    pass\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    return 0\n", " \
    \   # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # This is a stub. Replace with your own code.\n    # It should pass the tests\
    \ in the docstring.\n    return 0\n", "    return 0\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # if lst == []:\n    #     return 0\n    # else:\n    #     return sum([x**2\
    \ for x in lst if x%2 == 1 and x >= 0 and x == int(x)])\n    return sum([x**2\
    \ for x in lst if x%2 == 1 and x >= 0 and x == int(x)])\n", "    return 0\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    pass\n", "    pass\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    return 0\n", " \
    \   # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    pass\n", "    #\
    \ YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", " \
    \   # YOUR CODE HERE\n    pass\n", "    return 0\n", "    # YOUR CODE HERE\n \
    \   raise NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    pass\n", "   \
    \ # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    pass\n", "   \
    \ # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    pass\n", "   \
    \ # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    return 0\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", " \
    \   # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    return 0\n", "    # YOUR CODE HERE\n\
    \    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "   \
    \ # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    pass\n", "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    return\
    \ 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # return 0\n    # return 1\n    # return\
    \ 2\n    # return 3\n    # return 4\n    # return 5\n    # return 6\n    # return\
    \ 7\n    # return 8\n    # return 9\n    # return 10\n    # return 11\n    # return\
    \ 12\n    # return 13\n    # return 14\n    # return 15\n    # return 16\n   \
    \ # return 17\n    # return 18\n    # return 19\n    # return 20\n    # return\
    \ 21\n    # return 22\n    # return 23\n    # return 24\n    # return 25\n   \
    \ # return 26\n    # return 27\n    # return 28\n    # return 29\n    # return\
    \ 30\n    # return 31\n    # return 32\n    # return 33\n    # return 34\n   \
    \ # return 35\n    # return 36\n    # return 37\n    # return 38\n    # return\
    \ 39\n    # return 40\n    # return 41\n    # return 42\n    # return 43\n   \
    \ # return 44\n    # return 45\n    # return 46\n    # return 47\n    # return\
    \ 48\n    # return 49\n    # return 50\n    # return 51\n    # return 52\n   \
    \ # return 53\n    # return 54\n    # return 55\n    # return 56\n    # return\
    \ 57\n    # return 58\n    # return 59\n    # return 60\n    # return 61\n   \
    \ # return 62\n    # return 63\n    # return 64\n    # return 65\n    # return\
    \ 66\n    # return 67\n    # return 68\n    # return 69\n    # return 70\n   \
    \ # return 71\n    # return 72\n    # return 73\n    # return 74\n    # return\
    \ 75\n    # return 76\n    # return 77\n    # return 78\n    # return 79\n   \
    \ # return 80\n    # return 81\n    # return 82\n    # return 83\n    # return\
    \ 84\n    # return 85\n    # return 86\n    # return 87\n    # return 88\n   \
    \ # return 89\n    # return 90\n    # return 91\n    # return 92\n    # return\
    \ 93\n    # return 94\n    # return 95\n    # return 96\n    # return 97\n   \
    \ # return 98\n    # return 99\n    # return 100\n    # return 101\n   ", "  \
    \  # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    return 0\n", "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n\
    \    pass\n", "    #return 0\n    #return sum([x**2 for x in lst if x%2 == 1])\n\
    \    return sum([x**2 for x in lst if x%2 == 1 and x >= 0 and x == int(x)])\n",
  "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    return sum(2 * (x - y) ** 2 for x, y in zip(lst, lst[1:]))\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \    ", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR\
    \ CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    pass\n", "    return\
    \ 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n    ", "    return\
    \ 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    if len(lst) == 0:\n        return 0\n    else:\n    \
    \    sum = 0\n        for i in lst:\n            if i < 0:\n                continue\n\
    \            elif i % 2 == 0:\n                continue\n            else:\n \
    \               sum += i**2\n        return sum\n", "    # YOUR CODE HERE\n  \
    \  pass\n", "    # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n  \
    \  raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    return sum(2 * (x ** 2) for x in lst if x % 2 == 1 and x >= 0)\n", "    # YOUR\
    \ CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", " \
    \   # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    pass\n", "    # YOUR\
    \ CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i\
    \ * i\n    return sum\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    return 0\n", "  \
    \  # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    pass\n", "   \
    \ # YOUR CODE HERE\n    return 0\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    pass\n", "   \
    \ # YOUR CODE HERE\n    raise NotImplementedError()\n\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n\n", "    # YOUR CODE HERE\n    raise NotImplementedError()\n",
  "    # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    pass\n", "   \
    \ # YOUR CODE HERE\n    raise NotImplementedError()\n", "    # YOUR CODE HERE\n\
    \    raise NotImplementedError()\n", "    # YOUR CODE HERE\n    return 0\n", " \
    \   # YOUR CODE HERE\n    raise NotImplementedError()\n", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
