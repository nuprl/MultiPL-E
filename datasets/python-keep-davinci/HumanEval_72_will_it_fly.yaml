name: HumanEval_72_will_it_fly
language: python
prompt: "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n\
  \    \"\"\"\n    Write a function that returns True if the object q will fly, and\
  \ False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
  \ list) and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2 is less\
  \ than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
  \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
  \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
  \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 2, 3], 9) == True\n    assert\
  \ candidate([1, 2], 5) == False\n    assert candidate([3], 5) == True\n    assert\
  \ candidate([3, 2, 3], 1) == False\n    assert candidate([1, 2, 3], 6) == False\n\
  \    assert candidate([5], 5) == True\n\ndef test_check():\n    check(will_it_fly)\n\
  \ntest_check()\n"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
