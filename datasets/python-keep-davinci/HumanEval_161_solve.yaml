name: HumanEval_161_solve
language: python
prompt: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i]\
  \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
  \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
  \    The function should return the resulted string.\n    Examples\n    solve(\"\
  1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
  \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
  \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
  \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
  \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
completions: ["    if not s:\n        return s\n    if not any(c.isalpha() for c in\
    \ s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else\
    \ c.upper() for c in s)\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return s.swapcase()\n\n", "    if not s:\n      \
    \  return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    return s[::-1] if not s.isalpha() else s.swapcase()\n\n", "    if not s:\n\
    \        return s\n    if not s.isalpha():\n        return s[::-1]\n    return\
    \ s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s:\n        return s\n    if s.isalpha():\n \
    \       return s[::-1].swapcase()\n    else:\n        return \"\".join(\n    \
    \        [c.swapcase() if c.isalpha() else c for c in s[::-1]]\n        )\n\n",
  "    if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    return s[::-1] if s.isalpha() else s.swapcase()\n\n", "    if not s:\n\
    \        return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n",
  "    # your code here\n    return None\n\n", "    if not any(c.isalpha() for c in\
    \ s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower() else\
    \ c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return \"\".join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if s.isalpha():\n        return s[::-1].swapcase()\n    else:\n     \
    \   return s[::-1]\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return s.swapcase()\n\n", "    return s[::-1] if\
    \ not s.isalpha() else s.swapcase()\n", "    return s[::-1] if s.isalpha() else\
    \ ''.join(\n        [i.lower() if i.isupper() else i.upper() for i in s])\n\n",
  "    if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return s.swapcase()\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return s.swapcase()\n\n", "    return s[::-1] if\
    \ not s.isalpha() else s.swapcase()\n\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha() for c\
    \ in s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n", "    if not s:\n        return s\n\
    \    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n",
  "    if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return s.swapcase()\n\n", "    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    return s[::-1] if not s.isalpha() else\
    \ s.swapcase()\n\n", "    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    return s[::-1] if s.isalpha() else s.swapcase()\n", " \
    \   if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    if\
    \ not s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n     \
    \   return s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    # your\
    \ code here\n    return s\n\n", "    return s[::-1] if s.isalpha() else s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    if\
    \ not s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not s.isalpha():\n        return\
    \ s[::-1]\n    return s.swapcase()\n\n", "    if not s:\n        return s\n  \
    \  if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    return s[::-1] if not s.isalpha() else s.swapcase()\n\n", "    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s.isalpha():\n \
    \       return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if not\
    \ s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n     \
    \   return s.swapcase()\n\n", "    if not s:\n        return s\n    if s.isalpha():\n\
    \        return s[::-1].swapcase()\n    else:\n        return s[::-1]\n\n", " \
    \   if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n   \
    \     return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "  \
    \  if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper() if\
    \ c.islower() else c.lower() for c in s)", "    if not s:\n        return s\n\
    \    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    return s[::-1] if not s.isalpha() else s.swapcase()\n\n", "    if not s:\n\
    \        return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))", "   \
    \ if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n     \
    \   return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    return s[::-1] if not s.isalpha() else\
    \ s.swapcase()\n\n", "    return s[::-1] if not s.isalpha() else s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return \"\".join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    if\
    \ not s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha() for c\
    \ in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper()\
    \ else c.upper() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\n", " \
    \   if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if s.isalpha():\n\
    \        return s[::-1].swapcase()\n    else:\n        return ''.join(c.swapcase()\
    \ if c.isalpha() else c for c in s[::-1])\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n", "    if not\
    \ s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n       \
    \ return s[::-1]\n    return s.swapcase()\n\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)", "    if not s:\n        return s\n    s = list(s)\n\
    \    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n\
    \    return \"\".join(s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return \"\".join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    s = list(s)\n\
    \    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n\
    \    return \"\".join(s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if not s.isalpha():\n     \
    \   return s[::-1]\n    return s.swapcase()\n\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s.isalpha():\n \
    \       return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if not\
    \ s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n    return\
    \ s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if not s.isalpha():\n \
    \       return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    if not\
    \ s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha() for c\
    \ in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"\
    ))\nprint(solve(\"#a@C\"))\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not s:\n        return s\n    if not any(c.isalpha() for\
    \ c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    return s[::-1] if not s.isalpha() else\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\n", "    if\
    \ not s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in\
    \ s)\n\n", "    return s[::-1] if not any(c.isalpha() for c in s) else ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    return s[::-1] if not s.isalpha() else\
    \ s.swapcase()\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    return s[::-1] if s.isalpha()\
    \ else ''.join(i.swapcase() for i in s)\n\n", "    if not s:\n        return s\n\
    \    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s.isalpha():\n \
    \       return s[::-1]\n    return s.swapcase()\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha()\
    \ for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return s.swapcase()\n\n", "    if not s:\n      \
    \  return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not s.isalpha():\n        return\
    \ s[::-1]\n    return s.swapcase()\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if not s:\n     \
    \   return s\n    if not s.isalpha():\n        return s[::-1]\n    return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not s.isalpha():\n        return\
    \ s[::-1]\n    return s.swapcase()\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not s:\n        return s\n    if not any(c.isalpha() for c\
    \ in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper() if c.islower()\
    \ else c.lower() for c in s)\n\n", "    return s[::-1] if not s.isalpha() else\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    return s[::-1] if not s.isalpha()\
    \ else s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n \
    \   else:\n        return s.swapcase()\n\n", "    if not s:\n        return s\n\
    \    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)", "    if not s:\n        return s\n\
    \    if s.isalpha():\n        return s[::-1].swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower() if\
    \ c.isupper() else c.upper() for c in s)\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s:\n     \
    \   return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)", "  \
    \  if not s:\n        return s\n    if s.isalpha():\n        return s[::-1].swapcase()\n\
    \    return ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1])\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower()\
    \ for c in s)\n\n", "    if not s:\n        return s\n    return s[::-1].swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.upper()\
    \ if c.islower() else c.lower() for c in s)\n\n", "    if not s:\n        return\
    \ s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return\
    \ ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
