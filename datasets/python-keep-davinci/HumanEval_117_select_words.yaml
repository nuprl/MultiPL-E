name: HumanEval_117_select_words
language: python
prompt: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
  \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
  \ \n    a function that returns a list of all words from string s that contain exactly\
  \ \n    n consonants, in order these words appear in the string s.\n    If the string\
  \ s is empty then the function should return an empty list.\n    Note: you may assume\
  \ the input string contains only letters and spaces.\n    Examples:\n    select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\",\
  \ 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
  \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
  \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
  \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n \
  \   assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b',\
  \ 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
