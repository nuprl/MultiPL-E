name: HumanEval_131_digits
language: python
prompt: "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == 5\n    assert candidate(54)\
  \ == 5\n    assert candidate(120) == 1\n    assert candidate(5014) == 5\n    assert\
  \ candidate(98765) == 315\n    assert candidate(5576543) == 2625\n    assert candidate(2468)\
  \ == 0\n\ndef test_check():\n    check(digits)\n\ntest_check()\n"
completions: ["    return 0\n\n", "    # return 0 if n == 0 else n % 10 * digits(n\
    \ // 10) if n % 2 else digits(n // 10)\n    return 0 if n == 0 else n % 10 * digits(n\
    \ // 10) if n % 2 else digits(n // 10)\n\n", "    return 0\n\n", "    product\
    \ = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n\
    \            product *= digit\n        n //= 10\n    return product\n\n", "  \
    \  if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return digits(n\
    \ // 10)\n    else:\n        return (n % 10) * digits(n // 10)\n\n", "    if n\
    \ == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return\
    \ digits(n // 10)\n        else:\n            return (n % 10) * digits(n // 10)\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    if n == 0:\n        return 0\n\
    \    else:\n        if n % 2 == 0:\n            return digits(n // 10)\n     \
    \   else:\n            return (n % 10) * digits(n // 10)\n\n", "    return 0\n\
    \n", "    # return 0 if n == 0 else n % 10 * digits(n // 10) if n % 2 else digits(n\
    \ // 10)\n    return 0 if n == 0 else n % 10 * digits(n // 10) if n % 2 else digits(n\
    \ // 10)\n\n", "    # TODO: implement this function\n    pass\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return 0\n\n", "    product = 1\n    for digit\
    \ in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n\
    \    return product\n\n", "    result = 1\n    for digit in str(n):\n        if\
    \ int(digit) % 2 != 0:\n            result *= int(digit)\n    return result\n\n",
  "    return 0\n\n", "    prod = 1\n    while n > 0:\n        d = n % 10\n      \
    \  if d % 2 == 1:\n            prod *= d\n        n //= 10\n    return prod\n\n",
  "    if n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n         \
    \   return digits(n // 10)\n        else:\n            return (n % 10) * digits(n\
    \ // 10)\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0 if n == 0\
    \ else n % 10 * digits(n // 10)\n\n", "    if n == 0:\n        return 0\n    else:\n\
    \        if n % 2 == 0:\n            return digits(n // 10)\n        else:\n \
    \           return (n % 10) * digits(n // 10)\n\n", "    return 0\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    prod = 1\n    for digit in str(n):\n      \
    \  if int(digit) % 2 == 1:\n            prod *= int(digit)\n    return prod\n\n",
  "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n  \
    \          product *= int(digit)\n    return product\n\n", "    return 0\n\n",
  "    return 0\n\n", "    if n < 0:\n        raise ValueError(\"n must be positive\"\
    )\n    if n == 0:\n        return 0\n    return n % 10 * digits(n // 10)\n\n",
  "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    # return 0 if n\
    \ == 0 else n % 10 * digits(n // 10) if n % 2 else digits(n // 10)\n    return\
    \ 0 if n == 0 else n % 10 * digits(n // 10) if n % 2 else digits(n // 10)\n\n",
  "    return 0\n\n", "    return 0\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be positive\")\n    if n == 0:\n        return 0\n    return (n % 10) *\
    \ digits(n // 10)\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    if n < 0:\n        raise ValueError(\"n must be\
    \ positive\")\n    if n == 0:\n        return 0\n    prod = 1\n    while n > 0:\n\
    \        digit = n % 10\n        if digit % 2 == 1:\n            prod *= digit\n\
    \        n //= 10\n    return prod\n\n", "    return reduce(lambda x, y: x * y,\
    \ [int(x) for x in str(n) if int(x) % 2 != 0])\n\n", "    return 0\n\n", "   \
    \ return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", " \
    \   return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    return 0\n\n", "    return 0\n\n", "    product = 1\n    for digit in str(n):\n\
    \        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return\
    \ product\n\n", "    # your code here\n    return 0\n", "    return 0\n\n", " \
    \   return 0\n\n", "    return 0\n\n", "    product = 1\n    while n > 0:\n  \
    \      digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n\
    \        n //= 10\n    return product\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    if n ==\
    \ 0:\n        return 0\n    else:\n        return n % 10 * digits(n // 10) if\
    \ n % 2 else digits(n // 10)\n\n", "    return 0\n\n", "    return 0\n\n", " \
    \   return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    return 0\n\n", "    if n < 0:\n        raise ValueError(\"n must be positive\"\
    )\n    if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n     \
    \   digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n\
    \        n //= 10\n    return product\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return digits(n\
    \ // 10)\n    else:\n        return (n % 10) * digits(n // 10)\n\n", "    return\
    \ 0\n\n", "    if n < 0:\n        return 0\n    elif n < 10:\n        return n\n\
    \    else:\n        return digits(n // 10) * (n % 10)\n\n", "    return 0\n\n",
  "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n\
    \        return 0\n    return (n % 10) * digits(n // 10)\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    prod = 1\n    while n > 0:\n        digit = n %\
    \ 10\n        if digit % 2 == 1:\n            prod *= digit\n        n //= 10\n\
    \    return prod\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    # TODO: implement this function\n    pass\n\n",
  "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    # TODO: implement\
    \ this function\n    pass\n\n", "    return 0\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return\
    \ digits(n // 10)\n    else:\n        return (n % 10) * digits(n // 10)\n\n",
  "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    if n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n         \
    \   return digits(n // 10)\n        else:\n            return n % 10 * digits(n\
    \ // 10)\n\n", "    if n == 0:\n        return 0\n    else:\n        return n\
    \ % 10 * digits(n // 10)\n\n", "    return reduce(lambda x, y: x * y, [int(i)\
    \ for i in str(n) if int(i) % 2 != 0])\n\n", "    return 0\n\n", "    return 0\n\
    \n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    # TODO:\
    \ implement this function\n    pass\n\n", "    return 0\n\n", "    return 0\n\n",
  "    return 0\n\n", "    return 0\n\n", "    # return 0 if n == 0 else n % 10 *\
    \ digits(n // 10)\n    return 0 if n == 0 else n % 10 * digits(n // 10) if n %\
    \ 2 else digits(n // 10)\n\n", "    return 0\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return reduce(lambda x, y: x * y, [int(i) for\
    \ i in str(n) if int(i) % 2 != 0])\n\n", "    return 0\n\n", "    return 0\n\n",
  "    return 0\n\n", "    return 0\n\n", "    if n == 0:\n        return 0\n    else:\n\
    \        return n % 10 * digits(n // 10)\n\n", "    return 0\n\n", "    product\
    \ = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n           \
    \ product *= int(digit)\n    return product\n\n", "    return 0\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return 0\n\n", "    # return 0 if n < 1 else\
    \ reduce(lambda x, y: x * y, [int(i) for i in str(n) if int(i) % 2 != 0])\n  \
    \  return 0 if n < 1 else reduce(lambda x, y: x * y, [int(i) for i in str(n) if\
    \ int(i) % 2])\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n",
  "    # return 0 if n == 0 else int(str(n)[0]) * digits(n // 10) if int(str(n)[0])\
    \ % 2 else digits(n // 10)\n    return 0 if n == 0 else int(str(n)[0]) * digits(n\
    \ // 10) if int(str(n)[0]) % 2 else digits(n // 10)\n\n", "    if n == 0:\n  \
    \      return 0\n    else:\n        return n % 10 * digits(n // 10)\n\n", "  \
    \  if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n\
    \        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n\
    \        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n\
    \    return product\n\n", "    return 0\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return 0\n\n", "    if n == 0:\n        return\
    \ 0\n    else:\n        if n % 2 == 0:\n            return digits(n // 10)\n \
    \       else:\n            return (n % 10) * digits(n // 10)\n\n", "    product\
    \ = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n           \
    \ product *= int(digit)\n    return product\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    if n == 0:\n        return 0\n    else:\n \
    \       return (n % 10) * digits(n // 10)\n\n", "    return 0\n\n", "    product\
    \ = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n           \
    \ product *= int(digit)\n    return product\n\n", "    return 0\n\n", "    return\
    \ 0\n\n", "    return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    # return\
    \ 0 if n == 0 else n % 10 * digits(n // 10) if n % 2 else digits(n // 10)\n  \
    \  return 0 if n == 0 else n % 10 * digits(n // 10) if n % 2 else digits(n //\
    \ 10)\n\n", "    product = 1\n    for digit in str(n):\n        if int(digit)\
    \ % 2 != 0:\n            product *= int(digit)\n    return product\n\n", "   \
    \ return 0\n\n", "    return 0\n\n", "    return 0\n\n", "    product = 1\n  \
    \  while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n        \
    \    product *= digit\n        n //= 10\n    return product\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
