name: HumanEval_9_rolling_max
language: racket
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n;; [1, 2, 3, 3, 3, 4, 4]\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (roll (cdr numbers)))\n        (if (null? roll)\n            (cons\
    \ max roll)\n            (if (> (car roll) max)\n                (cons max roll)\n\
    \                (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max-so-far numbers))\n        (if (null? (cdr max-so-far))\n\
    \            (cons (car max-so-far)\n                  max-so-far)\n         \
    \   (let ((next-max-so-far max-so-far))\n              (if (> (car max-so-far)\
    \ (car next-max-so-far))\n                  (cons (car max-so-far)\n         \
    \               max-so-far)\n                  (cons (car next-max-so-far)\n \
    \                       next-max-so-far)))))\n        (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)\n          \
    \        (rolling_max (cdr numbers))))\n      numbers))\n", "  (let loop ((numbers\
    \ numbers)\n             (max-so-far #f)\n             (max-so-far-index 0))\n\
    \    (cond\n      [(null? numbers) max-so-far]\n      [(> max-so-far numbers)\
    \ max-so-far]\n      [(< max-so-far numbers) (loop (rest numbers) numbers (+ max-so-far-index\
    \ 1))]\n      [else (loop (rest numbers) (max max-so-far numbers) (+ max-so-far-index\
    \ 1))])))\n", "  (if (null? numbers)\n      '()\n      (cons (max (car numbers))\
    \ (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (append (max (rest numbers)) (rolling_max (rest numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (max (car numbers)\n                (rolling_max\
    \ (cdr numbers))))\n          numbers))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max rolling_max)\n            (let ((max (car\
    \ roll))\n                  (roll (cdr roll)))\n              (cons max (rolling_max\
    \ roll)))))))\n", "  (if (null? numbers)\n      '()\n      (append (max (rest\
    \ numbers)) (rolling_max (rest numbers)))))\n", "  (if (null? numbers)\n     \
    \ '()\n      (append (max (car numbers)\n                   (rolling_max (cdr\
    \ numbers))))\n      numbers))\n", "  (if (null? numbers)\n      '()\n      (append\
    \ (apply max (subseq numbers 0 (- (length numbers) 1))) (rolling_max (subseq numbers\
    \ (+ 0 (- (length numbers) 1)))))))\n", "  (let loop ((numbers numbers)\n    \
    \         (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)", "  (let loop ((numbers numbers)\n\
    \             (max-so-far #f)\n             (max-so-far-index 0))\n    (cond ((null?\
    \ numbers) max-so-far)\n          ((< max-so-far max-so-far-index)\n         \
    \  (loop (rest numbers)\n                 (max max-so-far max-so-far-index)\n\
    \                 (1+ max-so-far-index)))\n          (else\n           (loop (rest\
    \ numbers)\n                 (max max-so-far max-so-far-index)\n             \
    \    (1+ max-so-far-index))))))\n", "  (if (null? numbers)\n      '()\n      (append\
    \ (max (car numbers) (rolling_max (cdr numbers))) numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if (null? (rest\
    \ numbers))\n            (cons max-so-far max-so-far)\n            (let ((next-number\
    \ (rest numbers)))\n              (if (> (car max-so-far) next-number)\n     \
    \             (cons max-so-far max-so-far)\n                  (rolling_max (cons\
    \ next-number (rest max-so-far))))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max rolling_max)\n            (let ((max (car\
    \ roll))\n                  (roll (cdr roll)))\n              (cons max rolling_max))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (if (> max roll)\n                max\n           \
    \     (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max roll)\n            (if (> max roll)\n  \
    \              (cons max roll)\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max rolling_max)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (cons max (rolling_max roll)))))))\n", "  (if (null? numbers)\n \
    \     '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (cons max '())\n            (let ((next-max (rolling_max (cdr numbers))))\n\
    \              (if (> (car next-max) max)\n                  (cons max next-max)\n\
    \                  (cons next-max max)))))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (list max)\n            (let ((next (rolling_max (cdr numbers))))\n\
    \              (if (> (car next) max)\n                  (list max)\n        \
    \          (list max (car next))\n                )\n            )\n        )\n\
    \      )\n    )\n)\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0)\n             (max-so-far-so-far 0))\n   \
    \ (if (null? numbers)\n        (reverse max-list)\n        (let ((next (first\
    \ numbers))\n              (max-so-far max-so-far)\n              (max-so-far-so-far\
    \ max-so-far-so-far))\n          (if (> next max-so-far)\n              (loop\
    \ (rest numbers)\n                    (cons next max-list)\n                 \
    \   max-so-far)\n              (loop (rest numbers)\n                    (cons\
    \ next max-list)\n                    max-so-far-so-far)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (append (max (car numbers)) (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? (rest numbers))\n            max\n  \
    \          (loop (rest numbers)\n                  (if (> (first numbers) max)\n\
    \                      max\n                      (first numbers))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ 0 (car numbers))\n              (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list)))\n\
    \        (if (null? rolling_max_list)\n            max\n            (cons max\
    \ (rolling_max_list (cdr rolling_max_list)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers)))\n        (if (null? (cdr numbers))\n\
    \            (list max)\n            (let ((next (rolling_max (cdr numbers))))\n\
    \              (if (> (car next) max)\n                  (list max)\n        \
    \          (list max next)))))\n      )\n    )\n  )\n", "  (let loop ((numbers\
    \ numbers)\n             (result '()))\n    (if (null? numbers)\n        result\n\
    \        (loop (rest numbers)\n              (cons (max result (car numbers))\n\
    \                    (loop (cdr numbers)\n                          result))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far)))\n        (if (null? (rest numbers))\n\
    \            (cons (car max-so-far-so-far)\n                  max-so-far-so-far)\n\
    \            (let ((next-number (rest numbers)))\n              (if (> (car max-so-far-so-far)\
    \ next-number)\n                  (set! max-so-far-so-far (cons (car max-so-far-so-far)\
    \ max-so-far-so-far))\n                  (set! max-so-far-so-far (cons next-number\
    \ (car max-so-far-so-far))))))))\n", "  (let loop ((numbers numbers)\n       \
    \      (max-list '())\n             (max-so-far 0))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((number (car numbers))\n          \
    \    (max-so-far (+ max-so-far number)))\n          (if (> number max-so-far)\n\
    \              (loop (cdr numbers) max-list max-so-far)\n              (loop (cdr\
    \ numbers)\n                    (cons number max-list)\n                    max-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers) (rolling_max\
    \ (cdr numbers))) (list (car numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            max\n            (if (> max roll)\n              \
    \  max\n                (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far (car numbers))\n            (max-so-far-index\
    \ (car numbers)))\n        (if (> (car numbers) max-so-far)\n            (cons\
    \ max-so-far max-so-far-index)\n            (rolling_max (cdr numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers)\n            \
    \    (rolling_max (cdr numbers))))\n          numbers))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (car\
    \ numbers)))\n        (if (= max-so-far-so-far (car numbers))\n            (cons\
    \ max-so-far max-so-far-so-far)\n            (let ((max-so-far max-so-far-so-far)\n\
    \                  (max-so-far-so-far (cdr numbers)))\n              (if (= max-so-far-so-far\
    \ (car numbers))\n                  (cons max-so-far max-so-far-so-far)\n    \
    \              (let ((max-so-far max-so-far-so-far)\n                        (max-so-far-so-far\
    \ (cdr numbers)))\n                    (if (= max-so-far-so-far (car numbers))\n\
    \                        (cons max-so-far max-so-far-so-far)\n               \
    \         (let ((max-so-far max-so-far-so-far)\n                             \
    \ (max-so-far-so-far (cdr numbers)))\n                          (if (= max-so-far-so-far\
    \ (car numbers))\n                              (cons max-so-far max-so-far-so-far)\n\
    \                              (let ((max-so-far max-so-far-so-far)\n        \
    \                            (max-so-far-so-far (cdr numbers)))\n            \
    \                    (if (= max-so-far-so-far (car numbers))\n               \
    \                     (cons max-so-far max-so-far-so-far)\n                  \
    \                  (let ((max-so-far max-so-far-so-far)\n                    \
    \                      (max-so-far-so-far (cdr numbers)))\n                  \
    \                    (if (= max-so-far-so-far (car numbers))\n               \
    \                           (cons max-so-far max-so-far-so-far)\n            \
    \                              (let ((max-so-far max-so-far-so-far)\n        \
    \                                        (max-so-far-so-far (cdr numbers)))\n\
    \                                            (if (= max-so-far-so-far (car numbers))\n\
    \                                                (cons max-so-far max-so-far-so-far)\n\
    \                                                (let ((max-so-far max-so-far-so-far)\n\
    \                                                      (max-so-far-so-far", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (null? (cdr numbers))\n            (cons max '())\n            (let ((next-max\
    \ (rolling_max (cdr numbers))))\n              (cond ((< max next-max) (cons max\
    \ next-max))\n                    (else (cons max '()))))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (append (max (rest numbers)) (rolling_max (rest numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ (first numbers)) (rolling_max (rest numbers)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (append (max numbers (sub1 numbers))\n              (rolling_max\
    \ (sub1 numbers)))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0)\n             (max-so-far-so-far '()))\n \
    \   (cond\n      [(empty? numbers) max-list]\n      [(>= (first numbers) max-so-far-so-far)\
    \ (loop (rest numbers) max-so-far max-so-far-so-far (first numbers))]\n      [else\
    \ (loop (rest numbers) (first numbers) (first numbers) (cons max-so-far (first\
    \ numbers) max-so-far-so-far))])))\n", "  (if (null? numbers)\n      '()\n   \
    \   (append (max (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling (list\
    \ max)))\n        (if (null? (cdr numbers))\n            max\n            (let\
    \ ((next (car numbers))\n                  (rolling (cons next rolling)))\n  \
    \            (if (> (car rolling) max)\n                  (rolling_max (cdr rolling))\n\
    \                  (rolling_max (cdr rolling)))))\n        (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (max '()))\n        (if (null? numbers)\n            max\n         \
    \   (loop (rest numbers)\n                  (cons (max numbers)\n            \
    \            (loop (rest numbers)\n                              max))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (car numbers))\n            (max-so-far-so-far-so-far (cdr\
    \ numbers)))\n        (if (< (car numbers) max-so-far)\n            (cons max-so-far\
    \ (rolling_max (cdr numbers)))\n            (cons max-so-far-so-far (rolling_max\
    \ (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (if (> max roll)\n                max\n           \
    \     (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (cons (max (car numbers)\n                 (rolling_max (cdr numbers))))\n\
    \          numbers))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0))\n    (if (null? numbers)\n        (reverse\
    \ max-list)\n        (let ((n (car numbers))\n              (max-so-far (+ max-so-far\
    \ n)))\n          (loop (cdr numbers)\n                (cons n\n             \
    \         max-list)\n                max-so-far))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers))\n        (if (null? (rest numbers))\n\
    \            (cons max-so-far max-so-far)\n            (let ((next-number (rest\
    \ numbers)))\n              (if (> (first max-so-far) next-number)\n         \
    \         (cons max-so-far max-so-far)\n                  (let ((max-so-far next-number))\n\
    \                    (rolling_max (rest numbers)))))))\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis solution doesn't work if the list is empty. Try it out with an empty\
    \ list.\n<|/ c |>\n<| c |>\nIt doesn't work because `max-so-far` is never initialized.\
    \ `max-so-far` is only initialized if the list is non-empty. `max-so-far` is never\
    \ initialized, so `max-so-far` is `null`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ Thanks for pointing that out. I've fixed my answer.\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work if the list is empty. Try it out with an empty list.\n\
    <|/ c |>\n<| c |>\nIt doesn't work because `max-so-far` is never initialized.\
    \ `max-so-far` is only initialized if the list is non-empty. `max-so-far` is never\
    \ initialized, so `max-so-far` is `null`.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (> (car numbers) max)\n            (cons max (rolling_max (cdr numbers))))\n\
    \        (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (append (max (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far (car numbers))\n            (max-so-far-index\
    \ (car numbers)))\n        (if (> (car numbers) max-so-far)\n            (cons\
    \ max-so-far max-so-far-index)\n            (rolling_max (cdr numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (car numbers))\n            (max-so-far-so-far-so-far (cdr\
    \ numbers)))\n        (if (null? max-so-far)\n            (cons max-so-far-so-far-so-far\n\
    \                  (rolling_max (cdr numbers)))\n            (let ((max-so-far-so-far-so-far-so-far\
    \ (cons max-so-far-so-far-so-far-so-far\n                                    \
    \                max-so-far-so-far-so-far-so-far)))\n              (if (> (car\
    \ max-so-far-so-far-so-far-so-far)\n                     (car max-so-far-so-far-so-far-so-far))\n\
    \                  (cons max-so-far-so-far-so-far-so-far\n                   \
    \     (rolling_max (cdr numbers)))\n                  (cons max-so-far-so-far-so-far-so-far\n\
    \                        (rolling_max (cdr numbers)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers))\n        (if (null? (cdr max-so-far))\n\
    \            (cons (car max-so-far) max-so-far)\n            (let ((max-so-far\
    \ max-so-far))\n              (if (> (car max-so-far) (cadr max-so-far))\n   \
    \               (cons (car max-so-far) max-so-far)\n                  (let ((max-so-far\
    \ max-so-far))\n                    (if (> (car max-so-far) (cadr max-so-far))\n\
    \                        (cons (car max-so-far) max-so-far)\n                \
    \        (let ((max-so-far max-so-far))\n                          (if (> (car\
    \ max-so-far) (cadr max-so-far))\n                              (cons (car max-so-far)\
    \ max-so-far)\n                              (let ((max-so-far max-so-far))\n\
    \                                (if (> (car max-so-far) (cadr max-so-far))\n\
    \                                    (cons (car max-so-far) max-so-far)\n    \
    \                                (let ((max-so-far max-so-far))\n            \
    \                          (if (> (car max-so-far) (cadr max-so-far))\n      \
    \                                    (cons (car max-so-far) max-so-far)\n    \
    \                                      (let ((max-so-far max-so-far))\n      \
    \                                      (if (> (car max-so-far) (cadr max-so-far))\n\
    \                                                (cons (car max-so-far) max-so-far)\n\
    \                                                (let ((max-so-far max-so-far))\n\
    \                                                  (if (> (car max-so-far) (cadr\
    \ max-so-far))\n                                                      (cons (car\
    \ max-so-far) max-so-far)\n                                                  \
    \    (let ((max-so-far max-so-far))\n                                        \
    \                (if (> (car max-so-far) (cadr max-so-far))\n                \
    \                                            (cons (car max-so-far) max-so-far)\n\
    \                                                            (let ((max-so-far\
    \ max-so-far))\n                                                             \
    \ (if (> (car max-so-far) (cadr max-so-far))\n                               \
    \                                 (cons (car max-so-far) max-so-far)\n       \
    \                                                         (let ((max-so-far max-",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (tail (cdr numbers)))\n        (if (null? tail)\n            (cons max '())\n\
    \            (let ((max (max tail)))\n              (cons max '(rolling_max tail)))))\n\
    \  )\n", "  (if (null? numbers)\n      '()\n      (append (max (car numbers) (rolling_max\
    \ (cdr numbers))) (list (car numbers)))))\n", "  (let loop ((numbers numbers)\n\
    \             (result '()))\n    (if (null? numbers)\n        result\n       \
    \ (loop (rest numbers)\n              (cons (max (car numbers) (car result)) result)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (cond ((null? numbers) max)\n          ((> (car numbers) max) max)\n    \
    \      (else (loop (cdr numbers)\n                       (cons (car numbers) max)))))\n\
    \  max)\n", "  (let loop ((numbers numbers)\n             (max-so-far #f)\n  \
    \           (max-so-far-so-far (list #f)))\n    (cond\n      [(empty? numbers)\
    \ max-so-far]\n      [(> (first numbers) max-so-far) (loop (rest numbers) (first\
    \ numbers) max-so-far-so-far)]\n      [else (loop (rest numbers) (first numbers)\
    \ (append max-so-far-so-far (list (first numbers))))])))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse\
    \ max-so-far)))\n        (if (null? max-so-far)\n            max-so-far\n    \
    \        (let ((number (car max-so-far))\n                  (max-so-far-so-far\
    \ (cdr max-so-far-so-far)))\n              (if (> (car max-so-far-so-far) number)\n\
    \                  (cons number max-so-far-so-far)\n                  (cons max-so-far-so-far\
    \ (rolling_max (cdr max-so-far-so-far))))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far (car numbers))\n\
    \            (max-so-far-so-far-so-far (cdr numbers)))\n        (if (> max-so-far\
    \ max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n      \
    \      (if (> max-so-far-so-far-so-far\n                  max-so-far-so-far-so-far)\n\
    \                (cons max-so-far-so-far-so-far\n                      max-so-far-so-far)\n\
    \                (cons max-so-far-so-far\n                      (rolling_max (cdr\
    \ numbers)))))))\n", "  (if (null? numbers)\n      '()\n      (append (max (car\
    \ numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (append (max (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (append (max (car numbers)) (rolling_max (cdr numbers)))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n         \
    \   (max-so-far-so-far (reverse max-so-far)))\n        (if (null? (rest numbers))\n\
    \            (cons (car max-so-far-so-far)\n                  max-so-far-so-far)\n\
    \            (let ((next-number (rest numbers)))\n              (if (> (car max-so-far-so-far)\
    \ next-number)\n                  (set! max-so-far-so-far (cons (car max-so-far-so-far)\n\
    \                                              max-so-far-so-far))\n         \
    \         (set! max-so-far-so-far (cons next-number\n                        \
    \                      max-so-far-so-far)))))\n        (rolling_max (rest numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ((numbers numbers)\n             (max '()))\n\
    \    (if (null? numbers)\n        max\n        (loop (rest numbers)\n        \
    \      (cond ((> max number) (cons max max))\n                    ((= max number)\
    \ (cons max max))\n                    (else (loop (rest numbers)\n          \
    \                    (max number)))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far numbers))\n        (if (null? (cdr max-so-far))\n   \
    \         (cons (car max-so-far)\n                  (rolling_max (cdr max-so-far)))\n\
    \            (let ((next-max-so-far max-so-far))\n              (if (> (car max-so-far)\
    \ (car next-max-so-far))\n                  (cons (car max-so-far)\n         \
    \               (rolling_max (cdr max-so-far)))\n                  (cons (car\
    \ next-max-so-far)\n                        (rolling_max (cdr next-max-so-far))))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (if (> max roll)\n                (cons max roll)\n             \
    \   (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (cons (max (car numbers)\n                 (rolling_max (cdr numbers))))\n\
    \          numbers))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ #f)\n            (max-so-far-so-far (first numbers)))\n        (cond ((> max-so-far\
    \ max-so-far-so-far)\n              (cons max-so-far max-so-far-so-far))\n   \
    \           ((< max-so-far max-so-far-so-far)\n               (cons max-so-far-so-far\
    \ (rolling_max (rest numbers))))\n              (else (cons max-so-far max-so-far-so-far)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far\
    \ (car numbers)))\n        (if (> max-so-far max-so-far-so-far)\n            (cons\
    \ max-so-far max-so-far-so-far)\n            (rolling_max (cdr numbers))))))\n",
  "  (let loop ((max-so-far #f)\n             (max-so-far-list '())\n            \
    \ (numbers numbers)\n             (i 0))\n    (if (< i numbers)\n        (let\
    \ ((max-so-far max-so-far)\n              (max-so-far-list max-so-far-list))\n\
    \          (loop (max max-so-far numbers)\n                (cons max-so-far max-so-far-list)\n\
    \                (+ i 1)\n                (cons numbers (subseq numbers (+ i 1)))))))\n\
    \  max-so-far-list)\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (if (> max roll)\n                max\n           \
    \     (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let ((max-so-far (car numbers)))\n        (if (> (car numbers) max-so-far)\n\
    \            (cons max-so-far (rolling_max (cdr numbers))))\n        (cons (car\
    \ numbers) (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (roll (cdr numbers)))\n        (if\
    \ (null? roll)\n            (cons max roll)\n            (if (> (car roll) max)\n\
    \                (cons max roll)\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far))\n            (max-so-far-so-far-so-far\
    \ (reverse max-so-far-so-far)))\n        (if (null? (cdr numbers))\n         \
    \   (cons (car numbers) max-so-far)\n            (let ((number (car numbers))\n\
    \                  (max-so-far max-so-far)\n                  (max-so-far-so-far\
    \ (cons number max-so-far)))\n              (if (> (car max-so-far-so-far) number)\n\
    \                  (let ((max-so-far-so-far-so-far (cons number max-so-far-so-far)))\n\
    \                    (if (> (car max-so-far-so-far-so-far) number)\n         \
    \               (let ((max-so-far-so-far-so-far-so-far (cons number max-so-far-so-far-so-far)))\n\
    \                          (if (> (car max-so-far-so-far-so-far-so-far) number)\n\
    \                              (let ((max-so-far-so-far-so-far-so-far-so-far (cons\
    \ number max-so-far-so-far-so-far-so-far)))\n                                (if\
    \ (> (car max-so-far-so-far-so-far-so-far-so-far) number)\n                  \
    \                  (let ((max-so-far-so-far-so-far-so-far-so-far-so-far (cons\
    \ number max-so-far-so-far-so-far-so-far-so-far)))\n                         \
    \             (if (> (car max-so-far-so-far-so-far-so-far-so-far-so-far) number)\n\
    \                                          (let ((max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ (cons number max-so-far-so-far-so-far-so-far-so-far-so-far)))\n            \
    \                                (if (> (car max-so-far-so-far-so-far-so-far-so-far-so-far-so-far",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            max\n         \
    \   (if (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far)))\n        (if (null? max-so-far)\n\
    \            numbers\n            (let ((next-number (car max-so-far)))\n    \
    \          (if (> (car max-so-far) next-number)\n                  (cons next-number\
    \ (rolling_max (cdr max-so-far)))\n                  (cons next-number (rolling_max\
    \ (cdr max-so-far-so-far)))))\n            (cons next-number (rolling_max (cdr\
    \ max-so-far-so-far)))))\n        numbers))\n", "  (if (null? numbers)\n     \
    \ '()\n      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n\
    \        (if (null? max-list)\n            max\n            (if (> max max-list)\n\
    \                (cons max max-list)\n                (rolling_max (cdr max-list))\n\
    \              )\n            )\n        )\n      )\n  )\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-prev numbers))\n\
    \        (if (null? (cdr numbers))\n            (cons max-so-far (cons max-so-far-prev\
    \ '()))\n            (let ((next (car numbers))\n                  (prev (cdr\
    \ numbers)))\n              (if (> (car max-so-far) next)\n                  (cons\
    \ max-so-far (cons max-so-far-prev '()))\n                  (cons next (cons max-so-far-prev\
    \ (cons max-so-far '())))))))))\n", "  (let loop ((numbers numbers)\n        \
    \     (max '()))\n    (cond ((null? numbers) max)\n          ((null? (cdr numbers))\
    \ (cons max max))\n          (else (loop (cdr numbers)\n                     \
    \ (cons (max (car numbers)) max)))))\n</code>\n<|/ a tags=racket,scheme |>\n<|\
    \ a dscore=0 |>\n<code>", "  (if (null? numbers)\n      '()\n      (let ((max\
    \ (car numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n\
    \            max\n            (if (> max roll)\n                max\n        \
    \        (rolling_max (cdr roll)))))))\n", "  (let loop ((numbers numbers)\n \
    \            (max '()))\n    (if (null? numbers)\n        max\n        (loop (rest\
    \ numbers)\n              (cond ((> max number) (cons max numbers))\n        \
    \            ((< max number) (loop (rest numbers) number))\n                 \
    \   (else (loop (rest numbers) max))))))\n", "  (let loop ((numbers numbers)\n\
    \             (max-list '())\n             (max-so-far 0))\n    (if (null? numbers)\n\
    \        (reverse max-list)\n        (let ((n (car numbers))\n              (max-so-far\
    \ (+ max-so-far n)))\n          (loop (cdr numbers)\n                (cons (max\
    \ max-so-far n)\n                      max-list)\n                max-so-far))))))\n",
  "  (if (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n        \
    \         (result '()))\n        (if (null? numbers)\n            result\n   \
    \         (loop (rest numbers)\n                  (cons (max result (first numbers))\n\
    \                        result)))))\n", "  (if (null? numbers)\n      '()\n \
    \     (append (max (rest numbers)) (rolling_max (rest numbers)))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if (null?\
    \ (cdr numbers))\n            (cons max-so-far max-so-far)\n            (let ((next-number\
    \ (car numbers)))\n              (if (> (car max-so-far) next-number)\n      \
    \            (cons next-number (rolling_max (cdr numbers))))\n               \
    \   max-so-far))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers)\n            (max-so-far-so-far (car numbers)))\n        (if (< (car\
    \ numbers) max-so-far-so-far)\n            (cons max-so-far-so-far (rolling_max\
    \ (cdr numbers))))\n        (cons max-so-far (rolling_max (cdr numbers))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)\n          \
    \        (rolling_max (cdr numbers))))\n      numbers))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers)\n            (max-so-far-index 0))\n\
    \        (if (= max-so-far-index 0)\n            (cons max-so-far (rolling_max\
    \ (cdr numbers)))\n            (let ((max-so-far max-so-far)\n               \
    \   (max-so-far-index (+ max-so-far-index 1)))\n              (if (= max-so-far-index\
    \ 0)\n                  (cons max-so-far (rolling_max (cdr numbers)))\n      \
    \            (let ((max-so-far max-so-far)\n                        (max-so-far-index\
    \ (+ max-so-far-index 1)))\n                    (cons (max max-so-far numbers)\
    \ max-so-far))))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         max\n            (if (> max roll)\n                max\n           \
    \     (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (append (max (car numbers) (rolling_max (cdr numbers))) numbers)))\n", " \
    \ (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (cond ((> max number)\
    \ (cons max numbers))\n                    ((< max number) (loop (rest numbers)\n\
    \                                         (cons max numbers))))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let loop ((numbers numbers)\n           \
    \      (max '()))\n        (if (null? (rest numbers))\n            max\n     \
    \       (loop (rest numbers)\n                  (if (> (first numbers) max)\n\
    \                      max\n                      (first numbers))))))))\n", " \
    \ (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (cond ((> max head)\
    \ max)\n                    ((= head max) max)\n                    (else (loop\
    \ (rest numbers)\n                                 (cond ((> max head) max)\n\
    \                                        ((= head max) max)\n                \
    \                        (else (cons head max))))))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (append (max (first numbers)) (rolling_max (rest numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0))\n    (cond\n      [(empty? numbers) max-list]\n\
    \      [(> (first numbers) max-so-far) (loop (rest numbers) (first numbers) max-so-far)]\n\
    \      [else (loop (rest numbers) (first numbers) (first numbers))]\n    )\n \
    \ )\n)\n", "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null?\
    \ numbers)\n        max\n        (loop (rest numbers)\n              (cond (>\
    \ (first numbers) max)\n                     (first numbers)\n               \
    \      (loop (rest numbers)\n                          (cond (> (first numbers)\
    \ max)\n                                 (first numbers)\n                   \
    \              (cons (first numbers) max))\n                            max))\n\
    \              max))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ (car numbers)\n                   (rolling_max (cdr numbers))))\n      numbers))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (rolling_max (cdr numbers))\n            (rolling_max_list (cons max rolling_max_list)))\n\
    \        (if (null? rolling_max_list)\n            max\n            (cons max\
    \ (rolling_max_list (cdr rolling_max_list)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling (cdr numbers)))\n\
    \        (if (null? rolling)\n            max\n            (if (> max rolling)\n\
    \                max\n                (rolling_max (cdr rolling)))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n        (if\
    \ (> (car numbers) max)\n            (cons max numbers)\n            (rolling_max\
    \ (cdr numbers))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers)\n            (max-so-far-prev numbers)\n            (max-so-far-prev-prev\
    \ numbers))\n        (if (null? (rest numbers))\n            (cons max-so-far\
    \ max-so-far-prev)\n            (let ((next-numbers (rest numbers)))\n       \
    \       (if (> (car next-numbers) max-so-far)\n                  (let ((max-so-far\
    \ max-so-far-prev)\n                        (max-so-far-prev max-so-far-prev-prev))\n\
    \                    (if (null? max-so-far)\n                        (cons max-so-far\
    \ max-so-far-prev)\n                        (let ((max-so-far max-so-far-prev)\n\
    \                              (max-so-far-prev max-so-far-prev-prev))\n     \
    \                     (if (null? max-so-far)\n                              (cons\
    \ max-so-far max-so-far-prev)\n                              (let ((max-so-far\
    \ max-so-far-prev)\n                                    (max-so-far-prev max-so-far-prev-prev))\n\
    \                                (if (null? max-so-far)\n                    \
    \                (cons max-so-far max-so-far-prev)\n                         \
    \           (let ((max-so-far max-so-far-prev)\n                             \
    \             (max-so-far-prev max-so-far-prev-prev))\n                      \
    \                (if (null? max-so-far)\n                                    \
    \      (cons max-so-far max-so-far-prev)\n                                   \
    \       (let ((max-so-far max-so-far-prev)\n                                 \
    \               (max-so-far-prev max-so-far-prev-prev))\n                    \
    \                        (if (null? max-so-far)\n                            \
    \                    (cons max-so-far max-so-far-prev)\n                     \
    \                           (let ((max-so-far max-so-far-prev)\n             \
    \                                         (max-so-far-prev max-so-far-prev-prev))\n\
    \                                                  (if (null? max-so-far)\n  \
    \                                                    (cons max-so-far max-so-far-prev)\n\
    \                                                      (let ((max-so-far max-so-far-prev)\n\
    \                                                            (max-so-far-prev\
    \ max-so-far-prev-prev))\n                                                   \
    \ (if (null? max-so-far)\n                                                   \
    \     (cons ", "  (if (null? numbers)\n      '()\n      (append (max (rest numbers))\
    \ (rolling_max (rest numbers)))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (append (take-while #(< % number) numbers)\n              (rolling_max (drop-while\
    \ #(< % number) numbers)))))\n", "  (let loop ((numbers numbers)\n           \
    \  (max-list '())\n             (max-so-far 0))\n    (if (null? numbers)\n   \
    \     (reverse max-list)\n        (let ((n (car numbers))\n              (max-so-far\
    \ (+ max-so-far n)))\n          (loop (cdr numbers)\n                (cons n\n\
    \                      max-list)\n                (if (> max-so-far n)\n     \
    \               max-so-far\n                    max-so-far))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (max_found (null? rolling_max)))\n        (if (or\
    \ (null? rolling_max) (> max max_found))\n            (cons max rolling_max)\n\
    \            (rolling_max)))))\n", "  (if (null? numbers)\n      '()\n      (let\
    \ loop ((numbers numbers)\n                 (max '()))\n        (if (null? numbers)\n\
    \            max\n            (let ((n (car numbers)))\n              (if (> n\
    \ max)\n                  (loop (cdr numbers) n)\n                  (loop (cdr\
    \ numbers) max)))))\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Can you\
    \ please explain how you came up with that solution? I understand that it is recursive\
    \ and that it is tail recursive, but I do not understand how you came up with\
    \ that solution.\n<|/ c |>\n<| c |>\nI used the fact that `(define (f x) (f (f\
    \ x)))` can be rewritten as `(define (f x) (lambda () (f (f x))))`. So I wrote\
    \ a recursive function `f` which takes a number `x` and returns the same number\
    \ `x` but twice (twice because `f` takes two arguments). Then, I used the fact\
    \ that `(define (f x) (f (f x)))` can be rewritten as `(define (f x) (lambda ()\
    \ (f (f x))))` to get `f` twice (twice because `f` takes two arguments). Then,\
    \ I used the fact that `(define (f x) (f (f x)))` can be rewritten as `(define\
    \ (f x) (lambda () (f (f x))))` to get `f` twice (twice because `f` takes two\
    \ arguments). Then, I used the fact that `(define (f x) (f (f x)))` can be rewritten\
    \ as `(define (f x) (lambda () (f (f x))))` to get `f` twice (twice because `f`\
    \ takes two arguments). Then, I used the fact that `(define (f x) (f (f x)))`\
    \ can be rewritten as `(define (f x) (lambda () (f (f x))))` to get `f` twice\
    \ (twice because `f` takes two arguments). Then, I used the fact that `(define\
    \ (f x) (f (f x)))` can be rewritten as `(define (f x) (lambda () (f (f x))))`\
    \ to get `f` twice (twice because `f` takes two arguments). Then, I used the fact\
    \ that `(define (f x) (f (f x)))` can be rewritten as `(define (f x) (lambda ()\
    \ (f (f x))))` to get `f", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ (car numbers))\n            (max-so-far-index (car numbers)))\n        (if (>\
    \ (car numbers) max-so-far)\n            (cons max-so-far max-so-far-index)\n\
    \            (rolling_max (cdr numbers))))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (append (take-max (rest numbers)) \n              (rolling_max (drop-max\
    \ numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers)))\n\
    \        (if (> (car numbers) max)\n            (cons max numbers)\n         \
    \   (rolling_max (cdr numbers))))))\n", "  (let loop ((numbers numbers)\n    \
    \         (result '()))\n    (if (null? numbers)\n        result\n        (loop\
    \ (rest numbers)\n              (cons (max (car numbers) (car result)) result)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)\n          \
    \        (rolling_max (cdr numbers))))\n      numbers))\n", "  (if (null? numbers)\n\
    \      '()\n      (let loop ((numbers numbers)\n                 (max '()))\n\
    \        (if (null? numbers)\n            max\n            (let ((number (car\
    \ numbers))\n                  (next-number (cdr numbers)))\n              (if\
    \ (> (car numbers) max)\n                  (loop (cdr numbers) max)\n        \
    \          (loop (cons (car numbers) next-number) max)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (rolling_max\
    \ (cdr numbers))\n            (rolling_max_list (cons max rolling_max))))))\n",
  "  (let loop ((numbers numbers)\n             (max-list '())\n             (max-so-far\
    \ 0))\n    (if (null? numbers)\n        (reverse max-list)\n        (let ((number\
    \ (car numbers))\n              (max-so-far (+ max-so-far number)))\n        \
    \  (if (> number max-so-far)\n              (loop (cdr numbers) max-so-far number)\n\
    \              (loop (cdr numbers) max-so-far max-so-far))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (append (max (car numbers)\n                  (rolling_max\
    \ (cdr numbers))))\n      numbers))\n", "  (if (null? numbers)\n      '()\n  \
    \    (let loop ((numbers numbers)\n                 (max '()))\n        (if (null?\
    \ (rest numbers))\n            max\n            (loop (rest numbers)\n       \
    \           (if (> (first numbers) max)\n                      max\n         \
    \             (first numbers))))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (append (apply max numbers)\n              (rolling_max (sub1 numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n \
    \     '()\n      (let ((max-so-far numbers)\n            (max-so-far-prev numbers))\n\
    \        (if (null? max-so-far)\n            (cons max-so-far-prev max-so-far)\n\
    \            (let ((max-so-far max-so-far-prev)\n                  (max-so-far-prev\
    \ (car max-so-far)))\n              (if (> (car max-so-far) max-so-far-prev)\n\
    \                  (cons max-so-far-prev max-so-far)\n                  (rolling_max\
    \ (cdr max-so-far)))))))\n", "  (if (null? numbers)\n      '()\n      (append\
    \ (max 0 (first numbers)) (rolling_max (rest numbers)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max (car numbers))\n            (rolling_max (cdr numbers))\n\
    \            (rolling_max_list (cons max rolling_max))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (append (max (car numbers) (rolling_max (cdr numbers))) (list\
    \ (car numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max rolling_max)\n            (let ((max (car roll))\n       \
    \           (roll (cdr roll)))\n              (cons max (rolling_max roll)))))\n\
    \      )\n  )\n", "  (if (null? numbers)\n      '()\n      (cons (max (car numbers))\
    \ (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (append (max (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if (null? (rest\
    \ numbers))\n            (cons max-so-far max-so-far)\n            (let ((max-so-far\
    \ max-so-far))\n              (if (> (car numbers) max-so-far)\n             \
    \     (cons max-so-far max-so-far)\n                  (rolling_max (cdr numbers)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-prev numbers))\n        (if (null? (cdr numbers))\n           \
    \ (cons (car numbers) max-so-far)\n            (let ((next (car numbers))\n  \
    \                (prev (car max-so-far-prev)))\n              (if (> (car max-so-far)\
    \ next)\n                  (set! max-so-far next)\n                  (set! max-so-far-prev\
    \ prev)\n                  (cons next max-so-far)))))\n        (rolling_max (cdr\
    \ numbers)))))\n", "  (let loop ((numbers numbers)\n             (max 0))\n  \
    \  (if (null? numbers)\n        max\n        (loop (rest numbers)\n          \
    \    (if (> (first numbers) max)\n                  (first numbers)\n        \
    \          max))))))\n", "  (let loop ((numbers numbers)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far\
    \ #f)\n             (max-so-far #f)\n             (max-so-far #f)\n          \
    \   (max-so-far #f)\n             (max-so-far #f)\n             (max-so-far #f)\n\
    \             (max-so-far #f)", "  (if (null? numbers)\n      '()\n      (cons\
    \ (max (car numbers)\n                (rolling_max (cdr numbers))))\n        \
    \  numbers))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n\
    \            (max-list (cdr numbers)))\n        (if (null? max-list)\n       \
    \     (cons max max-list)\n            (if (> (car max-list) max)\n          \
    \      (cons max max-list)\n                (rolling_max (cdr max-list)))))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max rolling_max)\n\
    \            (let ((max (car roll))\n                  (roll (cdr roll)))\n  \
    \            (cons max rolling_max)))))\n", "  (let loop ((numbers numbers)\n\
    \             (max '()))\n    (if (null? numbers)\n        max\n        (loop\
    \ (rest numbers)\n              (cond ((> max head) max)\n                   \
    \ ((< max head) (cons head max))\n                    (else (loop (rest numbers)\
    \ max))))))\n", "  (let loop ((numbers numbers)\n             (max-list '()))\n\
    \    (cond\n      [(null? numbers) max-list]\n      [(< (car numbers) (first max-list))\
    \ (loop (rest numbers) (cons (car numbers) max-list))]\n      [else (loop (rest\
    \ numbers) (cons (car numbers) max-list))]))))\n", "  (if (null? numbers)\n  \
    \    '()\n      (let ((max (car numbers))\n            (max-list (cdr numbers)))\n\
    \        (if (null? max-list)\n            max\n            (if (> (car max-list)\
    \ max)\n                (cons max max-list)\n                (rolling_max (cdr\
    \ max-list)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers)\n            (max-so-far-prev numbers)\n            (max-so-far-prev-prev\
    \ numbers))\n        (if (null? (cdr numbers))\n            (cons (car numbers)\
    \ max-so-far)\n            (let ((next-number (car numbers))\n               \
    \   (next-number-prev (car max-so-far-prev)))\n              (if (> (car max-so-far-prev)\
    \ next-number)\n                  (cons next-number max-so-far)\n            \
    \      (let ((next-number-prev-prev (car max-so-far-prev-prev)))\n           \
    \         (if (> (car max-so-far-prev-prev) next-number-prev)\n              \
    \          (cons next-number-prev max-so-far)\n                        (let ((next-number-prev-prev-prev\
    \ (car max-so-far-prev-prev-prev)))\n                          (if (> (car max-so-far-prev-prev-prev)\
    \ next-number-prev-prev)\n                              (cons next-number-prev-prev\
    \ max-so-far)\n                              (let ((next-number-prev-prev-prev-prev\
    \ (car max-so-far-prev-prev-prev-prev)))\n                                (if\
    \ (> (car max-so-far-prev-prev-prev-prev) next-number-prev-prev-prev)\n      \
    \                              (cons next-number-prev-prev-prev max-so-far)\n\
    \                                    (let ((next-number-prev-prev-prev-prev-prev\
    \ (car max-so-far-prev-prev-prev-prev-prev)))\n                              \
    \        (if (> (car max-so-far-prev-prev-prev-prev-prev) next-number-prev-prev-prev-prev)\n\
    \                                          (cons next-number-prev-prev-prev-prev\
    \ max-so-far)\n                                          (let ((next-number-prev-prev-prev-prev-prev-prev\
    \ (car max-so-far-prev-prev-prev-prev-prev-prev)))\n                         \
    \                   (if (> (car max-so-far-prev-prev-prev-prev-prev-prev) next-number-prev-prev-prev-prev-prev)\n\
    \                                                (cons ", "  (if (null? numbers)\n\
    \      '()\n      (append (max (car numbers) (rolling_max (cdr numbers))) (list\
    \ (car numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (max (car\
    \ numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (append (max 0 (first numbers)) (rolling_max (rest numbers)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max rolling_max)\n            (let ((max (car roll))\n       \
    \           (roll (cdr roll)))\n              (cons max rolling_max)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n          \
    \  (roll (cdr numbers)))\n        (if (null? roll)\n            max\n        \
    \    (if (> max roll)\n                max\n                (rolling_max (cdr\
    \ roll)))))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n\
    \            (max-so-far-so-far (reverse max-so-far)))\n        (if (null? max-so-far)\n\
    \            numbers\n            (let ((next (first max-so-far))\n          \
    \        (max-so-far max-so-far-so-far))\n              (if (> next max-so-far)\n\
    \                  (cons next max-so-far)\n                  (let ((next-so-far\
    \ next)\n                        (max-so-far max-so-far-so-far))\n           \
    \         (if (> next-so-far max-so-far)\n                        (cons next-so-far\
    \ max-so-far)\n                        (let ((next-so-far-so-far next-so-far)\n\
    \                              (max-so-far max-so-far-so-far))\n             \
    \         (if (> next-so-far-so-far max-so-far)\n                          (cons\
    \ next-so-far-so-far max-so-far)\n                          (let ((next-so-far-so-far-so-far\
    \ next-so-far-so-far)\n                                (max-so-far max-so-far-so-far))\n\
    \                        (if (> next-so-far-so-far-so-far max-so-far)\n      \
    \                      (cons next-so-far-so-far-so-far max-so-far)\n         \
    \                   (let ((next-so-far-so-far-so-far-so-far next-so-far-so-far-so-far)\n\
    \                                    (max-so-far max-so-far-so-far))\n       \
    \                   (if (> next-so-far-so-far-so-far-so-far max-so-far)\n    \
    \                          (cons next-so-far-so-far-so-far-so-far max-so-far)\n\
    \                              (let ((next-so-far-so-far-so-far-so-far-so-far\
    \ next-so-far-so-far-so-far-so-far)\n                                    (max-so-far\
    \ max-so-far-so-far))\n                            (if (> next-so-far-so-far-so-far-so-far-so-far\
    \ max-so-far", "  (if (null? numbers)\n      '()\n      (cons (max (car numbers))\
    \ (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (let ((max-so-far numbers)\n            (max-so-far-so-far (reverse max-so-far)))\n\
    \        (if (< (length max-so-far) 2)\n            (cons (car max-so-far)\n \
    \                 (rolling_max (cdr max-so-far)))\n            (cons (car max-so-far-so-far)\n\
    \                  (rolling_max (cdr max-so-far-so-far)))))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (append (max (car numbers)) (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (max (car\
    \ numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max-so-far numbers)\n            (max-so-far-so-far (car numbers))\n\
    \            (max-so-far-so-far-so-far (cdr numbers)))\n        (if (< (car numbers)\
    \ max-so-far-so-far)\n            (cons max-so-far-so-far (rolling_max (cdr numbers)))\n\
    \            (cons max-so-far-so-far (rolling_max (cdr numbers)))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if (null?\
    \ (rest numbers))\n            (cons max-so-far max-so-far)\n            (let\
    \ ((next-numbers (rest numbers)))\n              (if (> (car next-numbers) max-so-far)\n\
    \                  (cons max-so-far max-so-far)\n                  (let ((max-so-far\
    \ next-numbers)))))))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ (car numbers)\n                  (rolling_max (cdr numbers))))\n      numbers))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-so-far (reverse max-so-far)))\n        (if (> (car max-so-far)\
    \ (car max-so-far-so-far))\n            (cons (car max-so-far) (rolling_max (cdr\
    \ max-so-far)))\n            (cons (car max-so-far-so-far) (rolling_max (cdr max-so-far-so-far)))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ((numbers numbers)\n             (max-list\
    \ '())\n             (max-so-far 0))\n    (if (null? numbers)\n        (reverse\
    \ max-list)\n        (let ((n (car numbers))\n              (max-so-far (+ max-so-far\
    \ n)))\n          (loop (cdr numbers)\n                (cons (max max-so-far n)\n\
    \                      max-list)\n                max-so-far))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (roll (cdr\
    \ numbers)))\n        (if (null? roll)\n            (cons max roll)\n        \
    \    (let ((max (car roll))\n                  (roll (cdr roll)))\n          \
    \    (if (> max roll)\n                  (cons max roll)\n                  (rolling_max\
    \ roll)))))))\n", "  (let loop ((numbers numbers)\n             (max-list '()))\n\
    \    (cond\n      [(empty? numbers) max-list]\n      [(> (first numbers) (first\
    \ max-list)) max-list]\n      [else (loop (rest numbers)\n                  (cons\
    \ (first numbers)\n                        (max max-list (rest numbers))))])))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (max-list (cdr numbers)))\n        (if (null? max-list)\n            max\n \
    \           (if (> max max-list)\n                max\n                (rolling_max\
    \ (cdr max-list)))))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ (car numbers)) (rolling_max (cdr numbers)))))\n", "  (let loop ((numbers numbers)\n\
    \             (max 0))\n    (if (null? numbers)\n        max\n        (let ((n\
    \ (car numbers))\n              (max (if (> max n)\n                      max\n\
    \                      n)))\n          (loop (cdr numbers) max)))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max (cdr\
    \ numbers)))))\n", "  (let loop ((numbers numbers)\n             (max-list '()))\n\
    \    (cond ((null? numbers) max-list)\n          ((> (car numbers) (cadr numbers))\
    \ (loop (cdr numbers) (cons (car numbers) max-list)))\n          (else (loop (cdr\
    \ numbers) (cons (car numbers) max-list))))))\n", "  (if (null? numbers)\n   \
    \   '()\n      (let ((max (car numbers))\n            (roll (cdr numbers)))\n\
    \        (if (null? roll)\n            (cons max rolling_max)\n            (let\
    \ ((newmax (car roll))\n                  (roll (cdr roll)))\n              (if\
    \ (> newmax max)\n                  (cons newmax rolling_max)\n              \
    \    (cons max rolling_max)))))))\n", "  (let loop ((numbers numbers)\n      \
    \       (result '()))\n    (if (null? numbers)\n        result\n        (loop\
    \ (rest numbers)\n              (cons (max (car numbers) (car result)) result)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max (car numbers))\n           \
    \ (roll (cdr numbers)))\n        (if (null? roll)\n            (cons max roll)\n\
    \            (if (> max roll)\n                (cons max roll)\n             \
    \   (rolling_max (cdr roll)))))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (append (max (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let ((max (car numbers))\n            (tail (cdr\
    \ numbers)))\n        (if (null? tail)\n            max\n            (if (> max\
    \ tail)\n                max\n                (rolling_max (cons max tail)))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (car numbers)) (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max (car\
    \ numbers))\n            (roll (cdr numbers)))\n        (if (null? roll)\n   \
    \         (cons max rolling_max)\n            (let ((max (car roll))\n       \
    \           (roll (cdr roll)))\n              (cons max rolling_max)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (let ((max-so-far #f)\n            (max-so-far-so-far\
    \ (car numbers))\n            (max-so-far-so-far-so-far (cdr numbers)))\n    \
    \    (if (< max-so-far max-so-far-so-far)\n            (cons max-so-far max-so-far-so-far)\n\
    \            (cons max-so-far-so-far (rolling_max (cdr numbers)))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (cons (max (car numbers)) (rolling_max (cdr\
    \ numbers)))))\n", "  (let loop ((numbers numbers)\n             (max 0))\n  \
    \  (if (null? numbers)\n        max\n        (loop (rest numbers)\n          \
    \    (if (> max first)\n                  max\n                  first))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max (rest numbers)) (rolling_max\
    \ (rest numbers)))))\n", "  (let loop ((numbers numbers)\n             (result\
    \ '()))\n    (if (null? numbers)\n        result\n        (loop (cdr numbers)\n\
    \              (cons (max (car numbers) (car result)) result)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (let loop ((numbers numbers)\n                 (max\
    \ '()))\n        (if (null? (rest numbers))\n            max\n            (loop\
    \ (rest numbers)\n                  (cons (max (first numbers)) max))))))\n",
  "  (if (null? numbers)\n      '()\n      (append (max numbers)\n              (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (append (max\
    \ (car numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n \
    \     '()\n      (append (max (car numbers)) (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (let ((max-so-far numbers)\n          \
    \  (max-so-far-index 0)\n            (max-so-far-value numbers)\n            (max-so-far-count\
    \ 0))\n        (if (= max-so-far-count 0)\n            (cons max-so-far-value\
    \ max-so-far)\n            (let ((next-max-so-far max-so-far)\n              \
    \    (next-max-so-far-index max-so-far-index)\n                  (next-max-so-far-value\
    \ max-so-far-value)\n                  (next-max-so-far-count max-so-far-count))\n\
    \              (if (= max-so-far-count 0)\n                  (cons max-so-far-value\
    \ max-so-far)\n                  (let ((next-max-so-far max-so-far)\n        \
    \                (next-max-so-far-index max-so-far-index)\n                  \
    \      (next-max-so-far-value max-so-far-value)\n                        (next-max-so-far-count\
    \ max-so-far-count))\n                    (if (= max-so-far-count 0)\n       \
    \                 (cons max-so-far-value max-so-far)\n                       \
    \ (let ((next-max-so-far max-so-far)\n                              (next-max-so-far-index\
    \ max-so-far-index)\n                              (next-max-so-far-value max-so-far-value)\n\
    \                              (next-max-so-far-count max-so-far-count))\n   \
    \                       (if (= max-so-far-count 0)\n                         \
    \     (cons max-so-far-value max-so-far)\n                              (let ((next-max-so-far\
    \ max-so-far)\n                                    (next-max-so-far-index max-so-far-index)\n\
    \                                    (next-max-so-far-value max-so-far-value)\n\
    \                                    (next-max-so-far-count max-so-far-count))\n\
    \                                (if (= max-so-far-count 0)\n                \
    \                    (cons max-so-far-value max-so-far)\n                    \
    \                (let ((next-max-so-far max-so-far)\n                        \
    \                  (next-max-so-far-index max-so-far-index)\n                \
    \                          (next-max-so-far-value max-so-far-value)\n        \
    \                                  (next-max-so-far-count max-so-far-", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max (car numbers))\n            (roll\
    \ (cdr numbers)))\n        (if (null? roll)\n            max\n            (if\
    \ (> max roll)\n                max\n                (rolling_max (cdr roll)))))))\n",
  "  (let loop ((numbers numbers)\n             (max '()))\n    (if (null? numbers)\n\
    \        max\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max)\n                  (first numbers)\n                  max))))))\n", " \
    \ (if (null? numbers)\n      '()\n      (append (max (rest numbers)) (rolling_max\
    \ (rest numbers)))))\n", "  (if (null? numbers)\n      '()\n      (let ((max-so-far\
    \ numbers))\n        (if (null? (cdr max-so-far))\n            (cons (car max-so-far)\
    \ max-so-far)\n            (let ((max-so-far (cdr max-so-far)))\n            \
    \  (if (> (car max-so-far) (car numbers))\n                  (cons (car max-so-far)\
    \ max-so-far)\n                  (rolling_max (cdr max-so-far))))))))\n", "  (if\
    \ (null? numbers)\n      '()\n      (let ((max-so-far numbers))\n        (if (null?\
    \ (rest numbers))\n            (cons max-so-far max-so-far)\n            (let\
    \ ((max-so-far (max max-so-far numbers)))\n              (cons max-so-far max-so-far)\n\
    \              (rolling_max (rest numbers)))))))\n", "  (if (null? numbers)\n\
    \      '()\n      (let ((max-so-far numbers))\n        (if (null? (rest numbers))\n\
    \            (cons max-so-far max-so-far)\n            (let ((next-number (rest\
    \ numbers)))\n              (if (> (car max-so-far) next-number)\n           \
    \       (cons max-so-far max-so-far)\n                  (let ((max-so-far (cons\
    \ next-number (car max-so-far))))\n                    (rolling_max (cdr numbers))))))))\
    \ ; tail recursion\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for\
    \ your answer. Your solution is very similar to my solution. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element. My solution was to\
    \ find the max element in the list and then to find the max element in the list\
    \ until that max element was greater than the given element", "  (if (null? numbers)\n\
    \      '()\n      (append (max (rest numbers)) (rolling_max (rest numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (append (take-max (rest numbers)) \n  \
    \            (rolling_max (rest numbers)))))\n", "  (if (null? numbers)\n    \
    \  '()\n      (append (max 0 (first numbers))\n              (rolling_max (rest\
    \ numbers)))))\n", "  (if (null? numbers)\n      '()\n      (append (max (car\
    \ numbers)) (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n\
    \      (let ((max (car numbers))\n            (rolling (cons max '())))\n    \
    \    (if (null? (cdr numbers))\n            (cons max rolling)\n            (let\
    \ ((next (rolling_max (cdr numbers))))\n              (if (> (car next) max)\n\
    \                  (cons max rolling)\n                  (cons (car next) rolling)))))\n\
    \        (rolling_max (cdr numbers)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
