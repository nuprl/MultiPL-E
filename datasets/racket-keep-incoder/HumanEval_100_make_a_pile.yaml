name: HumanEval_100_make_a_pile
language: racket
prompt: "#lang racket\n\n;; Given a positive integer n, you have to make a pile of\
  \ n levels of stones.\n;; The first level has n stones.\n;; The number of stones\
  \ in the next level is:\n;; - the next odd number if n is odd.\n;; - the next even\
  \ number if n is even.\n;; Return the number of stones in each level in a list,\
  \ where element at index\n;; i represents the number of stones in the level (i+1).\n\
  ;; Examples:\n;; >>> make_a_pile(3)\n;; [3, 5, 7]\n(define (make_a_pile n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n\
  \    (check-equal? (candidate 3) (list 3 5 7))\n    (check-equal? (candidate 4)\
  \ (list 4 6 8 10))\n    (check-equal? (candidate 5) (list 5 7 9 11 13))\n    (check-equal?\
  \ (candidate 6) (list 6 8 10 12 14 16))\n    (check-equal? (candidate 8) (list 8\
  \ 10 12 14 16 18 20 22))\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      '()\n      (cons (+ (modulo (+ n 1) 2) (modulo\
    \ (+ n 1) 3)) (make_a_pile (- n 1)))))\n", "  (let loop ((n n) (piles '()))\n\
    \    (if (= n 0)\n        piles\n        (loop (- n 1) (cons (- n 1) piles)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ n (floor (/ n 2))) (make_a_pile (- n 2)))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n\
    \    [(even? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n    [else (make_a_pile\
    \ (/ n 2))]\n  )\n)\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (- n\
    \ 2) (make_a_pile (/ n 2)))]\n    [(odd? n) (cons (- n 1) (make_a_pile (/ n 2)))]\n\
    \    [else (make_a_pile (/ n 2))]))\n", "  (cond\n    [(zero? n) '()]\n    [(odd?\
    \ n) (cons (+ n (odd? (remainder n 2))) '())]\n    [else (cons (+ n (even? (remainder\
    \ n 2))) '())]))\n", "  (let loop ((n n) (piles '()))\n    (if (= n 0)\n     \
    \   (reverse piles)\n        (loop (- n 1)\n              (cons (if (odd? n) (+\
    \ n 1) (- n 1)) piles)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor\
    \ (/ n 2))\n              (if (even? n)\n                  (+ 1 (floor (/ n 2)))\n\
    \                  (+ 1 (floor (/ n 2))))\n              (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (- n (floor (/ n 2))\n              (if (even? n)\n  \
    \                (+ n (floor (/ n 2)))\n                  (+ n (floor (/ n 2)))))\n\
    \            (make_a_pile (- n 1)))))\n", "  (let ([stones (make-array (+ n 1)\
    \ #)])\n    (if (= n 0)\n        stones\n        (let ([level (make-array (+ n\
    \ 1) #)])\n          (if (even? n)\n              (set! level (+ level 1))\n \
    \             (set! level (+ level 2)))\n          (set! stones (append stones\
    \ level))\n          (make_a_pile (- n 1))))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n   \
    \   '()\n      (cons (- n (floor (/ n 2))\n              (if (even? n)\n     \
    \             (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n\
    \              (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n    [(even?\
    \ n) (cons (- n (odd? (+ n 1))) (make_a_pile (- n 1)))]\n    [else (cons (- n\
    \ (even? (+ n 1))) (make_a_pile (- n 1)))]))\n", "  (if (= n 0)\n      '()\n \
    \     (cons (+ (* n n) (if (odd? n) (odd? (+ n 1)) even? (+ n 2))) (make_a_pile\
    \ (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n 1) (make_a_pile\
    \ (/ n 2)))]\n    [(even? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n    [else\
    \ (make_a_pile (/ n 2))]))\n", "  (if (= n 0)\n      '()\n      (append (make_a_pile\
    \ (- n 1))\n              (list (if (odd? n) (+ n 1) (- n 1))))))\n", "  (if (=\
    \ n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2)))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (+ (* n n) (if (odd? n) (odd? (+ n 1))\n                        \
    \   (even? (+ n 1))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (+ (modulo (+ n 1) 2) (modulo (+ n 1) 3))\n          \
    \  (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor\
    \ (/ n 2))\n               (if (even? n)\n                   (+ 1 (floor (/ n\
    \ 2)))\n                   (+ 1 (floor (/ n 2))))\n            (make_a_pile (-\
    \ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (even? n)\
    \ (* 2 (odd? n)) (* 2 (even? n))))\n            (make_a_pile (- n 1)))))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n) (* 2 (odd? (- n\
    \ 1))) (even? (- n 1))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n\
    \ 0)\n      '()\n      (cons (+ (* n n) (floor (/ n 2))) (make_a_pile (- n 2)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (let loop ((n n) (piles '()))\n    (if (= n 0)\n        piles\n        (loop\
    \ (- n 1) (cons (- n 1) piles)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (+ (* n n) (floor (/ n 2))) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n  \
    \    '()\n      (cons (- n (floor (/ n 2))\n               (if (even? n)\n   \
    \                (floor (/ n 2))\n                   (floor (/ n 2))))\n     \
    \       (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (-\
    \ n (floor (/ n 2))\n              (if (even? n)\n                  (+ n (floor\
    \ (/ n 2)))\n                  (+ n (floor (/ n 2))))\n              (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd?\
    \ n) (odd? (+ n 1)) (even? (+ n 1))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n) (odd-next n) (even-next\
    \ n)))\n            (make_a_pile (- n 1)))))\n", "  (if (zero? n)\n      '()\n\
    \      (let ([odds (make-a_pile (quotient n 2))\n            evens (make-a_pile\
    \ (quotient n 2))])\n        (cons (+ (car odds) (car evens))\n              (make_a_pile\
    \ (- n 2))))))\n", "  (if (= n 0)\n      '()\n      (let ([next (if (even? n)\
    \ (+ n 2) (+ n 1))])\n        (cons next (make_a_pile next)))))\n", "  (if (=\
    \ n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n\
    \    [(even? n) (cons (- n 1) (make_a_pile (/ n 2)))]\n    [(odd? n) (cons (-\
    \ n 1) (make_a_pile (/ n 2)))]\n    [else (make_a_pile (/ n 2))]))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (+ (* n n) (floor (/ n 2)))\n            (make_a_pile\
    \ (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n\
    \               (if (even? n)\n                   (floor (/ n 2))\n          \
    \         (floor (/ n 2)))\n               (make_a_pile (- n 1)))))\n", "  (cond\n\
    \    [(zero? n) '()]\n    [(odd? n) (cons (+ n (odd? (+ n 1))) '())]\n    [(even?\
    \ n) (cons (+ n (even? (+ n 1))) '())]\n    [else (error \"Not a positive integer\"\
    )]))\n", "  (if (= n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (-\
    \ n 2)))))\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (- n 2) (make_a_pile\
    \ (/ n 2)))]\n    [else (cons (- n 3) (make_a_pile (/ n 3)))]))\n", "  (if (=\
    \ n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n", " \
    \ (if (zero? n)\n      '()\n      (cons (if (even? n) (+ n 1) (- n 1))\n     \
    \       (make_a_pile (- n 1)))))\n", "  (let loop ((n n) (piles '()))\n    (if\
    \ (= n 0)\n        piles\n        (loop (- n 1) (cons (- n 1) piles)))))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n) (* 2 (odd? (+ n\
    \ 1))) (even? (+ n 1))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n\
    \ 0)\n      '()\n      (cons (- n (modulo (+ n 2) 2)) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n\
    \    [(even? n) (cons (- n (odd? n)) (make_a_pile (/ n 2)))]\n    [else (cons\
    \ (- n (even? n)) (make_a_pile (/ n 2)))]))\n", "  (let ([level (make-array n\
    \ #:initial-contents '())])\n    (if (odd? n)\n        (set! level (make-array\
    \ (+ n 1) #:initial-contents (list n)))\n        (set! level (make-array (+ n\
    \ 2) #:initial-contents (list n))))\n    (for-each (lambda (i v)\n           \
    \     (set! level (make-array (+ i 1) #:initial-contents (list v))))\n       \
    \       level))", "  (if (= n 0)\n      '()\n      (let ([next (if (odd? n) (add1\
    \ (modulo (+ n 1) 2)) (modulo (+ n 1) 3))])\n        (cons next (make_a_pile next)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))) ; #lang racket\n", "  (let\
    \ ([piles (make-array (+ n 1) #)])\n    (if (= n 0)\n        piles\n        (let\
    \ ([level (make-array (+ n 1) #)])\n          (if (odd? n)\n              (set!\
    \ piles (set! piles (+ piles level))\n                       (set! level (make-array\
    \ (+ n 1) #)))\n              (set! piles (set! piles (+ piles level))\n     \
    \                  (set! level (make-array (+ n 1) #))))))\n    piles))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (- n (modulo (+ n 2) 2)) (make_a_pile (+\
    \ n 1)))))\n", "  (let loop ((n n) (a #(list n)))\n    (if (= n 0)\n        a\n\
    \        (loop (- n 1)\n              (cond ((= (modulo n 2) 0) (cons (+ n 1)\
    \ a))\n                    ((= (modulo n 2) 1) (cons (+ n 2) a))\n           \
    \         (else (cons (+ n 3) a)))))\n    (loop (- n 1)\n          (cons (+ n\
    \ 1) a))))\n", "  (if (even? n)\n      (make_a_pile_even (+ n 1))\n      (make_a_pile_odd\
    \ (+ n 1))))\n", "  (if (= n 0)\n      '()\n      (cons (+ n ((odd? n) (even?\
    \ n)))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n \
    \     (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n    \
    \  '()\n      (cons (+ (* n n) (if (odd? n) (odd? (+ n 1)) (even? (+ n 1))))\n\
    \            (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n    [(even?\
    \ n) (cons (- n (odd? (+ n 1))) (make_a_pile (- n 1)))]\n    [else (cons (- n\
    \ (even? (+ n 1))) (make_a_pile (- n 1)))]))\n", "  (if (= n 0)\n      '()\n \
    \     (cons (+ (* n n) (if (even? n) (* 2 (odd? n)) (* 2 (even? n))))\n      \
    \      (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (-\
    \ n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (append (make_a_pile (- n 1))\n              (if (even? n)\n          \
    \        (list n 1)\n                  (list (- n 1) (if (odd? n) (+ n 1) (- n\
    \ 1))))))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n\
    \               (if (even? n)\n                   (+ 1 (floor (/ n 2)))\n    \
    \               (+ 1 (floor (/ n 2))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (floor (/ n 2))) (make_a_pile\
    \ (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (floor (/\
    \ n 2))) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (+\
    \ (* n n) (if (odd? n) (odd? (+ n 1)) (even? (+ n 1))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n\
    \              (if (even? n)\n                  (+ 1 (floor (/ n 2)))\n      \
    \            (+ 1 (floor (/ n 2))))\n              (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (let ((next (if (even? n) (odd? (+ n 1)) (even?\
    \ (+ n 1)))))\n        (cons next (make_a_pile (- n 1))))))\n", "  (cond\n   \
    \ [(= n 0) '()]\n    [(odd? n) (cons (+ n (odd? (remainder n 2))) '())]\n    [(even?\
    \ n) (cons (+ n (even? (remainder n 2))) '())]\n    [else (cons (+ n (odd? (remainder\
    \ n 2))) (make_a_pile (remainder n 2)))]))\n", "  (if (= n 0)\n      '()\n   \
    \   (cons (- n (floor (/ n 2))\n               (if (even? n)\n               \
    \    (floor (/ n 2))\n                   (floor (/ n 2))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2)))\
    \ (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor\
    \ (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (- n (floor (/ n 2))\n              (if (even? n)\n                  (+ 1 (floor\
    \ (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n              (make_a_pile\
    \ (- n 1)))))\n", "  (let ([pile (make-array (+ n 1) #:element-type 'integer)])\n\
    \    (if (= n 0)\n        (list 0)\n        (let ([level (make-array (+ n 1) #:element-type\
    \ 'integer)])\n          (loop\n             (set! pile (make-array (+ n 1) #:element-type\
    \ 'integer))\n             (set! level (make-array (+ n 1) #:element-type 'integer))\n\
    \             (set! i (+ n 1))\n             (set! level (make-array (+ n 1) #:element-type\
    \ 'integer))\n             (set! level (make-array (+ n 1) #:element-type 'integer))\n\
    \             (set! level (make-array (+ n 1) #:element-type 'integer))\n    \
    \         (set! level (make-array (+ n 1) #:element-type 'integer))\n        \
    \     (set! level (make-array (+ n 1) #:element-type 'integer))\n            \
    \ (set! level (make-array (+ n 1) #:element-type 'integer))\n             (set!\
    \ level (make-array (+ n 1) #:element-type 'integer))\n             (set! level\
    \ (make-array (+ n 1) #:element-type 'integer))\n             (set! level (make-array\
    \ (+ n 1) #:element-type 'integer))\n             (set! level (make-array (+ n\
    \ 1) #:element-type 'integer))\n             (set! level (make-array (+ n 1) #:element-type\
    \ 'integer))\n             (set! level (make-array (+ n 1) #:element-type 'integer))\n\
    \             (set! level (make-array (+ n 1) #:element-type 'integer))\n    \
    \         (set! level (make-array (+ n 1) #:element-type 'integer))\n        \
    \     (set! level (make-array (+ n 1) #:element-type 'integer))\n            \
    \ (set! level (make-array (+ n 1) #:element-type 'integer))\n             (set!\
    \ level (make-array (+ n 1) #:element-type 'integer))\n             (set! level\
    \ (make-array (+ n 1) #:element-type 'integer))\n             (set! level (make-array\
    \ (+ n 1) #:element-type 'integer))\n             (set! level (make-array (+ n\
    \ 1) #:element-type 'integer))\n             (set! level (make-", "  (if (= n\
    \ 0)\n      '()\n      (let ((next (if (even? n) (+ n 2) (+ n 1))))\n        (cons\
    \ next (make_a_pile next)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n\
    \ (floor (/ n 2))) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n      '()\n  \
    \    (cons (floor (/ n 2)) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n     \
    \ '()\n      (cons (+ (* n n) (if (even? n) (* 2 (odd? n)) (* 2 (even? n))))\n\
    \            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (- n (floor (/ n 2))\n               (if (even? n)\n                   (floor\
    \ (/ n 2))\n                   (floor (/ n 2)))\n               (make_a_pile (-\
    \ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n \
    \             (if (even? n)\n                  (+ 1 (floor (/ n 2)))\n       \
    \           (+ 1 (floor (/ n 2))))\n              (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (append (make_a_pile (- n 1))\n              (cond\
    \ ((odd? n) (list n (+ n 1)))\n                    ((even? n) (list n (+ n 2)))\n\
    \                    (else (list n (+ n 3))))))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (+ n ((odd? (- n 2))))\n            (make_a_pile (- n 2)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n               (if\
    \ (even? n)\n                   (floor (/ n 2))\n                   (floor (/\
    \ n 2)))\n               (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (- n (floor (/ n 2))\n              (if (even? n)\n             \
    \     (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n      \
    \        (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+\
    \ (* n n) (if (odd? n) (odd? (+ n 1)) (even? (+ n 1))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (let loop ((n n) (piles '()))\n    (if (= n 0)\n        piles\n\
    \        (loop (- n 1) (cons (- n 1) piles)))))\n", "  (if (= n 0)\n      '()\n\
    \      (let ([pile (make-pile)])\n        (if (even? n)\n            (cons (add-to-pile\
    \ pile (- n 1))\n                  (make_a_pile (- n 1)))\n            (cons (add-to-pile\
    \ pile n)\n                  (make_a_pile (- n 1)))))))\n", "  (if (= n 0)\n \
    \     '()\n      (let ([odds (make-a_pile (- n 2))\n            evens (make-a_pile\
    \ (- n 1))])\n        (cons (+ (car odds) (car evens))\n              (make_a_pile\
    \ (- n 1))))))\n", "  (let loop ((n n) (a #() (cons n a)))\n    (if (= n 0)\n\
    \        a\n        (loop (- n 1)\n              (cond ((= (modulo n 2) 0) (cons\
    \ (+ n 1) a))\n                    (else (cons (- n 1) a)))))\n    (loop (- n\
    \ 1)\n          a)))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/\
    \ n 2))) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (-\
    \ n (floor (/ n 2))\n              (if (even? n)\n                  (+ 1 (floor\
    \ (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n              (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd?\
    \ n) (odd-next n) (even-next n)))\n            (make_a_pile (- n 1)))))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if\
    \ (even? n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor\
    \ (/ n 2)))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n     \
    \ '()\n      (cons (- n (modulo (+ n 1) 2)) (make_a_pile (+ n 1)))))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (+ (* n n) (if (odd? n) (odd? (+ n 1)) (even? (+ n 1))))\n      \
    \      (make_a_pile (- n 1)))))\n", "  (let loop ((n n) (piles '()))\n    (if\
    \ (= n 0)\n        piles\n        (loop (- n 1) (cons (- n 1) piles)))))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n\
    \ 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor", "  (if (= n 0)\n      '()\n\
    \      (cons (- n (floor (/ n 2))\n              (floor (/ n 2))\n           \
    \   (floor (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n\
    \ 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n        \
    \      (floor (/ n 2))\n              (floor (/ n 2))\n              (floor (/\
    \ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n      \
    \        (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor", "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n 1)\
    \ (make_a_pile (/ n 2)))]\n    [(even? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n\
    \    [else (make_a_pile (/ n 2))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n", "  (if (=\
    \ n 0)\n      '()\n      (cons (+ (* n n) (floor (/ n 2))) (make_a_pile (- n 2)))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n (odd? (add1 n)))\n       \
    \             (make_a_pile (sub1 n)))]\n    [(even? n) (cons (+ n (even? (add1\
    \ n)))\n                    (make_a_pile (sub1 n)))]))\n", "  (cond\n    [(= n\
    \ 0) '()]\n    [(even? n) (cons (- n (odd? (add1 n)))\n                      \
    \ (make_a_pile (add1 n)))]\n    [else (cons (- n (even? (add1 n)))\n         \
    \       (make_a_pile (add1 n)))]))\n", "  (let loop ((n n) (piles '()))\n    (if\
    \ (= n 0)\n        piles\n        (loop (- n 1)\n              (cons (mod n 2)\n\
    \                    (loop (quotient n 2)\n                          piles))))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n (odd? (remainder n 2))) '())]\n\
    \    [(even? n) (cons (+ n (even? (remainder n 2))) '())]\n    [else (cons (+\
    \ n (odd? (remainder n 2))) (make_a_pile (remainder n 2)))]))\n", "  (if (= n\
    \ 0)\n      '()\n      (cons (- n (modulo (+ n 1) 2)) (make_a_pile (+ n 1)))))\n",
  "  (cond\n    [(= n 0) (list 0)]\n    [(even? n) (cons (- n (floor (/ n 2))) (make_a_pile\
    \ (/ n 2)))]\n    [else (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]))\n",
  "  (if (= n 0)\n      '()\n      (let ([next (+ n (floor (/ n 2)))])\n        (cons\
    \ next (make_a_pile next)))))\n", "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons\
    \ (+ n (odd? (quotient n 2))) (make_a_pile (quotient n 2)))]\n    [(even? n) (cons\
    \ (+ n (even? (quotient n 2))) (make_a_pile (quotient n 2)))]\n    [else (make_a_pile\
    \ (quotient n 2))]))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if\
    \ (odd? n) (odd-next n) (even-next n)))\n            (make_a_pile (- n 1)))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (- n (odd? n)) (make_a_pile (/\
    \ n 2)))]\n    [else (cons (- n (even? n)) (make_a_pile (/ n 2)))]))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (+ (* n n) (floor (/ n 2))) (make_a_pile (-\
    \ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n)\
    \ (* 2 (odd? (+ n 1))) (even? (+ n 1))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (let ([stones (make-array\
    \ (+ n 1) #)])\n    (if (= n 0)\n        (list stones)\n        (let ([level (make-array\
    \ (+ n 1) #)])\n          (if (even? n)\n              (set! level (make-array\
    \ (+ n 1) #))\n              (set! level (make-array (+ n 1) #)))\n          (set!\
    \ stones (append stones (list level)))\n          (make-a_pile (- n 1))))))\n",
  "  (if (= n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (- n (odd? (+ n 1))) (make_a_pile\
    \ (+ n 1)))]\n    [(even? n) (cons (- n (even? (+ n 1))) (make_a_pile (+ n 1)))]\n\
    \    [else (make_a_pile (+ n 1))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (- n (floor (/ n 2))\n              (if (even? n)\n                  (+ 1 (floor\
    \ (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n              (make_a_pile\
    \ (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (- n (floor\
    \ (/ n 2))) (make_a_pile (/ n 2)))]\n    [else (cons (- n (floor (/ n 2))) (make_a_pile\
    \ (/ n 2)))]))\n", "  (if (zero? n)\n      '()\n      (cons (+ (* n n) (if (odd?\
    \ n) (odd? (+ n 1)) (even? (+ n 1))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (if (odd? n) (* 2 (odd? n)) (even?\
    \ n)))\n            (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n\
    \    [(odd? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n    [(even? n) (cons (+\
    \ n 1) (make_a_pile (/ n 2)))]\n    [else (make_a_pile (/ n 2))]))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (+ (* n n) (if (even? n) (* 2 (odd? n)) (* 2\
    \ (even? n))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n    \
    \  '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n               (if (even?\
    \ n)\n                   (+ 1 (floor (/ n 2)))\n                   (+ 1 (floor\
    \ (/ n 2))))\n            (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (- n (floor (/ n 2))\n               (if (even? n)\n            \
    \       (+ n (floor (/ n 2)))\n                   (+ n (floor (/ n 2))))\n   \
    \            (make_a_pile (- n 1)))))\n", "  (cond\n    [(= n 0) (list 0)]\n \
    \   [(even? n) (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]\n    [else\
    \ (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]))\n", "  (if (= n 0)\n \
    \     '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", "  (if\
    \ (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (let loop ((n n) (piles\
    \ '()))\n    (if (= n 0)\n        piles\n        (loop (- n 1)\n             \
    \  (cons (mod n 2) piles)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n\
    \ (floor (/ n 2))\n               (if (even? n)\n                   (floor (/\
    \ n 2))\n                   (floor (/ n 2))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (let ([odds (make-a_pile (- n 2))\n           \
    \ evens (make-a_pile (- n 1))])\n        (cons n (cons (+ odds (modulo (+ n 1)\
    \ 2)) (cons (+ evens (modulo (+ n 1) 2)) '())))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (floor (/ n 2)) (make_a_pile (- n 2)))))\n", "  (cond\n    [(= n\
    \ 0) '()]\n    [(even? n) (cons (- n 1) (make_a_pile (/ n 2)))]\n    [else (cons\
    \ (- n 1) (make_a_pile (/ n 2)))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (- n (floor (/ n 2))\n              (if (even? n)\n                  (+ 1 (floor\
    \ (/ n 2)))\n                  (+ 1 (floor (/ n 2))))\n              (make_a_pile\
    \ (- n 1)))))\n", "  (cond\n    [(zero? n) '()]\n    [(odd? n) (cons (+ n (floor\
    \ (/ n 2))) (make_a_pile (- n 2)))]\n    [else (cons (+ n (floor (/ n 2))) (make_a_pile\
    \ (- n 2)))]))\n", "  (if (= n 0)\n      '()\n      (cons (- n (modulo (+ n 1)\
    \ 2)) (make_a_pile (+ n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (modulo\
    \ (+ n 1) 2) (modulo (+ n 1) 3)) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (+ (* n n) (if (even? n) (* 2 (odd? n)) (* 2 (even? n))))\n\
    \            (make_a_pile (- n 1)))))\n", "  (let loop ((n n) (levels ()))\n \
    \   (cond\n      [(= n 0) (list levels)]\n      [(odd? n) (loop (/ n 2) (cons\
    \ (+ n 1) levels))]\n      [else (loop (/ n 2) (cons (- n 1) levels))])))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n (odd? (remainder n 2))) '())]\n\
    \    [(even? n) (cons (+ n (even? (remainder n 2))) '())]\n    [else (cons (+\
    \ n (odd? (remainder n 2))) (make_a_pile (remainder n 2)))]))\n", "  (if (even?\
    \ n)\n      (make_a_pile_even (+ n 1))\n      (make_a_pile_odd (- n 1))))\n",
  "  (if (zero? n)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n               (if\
    \ (even? n)\n                   (floor (/ n 2))\n                   (floor (/\
    \ n 2)))\n               (make_a_pile (- n 1)))))\n", "  (if (even? n)\n     \
    \ (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))\n      (cons (- n (floor\
    \ (/ n 2))) (make_a_pile (/ n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (floor (/ n 2)) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n   \
    \   (cons (- n (modulo (+ n 2) 2)) (make_a_pile (+ n 1)))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n", " \
    \ (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor (/ n 2))\n              (floor (/ n 2))\n   \
    \           (floor (/ n 2))\n              (floor (/ n 2))\n              (floor\
    \ (/ n 2))\n              (floor", "  (cond\n    [(= n 0) '()]\n    [(even? n)\
    \ (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]\n    [else (cons (- n (floor\
    \ (/ n 2))) (make_a_pile (/ n 2)))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (floor (/ n 2)) (make_a_pile (- n 2)))))\n", "  (let loop ((n n) (piles '()))\n\
    \    (cond ((= n 0) (append piles pile))\n          ((even? n) (loop (- n 2) (cons\
    \ (- n 2) pile)))\n          (else (loop (- n 1) (cons (- n 1) pile))))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 2)))))\n",
  "  (let loop ((n n) (piles '()))\n    (if (= n 0)\n        piles\n        (loop\
    \ (- n 1)\n              (cons (mod n 2)\n                    (loop (- n 2)\n\
    \                          piles))))))\n", "  (let loop ((n n) (piles '()))\n\
    \    (if (= n 0)\n        piles\n        (loop (- n 1) (cons (- n 1) piles)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (- n (floor (/ n 2))\n               (if (even? n)\n            \
    \       (floor (/ n 2))\n                   (floor (/ n 2)))\n               (make_a_pile\
    \ (- n 1)))))\n", "  (if (zero? n)\n      '()\n      (cons (+ (* n n) (floor (/\
    \ n 2))) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (-\
    \ n (floor (/ n 2))\n               (if (even? n)\n                   (+ 1 (floor\
    \ (/ n 2)))\n                   (+ 1 (floor (/ n 2))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n\
    \              (if (even? n)\n                  (+ 1 (floor (/ n 2)))\n      \
    \            (+ 1 (floor (/ n 2))))\n              (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (floor (/ n 2)) (make_a_pile (- n 2)))))\n", "  (cond\n    [(= n\
    \ 0) '()]\n    [(odd? n) (cons (- n (odd? (+ n 1))) (make_a_pile (- n 1)))]\n\
    \    [(even? n) (cons (- n (even? (+ n 1))) (make_a_pile (- n 1)))]\n    [else\
    \ (make_a_pile (- n 1))]))\n", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons\
    \ (- n (odd? (+ n 1))) (make_a_pile (- n 1)))]\n    [else (cons (- n (even? (+\
    \ n 1))) (make_a_pile (- n 1)))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (+ (* n n) (if (odd? n) (* 2 (odd? n)) (even? n)))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n\
    \               (if (even? n)\n                   (floor (/ n 2))\n          \
    \         (floor (/ n 2))))\n            (make_a_pile (- n 1)))))\n", "  (cond\n\
    \    [(= n 0) (list 0)]\n    [(even? n) (cons (- n (floor (/ n 2))) (make_a_pile\
    \ (/ n 2)))]\n    [else (cons (- n (floor (/ n 2))) (make_a_pile (/ n 2)))]))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (cond\n    [(zero? n) '()]\n    [(odd? n) (cons (+ n (floor (/ n 2))) (make_a_pile\
    \ (- n 1)))]\n    [(even? n) (cons (+ n (floor (/ n 2))) (make_a_pile (- n 1)))]\n\
    \    [else (make_a_pile (- n 1))]))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (+ (* n n) (if (odd? n) (odd (+ n 1)) even (+ n 2))) (make_a_pile (- n 1)))))\n",
  "  (cond\n    [(zero? n) '()]\n    [(odd? n) (cons (+ n 1) (make_a_pile (/ n 2)))]\n\
    \    [(even? n) (cons (- n 1) (make_a_pile (/ n 2)))]\n    [else (make_a_pile\
    \ (/ n 2))]))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n\
    \               (if (even? n)\n                   (+ 1 (floor (/ n 2)))\n    \
    \               (+ 1 (floor (/ n 2))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 2)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (floor (/ n 2)) (make_a_pile (- n 1)))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (+ n (odd? (+ n 1))) '())]\n  \
    \  [(even? n) (cons (+ n (even? (+ n 1))) '())]\n    [else (cons (+ n (odd? (+\
    \ n 1))) (make_a_pile (- n 1)))]))\n", "  (cond\n    [(= n 0) '()]\n    [(odd?\
    \ n) (cons n (make_a_pile (/ n 2)))]\n    [(even? n) (cons n (make_a_pile (* n\
    \ 2)))]\n    [else (make_a_pile (/ n 2))]))\n", "  (cond\n    [(= n 0) '()]\n\
    \    [(even? n) (cons (- n 2) (make_a_pile (/ n 2)))]\n    [else (cons (- n 1)\
    \ (make_a_pile (/ n 1)))]))\n", "  (if (even? n)\n      (cons (- n (floor (/ n\
    \ 2))) (make_a_pile (/ n 2)))\n      (cons (- n (floor (/ n 2))) (make_a_pile\
    \ (/ n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2)))\
    \ (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (- n (floor\
    \ (/ n 2))\n               (if (even? n)\n                   (floor (/ n 2))\n\
    \                   (floor (/ n 2))))\n            (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))) (make_a_pile (- n 1)))))\n",
  "  (if (= n 0)\n      '()\n      (cons (- n (floor (/ n 2))\n              (if (even?\
    \ n)\n                  (+ 1 (floor (/ n 2)))\n                  (+ 1 (floor (/\
    \ n 2))))\n              (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (+ (* n n) (if (odd? n) (odd? (+ n 1)) (even? (+ n 1))))\n      \
    \      (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (-\
    \ n (floor (/ n 2))\n               (if (even? n)\n                   (+ 1 (floor\
    \ (/ n 2)))\n                   (+ 1 (floor (/ n 2))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n n) (floor (/\
    \ n 2))) (make_a_pile (- n 2)))))\n", "  (if (= n 0)\n      '()\n      (cons (-\
    \ n (floor (/ n 2))\n               (if (even? n)\n                   (+ 1 (floor\
    \ (/ n 2)))\n                   (+ 1 (floor (/ n 2))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (cond\n    [(= n 0) '()]\n    [(odd? n) (cons (- n 1) (make_a_pile\
    \ (/ n 2)))]\n    [(even? n) (cons (- n 1) (make_a_pile (/ n 2)))]\n    [else\
    \ (make_a_pile (/ n 2))]))\n", "  (if (= n 0)\n      '()\n      (cons (+ (* n\
    \ n) (if (even? n) (* 2 (odd? n)) (* 2 (even? n))))\n            (make_a_pile\
    \ (- n 1)))))\n", "  (if (= n 0)\n      '()\n      (cons (+ (modulo (+ n 1) 2)\
    \ (modulo (+ n 1) 3)) (make_a_pile (- n 1)))))\n", "  (if (= n 0)\n      '()\n\
    \      (cons (floor (/ n 2)) (make_a_pile (- n 2)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
