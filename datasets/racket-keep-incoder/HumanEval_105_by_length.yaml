name: HumanEval_105_by_length
language: racket
prompt: "#lang racket\n\n;; Given an array of integers, sort the integers that are\
  \ between 1 and 9 inclusive,\n;; reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; arr =\
  \ [2, 1, 1, 4, 5, 8, 2, 3]   \n;; -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n;; ->\
  \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n;; return [\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n;; If the array is empty, return\
  \ an empty array:\n;; arr = []\n;; return []\n;; If the array has any strange number\
  \ ignore it:\n;; arr = [1, -1 , 55] \n;; -> sort arr -> [-1, 1, 55]\n;; -> reverse\
  \ arr -> [55, 1, -1]\n;; return = ['One']\n(define (by_length arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
  \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"\
  Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
  \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
  ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
  ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
  ))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
