name: HumanEval_136_largest_smallest_integers
language: racket
prompt: "#lang racket\n\n;; Create a function that returns a tuple (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as None.\n;; Examples:\n;; largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
  \ 1)\n;; largest_smallest_integers([]) == (None, None)\n;; largest_smallest_integers([0])\
  \ == (None, None)\n(define (largest_smallest_integers lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((lst lst)\n             (a 0)\n             (b 0))\n \
    \   (cond [(null? lst) (list (cons a b))\n           (< (car lst) a) (loop (cdr\
    \ lst) a (car lst))\n           (> (car lst) b) (loop (cdr lst) b (car lst))]\n\
    \          [else (loop (cdr lst) a b)]))))\n", "  (cond\n    [(empty? lst) (list\
    \ None None None)]\n    [(< 0 (first lst)) (list (first lst) (first lst) (first\
    \ lst))]\n    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) (list (none? none) (none? none))]\n        [(integer? (car\
    \ lst)) (list (car lst) (cadr lst))]\n        [else (let ((a (largest_smallest_integers\
    \ (cdr lst))) (\n                  (b (smallest_integers (car lst))))\n      \
    \          (if (< (car a) b)\n                    (list (car a) b)\n         \
    \           (list (car a) (cadr a))))]))\n", "  (cond\n    [(empty? lst) (list\
    \ None None None)]\n    [(< 0 (first lst)) (list (first lst) (first lst) (first\
    \ lst))]\n    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(null? lst) (cons None (cons None lst))]\n        [(> (car lst) 0) (cons\
    \ (car lst) (cons (car lst) (largest_smallest_integers (cdr lst))))]\n       \
    \ [else (largest_smallest_integers (cdr lst))]))\n", "  (let loop ((lst (sort\
    \ lst <))\n             (a (first lst))\n             (b (second lst)))\n    (cond\
    \ ((null? lst)\n           (list a b))\n          ((< a b)\n           (loop (rest\
    \ lst) (first lst) (second lst)))\n          (else\n           (loop (rest lst)\
    \ a b)))))\n", "  (cond\n    [(empty? lst) (list None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None ",
  "  (cond\n    [(empty? lst) (list (none))]\n    [(number? (car lst)) (list (car\
    \ lst) (smallest (cdr lst)))]\n    [else (list (car lst) (smallest (cdr lst)))]))\n",
  "  (cond [(empty? lst) (list (none? nil) nil)]\n        [(negative? (first lst))\
    \ (list (first lst) (first lst))]\n        [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n\
    \    [(positive? (first lst)) (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]\n    [(negative? (first lst)) (list (none? 0) (first lst))]\n    [else\
    \ (list (none? 0) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n  \
    \  [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", '  (cond [(empty? lst) (list
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None ', "  (cond\n    [(empty? lst) (list None None\
    \ None)]\n    [(number? (car lst)) (list (car lst) (cadr lst) (caddr lst))]\n\
    \    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ (none))]\n    [(>= (first lst) 0) (list (first lst) (nthcdr (rest lst) 0))]\n\
    \    [else (list (first lst) (nthcdr (rest lst) 0))]))\n", "  (cond\n    [(empty?\
    \ lst) (list (none))]\n    [(< 0 (first lst)) (list (first lst) (nthcdr (first\
    \ lst) lst))]\n    [else (list (first lst) (first lst))]))\n", "  (cond [(null?\
    \ lst) (list (none? lst) none?)] \n        [(negative? (car lst)) (list (car lst)\
    \ (car lst))] \n        [else (list (car lst) (largest-smallest-integers (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None ",
  "  (cond [(empty? lst) (list None None None)]\n        [(< 0 (car lst)) (list (car\
    \ lst) (car lst) None)]\n        [else (list (car lst) (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None ",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond\n  \
    \  [(empty? lst) (list None None None)]\n    [(< 0 (car lst)) (list (car lst)\
    \ None None)]\n    [else (list (car lst) (largest-smallest-integers (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond\n  \
    \  [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (let loop ((lst\
    \ lst)\n             (a 0)\n             (b 0))\n    (cond [(null? lst) (values\
    \ lst a b)]\n          [(< a (first lst)) (loop (rest lst) (first lst) a)]\n \
    \         [(< (first lst) b) (loop (rest lst) a b)]\n          [else (loop (rest\
    \ lst) (first lst) (first lst))]))))\n", "  (cond\n    [(empty? lst) (list None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None ", "  (cond\n    [(empty? lst) (list (none))]\n   \
    \ [(< 0 (car lst)) (list (car lst) (cadr lst))]\n    [else (list (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n\
    \    [(< (first lst) 0) (list (first lst) (none? 0))]\n    [else (list (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond [(null? lst) (list\
    \ (none))]\n        [(< 0 (car lst)) (list (car lst) (cadr lst))]\n        [else\
    \ (list (car lst) (cadr lst) (largest_smallest_integers (cdr lst)))]))\n", " \
    \ (cond [(null? lst) (cons None (cons None lst))]\n        [(> (car lst) 0) (cons\
    \ (car lst) (cons (car lst) (largest_smallest_integers (cdr lst))))]\n       \
    \ [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None ", "  (cond\n    [(empty? lst) (list None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None ", '  (cond [(empty? lst) (list None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None ', "  (cond\n    [(empty? lst) (list None None None)]\n    [(number?\
    \ (car lst)) (list (car lst) (smallest (cdr lst)) (largest (cdr lst)))]\n    [else\
    \ (list (car lst) (smallest (cdr lst)) (largest (cdr lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list (none? none) (none? none))]\n    [(< 0 (first lst)) (list (first\
    \ lst) (first lst))]\n    [else (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None ",
  "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n    [(positive? (first\
    \ lst)) (list (first lst) (largest_smallest_integers (rest lst)))]\n    [(negative?\
    \ (first lst)) (list (none? 0) (first lst))]\n    [else (list (none? 0) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None)]\n    [(< (first lst) 0)\
    \ (list (first lst) None)]\n    [else (list (first lst) (smallest (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond\n  \
    \  [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list None None None)]\n    [(integer? (first lst)) (list (first lst) (first\
    \ lst) (first lst))]\n    [else (let ((a (first lst))\n              (b (second\
    \ lst)))\n            (cond\n              [(< a b) (list (first lst) a b)]\n\
    \              [(< b a) (list (first lst) b a)]\n              [(> a b) (list\
    \ (first lst) b a)]\n              [(> b a) (list (first lst) a b)]\n        \
    \      [else (list (first lst) a b)]))]))\n", "  (cond [(null? lst) (list (none?\
    \ 0) none?)] \n        [(< 0 (car lst)) (list (car lst) (cadr lst))] \n      \
    \  [else (list (car lst) (largest-smallest-integers (cdr lst)))]))\n", "  (cond\
    \ [(empty? lst) (list (none? none) (none? none))]\n        [(integer? (car lst))\
    \ (list (car lst) (car lst))]\n        [else (let ([a (largest_smallest_integers\
    \ (cdr lst))])\n                (let ([b (largest_smallest_integers (cdr a))]\n\
    \                      [smallest (car a)]\n                      [largest (car\
    \ b)])\n                  (cond [(< smallest largest) (list (car a) smallest (car\
    \ b))]\n                        [else (list (car a) largest (car b))])))]))\n",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond\n  \
    \  [(empty? lst) (list (none? 0) (none? 0))]\n    [(integer? (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (let ((a (first lst))\n              (b\
    \ (second lst)))\n            (cond\n              [(< a b) (list (first lst)\
    \ b)]\n              [(< b a) (list (first lst) a)]\n              [(> a b) (list\
    \ (first lst) a)]\n              [(> b a) (list (first lst) b)]\n            \
    \  [(= a b) (list (first lst) a)]\n              [(= b a) (list (first lst) b)]\n\
    \              [(= a b) (list (first lst) a)]\n              [(= b a) (list (first\
    \ lst) b)]\n              [(= a b) (list (first lst) a)]\n              [(= b\
    \ a) (list (first lst) b)]\n              [(= a b) (list (first lst) a)]\n   \
    \           [(= b a) (list (first lst) b)]\n              [(= a b) (list (first\
    \ lst) a)]\n              [(= b a) (list (first lst) b)]\n              [(= a\
    \ b) (list (first lst) a)]\n              [(= b a) (list (first lst) b)]\n   \
    \           [(= a b) (list (first lst) a)]\n              [(= b a) (list (first\
    \ lst) b)]\n              [(= a b) (list (first lst) a)]\n              [(= b\
    \ a) (list (first lst) b)]\n              [(= a b) (list (first lst) a)]\n   \
    \           [(= b a) (list (first lst) b)]\n              [(= a b) (list (first\
    \ lst) a)]\n              [(= b a) (list (first lst) b)]\n              [(= a\
    \ b) (list (first lst) a)]\n              [(= b a) (list (first lst) b)]\n   \
    \           [(= a b) (list (first lst) a)]\n              [(= b a) (list (first\
    \ lst) b)]\n              [(= a b) (list (first lst) a)]\n              [(= b\
    \ a) (list (first lst) b)]\n              [(= a b) (list (first lst) a)]\n   \
    \           [(= b a) (list (first lst) b)]\n              [(= a b) (list (first\
    \ lst) a)]\n              [(= b a) (list (first lst) b)]\n              [(= a\
    \ b) (list (first lst) a)]\n              [(", "  (let loop ((lst (sort lst <\
    \ < >)))\n    (cond ((null? lst) '())\n          ((null? (cdr lst)) (list (car\
    \ lst) (car lst)))\n          (else (loop (cdr lst)))))\n  )\n", "  (cond\n  \
    \  [(empty? lst) (list None None)]\n    [(integer? (car lst)) (list (car lst)\
    \ (smallest (cdr lst)))]\n    [else (list (max (car lst) (smallest (cdr lst)))\
    \ (max (car lst) (smallest (cdr lst))))]))\n", "  (let loop ((lst lst)\n     \
    \        (a (- (car lst) (car lst)))\n             (b (car lst)))\n    (cond ((null?\
    \ lst)\n           (list a b))\n          ((< a b)\n           (loop (cdr lst)\n\
    \                 (cond ((< a (car lst))\n                         (cons a b))\n\
    \                       ((> a (car lst))\n                         (cons b (car\
    \ lst)))\n                       (else\n                         (cons a (car\
    \ lst))))\n           (loop (cdr lst)\n                 (cond ((< b (car lst))\n\
    \                         (cons a b))\n                       ((> b (car lst))\n\
    \                         (cons b (car lst)))\n                       (else\n\
    \                         (cons a (car lst))))))))\n", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (cond\n    [(empty? lst)\
    \ (list None None None)]\n    [(< 0 (first lst)) (list (first lst) (first lst)\
    \ (first lst))]\n    [else (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None)]\n    [(< 0 (car\
    \ lst)) (list (car lst) None)]\n    [else (list (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond [(empty? lst) (list (none? none) (none? none))]\n\
    \        [(negative? (first lst)) (list (first lst) (first lst))]\n        [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n        [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) (list (none? none) (none? none))]\n\
    \    [(< (first lst) 0) (list (first lst) none)]\n    [else (list (first lst)\
    \ (first lst))]))\n", "  (cond\n    [(empty? lst) (list None None None)]\n   \
    \ [(> (first lst) 0) (list (first lst) None None)]\n    [else (list (first lst)\
    \ (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list\
    \ None None)]\n    [(> (first lst) 0) (list (first lst) (first lst))]\n    [else\
    \ (list (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list (none? lst) (none? lst))]\n    [(positive? (first lst))\
    \ (list (first lst) (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None ",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond\n  \
    \  [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list None None)]\n    [(number? (car lst)) (list (car lst) (smallest (cdr\
    \ lst)))]\n    [else (list (max (car lst) (smallest (cdr lst))) (max (car lst)\
    \ (smallest (cdr lst))))]))\n", "  (cond\n    [(empty? lst) (list (none? none)\
    \ (none? none))]\n    [(negative? (first lst)) (list (first lst) (first lst))]\n\
    \    [(positive? (first lst)) (list (first lst) (first lst))]\n    [else (list\
    \ (first lst) (first lst))]))\n", "  (cond\n    [(empty? lst) (list None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None ", "  (cond\n    [(empty? lst) (list (none))]\n    [(positive?\
    \ (first lst)) (list (first lst) (smallest (rest lst)))]\n    [(negative? (first\
    \ lst)) (list (first lst) (largest (rest lst)))]\n    [else (list (none) (first\
    \ lst))]\n  )\n)\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond [(null? lst) (list None None None)]\n        [(< 0 (car lst))\
    \ (list (car lst) (car lst) None)]\n        [else (list (car lst) (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None None)]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (list (max (first lst)\
    \ (first lst)) (min (first lst) (first lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ None None None)]\n    [(< (first lst) 0) (list (first lst) None None)]\n   \
    \ [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n", '  (cond
    [(null? lst) (list None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None ', "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (cond\n    [(empty? lst)\
    \ (list (none? none) (none? none))]\n    [(number? (car lst)) (list (car lst)\
    \ (smallest (cdr lst)))]\n    [else (list (none? none) (smallest (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) (list (none))]\n    [(< 0 (first lst)) (list (first\
    \ lst) (first lst))]\n    [else (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None)]\n    [(< 0 (first\
    \ lst)) (list (first lst) (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(null? lst) '()]\n        [(and (number? (car\
    \ lst)) (< 0 (car lst)))\n         (cons (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n        [(and (number? (car lst)) (> 0 (car lst)))\n         (cons\
    \ (car lst) (largest_smallest_integers (cdr lst)))]\n        [else (largest_smallest_integers\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list None None)]\n    [(< (first\
    \ lst) 0) (list (first lst) None)]\n    [else (list (first lst) (largest-smallest\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n\
    \    [(< (first lst) 0) (list (first lst) (none? 0))]\n    [else (list (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ None None None)]\n    [(> (first lst) 0) (list (first lst) None None)]\n   \
    \ [else (list (first lst) (largest_smallest_integers (rest lst))\n           \
    \       (smallest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (cond\n    [(empty? lst)\
    \ (list (none? 0) (none? 0))]\n    [(positive? (first lst)) (list (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [(negative? (first lst)) (list\
    \ (none? 0) (first lst))]\n    [else (list (none? 0) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None)]\n    [(> (first lst) 0)\
    \ (list (first lst) None)]\n    [else (list (first lst) (smallest (rest lst)))]))\n",
  "  (let loop ((lst lst)\n             (a #f) (b #f))\n    (cond\n      [(null? lst)\
    \ (values lst a b)]\n      [(< a (first lst)) (loop (rest lst) (first lst) (first\
    \ lst))]\n      [(< (first lst) b) (loop (rest lst) (first lst) b)]\n      [else\
    \ (loop (rest lst) a b)])))\n", "  (cond\n    [(empty? lst) (list (none? 0) (none?\
    \ 0))]\n    [(negative? (first lst)) (list (first lst) (first lst))]\n    [else\
    \ (list (first lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list (none? 0) (none? 0))]\n    [(< 0 (car lst)) (list (car\
    \ lst) (car lst))]\n    [else (list (car lst) (largest_smallest_integers (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None)]\n    [(< (first\
    \ lst) 0) (list (first lst) None None)]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst))\n                  (first lst))]))\n", '  (cond [(empty? lst) (list
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None ', "  (cond\n    [(empty? lst) (list None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None ", "  (cond\n    [(empty? lst) (list (none? nil) nil)]\n\
    \    [(negative? (first lst)) (list (first lst) (smallest (rest lst)))]\n    [else\
    \ (list (first lst) (smallest (rest lst)))]))\n", '  (cond [(empty? lst) (list
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None ', "  (cond [(null? lst) (list None None)]\n\
    \        [(< 0 (car lst)) (list (car lst) (car lst))]\n        [else (list (car\
    \ lst) (largest-smallest-integers (cdr lst)))]))\n", "  (cond [(empty? lst) (list\
    \ (none? lst) (none? lst))]\n        [(> (first lst) 0) (list (first lst) (first\
    \ lst))]\n        [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond\n  \
    \  [(empty? lst) (list None None None)]\n    [(< 0 (first lst)) (list (first lst)\
    \ (first lst) (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list (none? none) (none? none))]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [(negative? (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (list (first lst) (first lst))]\n  )\n\
    )\n", "  (cond\n    [(empty? lst) (list None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None ", '  (cond
    [(null? lst) (list None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None ', "  (cond\n    [(empty?\
    \ lst) (list None None)]\n    [(< 0 (car lst)) (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]\n    [else (list (largest_smallest_integers (cdr lst)) (car lst))]\n\
    \  )\n)\n", "  (cond [(null? lst) (list (none))]\n        [(< 0 (car lst)) (list\
    \ (car lst) (cadr lst))]\n        [else (list (car lst) (cadr lst) (largest_smallest_integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None None)]\n    [(< 0 (car lst))\
    \ (list (car lst) None None)]\n    [else (list (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (let loop ((lst lst)\n             (a #f)\n          \
    \   (b #f))\n    (cond\n      [(empty? lst) (list a b)]\n      [(< a (first lst))\
    \ (loop (rest lst) (first lst) a)]\n      [(< (first lst) b) (loop (rest lst)\
    \ a b)]\n      [else (loop (rest lst) a b)])))\n", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ (none))]\n    [(number? (car lst)) (list (car lst) (car lst))]\n    [else (let\
    \ ([a (largest_smallest_integers (cdr lst))]\n               [b smallest_integers\
    \ (cdr lst)])\n            (if (< (car a) b)\n                (list (car a) b)\n\
    \                (list (car a) (car b))))]))\n", "  (cond\n    [(empty? lst) (list\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None ", "  (cond\n    [(empty? lst) (list (none))]\n\
    \    [(> (first lst) 0) (list (first lst) (first lst))]\n    [else (list (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list (none? 0) (none? 0))]\n    [(> (first lst) 0) (list (first lst) (none?\
    \ 0))]\n    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) (list None None None)]\n    [(< 0 (car lst)) (list (car\
    \ lst) None None)]\n    [else (list (car lst) (largest-smallest-integers (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None ",
  "  (cond [(null? lst) (list (none))]\n        [(or (< 0 (car lst)) (< 0 (cdr lst)))\n\
    \         (list (car lst) (cdr lst))]\n        [else (list (car lst) (largest_smallest_integers\
    \ (cdr lst)))]))\n", "  (cond [(null? lst) (list (none))]\n        [(< 0 (car\
    \ lst)) (list (car lst) (smallest (cdr lst)))]\n        [else (list (largest (car\
    \ lst)) (smallest (cdr lst)))]))\n", "  (cond [(null? lst) (list (none))]\n  \
    \      [(< (car lst) 0) (list (car lst) (car lst))]\n        [else (list (car\
    \ lst) (largest-smallest-integers (cdr lst)))]))\n", "  (let loop ((lst lst)\n\
    \             (a (- (first lst)))\n             (b (first lst)))\n    (if (null?\
    \ lst)\n        (list a b)\n        (loop (rest lst)\n              (if (< a b)\n\
    \                  (cons a b)\n                  (cons b (- a)))\n           \
    \   (first lst)))))\n", "  (cond [(null? lst) (list (none? null?) none?)] \n \
    \       [(< 0 (car lst)) (list (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \        [else (list (largest_smallest_integers (cdr lst)) (car lst))]\n     \
    \   )\n  )\n", '  (cond [(empty? lst) (list None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None ',
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond [(empty?\
    \ lst) (list (none? none) (none? none))]\n        [(> (first lst) (nthcdr (rest\
    \ lst) 0))\n         (list (first lst) (nthcdr (rest lst) 0))]\n        [else\
    \ (list (first lst) (nthcdr (rest lst) 0))]))\n", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ (none? 0) (none? 0))]\n    [(negative? (first lst)) (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (list (largest_smallest_integers (rest lst)) (first\
    \ lst))]\n  )\n)\n", "  (cond\n    [(empty? lst) (list None None None)]\n    [(integer?\
    \ (car lst)) (list (car lst) (smallest (cdr lst)) (largest (cdr lst)))]\n    [else\
    \ (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty? lst) (list\
    \ (none? none) (none? none))]\n    [(< 0 (first lst)) (list (first lst) (none?\
    \ none))]\n    [else (list (first lst) (first lst))]\n  )\n)\n", "  (cond\n  \
    \  [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list None None None)]\n    [(null? (rest lst)) (list (first lst) None\
    \ None)]\n    [(< (first lst) (first (rest lst)))\n     (list (first lst) (first\
    \ (rest lst)) (first lst))]\n    [else (list (first lst) (first (rest lst)) (first\
    \ lst))]\n  ))\n", "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n \
    \   [(< 0 (car lst)) (list (car lst) (largest_smallest_integers (cdr lst)))]\n\
    \    [else (list (car lst) (largest_smallest_integers (cdr lst)))]))\n", "  (cond\n\
    \    [(empty? lst) (list None None None)]\n    [(< 0 (car lst)) (list (car lst)\
    \ (largest (cdr lst)))]\n    [else (list (car lst) (smallest (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n    [(> (first lst) 0)\
    \ (list (first lst) (none? 0))]\n    [(< (first lst) 0) (list (none? 0) (first\
    \ lst))]\n    [else (list (first lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond [(empty? lst) (list None None None)]\n        [(positive? (first lst))\n\
    \         (let ((a (first lst))\n              (b (rest lst)))\n           (cond\
    \ [(< a b) (list a b None)]\n                 [(< b a) (list a b None)]\n    \
    \             [(< a b) (list a b None)]\n                 [(< b a) (list a b None)]\n\
    \                 [(< a b) (list a b None)]\n                 [(< b a) (list a\
    \ b None)]\n                 [(< a b) (list a b None)]\n                 [(< b\
    \ a) (list a b None)]\n                 [(< a b) (list a b None)]\n          \
    \       [(< b a) (list a b None)]\n                 [(< a b) (list a b None)]\n\
    \                 [(< b a) (list a b None)]\n                 [(< a b) (list a\
    \ b None)]\n                 [(< b a) (list a b None)]\n                 [(< a\
    \ b) (list a b None)]\n                 [(< b a) (list a b None)]\n          \
    \       [(< a b) (list a b None)]\n                 [(< b a) (list a b None)]\n\
    \                 [(< a b) (list a b None)]\n                 [(< b a) (list a\
    \ b None)]\n                 [(< a b) (list a b None)]\n                 [(< b\
    \ a) (list a b None)]\n                 [(< a b) (list a b None)]\n          \
    \       [(< b a) (list a b None)]\n                 [(< a b) (list a b None)]\n\
    \                 [(< b a) (list a b None)]\n                 [(< a b) (list a\
    \ b None)]\n                 [(< b a) (list a b None)]\n                 [(< a\
    \ b) (list a b None)]\n                 [(< b a) (list a b None)]\n          \
    \       [(< a b) (list a b None)]\n                 [(< b a) (list a b None)]\n\
    \                 [(< a b) (list a b None)]\n                 [(< b a) (list a\
    \ b None)]\n                 [(< a b) (list a b None)]\n                 [(< b\
    \ a) (list a b None)]\n                 [(< a b) (list a b None)]\n          \
    \       [(< b a) (list a b None)]\n                 [(< a b) (list a b None)]\n\
    \                 [(< b a", "  (cond\n    [(empty? lst) (list None None None)]\n\
    \    [(< (first lst) 0) (list (first lst) None None)]\n    [else (list (first\
    \ lst) (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list None None None)]\n    [(< 0 (car lst)) (list (car lst) None None)]\n \
    \   [else (list (car lst) (largest-smallest-integers (cdr lst)))]))\n", "  (cond\
    \ [(empty? lst) (list (none? 0) (none? 0))]\n        [(> (first lst) 0) (list\
    \ (first lst) (none? 0))]\n        [else (list (first lst) (smallest (rest lst)))]))\n",
  "  (let loop ((lst lst)\n             (a #f)\n             (b #f))\n    (cond ((null?\
    \ lst)\n           (list a b))\n          ((< a (first lst))\n           (loop\
    \ (rest lst)\n                 (first lst)\n                 (first lst)))\n \
    \         ((< b (first lst))\n           (loop (rest lst)\n                 (first\
    \ lst)\n                 (first lst)))\n          (else\n           (loop (rest\
    \ lst)\n                 (first lst)\n                 (first lst))))))\n", " \
    \ (cond\n    [(empty? lst) (list None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None ", "  (cond\n\
    \    [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None ", "  (cond\n    [(empty? lst) (list None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None ", '  (cond [(empty? lst) (list None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None ', "  (cond [(null? lst) (list None None)]\n        [(< 0 (car lst))\
    \ (list (car lst) (cadr lst))]\n        [else (list (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond [(null? lst) (list (none? lst) (none? lst))]\n        [(< (car\
    \ lst) 0) (list (car lst) (car lst))]\n        [else (list (car lst) (largest-smallest-integers\
    \ (cdr lst)))]))\n", "  (cond [(null? lst) (list None None None)]\n        [(or\
    \ (< 0 (car lst)) (< 0 (cadr lst)))\n         (list (car lst) (cadr lst) None)]\n\
    \        [else (list (car lst) (cadr lst) (largest-smallest-integers (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) (list None None None)]\n    [(> (first lst) 0) (list\
    \ (first lst) None None)]\n    [(< (first lst) 0) (list (first lst) None None)]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (let loop ((lst lst)\n  \
    \           (a 0)\n             (b 0))\n    (cond\n      [(empty? lst) (list a\
    \ b)]\n      [(positive? (first lst)) (loop (rest lst) (+ a 1) b)]\n      [(negative?\
    \ (first lst)) (loop (rest lst) a (b + 1))]\n      [else (loop (rest lst) a b)]))))\n",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (cond [(empty?\
    \ lst) (list None None None)]\n        [(number? (car lst)) (list (car lst) (smallest\
    \ (cdr lst)) (largest (cdr lst)))]\n        [else (list (largest (car lst)) (smallest\
    \ (car lst)) (largest (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None ", "  (cond [(empty? lst) (list (none? 0) (none? 0))]\n\
    \        [(negative? (first lst)) (list (first lst) (second lst))]\n        [else\
    \ (list (first lst) (second (largest-smallest (rest lst))))]))\n", '  (cond [(empty?
    lst) (list None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None ', "  (cond\n    [(empty? lst) (list\
    \ (none))]\n    [(> (first lst) 0) (list (first lst) (second lst))]\n    [else\
    \ (list (first lst) (second lst) (largest_smallest_integers (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) (list (none? 0) (none? 0))]\n    [(positive? (first\
    \ lst)) (list (first lst) (largest_smallest_integers (rest lst)))]\n    [(negative?\
    \ (first lst)) (list (none? 0) (first lst))]\n    [else (list (none? 0) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None)]\n    [(< (first lst) (first\
    \ lst)) (list (first lst) (first lst))]\n    [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list (none? lst) (none? lst))]\n\
    \    [(< (first lst) (first lst)) (list (first lst) (first lst))]\n    [else (list\
    \ (first lst) (largest_smallest_integers (rest lst)))]))\n", '  (cond [(empty?
    lst) (list None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None ', "  (cond [(empty? lst) (list (none?\
    \ none) (none? none))]\n        [(integer? (car lst)) (list (car lst) (cadr lst))]\n\
    \        [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) (list (none? none) (none? none))]\n    [(positive? (first lst)) (list (first\
    \ lst) (first lst))]\n    [(negative? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (list (first lst) (first lst))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ lst) (list (none? 0) (none? 0))]\n    [(integer? (car lst)) (list (car lst)\
    \ (car lst))]\n    [else (largest_smallest_integers (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list None None None)]\n    [(> (first lst) 0) (list (first\
    \ lst) None None)]\n    [else (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None ",
  "  (cond\n    [(empty? lst) (list None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None ", "  (let loop\
    \ ((lst lst)\n             (a #f)\n             (b #f))\n    (cond ((null? lst)\n\
    \           (list a b))\n          ((< a (first lst))\n           (loop (rest\
    \ lst) (first lst) a))\n          ((< (first lst) (first lst))\n           (loop\
    \ (rest lst) (first lst) b))\n          (else\n           (loop (rest lst) a b))))))\n",
  "  (cond [(empty? lst) (list (none? 0) (none? 0))]\n        [(negative? (first lst))\
    \ (list (first lst) (first lst))]\n        [else (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]))\n", "  (cond [(empty? lst) (list (none? none) (none? none))]\n\
    \        [(integer? (car lst)) (list (car lst) (cadr lst))]\n        [else (list\
    \ (max (car lst) (largest_smallest_integers (cdr lst))) (min (car lst) (largest_smallest_integers\
    \ (cdr lst))))]))\n", "  (cond\n    [(empty? lst) (list None None None)]\n   \
    \ [(> (first lst) 0) (list (first lst) None None)]\n    [else (list (first lst)\
    \ (largest_smallest_integers (rest lst)))]))\n", "  (cond\n    [(empty? lst) (list\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None ", "  (cond\n    [(empty? lst) (list None None\
    \ None)]\n    [(< 0 (car lst)) (list (car lst) (largest_smallest_integers (cdr\
    \ lst)))]\n    [else (list (largest_smallest_integers (cdr lst)) (car lst) (largest_smallest_integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None)]\n    [(<\
    \ 0 (car lst)) (list (car lst) (largest_smallest_integers (cdr lst)))]\n    [else\
    \ (list (largest_smallest_integers (cdr lst)) (car lst) (largest_smallest_integers\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list None None None)]\n    [(integer? (car\
    \ lst)) (list (car lst) (smallest (cdr lst)) (largest (cdr lst)))]\n    [else\
    \ (list (largest (car lst)) (smallest (car lst)) (largest (cdr lst)))]))\n", " \
    \ (let loop ((lst lst)\n             (a #f)\n             (b #f))\n    (cond\n\
    \      [(empty? lst) (list a b)]\n      [(integer? (car lst)) (loop (cdr lst)\
    \ (max a (car lst)) (min b (car lst)))]\n      [else (loop (cdr lst) (max a b)\
    \ (car lst))]))))\n", "  (cond\n    [(empty? lst) (list None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None ", "  (cond\n    [(empty? lst) (list (none))]\n    [(< (first lst) 0) (list\
    \ (first lst) none)]\n    [else (list (first lst) (largest_smallest_integers (rest\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) (list None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None ",
  "  (cond [(null? lst) (list (none? lst) (none? lst))]\n        [(< (car lst) 0)\
    \ (list (car lst) (car lst))]\n        [else (list (car lst) (max (cdr lst) (smallest\
    \ (cdr lst))))]))\n", "  (cond\n    [(empty? lst) (list None None None)]\n   \
    \ [(null? (rest lst)) (list (first lst) None None)]\n    [else (let ([a (first\
    \ lst)\n                  b (largest_smallest_integers (rest lst))])\n       \
    \     (cond\n              [(< a b) (list a b None)]\n              [(< b a) (list\
    \ b a None)]\n              [(> a b) (list None a b)]\n              [(> b a)\
    \ (list None b a)]\n              [(= a b) (list a b None)]\n              [(=\
    \ b a) (list b a None)]\n              [(= a b) (list a b None)]\n           \
    \   [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n     \
    \         [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None)]\n              [(= a b) (list a b None)]\n\
    \              [(= b a) (list b a None", "  (cond\n    [(empty? lst) (list (none?\
    \ lst) (none? lst))]\n    [(number? (car lst)) (list (car lst) (car lst))]\n \
    \   [else (largest_smallest_integers (cdr lst))]))\n", "  (cond [(empty? lst)\
    \ (list (none? nil 0) (none? nil 0))]\n        [(negative? (first lst)) (list\
    \ (first lst) (none? nil 0))]\n        [(positive? (first lst)) (list (none? nil\
    \ 0) (first lst))]\n        [else (largest_smallest_integers (rest lst))]))\n",
  '  (cond [(empty? lst) (list None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None ', '  (cond [(empty?
    lst) (list None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None ', '  (cond [(empty? lst) (list None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None None None None None None None None None None None
    None None None None None None ', "  (cond\n    [(empty? lst) (list None None)]\n\
    \    [(< (first lst) 0) (list (first lst) None)]\n    [else (list (first lst)\
    \ (smallest (rest lst)))]))\n", "  (cond [(null? lst) (list (list None None))]\n\
    \        [(< (car lst) 0) (list (list (car lst) None) None)]\n        [else (list\
    \ (list (car lst) (cadr lst)) (largest-smallest-integers (cdr lst)))]))\n", " \
    \ (cond\n    [(empty? lst) (list None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None ", "  (cond\n\
    \    [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond [(empty?\
    \ lst) (list (none? none) (none? none))]\n        [(> (first lst) 0) (list (first\
    \ lst) (first lst))]\n        [else (list (first lst) (first lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None ", "  (cond\n    [(empty?\
    \ lst) (list None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None ", "  (cond\n    [(empty? lst)\
    \ (list None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None ", "  (cond\n    [(empty? lst) (list\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None None None None None None None None None None None\
    \ None None None None None None ", "  (cond\n    [(empty? lst) (list (none? lst)\
    \ (none? lst))]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [(negative? (first lst)) (list (none? lst) (first lst))]\n    [else (list\
    \ (first lst) (largest_smallest_integers (rest lst)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
