name: HumanEval_14_all_prefixes
language: racket
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define (all_prefixes\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string)))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string)))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string)))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))))\n", "  (cond [(empty? string) '()]\n\
    \        [(empty? (rest string)) (string->list (first string))]\n        [else\
    \ (cons (first string) (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string)) (string->list\
    \ string)]\n        [else (cons (first string) (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (cond [(empty?\
    \ string) '()]\n        [(empty? (rest string)) (string->list (car string))]\n\
    \        [else (cons (car string) (all_prefixes (rest string)))]))\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string)))))\n", "  (if (empty? string)\n      '()\n \
    \     (cons (substring string 0 (string-length string))\n            (all_prefixes\
    \ (string-append string '())))\n      )\n      )\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string))\
    \ (string->list string)]\n        [else (cons (first string) (all_prefixes (rest\
    \ string)))]))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (cond [(empty? string) '()]\n        [(equal? (first string) (string-ref string\
    \ 0)) (string-append (all_prefixes (substring string 1 -1)))]\n        [else (cons\
    \ (first string) (all_prefixes (substring string 1 -1)))]))\n", "  (if (empty?\
    \ string)\n      '()\n      (append (all_prefixes (rest string))\n           \
    \   (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n    \
    \  '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))) ;; #lang racket\n", "  (cond [(empty? string)\
    \ '()]\n        [(empty? (rest string)) (string->list string)]\n        [else\
    \ (cons (first string) (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (cond\
    \ [(empty? string) '()]\n        [(equal? (first string) (string-ref string 0))\
    \ (string-append (first string) (all_prefixes (rest string)))]\n        [else\
    \ (cons (first string) (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string))\
    \ (string->list (first string))]\n        [else (cons (first string)\n       \
    \             (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n  \
    \    '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (cond [(empty?\
    \ string) '()]\n        [(empty? (rest string)) (string->list (first string))]\n\
    \        [else (cons (first string) (all_prefixes (rest string)))]))\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string)))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string)) (string->list\
    \ string)]\n        [else (cons (first string) (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string)))))\n", "  (if (empty? string)\n      '()\n \
    \     (append (all_prefixes (rest string))\n              (list (first string)))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string))\
    \ (string->list (first string))]\n        [else (cons (first string) (all_prefixes\
    \ (rest string)))]))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string)))))\n", "  (if (empty? string)\n      '()\n \
    \     (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (cons (substring\
    \ string 0 (string-length string))\n            (all_prefixes (string-append string\
    \ '())))\n  )\n)\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string)))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (cond [(empty? string) '()]\n        [(empty? (rest string)) (string->list (first\
    \ string))]\n        [else (cons (first string) (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string)) (string->list\
    \ (first string))]\n        [else (cons (first string) (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (cond [(empty?\
    \ string) '()]\n        [(empty? (rest string)) (string->list string)]\n     \
    \   [else (cons (first string)\n                    (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (cond [(empty? string) '()]\n        [(empty? (rest string)) (string->list string)]\n\
    \        [else (cons (first string) (all_prefixes (rest string)))]))\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string))))))\n", "  (cond [(empty? string) '()]\n   \
    \     [(empty? (rest string)) (string->list (first string))]\n        [else (cons\
    \ (first string) (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string)))))\n", "  (cond [(empty? string)\
    \ '()]\n        [(equal? (first string) '()) (cons string '())]\n        [else\
    \ (cons (first string) (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (cons (substring string\
    \ 0 (string-length string))\n            (all_prefixes (string-append string '())))\n\
    \  )\n)\n", "  (if (empty? string)\n      '()\n      (cons (substring string 0\
    \ (string-length string))\n            (all_prefixes (string-append string '())))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string)))))\n", "  (cond [(empty? string) '()]\n \
    \       [(empty? (rest string)) (string->list string)]\n        [else (cons (first\
    \ string) (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (cond [(empty? string) '()]\n        [(empty?\
    \ (rest string)) (string->list (first string))]\n        [else (cons (first string)\
    \ (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n      '()\n   \
    \   (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string)) (string->list\
    \ (first string))]\n        [else (cons (first string) (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (cons (substring string 0 (string-length\
    \ string))\n            (all_prefixes (string-append string '())))))\n", "  (cond\
    \ [(empty? string) '()]\n        [(equal? (first string) (string-ref string 0))\
    \ '(first string)]\n        [else (cons (first string) (all_prefixes (string-rest\
    \ string)))]))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string)))))\n", "  (cond [(empty?\
    \ string) '()]\n        [(empty? (rest string)) (string->list (first string))]\n\
    \        [else (cons (first string)\n                    (all_prefixes (rest string)))]))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (cond [(empty? string) '()]\n        [(empty?\
    \ (rest string)) (string->list (first string))]\n        [else (cons (first string)\
    \ (all_prefixes (rest string)))]))\n", "  (if (empty? string)\n      '()\n   \
    \   (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (cond [(empty? string) '()]\n        [(equal? (first\
    \ string) (string-ref string 0)) (string-append (first string) (string-ref string\
    \ 1))]\n        [else (cons (first string) (all_prefixes (string-append (first\
    \ string) (string-ref string 1)))]))\n)\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (cons (substring\
    \ string 0 (string-length string))\n            (all_prefixes (string-append string\
    \ '())))\n  )\n)\n", "  (cond [(empty? string) '()]\n        [(empty? (rest string))\
    \ (string->list string)]\n        [else (cons (first string) (all_prefixes (rest\
    \ string)))]))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (cons (substring string 0 (string-length string))\n        \
    \    (all_prefixes (string-append string '())))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string)))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string)))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string))))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string)))))\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append\
    \ (all_prefixes (rest string))\n              (list (first string))))) ;; #lang\
    \ racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string))))) ;; #lang racket\n", "  (if\
    \ (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n   \
    \           (list (first string)))))\n", "  (if (empty? string)\n      '()\n \
    \     (append (all_prefixes (rest string))\n              (list (first string)))))\
    \ ;; #lang racket\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string)) (list string))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
