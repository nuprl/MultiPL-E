name: HumanEval_44_change_base
language: racket
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  ;; >>> change_base(8, 3)\n;; '22'\n;; >>> change_base(8, 2)\n;; '1000'\n;; >>> change_base(7,\
  \ 2)\n;; '111'\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x (- base 1))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (- base 10))]))\n",
  "  (if (< base 10)\n      (* base (+ x 1))\n      (* base x)))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))]\n  \
    \  [else (number->string x (- base 10))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(= base 1) (number->string\
    \ x)]\n       [(= base 2) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(= base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(= base 4) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(= base 5) (string-append\
    \ (number->string x) (number->string base))\n              (cond\n           \
    \    [(= base 6) (string-append (number->string x) (number->string base))\n  \
    \              (cond\n                 [(= base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(= base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(= base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (number->string x)]\n     \
    \                [else (number->string x)]\n                     )]\n        \
    \           [else (number->string x)]\n                   )]\n               \
    \  [else (number->string x)]\n                 )]\n               [else (number->string\
    \ x)]\n               )]\n             [else (number->string x)]\n           \
    \  )]\n           [else (number->string x)]\n           )]\n         [else (number->string\
    \ x)]\n         )]\n       [else (number->string x)]\n       )]\n     [(= base\
    \ 10) (string-append (number->string x) (number->string base))\n      (number->string\
    \ x)]\n    [else (number->string x)]\n    )])\n  )\n", "  (if (< base 10)\n  \
    \    (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (cond [(< base 10)\n         (string-append (number->string x) (number->string\
    \ (expt x base)))]\n        [else\n         (string-append (number->string x)\
    \ (number->string (expt x base)))]\n        [(< base 10)\n         (string-append\
    \ (number->string x) (number->string base))]))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient (- x base) base))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (number->string x (- base 10))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 2) (string-append\
    \ (number->string x) (number->string base) (number->string x))\n        (cond\n\
    \         [(< base 3) (string-append (number->string x) (number->string base)\
    \ (number->string x) (number->string x))\n          (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 4) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 5) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 6) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 7) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 8) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 9) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n            [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \            (cond\n                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                   [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                                                    (cond\n                 \
    \                                                    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                      (cond\n                               \
    \                                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                         (cond\n                                            \
    \                               [(", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (cond\
    \ [(< base 10) (string-append (number->string x) (number->string base))]\n   \
    \     [else (cond [(= base 10) (string-append (number->string x) (number->string\
    \ base))]\n                  [(< base 10) (string-append (number->string x) (number->string\
    \ (- base 10)))]\n                  [else (cond [(= base 10) (string-append (number->string\
    \ x) (number->string base))]\n                            [(< base 10) (string-append\
    \ (number->string x) (number->string (- base 10)))]\n                        \
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \                            [(< base 10) (string-append (number->string x) (number->string\
    \ (+ base 10)))]\n                            [(< base 10) (string-append (number->string\
    \ x) (number->string (+ base 10)))]\n                            [(< base 10)\
    \ (string-append (number->string x) (number->string (- base 10)))]\n         \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ (- base 10)))]\n                            [(< base 10) (string-append (number->string\
    \ x) (number->string (+ base 10)))]\n                            [(< base 10)\
    \ (string-append (number->string x) (number->string (+ base 10)))]\n         \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ (- base 10)))]\n                            [(< base 10) (string-append (number->string\
    \ x) (number->string (- base 10)))]\n                            [(< base 10)\
    \ (string-append (number->string x) (number->string (+ base 10)))]\n         \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ (+ base 10)))]\n                            [(< base 10) (string-append (number->string\
    \ x) (number->string (- base 10)))]\n                            [(< base 10)\
    \ (string-append (number->string x) (number->string (- base 10)))]\n         \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ (+ base 10)))]\n                            [(< base 10) (string-append (number->string\
    \ x) (number->string (+ base 10)))]\n                            [(< base 10)\
    \ (string-append (number->string x) (number->string (- base 10)))]\n         \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ (- base 10)))]\n                            [(< base 10) (string-", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(= base 1) (number->string x)\n        (number->string base)]\n\
    \       [(= base 2) (string-append (number->string x) (number->string base))\n\
    \        (number->string base)]\n       [(= base 3) (string-append (number->string\
    \ x) (number->string base))\n        (number->string base)]\n       [(= base 4)\
    \ (string-append (number->string x) (number->string base))\n        (number->string\
    \ base)]\n       [(= base 5) (string-append (number->string x) (number->string\
    \ base))\n        (number->string base)]\n       [(= base 6) (string-append (number->string\
    \ x) (number->string base))\n        (number->string base)]\n       [(= base 7)\
    \ (string-append (number->string x) (number->string base))\n        (number->string\
    \ base)]\n       [(= base 8) (string-append (number->string x) (number->string\
    \ base))\n        (number->string base)]\n       [(= base 9) (string-append (number->string\
    \ x) (number->string base))\n        (number->string base)]\n       [(= base 10)\
    \ (string-append (number->string x) (number->string base))\n        (number->string\
    \ base)]\n       [(= base 11) (string-append (number->string x) (number->string\
    \ base))\n        (number->string base)]\n       [(= base 12) (string-append (number->string\
    \ x) (number->string base))\n        (number->string base)]\n       [(= base 13)\
    \ (string-append (number->string x) (number->string base))\n        (number->string\
    \ base)]\n       [(= base 14) (string-append (number->string x) (number->string\
    \ base))\n        (number->string base)]\n       [(= base 15) (string-append (number->string\
    \ x) (number->string base))\n        (number->string base)]\n       [(= base 16)\
    \ (string-append (number->string x) (number->string base))\n        (number->string\
    \ base)]\n       [(= base 17) (string-append (number->string x) (number->string\
    \ base))\n        (number->string base)]\n       [(= base 18) (string-append (number->string\
    \ x) (number->string base))\n        (number->string base)]\n", "  (if (< base\
    \ 10)\n      (number->string x)\n      (number->string (quotient x base) (quotient\
    \ (- x base) base))))\n", "  (if (< base 10)\n      (* base (+ x 1))\n      (quotient\
    \ x base)))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n    \
    \  (number->string x (- base 1))))\n", "  (if (< base 10)\n      (+ x (* base\
    \ base))\n      (+ x (* base (- base 10))))) ;; #lang racket\n", "  (if (< base\
    \ 10)\n      (* base (+ x 1))\n      (quotient x base)))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n     (cond\n\
    \       [(= base 10) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n            [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n             (cond\n              [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                             (cond\n               \
    \                               [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                                               (cond\n\
    \                                                 [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                  (cond\n                                                   [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \                                             (cond\n                        \
    \                             [(= base 10) (string-append (", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (quotient x base) (quotient x\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n  \
    \    (number->string x (- base base))))\n", "  (if (< base 10)\n      (* base\
    \ (+ x 1))\n      (* base x)))\n", "  (cond\n    [(< base 10) (* base x)]\n  \
    \  [else (change_base (/ x base) (- base 1))]))\n", "  (if (< base 10)\n     \
    \ (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (* base x)\n      (quotient x base)))\n", "  (if (< base\
    \ 10)\n      (* base (+ x 1))\n      (* base x)))\n", "  (if (< base 10)\n   \
    \   (number->string x)\n      (number->string (quotient x base) (quotient x base))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(= base 10) (string-append (number->string x) (number->string base))\n   \
    \     (cond\n         [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n            [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n             (cond\n              [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                             (cond\n               \
    \                               [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                                               (cond\n\
    \                                                 [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \ [(< base 10) (string-append (number->string x) (number->string base))\n    \
    \                                                 (cond\n                    \
    \                                 [(< base 10) (string-append (", "  (if (< base\
    \ 10)\n      (number->string x)\n      (number->string (quotient x base) (quotient\
    \ (- x base) base))))\n", "  (if (< base 10)\n      (number->string x (+ base\
    \ base))\n      (number->string x (- base base))))\n", "  (cond [(< base 10)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [(= base 10)\n         (string-append (number->string x) (number->string\
    \ base))\n         ]\n        [else\n         (number->string x (- base 10))\n\
    \         (number->string x (- base 10))\n         ]\n        ))\n", "  (if (<\
    \ base 10)\n      (number->string x (+ base base))\n      (number->string x (-\
    \ base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(=\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \     (cond\n              [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \              (cond\n                       [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                            (cond\n\
    \                             [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                              (cond\n                              \
    \ [(= base 10) (string-append (number->string x) (number->string base))\n    \
    \                            (cond\n                                 [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                     (cond\n                                   [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \    (cond\n                                     [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                      (cond\n   \
    \                                    [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                        (cond\n \
    \                                        [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                          (cond\n\
    \                                           [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                             (cond\n\
    \                                              [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \ [(< base 10) (string-append (number->string x) (number->string base))\n    \
    \                                                (cond\n                     \
    \                                [(= base 10) (string-append (", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \  (cond\n       [(= base 1) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(= base 2) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(= base 3) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(= base 4) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(= base 5) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(=\
    \ base 6) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(= base 7) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(= base 8) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(= base 9) (string-append (number->string x) (number->string base))\n  \
    \                                '0']\n                                 [else\
    \ '0'])]\n                             [else '0'])]\n                        \
    \ [else '0'])]\n                     [else '0'])]\n                 [else '0'])]\n\
    \              [else '0'])]\n             [else '0'])]\n          [else '0'])]\n\
    \         [else '0'])]\n       [else '0'])]\n     [else '0'])])\n", "  (cond [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \ (< base 36) (number->string x)\n         (< base 62) (number->string x)\n  \
    \       (< base 10) (number->string x)\n         (< base 36) (number->string x)\n\
    \         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n         (< base 62) (number->string\
    \ x)\n         (< base 10) (number->string x)\n         (< base 36) (number->string\
    \ x)\n         (< base 62) (number->string x)\n         (< base 10) (number->string\
    \ x)\n         (< base 36) (number->string x)\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(zero?\
    \ x) (string x)]\n    [(zero? (remainder x base)) (string x)]\n    [else (change_base\
    \ (remainder x base) (+ base base))]))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (- base 10))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string (quotient x base) (quotient (- x base) base))))\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 1) (number->string x)]\n       [(= base 2) (string-append\
    \ '0x x)]\n       [(= base 3) (string-append '0x x)]\n       [(= base 4) (string-append\
    \ '0x x)]\n       [(= base 5) (string-append '0x x)]\n       [(= base 6) (string-append\
    \ '0x x)]\n       [(= base 7) (string-append '0x x)]\n       [(= base 8) (string-append\
    \ '0x x)]\n       [(= base 9) (string-append '0x x)]\n       [(= base 10) (string-append\
    \ '0x x)]\n       [(= base 11) (string-append '0x x)]\n       [(= base 12) (string-append\
    \ '0x x)]\n       [(= base 13) (string-append '0x x)]\n       [(= base 14) (string-append\
    \ '0x x)]\n       [(= base 15) (string-append '0x x)]\n       [(= base 16) (string-append\
    \ '0x x)]\n       [(= base 17) (string-append '0x x)]\n       [(= base 18) (string-append\
    \ '0x x)]\n       [(= base 19) (string-append '0x x)]\n       [(= base 20) (string-append\
    \ '0x x)]\n       [(= base 21) (string-append '0x x)]\n       [(= base 22) (string-append\
    \ '0x x)]\n       [(= base 23) (string-append '0x x)]\n       [(= base 24) (string-append\
    \ '0x x)]\n       [(= base 25) (string-append '0x x)]\n       [(= base 26) (string-append\
    \ '0x x)]\n       [(= base 27) (string-append '0x x)]\n       [(= base 28) (string-append\
    \ '0x x)]\n       [(= base 29) (string-append '0x x)]\n       [(= base 30) (string-append\
    \ '0x x)]\n       [(= base 31) (string-append '0x x)]\n       [(= base 32) (string-append\
    \ '0x x)]\n       [(= base 33) (string-append '0x x)]\n       [(", "  (cond [(<\
    \ base 10)\n         (number->string x)]\n        [else\n         (string-append\
    \ (number->string x) (number->string (quotient x base)))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(= base 1) (number->string x)\n        (number->string\
    \ base)]\n       [(= base 2) (number->string x (/ x 2))\n        (number->string\
    \ base)]\n       [(= base 3) (number->string x (/ x 3))\n        (number->string\
    \ base)]\n       [(= base 4) (number->string x (/ x 4))\n        (number->string\
    \ base)]\n       [(= base 5) (number->string x (/ x 5))\n        (number->string\
    \ base)]\n       [(= base 6) (number->string x (/ x 6))\n        (number->string\
    \ base)]\n       [(= base 7) (number->string x (/ x 7))\n        (number->string\
    \ base)]\n       [(= base 8) (number->string x (/ x 8))\n        (number->string\
    \ base)]\n       [(= base 9) (number->string x (/ x 9))\n        (number->string\
    \ base)]\n       [(= base 10) (number->string x (/ x 10))\n        (number->string\
    \ base)]\n       [(= base 11) (number->string x (/ x 11))\n        (number->string\
    \ base)]\n       [(= base 12) (number->string x (/ x 12))\n        (number->string\
    \ base)]\n       [(= base 13) (number->string x (/ x 13))\n        (number->string\
    \ base)]\n       [(= base 14) (number->string x (/ x 14))\n        (number->string\
    \ base)]\n       [(= base 15) (number->string x (/ x 15))\n        (number->string\
    \ base)]\n       [(= base 16) (number->string x (/ x 16))\n        (number->string\
    \ base)]\n       [(= base 17) (number->string x (/ x 17))\n        (number->string\
    \ base)]\n       [(= base 18) (number->string x (/ x 18))\n        (number->string\
    \ base)]\n       [(= base 19) (number->string x (/ x 19))\n        (number->string\
    \ base)]\n       [(= base 20) (number->string x (/ x 20))\n        (number->string\
    \ base)]\n       [(= base 21) (number->string x (/ x 21))\n        (number->string\
    \ base)]\n       [(= base 22) (number->string x (/ x 22))\n        (", "  (cond\n\
    \    [(< base 10) (number->string x (/ base 10))]\n    [else (number->string x\
    \ (* base 10))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(<\
    \ base 4) (string-append (number->string x) (number->string base))\n         \
    \    (cond\n              [(< base 5) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                 '()\n                                 ])\n \
    \                            ])\n                         ])\n               \
    \      ])\n                 ])\n              ])\n             ])\n          ])\n\
    \        ])\n       ])\n     ])\n   ])\n)\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x)\n      (number->string (quotient x base) (quotient\
    \ (- x base) base))))\n", "  (if (< base 10)\n      (number->string x)\n     \
    \ (number->string x (- base 10))))\n", "  (cond [(< base 10)\n         (number->string\
    \ x)]\n        [(= base 0)\n         (string->number (string->list x))]\n    \
    \    [else\n         (string->number (string->list (change_base (/ x base) base)))]))\n",
  "  (if (< base 10)\n      (* base x)\n      (quotient x base)))\n", "  (cond\n \
    \   [(< base 10) (string-append (number->string x) (number->string base))\n  \
    \   (cond\n       [(= base 1) (number->string x)\n        (number->string base)]\n\
    \       [(= base 2) (number->string x)\n        (number->string base) (number->string\
    \ base)]\n       [(= base 3) (number->string x)\n        (number->string base)\
    \ (number->string base) (number->string base)]\n       [(= base 4) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base)]\n       [(= base 5) (number->string x)\n        (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base)]\n       [(= base 6) (number->string x)\n        (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base)]\n       [(= base 7) (number->string x)\n      \
    \  (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base)]\n \
    \      [(= base 8) (number->string x)\n        (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base)]\n       [(= base 9) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base)]\n       [(= base 10) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base)]\n \
    \      [(= base 11) (number->string x)\n        (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base)]\n       [(= base 12) (number->string x)\n     \
    \   (number", "  (if (< base 10)\n      (number->string x (+ base base))\n   \
    \   (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(= base 1) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n            [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \            (cond\n                 [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                     [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                                                        (cond\n             \
    \                                                        [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                     (cond\n                                \
    \                                     [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                     (cond\n                                                \
    \                     ", "  (cond [(< base 10)\n         (number->string x)]\n\
    \        [else\n         (string->number ((number->string x) base)\n         \
    \              (number->string base))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (- base 10))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient (- x base) base))))\n",
  "  (cond\n    [(< base 10) (number->string x)]\n    [else (number->string (quotient\
    \ x base) (+ base base))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n          (cond\n\
    \            [(< base 10) (string-append (number->string x) (number->string base))\n\
    \             (cond\n              [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n               (cond\n                 [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \  (cond\n                     [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                       (cond\n                     \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                          (cond\n                             [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                   (cond\n      \
    \                               [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                                       (cond\n     \
    \                                    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \   [(< base 10) (string-append (number->string x) (number->string base))\n  \
    \                                                     (cond\n                \
    \                                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \           (cond\n                                                          \
    \   [(< base 10) (string-append (number->string x) (number->string base))\n  \
    \                                                             (cond\n        \
    \                                                        [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                 (cond\n                                    \
    \                                [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                                                   \
    \                  (cond\n                                                   \
    \                     [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \      (cond\n                                                               \
    \              [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \          (cond\n                                                           \
    \                      [(", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 1) (number->string x)\n\
    \        (number->string base)]\n       [(= base 2) (number->string x)\n     \
    \   (number->string base) (number->string base)]\n       [(= base 3) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)]\n\
    \       [(= base 4) (number->string x)\n        (number->string base) (number->string\
    \ base) (number->string base) (number->string base)]\n       [(= base 5) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base) (number->string base)]\n       [(= base 6) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base)]\n       [(=\
    \ base 7) (number->string x)\n        (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base)]\n       [(= base 8) (number->string x)\n      \
    \  (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base)]\n       [(= base 9) (number->string x)\n        (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base)]\n       [(= base 10) (number->string x)\n        (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base)]\n       [(= base 11) (number->string x)\n     \
    \   (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base)]\n \
    \      [(= base 12) (number->string x)\n        (number", "  (cond [(< base 10)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [(= base 10)\n         (number->string x)\n         ]\n        [else\n\
    \         (number->string x) (number->string base)\n         ]))\n", "  (if (<\
    \ base 10)\n      (number->string x (/ base 10))\n      (number->string x (- base\
    \ 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n            [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \            (cond\n                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                    [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                                                        (cond\n             \
    \                                                           [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                         (cond\n                            \
    \                                                 [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                             (cond\n                        \
    \                                                         [(", "  (cond [(< base\
    \ 10)\n         (string-append (number->string x) (number->string (expt x base)))]\n\
    \        [else\n         (string-append (number->string x) (number->string (expt\
    \ x base)))\n         (number->string x)]))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (if\
    \ (< base 10)\n      (number->string x (+ base base))\n      (number->string x\
    \ (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (- base 10))]))\n",
  "  (cond [(< base 10)\n         (string-append (number->string x) (number->string\
    \ (expt x base)))]\n        [else\n         (string-append (number->string x)\
    \ (number->string (expt x base) (number->string (expt base base))))]))\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base) (number->string x))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x))\n          (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 4) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 5) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 6) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 7) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 8) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 9) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 11) (string-append (number->string ", "  (cond [(< base 10)\n         (string-append\
    \ (number->string x) (number->string base))\n         ]\n        [(= base 10)\n\
    \         (number->string x)\n         ]\n        [else\n         (number->string\
    \ x (quotient x base))\n         (number->string (quotient x base) (quotient x\
    \ base))\n         ]\n        ))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (if\
    \ (< base 10)\n      (number->string x (+ base base))\n      (number->string x\
    \ (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (number->string x (- base 10))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (if\
    \ (< base 10)\n      (+ x (* base base))\n      (if (= base 2)\n          (+ x\
    \ (* base base))\n          (+ x (* base base)))))\n", "  (if (< base 10)\n  \
    \    (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string\n       (string->number\
    \ (number->string x (- base 10)))\n       (string->number (number->string x (+\
    \ base 10))))))\n", "  (if (< base 10)\n      (* base (+ x 1))\n      (quotient\
    \ x base)))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (- base 1))]))\n", "  (cond\n   \
    \ [(< base 10) (string-append (number->string x) (number->string base))]\n   \
    \ [else (change_base (/ x base) (- base 10))]))\n", "  (if (< base 10)\n     \
    \ (* base x)\n      (quotient x base)))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n     (cond\n \
    \      [(< base 10) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n          (string-append (number->string x) (number->string base))\n\
    \          (cond\n            [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n             (string-append (number->string x) (number->string base))\n\
    \             (cond\n              [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n               (string-append (number->string x)\
    \ (number->string base))\n               (cond\n                 [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \  (string-append (number->string x) (number->string base))\n                \
    \   (cond\n                     [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                       (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                           (string-append (number->string x) (number->string\
    \ base))\n                           (cond\n                             [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                  (string-append (number->string x) (number->string base))\n\
    \                               (cond\n                                 [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                      (string-append (number->string x) (number->string base))\n\
    \                                   (cond\n                                  \
    \   [(< base 10) (string-append (number->string x) (number->string base))\n  \
    \                                     (string-append (number->string x) (number->string\
    \ base))\n                                       (cond\n                     \
    \                    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                           (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                               (string-append\
    \ (number->string x) (number->string base))\n                                \
    \               (cond\n                                                 [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                                      (string-append (", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n     (cond\n \
    \      [(< base 2) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n            [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n             (cond\n              [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 6) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 8) (string-append (number->string x) (number->string base))\n\
    \                           (cond\n                             [(< base 9) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                  '()\n         \
    \                        ])\n                             ])\n               \
    \          ])\n                     ])\n                 ])\n              ])\n\
    \             ])\n          ])\n        ])\n       ])\n     ])\n   ])\n)\n", " \
    \ (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (number->string x (- base 10))]))\n", "  (cond [(< base 10)\n     \
    \    (number->string x)]\n        [else\n         (string->number ((number->string\
    \ x) base)\n                         (number->string base))]))\n", "  (cond [(<\
    \ base 10)\n         (string-append (number->string x) (number->string base))\n\
    \         ]\n        [(< base 2)\n         (string-append (number->string x) (number->string\
    \ base))\n         ]\n        [else\n         (string-append (number->string x)\
    \ (number->string base) (number->string base))\n         ]\n        ))\n", " \
    \ (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient (- x base) base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))]\n  \
    \  [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n     \
    \ (* base (+ x 1))\n      (* base x)))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n          (cond\n\
    \            [(< base 10) (string-append (number->string x) (number->string base))\n\
    \             (cond\n              [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n               (cond\n                 [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \  (cond\n                     [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                       (cond\n                     \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                          (cond\n                             [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                   (cond\n      \
    \                               [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                                       (cond\n     \
    \                                    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \   [(< base 10) (string-append (number->string x) (number->string base))\n  \
    \                                                     (cond\n                \
    \                                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \           (cond\n                                                          \
    \   [(< base 10) (string-append (number->string x) (number->string base))\n  \
    \                                                             (cond\n        \
    \                                                        [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                 (cond\n                                    \
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                     (cond\n                                                \
    \                     [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \  (cond\n                                                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                                                  (cond\n   \
    \                                                                  ", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 5) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                 '()\n                                 ]\n  \
    \                               [else (string-append (number->string x) (number->string\
    \ base))\n                                  '()]\n                           \
    \      )\n                                 ]\n                               \
    \  [else (string-append (number->string x) (number->string base))\n          \
    \                        '()]\n                                 )\n          \
    \                       ]\n                                 [else (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()]\n                                 )\n                                \
    \ ]\n                                 [else (string-append (number->string x)\
    \ (number->string base))\n                                  '()]\n           \
    \                      )\n                                 ]\n               \
    \                  [else (string-append (number->string x) (number->string base))\n\
    \                                  '()]\n                                 )\n\
    \                                 ]\n                                 [else (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()]\n                                 )\n                                \
    \ ]\n                                 [else (string-append (number->string x)\
    \ (number->string base))\n                                  '()]\n           \
    \                      )\n                                 ]\n               \
    \                  [else (string-append (number->string x) (number->string base))\n\
    \                                  '()]\n                                 )\n\
    \                                 ]\n                                 [else (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()]\n                                 )\n                                \
    \ ]\n                                 [else (string-append (number->string x)\
    \ (number->string base))\n                                  '()]\n           \
    \                      )\n                                 ]", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 1) (number->string x)\n        (cond\n         [(<\
    \ x 0) (number->string 0)\n          (< x 1) (string-append \"0\" (number->string\
    \ x))]\n         [else (string-append \"1\" (number->string x))])]\n       [(=\
    \ base 2) (number->string x)\n        (cond\n         [(< x 0) (number->string\
    \ 0)\n          [(< x 1) (string-append \"00\" (number->string x))]\n        \
    \ [else (string-append \"10\" (number->string x))])]\n       [(= base 3) (number->string\
    \ x)\n        (cond\n         [(< x 0) (number->string 0)\n          [(< x 1)\
    \ (string-append \"000\" (number->string x))]\n         [else (string-append \"\
    100\" (number->string x))])]\n       [(= base 4) (number->string x)\n        (cond\n\
    \         [(< x 0) (number->string 0)\n          [(< x 1) (string-append \"0000\"\
    \ (number->string x))]\n         [else (string-append \"1000\" (number->string\
    \ x))])]\n       [(= base 5) (number->string x)\n        (cond\n         [(< x\
    \ 0) (number->string 0)\n          [(< x 1) (string-append \"00000\" (number->string\
    \ x))]\n         [else (string-append \"10000\" (number->string x))])]\n     \
    \  [(= base 6) (number->string x)\n        (cond\n         [(< x 0) (number->string\
    \ 0)\n          [(< x 1) (string-append \"000000\" (number->string x))]\n    \
    \     [else (string-append \"100000\" (number->string x))])]\n       [(= base\
    \ 7) (number->string x)\n        (cond\n         [(< x 0) (number->string 0)\n\
    \          [(< x 1) (string-append \"0000000\" (number->string x))]\n        \
    \ [else (string-append \"1000000\" (number->string x))])]\n       [(= base 8)\
    \ (number->string x)\n        (cond\n         [(< x 0) (number->string 0)\n  \
    \        [(< x 1) (string-append \"00000000\" (number->string x))]\n         [else\
    \ (string-append \"10000000\" (number->string x))])]\n       [(= base 9) (number->string\
    \ x)\n        (cond\n         [(< x 0) (number", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (- base 10))]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))\n    )\n  )\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (- base 10))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n            [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \            (cond\n                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                   [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                                                    (cond\n                 \
    \                                                    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                      (cond\n                               \
    \                                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                         (cond\n                                            \
    \                               [(", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (* base (+ x 1))\n      (if (= base 2)\n          (+ x 1)\n     \
    \     (+ x base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (- base 10))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient (- x base) base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient x base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (if\
    \ (< base 10)\n      (number->string x (+ base base))\n      (number->string x\
    \ (- base base))))\n", "  (cond [(< base 10)\n         (string-append (number->string\
    \ x) (number->string base))\n         ]\n        [(< base 2)\n         (string-append\
    \ (number->string x) (number->string base))\n         ]\n        [else\n     \
    \    (number->string x (- base 10))\n         ]\n        ))\n", "  (cond [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n        (else\
    \ (change_base (/ x base) (- base 10)))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (number->string x (- base\
    \ 10))]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n           [(< base\
    \ 4) (string-append (number->string x) (number->string base))\n            (cond\n\
    \             [(< base 5) (string-append (number->string x) (number->string base))\n\
    \              (cond\n               [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                (cond\n                 [(< base\
    \ 7) (string-append (number->string x) (number->string base))\n              \
    \    (cond\n                   [(< base 8) (string-append (number->string x) (number->string\
    \ base))\n                    (cond\n                     [(< base 9) (string-append\
    \ (number->string x) (number->string base))\n                      (cond\n   \
    \                    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                        (number->string x)]\n                      [else\
    \ (number->string x)]\n                      )]\n                    [else (number->string\
    \ x)]\n                    )]\n                 [else (number->string x)]\n  \
    \               )]\n              [else (number->string x)]\n              )]\n\
    \            [else (number->string x)]\n            [else (number->string x)]\n\
    \            )]\n         [else (number->string x)]\n         )]\n       [else\
    \ (number->string x)]\n       )]\n     [else (number->string x)]\n     )]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(= x 0) '0]\n         [(= x 1) '1]\n      \
    \   [(= x 2) '2]\n         [(= x 3) '3]\n         [(= x 4) '4]\n         [(= x\
    \ 5) '5]\n         [(= x 6) '6]\n         [(= x 7) '7]\n         [(= x 8) '8]\n\
    \         [(= x 9) '9]\n         [(= x 10) '10]\n         [(= x 11) '11]\n   \
    \      [(= x 12) '12]\n         [(= x 13) '13]\n         [(= x 14) '14]\n    \
    \     [(= x 15) '15]\n         [(= x 16) '16]\n         [(= x 17) '17]\n     \
    \    [(= x 18) '18]\n         [(= x 19) '19]\n         [(= x 20) '20]\n      \
    \   [(= x 21) '21]\n         [(= x 22) '22]\n         [(= x 23) '23]\n       \
    \  [(= x 24) '24]\n         [(= x 25) '25]\n         [(= x 26) '26]\n        \
    \ [(= x 27) '27]\n         [(= x 28) '28]\n         [(= x 29) '29]\n         [(=\
    \ x 30) '30]\n         [(= x 31) '31]\n         [(= x 32) '32]\n         [(= x\
    \ 33) '33]\n         [(= x 34) '34]\n         [(= x 35) '35]\n         [(= x 36)\
    \ '36]\n         [(= x 37) '37]\n         [(= x 38) '38]\n         [(= x 39) '39]\n\
    \         [(= x 40) '40]\n         [(= x 41) '41]\n         [(= x 42) '42]\n \
    \        [(= x 43) '43]\n         [(= x 44) '44]\n         [(= x 45) '45]\n  \
    \       [(= x 46) '46]\n         [(= x 47) '47]\n         [(= x ", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n            [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \            (cond\n                 [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                   [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                                                    (cond\n                 \
    \                                                    [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                      (cond\n                               \
    \                                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                         (cond\n                                            \
    \                               [(", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(< x 10)\
    \ (string-append (number->string x) (number->string base))\n          (cond\n\
    \            [(< x 100) (string-append (number->string x) (number->string base))\n\
    \             (cond\n              [(< x 1000) (string-append (number->string\
    \ x) (number->string base))\n               (cond\n                 [(< x 10000)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \  (cond\n                     [(< x 100000) (string-append (number->string x)\
    \ (number->string base))\n                      (cond\n                      \
    \ [(< x 1000000) (string-append (number->string x) (number->string base))\n  \
    \                      (cond\n                         [(< x 100000000) (string-append\
    \ (number->string x) (number->string base))\n                           (cond\n\
    \                            [(< x 1000000000) (string-append (number->string\
    \ x) (number->string base))\n                             (cond\n            \
    \                  [(< x 10000000000) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< x 100000000000) (string-append (number->string x) (number->string base))\n\
    \                                 (cond\n                                   [(<\
    \ x 1000000000000) (string-append (number->string x) (number->string base))\n\
    \                                    (cond\n                                 \
    \    [(< x 100000000000000) (string-append (number->string x) (number->string\
    \ base))\n                                       (cond\n                     \
    \                  [(< x 1000000000000000) (string-append (number->string x) (number->string\
    \ base))\n                                        (cond\n                    \
    \                     [(< x 10000000000000000) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                            [(< x 100000000000000000) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \            (cond\n                                             [(< x 1000000000000000000)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                              (cond\n                                       \
    \         [(< x 10000000000000000000) (string-append (number->string x) (number->string\
    \ base))\n                                                 (cond\n           \
    \                                      [(< x 100000000000000000000) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (", "  (if (< base 10)\n      (* base (+ x 1))\n      (quotient\
    \ x base)))\n", "  (if (< base 10)\n      (* base (+ x 1))\n      (quotient x\
    \ base)))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n   \
    \   (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (number->string x (- base\
    \ 10))]))\n", "  (cond [(< base 10)\n         (string-append (number->string x)\
    \ (number->string base))\n         ]\n        [(= base 0)\n         (string-append\
    \ (number->string x) '0')\n         ]\n        [else\n         (string-append\
    \ (number->string x) (number->string (- base 10)))\n         ]\n        ))\n",
  "  (if (< base 10)\n      (* base x)\n      (quotient x base)))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (/ base 10))\n    \
    \  (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 2) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(< base\
    \ 3) (string-append (number->string x) (number->string base))\n          (cond\n\
    \           [(< base 4) (string-append (number->string x) (number->string base))\n\
    \            (cond\n             [(< base 5) (string-append (number->string x)\
    \ (number->string base))\n              (cond\n               [(< base 6) (string-append\
    \ (number->string x) (number->string base))\n                (cond\n         \
    \        [(< base 7) (string-append (number->string x) (number->string base))\n\
    \                  (cond\n                   [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                    (cond\n                     [(<\
    \ base 9) (string-append (number->string x) (number->string base))\n         \
    \             (cond\n                       [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(< base 11) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(< base 12) (string-append\
    \ (number->string x) (number->string base))\n                            (cond\n\
    \                             [(< base 13) (string-append (number->string x) (number->string\
    \ base))\n                              (cond\n                              \
    \ [(< base 14) (string-append (number->string x) (number->string base))\n    \
    \                            (cond\n                                 [(< base\
    \ 15) (string-append (number->string x) (number->string base))\n             \
    \                     (cond\n                                   [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \    (cond\n                                     [(< base 17) (string-append (number->string\
    \ x) (number->string base))\n                                      (cond\n   \
    \                                    [(< base 18) (string-append (number->string\
    \ x) (number->string base))\n                                        (cond\n \
    \                                        [(< base 19) (string-append (number->string\
    \ x) (number->string base))\n                                          (cond\n\
    \                                           [(< base 20) (string-append (number->string\
    \ x) (number->string base))\n                                            (cond\n\
    \                                             [(< base 21) (string-append (number->string\
    \ x) (number->string base))\n                                              (cond",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base) (number->string x))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ base))\n          (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x))]\n         [(< base 4) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ base) (number->string x) (number->string base) (number->string x))]\n      \
    \   [(< base 5) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base))]\n         [(< base 6) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base))]\n         [(< base 7) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base))]\n      \
    \   [(< base 8) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base))]\n      \
    \   [(< base 9) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string x) (number->string base) (number->string\
    \ x) (number->string base) (number->string ", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(= base\
    \ 10) (string-append (number->string x) (number->string base))\n          (cond\n\
    \            [(= base 10) (string-append (number->string x) (number->string base))\n\
    \             (cond\n              [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n               (cond\n                 [(= base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \  (cond\n                     [(= base 10) (string-append (number->string x)\
    \ (number->string base))\n                       (cond\n                     \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                          (cond\n                             [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                   (cond\n      \
    \                               [(= base 10) (string-append (number->string x)\
    \ (number->string base))\n                                       (cond\n     \
    \                                    [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \   [(= base 10) (string-append (number->string x) (number->string base))\n  \
    \                                                     (cond\n                \
    \                                         [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \           (cond\n                                                          \
    \   [(= base 10) (string-append (number->string x) (number->string base))\n  \
    \                                                             (cond\n        \
    \                                                        [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                 (cond\n                                    \
    \                                [(= base 10) (string-append (number->string x)\
    \ (number->string base))\n                                                   \
    \                  (cond\n                                                   \
    \                     [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \      (cond\n                                                               \
    \            [else (string-append (number->string x) (number->string base))])])])])])])])])])])])",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< x 10) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< x 100) (number->string\
    \ x)]\n            [(< x 1000) (number->string x)]\n            [(< x 10000) (number->string\
    \ x)]\n            [(< x 100000) (number->string x)]\n            [(< x 1000000)\
    \ (number->string x)]\n            [(< x 10000000) (number->string x)]\n     \
    \       [(< x 100000000) (number->string x)]\n            [(< x 1000000000) (number->string\
    \ x)]\n            [(< x 10000000000) (number->string x)]\n            [(< x 100000000000)\
    \ (number->string x)]\n            [(< x 1000000000000) (number->string x)]\n\
    \            [(< x 10000000000000) (number->string x)]\n            [(< x 100000000000000)\
    \ (number->string x)]\n            [(< x 1000000000000000) (number->string x)]\n\
    \            [(< x 10000000000000000) (number->string x)]\n            [(< x 100000000000000000)\
    \ (number->string x)]\n            [(< x 1000000000000000000) (number->string\
    \ x)]\n            [else '(error \"Base out of range\")])]\n         [else '(error\
    \ \"Base out of range\")])]\n       [(< x 100) (number->string x)]\n       [(<\
    \ x 1000) (number->string x)]\n       [(< x 10000) (number->string x)]\n     \
    \  [(< x 100000) (number->string x)]\n       [(< x 1000000) (number->string x)]\n\
    \       [(< x 10000000) (number->string x)]\n       [(< x 100000000) (number->string\
    \ x)]\n       [(< x 1000000000) (number->string x)]\n       [(< x 10000000000)\
    \ (number->string x)]\n       [(< x 100000000000) (number->string x)]\n      \
    \ [(< x 1000000000000) (number->string x)]\n       [(< x 10000000000000) (number->string\
    \ x)]\n       [(< x 100000000000000) (number->string x)]\n       [(< x 1000000000000000)\
    \ (number->string x)]\n       [(< x 10000000000000000) (number", "  (if (< base\
    \ 10)\n      (number->string x (/ base 10))\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 1) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(= x 0) '0]\n         [(= x 1) '1]\n      \
    \   [(= x 2) '2]\n         [(= x 3) '3]\n         [(= x 4) '4]\n         [(= x\
    \ 5) '5]\n         [(= x 6) '6]\n         [(= x 7) '7]\n         [(= x 8) '8]\n\
    \         [(= x 9) '9]\n         [(= x 10) '10]\n         [(= x 11) '11]\n   \
    \      [(= x 12) '12]\n         [(= x 13) '13]\n         [(= x 14) '14]\n    \
    \     [(= x 15) '15]\n         [(= x 16) '16]\n         [(= x 17) '17]\n     \
    \    [(= x 18) '18]\n         [(= x 19) '19]\n         [(= x 20) '20]\n      \
    \   [(= x 21) '21]\n         [(= x 22) '22]\n         [(= x 23) '23]\n       \
    \  [(= x 24) '24]\n         [(= x 25) '25]\n         [(= x 26) '26]\n        \
    \ [(= x 27) '27]\n         [(= x 28) '28]\n         [(= x 29) '29]\n         [(=\
    \ x 30) '30]\n         [(= x 31) '31]\n         [(= x 32) '32]\n         [(= x\
    \ 33) '33]\n         [(= x 34) '34]\n         [(= x 35) '35]\n         [(= x 36)\
    \ '36]\n         [(= x 37) '37]\n         [(= x 38) '38]\n         [(= x 39) '39]\n\
    \         [(= x 40) '40]\n         [(= x 41) '41]\n         [(= x 42) '42]\n \
    \        [(= x 43) '43]\n         [(= x 44) '44]\n         [(= x 45) '45]\n  \
    \       [(= x 46) '46]\n         [(= x 47) '47]\n         [(= x ", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (- base 10))]))\n", "  (if (< base 10)\n  \
    \    (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 5) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (number->string x)]\n               \
    \              [else (number->string x)]\n                             )]\n  \
    \                       [else (number->string x)]\n                         )]\n\
    \                     [else (number->string x)]\n                     )]\n   \
    \              [else (number->string x)]\n                 )]\n             [else\
    \ (number->string x)]\n             )]\n         [else (number->string x)]\n \
    \        )]\n       [else (number->string x)]\n       )]\n    [else (number->string\
    \ x)]\n    ))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (number->string x (- base 10))]))\n", "  (cond\n    [(< base 10) (*\
    \ base x)]\n    [else (change_base x (- base 10))]))\n", "  (if (< base 10)\n\
    \      (+ x (* base base))\n      (let ((n (/ x base)))\n        (if (< n base)\n\
    \            (+ n (change_base n (- base base)))\n            (+ n (change_base\
    \ base base))))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient x base))))\n", "  (cond [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n        (else (change_base (/ x base)\
    \ (- base 10)))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(=\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \     (cond\n              [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                   [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                                                    (cond\n                 \
    \                                                    [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                       (cond\n                              \
    \                                          [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                         (cond\n                                            \
    \                              ", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(=\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \     (cond\n              [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                    [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                                                        (cond\n             \
    \                                                           [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                         (cond\n                            \
    \                                               [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                           (cond\n                                          \
    \                                    [(", "  (if (< base 10)\n      (* base x)\n\
    \      (quotient x base)))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (* base (+ x 1))\n      (* base x)))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n  \
    \    (number->string x (- base base))))\n", "  (cond [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n        (else (number->string x (-\
    \ base 10) (number->string base))))])\n", "  (cond\n    [(< base 10) (* x base)\n\
    \     (cond\n       [(< x 0) (error \"Negative numbers not allowed\")\n      \
    \  (cond\n         [(< base 0) (error \"Base must be less than 10\")\n       \
    \   (cond\n           [(< x 0) (error \"Negative numbers not allowed\")\n    \
    \        (cond\n             [(< base 0) (error \"Base must be less than 10\"\
    )\n              (cond\n               [(< x 0) (error \"Negative numbers not\
    \ allowed\")\n                (cond\n                 [(< base 0) (error \"Base\
    \ must be less than 10\")\n                  (cond\n                   [(< x 0)\
    \ (error \"Negative numbers not allowed\")\n                    (cond\n      \
    \               [(< base 0) (error \"Base must be less than 10\")\n          \
    \            (cond\n                       [(< x 0) (error \"Negative numbers\
    \ not allowed\")\n                        (cond\n                         [(<\
    \ base 0) (error \"Base must be less than 10\")\n                          (cond\n\
    \                           [(< x 0) (error \"Negative numbers not allowed\")\n\
    \                            (error \"Base must be less than 10\")\n         \
    \                  (else (+ x (change_base (- x 1) base))))]\n               \
    \          (error \"Base must be less than 10\")\n                        (else\
    \ (+ x (change_base (- x base) base))))]\n                      (error \"Base\
    \ must be less than 10\")\n                      (else (+ x (change_base (- x\
    \ base) base))))]\n                    (error \"Base must be less than 10\")\n\
    \                    (else (+ x (change_base (- x base) base))))]\n          \
    \        (error \"Base must be less than 10\")\n                  (else (+ x (change_base\
    \ (- x base) base))))]\n               (error \"Base must be less than 10\")\n\
    \               (else (+ x (change_base (- x base) base))))]\n           (error\
    \ \"Base must be less than 10\")\n           (else (+ x (change_base (- x base)\
    \ base))))]\n         (error \"Base must be less than 10\")\n         (else (+\
    \ x (change_base (- x base) base))))]\n      (error \"Base must be less than 10\"\
    )\n      (else (+ x (change_base (- x base) base))))]\n   (error \"Base must be\
    \ less than 10\")\n   (else (+ x (change_base (- x base) base))))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (- base 10))]))\n", "  (if (< base 10)\n  \
    \    (number->string x)\n      (number->string (quotient x base) (quotient (-\
    \ x base) base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (- base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (* base x)\n      (+ (change_base\
    \ (/ x base) base)\n         (string-append (number->string x) \"0\")))) ; #lang\
    \ racket\n", "  (if (< base 10)\n      (* base (+ x 1))\n      (/ x base)))\n",
  "  (if (< base 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (* base (+ x 1))\n      (*\
    \ base x)))\n", "  (cond [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n        (else (number->string x (- base 10)))]))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n     (cond\n\
    \       [(< base 2) (string-append (number->string x) (number->string base) (number->string\
    \ x))\n        (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x))\n          (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 4) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 5) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 6) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 7) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 8) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 9) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 10) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 11) (string-append (number->string ",
  "  (cond [(< base 10)\n         (string-append (number->string x) (number->string\
    \ base))\n         ]\n        [(= base 0)\n         (number->string x)\n     \
    \    ]\n        [else\n         (number->string x) (number->string base)\n   \
    \      ]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n            [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \            (cond\n                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                    [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \                                                        (cond\n             \
    \                                                        [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                      (cond\n                               \
    \                                         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \                         (cond\n                                            \
    \                               [(", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base) (number->string x))\n        (cond\n         [(< base\
    \ 3) (string-append (number->string x) (number->string base) (number->string x)\
    \ (number->string x))\n          (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 4) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 5) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 6) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 7) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 8) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 9) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 11) (string-append (number->string ", "  (if (< base\
    \ 10)\n      (number->string x)\n      (number->string x (- base 10))))\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (- base 10))]))\n", "  (if (< base 10)\n  \
    \    (number->string x)\n      (number->string (quotient x base) (quotient x base))))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(zero? x) (number->string x)]\n    [(< base 10) (number->string (expt\
    \ x base))]))\n", "  (cond\n    [(< base 10) (string-append (number->string x)\
    \ (number->string base))]\n    [else (change_base (/ x base) (- base 10))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n            (cond\n             [(<\
    \ base 5) (string-append (number->string x) (number->string base))\n         \
    \     (cond\n               [(< base 6) (string-append (number->string x) (number->string\
    \ base))\n                (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 11) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(< base 12) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 13) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 17) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 18) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 19) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(< base 20) (string-append (number->string x) (number->string\
    \ base))\n                                             (cond\n               \
    \                                [(< base 21) (string-append (number->string x)\
    \ (number->string base))\n                                                (cond",
  "  (cond\n    [(zero? x) (string '0)]\n    [(zero? (remainder x base)) (string '0)]\n\
    \    [(zero? (quotient x base)) (string '0)]\n    [else (string (remainder x base))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 1) (number->string x)\n        (number->string base)]\n\
    \       [(= base 2) (number->string x)\n        (number->string base) (number->string\
    \ base)]\n       [(= base 3) (number->string x)\n        (number->string base)\
    \ (number->string base) (number->string base)]\n       [(= base 4) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base)]\n       [(= base 5) (number->string x)\n        (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base)]\n       [(= base 6) (number->string x)\n        (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base)]\n       [(= base 7) (number->string x)\n      \
    \  (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base)]\n \
    \      [(= base 8) (number->string x)\n        (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base)]\n       [(= base 9) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base)]\n       [(= base 10) (number->string\
    \ x)\n        (number->string base) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base)]\n \
    \      [(= base 11) (number->string x)\n        (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base)]\n       [(= base 12) (number->string x)\n     \
    \   (number", "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x (- base 1))))\n", "  (if (< base 10)\n      (+ x (* base base))\n      (+\
    \ x (* base (expt base (- base 1))))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(= base 2) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(= x 0)\
    \ '0]\n         [(= x 1) '1]\n         [(= x 2) '2]\n         [(= x 3) '3]\n \
    \        [(= x 4) '4]\n         [(= x 5) '5]\n         [(= x 6) '6]\n        \
    \ [(= x 7) '7]\n         [(= x 8) '8]\n         [(= x 9) '9]\n         [(= x 10)\
    \ '10]\n         [(= x 11) '11]\n         [(= x 12) '12]\n         [(= x 13) '13]\n\
    \         [(= x 14) '14]\n         [(= x 15) '15]\n         [(= x 16) '16]\n \
    \        [(= x 17) '17]\n         [(= x 18) '18]\n         [(= x 19) '19]\n  \
    \       [(= x 20) '20]\n         [(= x 21) '21]\n         [(= x 22) '22]\n   \
    \      [(= x 23) '23]\n         [(= x 24) '24]\n         [(= x 25) '25]\n    \
    \     [(= x 26) '26]\n         [(= x 27) '27]\n         [(= x 28) '28]\n     \
    \    [(= x 29) '29]\n         [(= x 30) '30]\n         [(= x 31) '31]\n      \
    \   [(= x 32) '32]\n         [(= x 33) '33]\n         [(= x 34) '34]\n       \
    \  [(= x 35) '35]\n         [(= x 36) '36]\n         [(= x 37) '37]\n        \
    \ [(= x 38) '38]\n         [(= x 39) '39]\n         [(= x 40) '40]\n         [(=\
    \ x 41) '41]\n         [(= x 42) '42]\n         [(= x 43) '43]\n         [(= x\
    \ 44) '44]\n         [(= x 45) '45]\n         [(= x 46) '46]\n         [(= x 47)\
    \ '47]\n         [(= x ", "  (if (< base 10)\n      (number->string x (+ base\
    \ 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 2) (string-append\
    \ (number->string x) (number->string base) (number->string x))\n        (cond\n\
    \         [(< base 3) (string-append (number->string x) (number->string base)\
    \ (number->string x) (number->string x))\n          (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 4) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x))]\n         [(< base 5) (string-append (number->string x) (number->string\
    \ base) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 6) (string-append (number->string\
    \ x) (number->string base) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 7) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 8) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x))]\n         [(< base 9) (string-append\
    \ (number->string x) (number->string base) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x))]\n         [(<\
    \ base 10) (string-append (number->string x) (number->string base) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x) (number->string x) (number->string x) (number->string\
    \ x) (number->string x))]\n         [(< base 11) (string-append (number->string ",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(= base 1) (number->string x)]\n       [(= base 2) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(= base\
    \ 3) (string-append (number->string x) (number->string base))\n          (cond\n\
    \           [(= base 4) (string-append (number->string x) (number->string base))\n\
    \            (cond\n             [(= base 5) (string-append (number->string x)\
    \ (number->string base))\n              (cond\n               [(= base 6) (string-append\
    \ (number->string x) (number->string base))\n                (cond\n         \
    \        [(= base 7) (string-append (number->string x) (number->string base))\n\
    \                  (cond\n                   [(= base 8) (string-append (number->string\
    \ x) (number->string base))\n                    (cond\n                     [(=\
    \ base 9) (string-append (number->string x) (number->string base))\n         \
    \             (cond\n                       [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(= base 11) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(= base 12) (string-append\
    \ (number->string x) (number->string base))\n                            (cond\n\
    \                             [(= base 13) (string-append (number->string x) (number->string\
    \ base))\n                              (cond\n                              \
    \ [(= base 14) (string-append (number->string x) (number->string base))\n    \
    \                            (cond\n                                 [(= base\
    \ 15) (string-append (number->string x) (number->string base))\n             \
    \                     (cond\n                                   [(= base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \    (cond\n                                     [(= base 17) (string-append (number->string\
    \ x) (number->string base))\n                                      (cond\n   \
    \                                    [(= base 18) (string-append (number->string\
    \ x) (number->string base))\n                                        (cond\n \
    \                                        [(= base 19) (string-append (number->string\
    \ x) (number->string base))\n                                          (cond\n\
    \                                           [(= base 20) (string-append (number->string\
    \ x) (number->string base))\n                                             (cond\n\
    \                                             [(= base 21) (string-append (number->",
  "  (if (< base 10)\n      (* base (+ x 1))\n      (* base x)))\n", "  (if (< base\
    \ 10)\n      (number->string x)\n      (number->string x (- base 10))))\n", " \
    \ (cond [(< base 10)\n         (string-append (number->string x) (number->string\
    \ base))\n         ]\n        [(< base 2)\n         (string-append (number->string\
    \ x) (number->string base))\n         ]\n        [else\n         (string-append\
    \ (number->string x) (number->string base) (number->string base))\n         ]\n\
    \        ))\n", "  (if (< base 10)\n      (* base (+ x 1))\n      (quotient x\
    \ base)))\n", "  (cond [(< base 10)\n         (number->string x (/ base 10))]\n\
    \        [else\n         (number->string x (* base 10))]))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n     (cond\n\
    \       [(< base 2) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n            [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n             (cond\n              [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 6) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 8) (string-append (number->string x) (number->string base))\n\
    \                           (cond\n                             [(< base 9) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                  '()\n         \
    \                        ]\n                                 [else (string-append\
    \ (number->string x) (number->string base))\n                                \
    \  '()]\n                                 )]\n                             [else\
    \ (string-append (number->string x) (number->string base))\n                 \
    \             '()]\n                             )]\n                        \
    \ [else (string-append (number->string x) (number->string base))\n           \
    \               '()]\n                         )]\n                     [else\
    \ (string-append (number->string x) (number->string base))\n                 \
    \     '()]\n                     )]\n                 [else (string-append (number->string\
    \ x) (number->string base))\n                  '()]\n                 )]\n   \
    \          [else (string-append (number->string x) (number->string base))\n  \
    \            '()]\n             )]\n         [else (string-append (number->string\
    \ x) (number->string base))\n          '()]\n         )]\n       [else (string-append\
    \ (number->string x) (number->string base))\n        '()]\n       )]\n    [else\
    \ (string-append (number->string x) (number->string base))\n     '()]\n   ))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme |>\nHere's a solution\
    \ that uses recursion and a helper function:\n<code>", "  (if (< base 10)\n  \
    \    (number->string x (+ base base))\n      (number->string x (- base base))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
