name: HumanEval_31_is_prime
language: racket
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  ;; >>> is_prime(6)\n;; False\n;; >>> is_prime(101)\n;; True\n;; >>> is_prime(11)\n\
  ;; True\n;; >>> is_prime(13441)\n;; True\n;; >>> is_prime(61)\n;; True\n;; >>> is_prime(4)\n\
  ;; False\n;; >>> is_prime(1)\n;; False\n(define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0)\
    \ #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n       \
    \ [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime\
    \ (- n 1))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n        ((= (mod\
    \ n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n\
    \ 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n \
    \       ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n   \
    \     [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (-\
    \ n 3)))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod\
    \ n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #f)\n\
    \        ((= (mod n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2)))]))\n", "  (cond [(= n 1) #t]\n      \
    \  [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]\n      \
    \  ))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n \
    \       (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond ((= n 2) #t)\n        ((= n 3)\
    \ #t)\n        ((= (mod n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n  \
    \      [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2))\
    \ (is_prime (- n 3)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n   \
    \     ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n    \
    \    (else (= (mod n 3) 0) (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n \
    \       [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n\
    \ 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n \
    \       ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n\
    \ 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n \
    \       [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (and\
    \ (is_prime (- n 2)) (is_prime (- n 1)))]))\n", "  (cond ((= n 1) #t)\n      \
    \  ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n    \
    \    [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or\
    \ (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (if (= n 1)\n      #t\n   \
    \   (if (= (modulo n 2) 1)\n          #t\n          (is_prime (quotient n 2)))))\n",
  "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [(= n 5) #f]\n        [else (= (mod n 3) 0) (is_prime (- n 1))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        (else (or (is_prime (- n 1))\n\
    \                  (is_prime (- n 2))))))\n", "  (cond ((= n 2) #t)\n        ((=\
    \ n 3) #f)\n        (else (and (is_prime (- n 1))\n                  (= (mod n\
    \ 2) 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n\
    \ 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n \
    \       [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2))\
    \ (is_prime (- n 3)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n   \
    \     (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond [(= n 1)\
    \ #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n    \
    \    [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 1)\
    \ #t)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #t]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n\
    \ 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3)\
    \ 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n    \
    \    [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (if (= n\
    \ 1)\n      #t\n      (let ((x (- n 1)))\n        (if (= (modulo n x) 0)\n   \
    \         #f\n            (is_prime x))))))\n", "  (cond ((= n 1) #t)\n      \
    \  ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n  \
    \      [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n      \
    \  (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n",
  "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))))", "  (cond [(= n 1)\
    \ #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= (mod n 3) 0) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 1)))]))\n", "  (cond ((=\
    \ n 2) #t)\n        ((= n 3) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        (else (or (is_prime (- n 1))\
    \ (is_prime (- n 2))))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n   \
    \     ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= (mod n 2)\
    \ 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n    \
    \    ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n\
    \ 1)))))\n", "  (if (= n 1)\n      #t\n      (if (= (modulo n 2) 1)\n        \
    \  #t\n          (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((=\
    \ n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n \
    \       (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n   \
    \     [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime (- n 1))]))\n",
  "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod\
    \ n 3) 0) (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 4) #t]\n\
    \        [(= n 5) #f]\n        [(= n 7) #f]\n        [(= n 9) #f]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (if (= n 1)\n      false\n\
    \      (let ((i (- n 1)))\n        (if (= i 0)\n            (= (modulo n i 2)\
    \ 0)\n            (or (is_prime (- n i))\n                (is_prime (- n i)))))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n", "  (cond ((= n 1)\
    \ #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 4) #t]\n        [else\
    \ (= (mod n 5) 0) #t]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime (- n 1))]))\n", " \
    \ (cond ((= n 2) #t)\n        ((= n 3) #f)\n        ((= (mod n 2) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [(= (mod n 2) 0) #f]\n        [else (or (is_prime (- n 2)) (is_prime\
    \ (- n 3)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (if (= n 1)\n      #t\n\
    \      (if (= (modulo n 2) 0)\n          #t\n          (is_prime (- n 1)))))\n",
  "  (if (= n 1)\n      #t\n      (let ((x (- n 1)))\n        (if (= (modulo n x)\
    \ 0)\n            #f\n            (is_prime x)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime\
    \ (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (= (mod n 3) 0)]\n  )\n)\n", "  (cond [(= n 1) #t]\n        [(=\
    \ n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n    \
    \    [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n        [(= (mod n\
    \ 2) 0) #f]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n        [else (or (is_prime\
    \ (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n   \
    \     [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (-\
    \ n 3)))]))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n        [else (or (is_prime\
    \ (- n 1)) (is_prime (- n 2)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n   \
    \     [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", " \
    \ (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n\
    \ 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n \
    \       [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (= (mod n 3) 0) #t]\n  )\n)\n", "  (cond [(= n 1) #t]\n       \
    \ [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n",
  "  (cond ((= n 2) #t)\n        ((= n 3) #f)\n        (else (or (is_prime (- n 1))\
    \ (is_prime (- n 2))))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n   \
    \     [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n\
    \ 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n", "  (cond [(= n 1) #t]\n  \
    \      [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n\
    \ 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n \
    \       ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        (else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond ((= n 1) #t)\n      \
    \  ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n        [else\
    \ (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n", "  (cond [(= n 2) #t]\n  \
    \      [(= n 3) #t]\n        [(= n 5) #f]\n        [else (or (is_prime (- n 1))\
    \ (is_prime (- n 2)))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n   \
    \     [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime (- n 1))]))\n", " \
    \ (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime (-\
    \ n 2)))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        (else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond ((= n 1) #t)\n      \
    \  ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n\
    \ 1)))))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n\
    \        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n\
    \ 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n\
    \ 5) #f]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond\
    \ ((= n 2) #t)\n        ((= n 3) #f)\n        ((= (mod n 2) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (if (= n 1)\n      #t\n      (and (not (= (mod\
    \ n n) (mod 1 (- n 1))))\n           (is_prime (- n 1)))))\n", "  (cond ((= n\
    \ 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [else (and (not (is_prime (- n 1))) (not (is_prime (- n 2))) (not\
    \ (is_prime (- n 3))))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n  \
    \      [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n", "  (cond [(= n 1)\
    \ #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3)\
    \ 0)]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n        ((= (mod n 3)\
    \ 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n    \
    \    [(= n 2) #t]\n        [(= n 3) #t]\n        [(= (mod n 3) 0) #t]\n      \
    \  [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [(= (mod n 3) 0) #t]\n        [else (is_prime (- n\
    \ 1))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) #t]\n\
    \  )\n)\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3)\
    \ 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n    \
    \    [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n\
    \ 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= (mod n\
    \ 2) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n \
    \       [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2))\
    \ (is_prime (- n 3)))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n   \
    \     ((= (mod n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= (mod n 2)\
    \ 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [(= n 5) #f]\n        [else (or (is_prime (- n 1))\
    \ (is_prime (- n 2)))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #f)\n   \
    \     (else (and (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond [(= n\
    \ 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime\
    \ (- n 1)) (is_prime (- n 2)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
