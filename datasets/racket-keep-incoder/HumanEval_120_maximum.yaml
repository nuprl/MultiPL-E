name: HumanEval_120_maximum
language: racket
prompt: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
  \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
  ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;; Example\
  \ 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example 3:\n;; Input:\
  \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n;; 1. The length\
  \ of the array will be in the range of [1, 1000].\n;; 2. The elements in the array\
  \ will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum\
  \ arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list)\n\
    \      (append (sort (take arr (- k 1))) (maximum (take arr (- k 1))\n       \
    \                                       (- k 1)))))\n", "  (if (= k 0)\n     \
    \ (list)\n      (append (sort (take arr (- k 1))) (maximum (drop arr (- k 1))\
    \ k - 1))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n \
    \   [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) (list -1)]\n\
    \    [(= k 0) (list -1)]\n    [else (append (maximum (rest arr) (sub1 k)) (list\
    \ (first arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (if (= k 0)\n      (list)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (max arr (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max\
    \ (car arr)])\n        (if (null? (cdr arr))\n            (append (list max) (cdr\
    \ arr))\n            (append (list (max max)) (cdr arr)))))\n      (append (list\
    \ (maximum arr (- k 1))) (maximum arr (- k 1)))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1))))]))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (max arr (first arr))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (cond\n\
    \    [(empty? arr) (list '())]\n    [(= k 0) (list '())]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (list (first arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest\
    \ arr) (- k 1))))]))\n", "  (cond\n    [(empty? arr) (list '())]\n    [(= k 0)\
    \ (cons (car arr) (maximum (cdr arr) (k - 1)))]\n    [else (cons (car arr) (maximum\
    \ (cdr arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) (list '())]\n    [(=\
    \ k 0) (list '())]\n    [else (append (maximum (rest arr) (sub1 k)) (list (first\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest arr)\
    \ (- k 1))))]\n  )\n)\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (list (max arr (first arr))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (if (= k 0)\n      (list)\n      (append (sort (subseq\
    \ arr (- k 1))\n                    (lambda (x y) (if (> x y) x y)))\n       \
    \       (maximum (subseq arr (- k 1))\n                        (- k 1)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) \n              (maximum (rest arr) (- k 1))\n         \
    \     )]))\n", "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1)))\
    \ (maximum (take arr k) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n \
    \   [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n       \
    \         (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list)\n      (append (sort\
    \ (take arr (- k 1))) (maximum (drop arr (- k 1)) k - 1))))\n", "  (cond\n   \
    \ [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (-\
    \ k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (=\
    \ k 0)\n      (list)\n      (append (sort (take arr (- k 1))) (maximum (take arr\
    \ (- k 1))\n                                               (- k 1)))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n  \
    \    (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr)\
    \ (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (let ([max-so-far #f (max-so-far (rest arr) k) #f])\n        (if (or (null?\
    \ arr) (< k 0))\n            (if (< max-so-far #f)\n                (cons max-so-far\
    \ #f)\n                (cons arr max-so-far))\n            (if (< max-so-far #f)\n\
    \                (cons max-so-far #f)\n                (cons arr max-so-far))\n\
    \            (if (< max-so-far #f)\n                (cons max-so-far #f)\n   \
    \             (cons arr max-so-far))\n            (if (< max-so-far #f)\n    \
    \            (cons max-so-far #f)\n                (cons arr max-so-far))\n  \
    \          (if (< max-so-far #f)\n                (cons max-so-far #f)\n     \
    \           (cons arr max-so-far))\n            (if (< max-so-far #f)\n      \
    \          (cons max-so-far #f)\n                (cons arr max-so-far))\n    \
    \        (if (< max-so-far #f)\n                (cons max-so-far #f)\n       \
    \         (cons arr max-so-far))\n            (if (< max-so-far #f)\n        \
    \        (cons max-so-far #f)\n                (cons arr max-so-far))\n      \
    \      (if (< max-so-far #f)\n                (cons max-so-far #f)\n         \
    \       (cons arr max-so-far))\n            (if (< max-so-far #f)\n          \
    \      (cons max-so-far #f)\n                (cons arr max-so-far))\n        \
    \    (if (< max-so-far #f)\n                (cons max-so-far #f)\n           \
    \     (cons arr max-so-far))\n            (if (< max-so-far #f)\n            \
    \    (cons max-so-far #f)\n                (cons arr max-so-far))\n          \
    \  (if (< max-so-far #f)\n                (cons max-so-far #f)\n             \
    \   (cons arr max-so-far))\n            (if (< max-so-far #f)\n              \
    \  (cons max-so-far #f)\n                (cons arr max-so-far))\n            (if\
    \ (< max-so-far #f)\n                (cons max-so-far #f)\n                (cons\
    \ arr max-so-far))\n            (if (< ", "  (if (= k 0)\n      (list arr)\n \
    \     (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum\
    \ (rest arr) (- k 1))))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list)\n\
    \      (append (sort (max 0 (car arr)) (lambda (x y) (if (> x y) (- x y) y)))\
    \ \n              (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first arr))]\n\
    \  ))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) (list '())]\n    [(= k 0) (cons (car arr) (maximum (cdr\
    \ arr) (k - 1)))]\n    [else (cons (max (car arr) (maximum (cdr arr) (k - 1)))\
    \ (maximum (cdr arr) (k - 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) (list empty)]\n    [(= k 0) (list arr)]\n    [else (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))]))\n", "  (cond\n\
    \    [(empty? arr) (list '())]\n    [(= k 0) (cons (car arr) (maximum (cdr arr)\
    \ (k - 1)))]\n    [else (cons (car arr) (maximum (cdr arr) (sub1 k)))]))\n", " \
    \ (cond\n    [(empty? arr) (list '())]\n    [(= k 0) (list arr)]\n    [else (append\
    \ (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n", "  (if (= k 0)\n  \
    \    '()\n      (append (sort (append (take arr (- k 1))\n                   \
    \        (take arr (- k 2)))\n                    >\n                   (lambda\
    \ (x y)\n                     (if (< x y)\n                         (cons x y)\n\
    \                         (cons y x)))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n       \
    \         (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (let ([max-so-far #f (max-so-far (rest arr) 0 #f #f)])\n        (if (<\
    \ k max-so-far)\n            (let ([max-so-far #f (max-so-far (rest arr) k (max\
    \ max-so-far #f) #f)])\n              (if (< k max-so-far)\n                 \
    \ (let ([max-so-far #f (max-so-far (rest arr) k (max max-so-far #f) #f)])\n  \
    \                  (if (< k max-so-far)\n                        (let ([max-so-far\
    \ #f (max-so-far (rest arr) k (max max-so-far #f) #f)])\n                    \
    \      (if (< k max-so-far)\n                              (let ([max-so-far #f\
    \ (max-so-far (rest arr) k (max max-so-far #f) #f)])\n                       \
    \         (if (< k max-so-far)\n                                    (let ([max-so-far\
    \ #f (max-so-far (rest arr) k (max max-so-far #f) #f)])\n                    \
    \                  (if (< k max-so-far)\n                                    \
    \      (let ([max-so-far #f (max-so-far (rest arr) k (max max-so-far #f) #f)])\n\
    \                                            (if (< k max-so-far)\n          \
    \                                      (let ([max-so-far #f (max-so-far (rest\
    \ arr) k (max max-so-far #f) #f)])\n                                         \
    \         (if (< k max-so-far)\n                                             \
    \         (let ([max-so-far #f (max-so-far (rest arr) k (max max-so-far #f) #f)])\n\
    \                                                        (if (< k max-so-far)\n\
    \                                                            (let ([max-so-far\
    \ #f (max-so-far (rest arr) k (max max-so-far #f) #f)])\n                    \
    \                                          (if (< k max-so-far)\n            \
    \                                                      (let ([max-so-far #f (max-so-far\
    \ (rest arr) k (max max-so-far #f) #f)])\n                                   \
    \                                 (if (< k max-so-far)\n                     \
    \                                                   (let ([max-so-far #f (max-so-far\
    \ (rest arr) k (max max-so-far #f) #f)])\n                                   \
    \                                       (if (< k ", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))\n\
    \                    (lambda (x y)\n                      (if (> x y)\n      \
    \                    (- x y)\n                          (- y x))\n           \
    \           (- x y)))\n              (maximum (drop arr (- k 1))\n           \
    \            (- k 1)))))\n", "  (cond\n    [(empty? arr) (list ())]\n    [(= k\
    \ 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1))\n       \
    \         )]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty?\
    \ arr) (list empty)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest\
    \ arr) (sub1 k)) (list (first arr)))]))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\
    \ \n                (maximum (rest arr) (- k 1))\n                )]))\n", " \
    \ (if (= k 0)\n      (list)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (first arr)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum\
    \ (rest arr) (- k 1))) ]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) (list '())]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest\
    \ arr) (sub1 k)) (list (first arr)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `(maximum [1 2 3 4 5 6 7 8 9] 3)`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I tested it on `[1 2 3 4 5 6 7 8 9]` with `k\
    \ = 3`.\n<|/ c |>\n<| c |>\nI tested it on `[1 2 3 4 5 6 7 8 9]` with `k = 3`\
    \ and the result is `[1 2 3 4 5 6 7 8 9]`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ `[1 2 3 4 5 6 7 8 9]` with `k = 3` and the result is `[1 2 3 4 5 6 7 8 9]`.\n\
    <|/ c |>\n<| c |>\nI tested it on `[1 2 3 4 5 6 7 8 9]` with `k = 3` and the result\
    \ is `[1 2 3 4 5 6 7 8 9]`.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", " \
    \ (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n\
    \    [(empty? arr) (list '())]\n    [(= k 0) (list '())]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (list (first arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (append\
    \ (maximum (rest arr) (sub1 k)) (first arr))]\n  ))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1)) \n                (maximum (rest arr) (- k 1))) ]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr)\
    \ (sub1 k)) (first arr))]\n  ))\n", "  (cond\n    [(empty? arr) (list ())]\n \
    \   [(= k 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first\
    \ arr))]\n  ))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f\
    \ (max-so-far (rest arr) 0 #f)])\n        (if (< k max-so-far)\n            (let\
    \ ([max-so-far max-so-far (max max-so-far k)])\n              (cons max-so-far\
    \ max-so-far (maximum (rest arr) (sub1 k)))))))))\n", "  (if (= k 0)\n      (list)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))\n  )\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) (list '())]\n    [(=\
    \ k 0) (cons (car arr) (maximum (cdr arr) (k - 1)))]\n    [else (cons (max (car\
    \ arr) (maximum (cdr arr) (k - 1))) (maximum (cdr arr) (k - 1)))]))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1))))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1)) \n                (maximum (rest arr) (- k 1))))]))\n", "  (cond\n    [(empty?\
    \ arr) (list '())]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest\
    \ arr) (sub1 k)) (list (first arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n      \
    \          (maximum (rest arr) (- k 1))))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr)\
    \ (sub1 k)) (first arr))]\n  ))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (list (max arr (first arr))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum (rest\
    \ arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty?\
    \ arr) (list empty)]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (first arr) (sub1 k)))]))\n", "  (if (= k 0)\n     \
    \ (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr)\
    \ (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f max-so-far-index #f max-so-far-value #f])\n        (let loop ((arr (reverse\
    \ arr))\n                   (k k)\n                   (i 0)\n                \
    \   (max-so-far max-so-far)\n                   (max-so-far-index i)\n       \
    \            (max-so-far-value max-so-far))\n          (cond ((null? arr) (list\
    \ max-so-far))\n                ((< i (- k 1))\n                 (loop (rest arr)\
    \ (- k 1) (+ i 1) max-so-far max-so-far-index max-so-far-value))\n           \
    \     (else\n                 (loop (rest arr) (- k 1) i max-so-far max-so-far-index\
    \ max-so-far-value)))))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1\
    \ k)) (maximum (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (max arr (first arr))))))\n", "  (if (= k 0)\n      '()\n      (append (sort\
    \ (max 0 (car arr)) (< arr (car arr)))\n              (maximum (cdr arr) (sub1\
    \ k))))))\n", "  (cond\n    [(empty? arr) (list '())]\n    [(= k 0) (list arr)]\n\
    \    [else (append (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n", " \
    \ (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k\
    \ 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr)\
    \ (list '())]\n    [(= k 0) (list arr)]\n    [else (append (maximum (rest arr)\
    \ (sub1 k)) (list (first arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n  \
    \  [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (=\
    \ k 0)\n      (list)\n      (append (maximum (rest arr) (sub1 k)) (list (first\
    \ arr)))))\n", "  (if (= k 0)\n      (list)\n      (append (sort (sub1 arr (-\
    \ k 1))) (maximum (sub1 arr k) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n      \
    \          (maximum (rest arr) (- k 1))))]))\n", "  (if (= k 0)\n      (list)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))\n  )\n", "  (if (= k 0)\n\
    \      '()\n      (append (sort (take arr (- k 1))\n                    (lambda\
    \ (x y) (if (> x y) x y)))\n              (maximum (drop arr (- k 1))\n      \
    \                  (- k 1)))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (=\
    \ k 0)\n      '()\n      (append (sort (take arr (- k 1))) (maximum (take arr\
    \ (- k 1))\n                                               (- k 1)))))\n", " \
    \ (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list)\n      (append (sort (take arr (- k 1))) (maximum (take arr\
    \ k) (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest arr)\
    \ (- k 1))))]\n  )\n)\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest\
    \ arr) (- k 1))) ]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\
    \ \n                (maximum (rest arr) (- k 1))\n                )]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) (- k 1)) \n                (maximum (rest arr) (- k 1)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest\
    \ arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) (list '())]\n    [(= k 0) (list\
    \ arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (list (first arr)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0 |>\n<code>", "  (cond\n  \
    \  [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) (- k 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n\
    \    [(empty? arr) (list ())]\n    [(= k 0) (first arr)]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (first arr))]\n  )\n)\n", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n \
    \     (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first\
    \ arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1\
    \ k)) (first arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list)\n      (append (sort\
    \ (max arr (- k 1))) (maximum (rest arr) (- k 1)))))\n", "  (if (= k 0)\n    \
    \  (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr)\
    \ (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) (- k 1)) \n                (maximum (rest arr)\
    \ (- k 1)))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k\
    \ 1))\n                (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (list\
    \ (max arr (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first arr))]\n\
    \  ))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum (rest\
    \ arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1\
    \ k)))))\n", "  (if (= k 0)\n      '()\n      (append (sort (take arr (- k 1))\n\
    \                    (lambda (x y)\n                      (< (first x) y)\n  \
    \                    (> (first x) y))\n                    (lambda (x y)\n   \
    \                   (< (first y) x)\n                      (> (first y) x))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1))\n\
    \                (maximum (rest arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list)\n\
    \      (append (sort (subseq arr (- k 1))\n                    (lambda (x y) (>\
    \ (car x) (car y))))\n              (maximum (subseq arr (- k 1))\n          \
    \             (- k 1)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0)\
    \ (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first arr))]\n\
    \  ))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (rest arr) (sub1 k)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
