name: HumanEval_21_rescale_to_unit
language: racket
prompt: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
  \ a linear transform to that list,\n;; such that the smallest number will become\
  \ 0 and the largest will become 1\n;; >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
  ;; [0.0, 0.25, 0.5, 0.75, 1.0]\n(define (rescale_to_unit numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
  \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
  \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list\
  \ 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate\
  \ (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
  \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
completions: ["  (let ([min (min numbers)\n         max (max numbers)])\n    (if (<\
    \ min max)\n        (map #(/ (- %1 %2) (- min max)) numbers)\n        (map #(/\
    \ (- %1 %2) (- max min)) numbers))))\n", "  (let ([min (min numbers)\n       \
    \  max (max numbers)])\n    (if (< min max)\n        (map #(/ (- %1 max) min)\
    \ numbers)\n        (map #(/ (- %1 max) min) numbers))))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (- x min)\
    \ (- max min))) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (map (lambda (n) (/ n min)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x)\n  \
    \           (/ (- x min) max))\n           numbers))))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (if (< (min max) 0.0)\n    \
    \    (cons 0 (cons 1 (rescale_to_unit (rest numbers))))\n        (cons 1 (cons\
    \ 0 (rescale_to_unit (rest numbers)))))))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (apply min numbers)))\n    (let\
    \ ((max (apply max numbers)))\n      (map #(/ (- %1 min) (- max min)) numbers))))\n",
  "  (let ([min (min numbers)\n         max (max numbers)])\n    (if (< min max)\n\
    \        (cons 0 (/ (- min max) 2))\n        (cons 1 (/ (- max min) 2)))))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (last numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) (- x max))) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x)\n           (/ (- x min)\
    \ (- max min)))\n         numbers)))\n", "  (let ([min (min numbers)\n       \
    \  max (max numbers)])\n    (if (< min max)\n        (cons 0 (/ (- max min) 2))\n\
    \        (cons 1 (/ (- min max) 2)))))\n", "  (let ([min (min numbers)\n     \
    \    max (max numbers)])\n    (if (< min max)\n        (cons 0 (/ min max))\n\
    \        (cons 1 (/ max min)))))\n", "  (let ([min (apply min numbers)\n     \
    \   max \n        (apply max numbers)])\n    (if (< min max)\n        (map / numbers\
    \ [min max])\n        numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (last numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", " \
    \ (let ((min (min numbers)))\n    (map #(/ (- %1 min) 1.0) numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda (x)\
    \ (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (last\
    \ numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n         numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ([min (first\
    \ numbers)])\n    (let ([max (last numbers)])\n      (map (lambda (x) (/ (- x\
    \ min) max)) numbers))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min\
    \ (apply min numbers)))\n    (let ((max (apply max numbers)))\n      (map #(/\
    \ (- %1 min) (- max min)) numbers))))\n", "  (let ((min (first numbers))\n   \
    \     (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x)\n           (/ (- x min) 1.0))\n\
    \         numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n\
    \        (max (last numbers)))\n    (map #(/ % max) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (/ (- min (max numbers)) 2.0)))\n", "  (let ([min (min\
    \ numbers)\n         max (max numbers)])\n    (if (= min max)\n        numbers\n\
    \        (/ numbers (- max min)))))\n", "  (let ((min (min numbers)))\n    (let\
    \ ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) (- x max))) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ([min (apply min numbers)\n        max-min (apply max numbers)])\n    (map\
    \ / numbers (- max-min min))))\n", "  (let ((min (min numbers)))\n    (map #(/\
    \ (- %1 min) 1.0) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let\
    \ ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x)\n\
    \             (/ (- x min) max))\n           numbers))))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x)\n         \
    \  (/ (- x min) max))\n         numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ %\
    \ max) numbers)))\n", "  (let ((min (first numbers))\n        (max (last numbers)))\n\
    \    (if (< (min max) 0.0)\n        (cons min (rescale_to_unit (map #(/ % 1.0)\
    \ numbers)))\n        (cons max (rescale_to_unit (map #(* 1.0 %) numbers))))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map (lambda (x)\n             (/ (- x min) max))\n \
    \          numbers))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map #(/ (- %1 min) max)\
    \ numbers))))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (n) (/ n max)) numbers)))\n", "  (let ((min (apply min numbers)))\n\
    \    (let ((max (apply max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ (-\
    \ %1 min) (- max min)) numbers)))\n", "  (let ((min (min numbers)))\n    (map\
    \ (lambda (x) (/ x min)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (last numbers)))\n    (map (lambda (x) (/ (- x min) (- max min))) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) (- max min)))\n         numbers)))\n", "  (let\
    \ ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ % max)\
    \ numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (if (< min max)\n        (cons min (rescale_to_unit (map #(/ % 1) numbers)))\n\
    \        (cons max (rescale_to_unit (map #(* % 1) numbers))))))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x\
    \ max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map #(/ (- %1 min) (- %2 max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (if (< min max)\n        (let ((diff (- max min)))\n\
    \          (map (lambda (x) (/ x diff)) numbers))\n        numbers\n    )\n  )\n\
    )\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map\
    \ (lambda (x)\n           (/ (- x min) (- max min)))\n         numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) max))\n         numbers)))\n", "  (let ((min (apply\
    \ min numbers)))\n    (let ((max (apply max numbers)))\n      (map (lambda (x)\
    \ (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) (- x max)))\n         numbers)))\n", "  (let ([min (min numbers)\n  \
    \       max (max numbers)])\n    (map #(/ (- %1 min) max) numbers)))\n", "  (let\
    \ ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (if (< min max)\n\
    \        (let ((diff (- max min)))\n          (/ diff (- 1.0 1.0))\n         \
    \ (* diff (/ min diff)))\n        (/ min max))))\n", "  (let ([min (min numbers)\n\
    \         max (max numbers)])\n    (if (= min max)\n        numbers\n        (/\
    \ (- min max) 2 numbers))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min\
    \ (apply min numbers)))\n    (apply map (lambda (x) (/ x min)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x) (/ (- x min) (- x max))) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ([min (min numbers)\n         max (max\
    \ numbers)])\n    (if (< min max)\n        numbers\n        (cons 0 (map #(/ (-\
    \ %1 %2) max) numbers)))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) (- x max))) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ([min (first numbers)])\n    (if (null?\
    \ (rest numbers))\n        numbers\n        (let ([max (first numbers)])\n   \
    \       (if (< (first numbers) min)\n              (cons 0 (rescale_to_unit (sub1\
    \ numbers))))\n              (cons 1 (rescale_to_unit (sub1 numbers))))))))\n",
  "  (let ([min (min numbers)\n         max (max numbers)])\n    (/ (- min max) 2.0)))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (apply min numbers)))\n    (let\
    \ ((max (apply max numbers)))\n      (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (apply min numbers)))\n    (let ((max (apply max numbers)))\n    \
    \  (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map #(/ % max) numbers)))\n", "  (let ([min\
    \ (first numbers)\n         max (last numbers)])\n    (if (= min max)\n      \
    \  numbers\n        (let ([diff (- max min)])\n          (if (= diff 0)\n    \
    \          numbers\n              (cons (/ (- min diff) (- diff max)) (rescale_to_unit\
    \ (subseq numbers 1 end))))))))\n", "  (let ((min (apply min numbers)))\n    (let\
    \ ((max (apply max numbers)))\n      (map #(/ % max) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x) (/ x\
    \ max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (last numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ %\
    \ max) numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x\
    \ min)) numbers)))\n", "  (let ([min (min numbers)\n         max (max numbers)])\n\
    \    (/ (- max min) 2.0)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) (- x max))) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) max))\n         numbers)))\n", "  (let ((min (min\
    \ numbers)))\n    (map (lambda (n) (/ n min)) numbers)))\n", "  (let ((min (min\
    \ numbers)))\n    (let ((max (max numbers)))\n      (map #(/ (- %1 min) max) numbers))))\n",
  "  (let ((min (apply min numbers)))\n    (let ((max (apply max numbers)))\n    \
    \  (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map #(/ (- %1 min) (- max min)) numbers))))\n",
  "  (let ((min (apply min numbers)))\n    (let ((max (apply max numbers)))\n    \
    \  (map #(/ % max) numbers))))\n", "  (let ([min (min numbers)\n         max (max\
    \ numbers)])\n    (if (= min max)\n        numbers\n        (/ numbers (- max\
    \ min)))))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x)\n           (/ (- x min) (- max min)))\n         numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ (-\
    \ %1 min) (- max min)) numbers)))\n", "  (let ((min (first numbers))\n       \
    \ (max (second numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n",
  "  (let ((min (apply min numbers)))\n    (apply map (lambda (x) (/ x min)) numbers)))\n",
  "  (let ([min (min numbers)\n         max (max numbers)])\n    (if (= min max)\n\
    \        numbers\n        (/ (- min max) 2 numbers))))\n", "  (let ((min (min\
    \ numbers)))\n    (/ (- min (max numbers)) 2.0)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ([min (min numbers)\n         max (max numbers)])\n    (if (< min max)\n\
    \        numbers\n        (let ([scaled (/ (- min max) 2)\n                 scaled\
    \ (* scaled numbers)])\n          (cons scaled numbers)))))\n", "  (let ((min\
    \ (min numbers)))\n    (map (lambda (x)\n           (/ (- x min) 1.0))\n     \
    \    numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (if (= min max)\n        (list 0.0 1.0)\n\
    \        (let ((diff (- max min)))\n          (cons (/ (- min diff) diff) numbers)))))\n",
  "  (let ([min (min numbers)\n         max (max numbers)])\n    (if (= min max)\n\
    \        numbers\n        (/ numbers (- max min)))))\n", "  (let ([min (min numbers)\n\
    \         max (max numbers)])\n    (if (= min max)\n        numbers\n        (/\
    \ numbers (- max min)))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x max))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ (- x min) max)) numbers))))\n",
  "  (let ([min (min numbers)\n         max (max numbers)])\n    (if (= min max)\n\
    \        numbers\n        (/ numbers (- max min)))))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x max))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (map #(/ % min) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", " \
    \ (let ([min (min numbers)\n         max (max numbers)])\n    (if (< min max)\n\
    \        (map / numbers (- min max))\n        numbers)))\n", "  (let ([min (min\
    \ numbers)\n         max (max numbers)])\n    (if (= min max)\n        numbers\n\
    \        (/ numbers (- max min)))))\n", "  (let ((min (min numbers)))\n    (let\
    \ ((max (max numbers)))\n      (map (lambda (x) (/ (- x min) max)) numbers))))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let\
    \ ([min (apply min numbers)])\n    (let ([max (apply max numbers)])\n      (map\
    \ (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n    (let\
    \ ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers)))\n", "  (let\
    \ ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x)\
    \ (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (- x min)\
    \ (- max min)))\n         numbers)))\n", "  (let ((min (first numbers))\n    \
    \    (max (second numbers)))\n    (map (lambda (x) (/ (- x min) (- max min)))\
    \ numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ (- x min) (- x max))) numbers)))\n", "  (let ((min (apply\
    \ min numbers)))\n    (let ((max (apply max numbers)))\n      (apply map #(/ (-\
    \ %1 min) (- max min)) numbers))))\n", "  (let ((min (min numbers)))\n    (let\
    \ ((max (max numbers)))\n      (map (lambda (x) (/ (- x min) (- max min))) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda\
    \ (x) (/ x min)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ([min\
    \ (min numbers)\n         max (max numbers)])\n    (map #(/ (- %1 max) max) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ([min (min numbers)\n        max-min (max\
    \ numbers)])\n    (map (lambda (x) (/ (- x min) max-min)) numbers)))\n", "  (let\
    \ ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x)\
    \ (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n    (let ((max (max\
    \ numbers)))\n      (map #(/ (- %1 min) max) numbers))))\n", "  (let ((min (apply\
    \ min numbers)))\n    (let ((max (apply max numbers)))\n      (apply map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n        (max\
    \ (last numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ([min\
    \ (apply min numbers)\n        max-min (apply max numbers)])\n    (map #(/ (-\
    \ %1 %2) max-min) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (if (= min max)\n        (list 0.0 1.0)\n        (let\
    \ ((diff (- max min)))\n          (cons (/ (- diff min) diff) numbers)))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) max))\n         numbers)))\n", "  (let ([min (min\
    \ numbers)\n         max (max numbers)])\n    (if (= min max)\n        numbers\n\
    \        (/ numbers (- max min)))))\n", "  (let ([min (min numbers)\n        \
    \ max (max numbers)])\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let\
    \ ([min (min numbers)\n         max (max numbers)])\n    (/ (- min max) 2.0)))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) 1.0))\n         numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (- x min)\
    \ (- x max))) numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (n)\
    \ (/ (- n min) 1.0))\n         numbers)))\n", "  (let ([min (min numbers)\n  \
    \       max (max numbers)])\n    (if (= min max)\n        numbers\n        (/\
    \ numbers (- max min)))))\n", "  (let ((min (min numbers)))\n    (map #(/ (- %1\
    \ min) 1.0) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max\
    \ numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min\
    \ (min numbers)))\n    (map #(/ (- min (min %)) (- min min)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) (- x max)))\n         numbers)))\n", "  (let ((min (apply min numbers)))\n\
    \    (let ((max (apply max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ (-\
    \ %1 min) (- max min)) numbers)))\n", "  (let ([min (min numbers)\n         max\
    \ (max numbers)])\n    (/ (- min max) 2.0)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (min numbers)))\n    (map\
    \ #(/ (- %1 min) 1.0) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ (-\
    \ %1 min) (- max min)) numbers)))\n", "  (let ([min (min numbers)\n         max\
    \ (max numbers)])\n    (map #(/ (- %1 min) max) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x)\n         \
    \  (/ (- x min) max))\n         numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) (- x max)))\n         numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (map #(/ (- %1 min) 1.0) numbers)))\n", "  (let ([min (min numbers)\n   \
    \      max (max numbers)])\n    (if (= min max)\n        numbers\n        (/ (-\
    \ min max) 2)\n        (- numbers))))\n", "  (let ((min (min numbers)))\n    (map\
    \ (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (map (lambda (x) (/ x min)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (map #(/ (- %1 min) 1.0) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (last numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ([min (first numbers)])\n    (let ([max\
    \ (rest numbers)])\n      (if (< min max)\n          (cons 0 (map #(/ (- %1 %2)\
    \ max) numbers))\n          (cons 1 (map #(/ (- %1 %2) min) numbers))))))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ([min (min numbers)\n         max (max\
    \ numbers)])\n    (if (< min max)\n        (cons 0 (/ (- max min) 2))\n      \
    \  (cons 1 (/ (- min max) 2)))))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map #(/ (- %1 min) (- max min)) numbers))))\n", "  (let\
    \ ((min (apply min numbers)))\n    (let ((max (apply max numbers)))\n      (map\
    \ #(/ (- %1 min) (- max min)) numbers))))\n", "  (let ([min (min numbers)\n  \
    \       max (max numbers)])\n    (if (= min max)\n        numbers\n        (/\
    \ numbers (- max min)))))\n", "  (let ([min (min numbers)\n         max (max numbers)])\n\
    \    (map #(/ (- %1 max) min) numbers)))\n", "  (let ((min (min numbers)))\n \
    \   (let ((max (max numbers)))\n      (map #(/ (- %1 min) max) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (last\
    \ numbers)))\n    (map #(/ % 1.0) numbers)\n    (map #(* % 1.0) numbers)\n   \
    \ (map #(+ % min) numbers)\n    (map #(+ % max) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x max))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n\
    \    (map (lambda (x) (/ x min)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ (- x min) max)) numbers)))\n\
    \  )\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x)\n  \
    \         (/ (- x min) (- max min)))\n         numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
