name: HumanEval_122_add_elements
language: racket
prompt: "#lang racket\n\n;; Given a non-empty array of integers arr and an integer\
  \ k, return\n;; the sum of the elements with at most two digits from the first k\
  \ elements of arr.\n;; Example:\n;; Input: arr = [111,21,3,4000,5,6,7,8,9], k =\
  \ 4\n;; Output: 24 # sum of 21 + 3\n;; Constraints:\n;; 1. 1 <= len(arr) <= 100\n\
  ;; 2. 1 <= k <= len(arr)\n(define (add_elements arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n\
  \    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)\n    (check-equal?\
  \ (candidate (list 111 121 3 4000 5 6) 2) 0)\n    (check-equal? (candidate (list\
  \ 11 21 3 90 5 6 7 8 9) 4) 125)\n    (check-equal? (candidate (list 111 21 3 4000\
  \ 5 6 7 8 9) 4) 24)\n    (check-equal? (candidate (list 1) 1) 1)\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
