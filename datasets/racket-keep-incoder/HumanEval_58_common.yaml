name: HumanEval_58_common
language: racket
prompt: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
  ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5, 653]\n\
  ;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal?\
    \ (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2)\
    \ x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (< (length l1)\
    \ (length l2)))))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme |>\n<code>",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)) \n      \
    \  (lambda (x) (equal? (first l1) x))))\n", "  (sort (remove-duplicates \n   \
    \       (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (let ([l1 (sort\
    \ l1 '<)\n        l2 (sort l2 '<)])\n    (if (null? l1)\n        (reverse l2)\n\
    \        (if (null? l2)\n            (reverse l1)\n            (let ([head (car\
    \ l1)\n                  tail (cdr l1)])\n              (if (equal? (car l2) head)\n\
    \                  (common (cdr l1) l2)\n                  (common (cdr l1) (cons\
    \ (car l2) tail))))))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x)\
    \ (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first\
    \ l2) x)) l1))))\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n   \
    \   [(null? l1) acc]\n      [(null? l2) acc]\n      [(equal? (car l1) (car l2))\
    \ (loop (cdr l1) (cdr l2) (cons (car l1) acc))]\n      [else (loop (cdr l1) l2\
    \ (cons (car l1) acc))])))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l1)) l2))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          #:key (lambda\
    \ (x) (first l1)))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (equal? (first\
    \ l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)) \n      \
    \  (lambda (x) (< (length l1) (length l2)))))\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=racket,scheme |>\n<code>", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                     (if (equal? (first x) y)\n     \
    \                                    (cons (first x) y)\n                    \
    \                     (cons x y)))\n                                     (reverse\
    \ l1)\n                                     (reverse l2)))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  #:key (lambda (x) (first l1)))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (let ([l1\
    \ (sort l1)\n         l2 (sort l2)])\n    (cond [(null? l1) l2]\n          [(null?\
    \ l2) l1]\n          [else (if (equal? (first l1) (first l2))\n              \
    \    (common (rest l1) (rest l2))\n                  (cons (first l1) (common\
    \ (rest l1) l2)))])))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (equal? (first\
    \ l1) x))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                       (if (equal?\
    \ x y)\n                                           x\n                       \
    \                    #t\n                                           (cons x y))\n\
    \                                       l1 l2))\n                 l1))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=racket,scheme |>\n<code>", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)) \n      \
    \  (lambda (x) (equal? (first l1) x))))\n", "  (sort (remove-duplicates \n   \
    \       (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let loop ((l1 l1) (l2 l2)\
    \ (acc '()))\n    (if (null? l1) acc\n        (if (null? l2) acc\n           \
    \ (loop (cdr l1) (cdr l2) (cons (car l1) acc)))))\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks so much for this! I really appreciate it!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)) \n        (lambda (x) (< (length l1) (length\
    \ l2)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks, I added a solution\
    \ that uses `remove-duplicates` and `remove-if-not`.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nI came up with this solution:\n<code>", "  (sort (remove-duplicates (fold-left\
    \ (lambda (x y)\n                                       (if (equal? (first x)\
    \ y)\n                                           x\n                         \
    \                  y))\n                                       (reverse l1)\n\
    \                                       (reverse l2)))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                     (if (null? y)\n\
    \                                         (list x)\n                         \
    \                (if (equal? (car x) (car y))\n                              \
    \               (cons (car x) (cdr x))\n                                     \
    \        (cons (car y) (cdr y))))))\n            (remove-duplicates (fold-left\
    \ (lambda (x y)\n                                           (if (null? y)\n  \
    \                                             (list x)\n                     \
    \                          (if (equal? (car x) (car y))\n                    \
    \                               (cons (car x) (cdr x))\n                     \
    \                              (cons (car y) (cdr y))))))\n                  \
    \            l1 l2)))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>", "  (sort (remove-duplicates \n     \
    \     (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let loop ((l1 l1) (l2 l2)\
    \ (acc '()))\n    (cond\n      [(empty? l1) acc]\n      [(empty? l2) acc]\n  \
    \    [(equal? (first l1) (first l2)) (loop (rest l1) (rest l2) (cons (first l1)\
    \ acc))]\n      [else (loop (rest l1) (rest l2) (cons (first l1) acc))])))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates (fold-left (lambda (x y)\n                         \
    \            (if (equal? (first x) y)\n                                      \
    \   (cons (first x) (cons (first y) '()))\n                                  \
    \       (cons (first x) '())))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (", "  (sort (remove-duplicates \n \
    \         (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates (fold-left\
    \ (lambda (x y) (if (equal? x y) x y)) l1 l2))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)) \n      \
    \  (lambda (x) (equal? (first l1) x))))\n", "  (sort (remove-duplicates \n   \
    \       (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (let loop ((l1 l1) (l2 l2)\
    \ (result '()))\n    (cond ((null? l1) l2)\n          ((null? l2) l1)\n      \
    \    ((equal? (car l1) (car l2)) (loop (cdr l1) (cdr l2) (cons (car l1) result)))\n\
    \          (else (loop (cdr l1) (cdr l2) result)))\n    (reverse result)))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates (fold-left (lambda (x y)\n                         \
    \              (if (equal? (car x) (car y))\n                                \
    \           x\n                                           (cons (car x) y)))\n\
    \                                     (remove-duplicates l1)\n               \
    \                      (remove-duplicates l2))\n                     #f)))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (member x l2)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates\
    \ \n          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n        \
    \  #:key (lambda (x) (first l1)))))\n", "  (sort (remove-duplicates \n       \
    \   (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not\
    \ (lambda (x) (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n\
    \          (remove-if-not (lambda (x) (equal? (first l1) x)) l2)) \n        (lambda\
    \ (x) (equal? (first l1) x))))\n</code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n",
  "  (sort (remove-duplicates (fold-left (lambda (x y)\n                         \
    \            (if (equal? x y)\n                                         x\n  \
    \                                       (cons x y))\n                        \
    \             (cons x '()))\n                                 (remove-duplicates\
    \ l1)\n                                 (remove-duplicates l2))\n            \
    \ <))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal?\
    \ (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2)\
    \ x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not (lambda\
    \ (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x) (equal?\
    \ (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (sort (remove-duplicates \n          (remove-if-not\
    \ (lambda (x) (equal? (first l1) x)) l2)\n          (remove-if-not (lambda (x)\
    \ (equal? (first l2) x)) l1))))\n", "  (let loop ((l1 l1) (l2 l2) (acc '()))\n\
    \    (cond\n      [(empty? l1) (cons l2 acc)]\n      [(empty? l2) (cons l1 acc)]\n\
    \      [(equal? (first l1) (first l2)) (loop (rest l1) (rest l2) (cons (first\
    \ l1) acc))]\n      [else (loop (rest l1) (rest l2) (cons (first l1) acc))])))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n",
  "  (sort (remove-duplicates (fold-left (lambda (x y)\n                         \
    \              (if (equal? x y)\n                                           x\n\
    \                                           (cons x y)))\n                   \
    \                (remove-duplicates l1)\n                                   (remove-duplicates\
    \ l2))\n                 <))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `(common '(1 2 3) '(1 2 3 4))`.\n<|/ c |>\n<| c |>\nYes, I\
    \ noticed that and fixed it.  Thanks for pointing it out.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
