name: HumanEval_111_histogram
language: racket
prompt: "#lang racket\n\n;; Given a string representing a space separated lowercase\
  \ letters, return a dictionary\n;; of the letter with the most repetition and containing\
  \ the corresponding count.\n;; If several letters have the same occurrence, return\
  \ all of them.\n;; Example:\n;; histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
  ;; histogram('a b b a') == {'a': 2, 'b': 2}\n;; histogram('a b c a b') == {'a':\
  \ 2, 'b': 2}\n;; histogram('b b b b a') == {'b': 4}\n;; histogram('') == {}\n(define\
  \ (histogram test)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate histogram))\n\
  \    (check-equal? (candidate \"a b b a\") #hash((\"a\" .  2) (\"b\" .  2)))\n \
  \   (check-equal? (candidate \"a b c a b\") #hash((\"a\" .  2) (\"b\" .  2)))\n\
  \    (check-equal? (candidate \"a b c d g\") #hash((\"a\" .  1) (\"b\" .  1) (\"\
  c\" .  1) (\"d\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"r t g\") #hash((\"\
  r\" .  1) (\"t\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"b b b b a\"\
  ) #hash((\"b\" .  4)))\n    (check-equal? (candidate \"r t g\") #hash((\"r\" . \
  \ 1) (\"t\" .  1) (\"g\" .  1)))\n    (check-equal? (candidate \"\") #hash())\n\
  \    (check-equal? (candidate \"a\") #hash((\"a\" .  1)))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
