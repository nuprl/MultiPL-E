name: HumanEval_156_int_to_mini_roman
language: racket
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> int_to_mini_roman(19) == 'xix'\n;; >>> int_to_mini_roman(152)\
  \ == 'clii'\n;; >>> int_to_mini_roman(426) == 'cdxxvi'\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= number 0) '']\n    [(= number 1) 'i']\n    [(= number\
    \ 2) 'ii']\n    [(= number 3) 'iii']\n    [(= number 4) 'iv']\n    [(= number\
    \ 5) 'v']\n    [(= number 6) 'vi']\n    [(= number 7) 'vii']\n    [(= number 8)\
    \ 'viii']\n    [(= number 9) 'ix']\n    [(= number 10) 'x']\n    [(= number 11)\
    \ 'xii']\n    [(= number 12) 'xiii']\n    [(= number 13) 'xiv']\n    [(= number\
    \ 14) 'xv']\n    [(= number 15) 'xvi']\n    [(= number 16) 'xvii']\n    [(= number\
    \ 17) 'xviii']\n    [(= number 18) 'xix']\n    [(= number 19) 'xx']\n    [(= number\
    \ 20) 'xxi']\n    [(= number 21) 'xxii']\n    [(= number 22) 'xxiii']\n    [(=\
    \ number 23) 'xxiv']\n    [(= number 24) 'xxv']\n    [(= number 25) 'xxvi']\n\
    \    [(= number 26) 'xxvii']\n    [(= number 27) 'xxviii']\n    [(= number 28)\
    \ 'xxix']\n    [(= number 29) 'xxx']\n    [(= number 30) 'xxxi']\n    [(= number\
    \ 31) 'xxxii']\n    [(= number 32) 'xxxiii']\n    [(= number 33) 'xxxiv']\n  \
    \  [(= number 34) 'xxxv']\n    [(= number 35) 'xxxvi']\n    [(= number 36) 'xxxvii']\n\
    \    [(= number 37) 'xxxviii']\n    [(= number 38) 'xxxiv']\n    [(= number 39)\
    \ 'xxxv']\n    [(= number 40) 'xxxi']\n    [(= number 41) 'xxxiv']\n    [(= number\
    \ 42) 'xxvi']\n    [(= number 43) 'xxvii']\n    [(= number 44) 'xxviii']\n   \
    \ [(= number 45) 'xxviiii']\n    [(= number 46) 'xxix']\n    [(", "  (cond\n \
    \   [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number\
    \ 100))))])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [(< number 4000) (int_to_mini_roman number)]\n    [else (cond [(< number 5000)\
    \ (int_to_mini_roman number)]\n              [(< number 10000) (int_to_mini_roman\
    \ number)]\n              [(< number 100000) (int_to_mini_roman number)]\n   \
    \           [(< number 1000000) (int_to_mini_roman number)]\n              [(<\
    \ number 10000000) (int_to_mini_roman number)]\n              [(< number 100000000)\
    \ (int_to_mini_roman number)]\n              [(< number 1000000000) (int_to_mini_roman\
    \ number)]\n              [(< number 10000000000) (int_to_mini_roman number)]\n\
    \              [(< number 100000000000) (int_to_mini_roman number)]\n        \
    \      [(< number 1000000000000) (int_to_mini_roman number)]\n              [(<\
    \ number 10000000000000) (int_to_mini_roman number)]\n              [(< number\
    \ 100000000000000) (int_to_mini_roman number)]\n              [(< number 1000000000000000)\
    \ (int_to_mini_roman number)]\n              [(< number 10000000000000000) (int_to_mini_roman\
    \ number)]\n              [(< number 100000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 1000000000000000000) (int_to_mini_roman number)]\n \
    \             [(< number 10000000000000000000) (int_to_mini_roman number)]\n \
    \             [(< number 100000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 1000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 10000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 100000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 1000000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 10000000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 100000000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 1000000000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 10000000000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 100000000000000000000000000000) (int_to_mini_roman number)]\n\
    \              [(< number 1000000000000000000000000000000) (int_to_mini_roman ",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_roman_numeral(number)\
    \ (int_to_mini_roman number - 1))\n              (int_to_mini_roman number - 1))]))\n",
  "  (cond\n    [(< number 1) (error \"Invalid input: number must be positive.\")]\n\
    \    [(< number 1000) (error \"Invalid input: number must be less than 1000.\"\
    )]\n    [else (let ([remainder (modulo number 1000)])\n            (cond\n   \
    \           [(< remainder 100) (cons (- remainder 100) '())]\n              [(<\
    \ remainder 400) (cons 'M (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 900) (cons 'CM (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 500) (cons 'D (int_to_mini_roman remainder))]\n              [(< remainder 400)\
    \ (cons 'CD (int_to_mini_roman remainder))]\n              [(< remainder 1000)\
    \ (cons 'C (int_to_mini_roman remainder))]\n              [(< remainder 900) (cons\
    \ 'XC (int_to_mini_roman remainder))]\n              [(< remainder 500) (cons\
    \ 'L (int_to_mini_roman remainder))]\n              [(< remainder 400) (cons 'XL\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 100) (cons 'X (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 900) (cons 'IX (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (cons 'V (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons 'IV (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (cons 'I (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons 'IX (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons 'V (int_to_mini_roman remainder))]\n \
    \             [(< remainder 400) (cons 'IV (int_to_mini_roman remainder))]\n \
    \             [(< remainder 100) (cons 'I (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 900) (cons 'IX (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 500) (cons 'V (int_to_mini_roman remainder))]\n   \
    \           [(< remainder 400) (cons 'IV (int_to_mini_roman remainder))]\n   \
    \           [(< remainder 100) (cons 'I (int_to_mini_rom", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number 100)))]))\n", "  (cond\n\
    \    [(< number 1) (error \"Invalid input: number must be positive.\")]\n    [(<\
    \ number 1000) (error \"Invalid input: number must be less than 1000.\")]\n  \
    \  [else (let ([remainder (modulo number 1000)])\n            (cond\n        \
    \      [(< remainder 100) (cons (- remainder 100) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons (- remainder 100) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (cons (- remainder 100) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 5000) (cons (- remainder 100) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 10000) (cons (- remainder 1000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 100000) (cons (- remainder 1000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000000) (cons (- remainder 1000)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 10000000) (cons\
    \ (- remainder 1000) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000000) (cons (- remainder 1000) (int_to_mini_roman remainder))]\n      \
    \        [(< remainder 1000000000) (cons (- remainder 1000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 10000000000) (cons (- remainder 1000)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 100000000000) (cons\
    \ (- remainder 1000) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 1000000000000) (cons (- remainder 1000) (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 10000000000000) (cons (- remainder 1000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 100000000000000) (cons (- remainder\
    \ 1000) (int_to_mini_roman remainder))]\n              [(< remainder 1000000000000000)\
    \ (cons (- remainder 1000) (int_to_mini_roman remainder))]\n              [(<\
    \ remainder 10000000000000000) (cons (- remainder 1000) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000000000000000) (cons (- remainder 1000) (int_",
  "  (cond\n    [(= number 0) 'zero]\n    [(= number 1) 'one]\n    [(= number 2) 'two]\n\
    \    [(= number 3) 'three]\n    [(= number 4) 'four]\n    [(= number 5) 'five]\n\
    \    [(= number 6) 'six]\n    [(= number 7) 'seven]\n    [(= number 8) 'eight]\n\
    \    [(= number 9) 'nine]\n    [(= number 10) 'ten]\n    [(= number 11) 'eleven]\n\
    \    [(= number 12) 'twelve]\n    [(= number 13) 'thirteen]\n    [(= number 14)\
    \ 'fourteen]\n    [(= number 15) 'fifteen]\n    [(= number 16) 'sixteen]\n   \
    \ [(= number 17) 'seventeen]\n    [(= number 18) 'eighteen]\n    [(= number 19)\
    \ 'nineteen]\n    [(= number 20) 'twenty]\n    [(= number 21) 'twenty-one]\n \
    \   [(= number 22) 'twenty-two]\n    [(= number 23) 'twenty-three]\n    [(= number\
    \ 24) 'twenty-four]\n    [(= number 25) 'twenty-five]\n    [(= number 26) 'twenty-six]\n\
    \    [(= number 27) 'twenty-seven]\n    [(= number 28) 'twenty-eight]\n    [(=\
    \ number 29) 'twenty-nine]\n    [(= number 30) 'thirty]\n    [(= number 31) 'thirty-one]\n\
    \    [(= number 32) 'thirty-two]\n    [(= number 33) 'thirty-three]\n    [(= number\
    \ 34) 'thirty-four]\n    [(= number 35) 'thirty-five]\n    [(= number 36) 'thirty-six]\n\
    \    [(= number 37) 'thirty-seven]\n    [(= number 38) 'thirty-eight]\n    [(=\
    \ number 39) 'thirty-nine]\n    [(= number 40) 'forty]\n    [(= number 41) 'forty-one]\n\
    \    [(= number 42) 'forty-two]\n    [(= ", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ (/ number 100)) (append 'x' (int_to_mini_roman (- number (* 100 number))))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman\
    \ floor (/ number 1000))\n                                 (mini_roman_numeral\
    \ (- number 1000)))]\n    [else (string-append (int_to_mini_roman floor (/ number\
    \ 1000))\n                         (mini_roman_numeral (- number 1000))\n    \
    \                     (mini_roman_numeral (- number 100)))]))\n", "  (cond\n \
    \   [(< number 1) (error \"Invalid input: number must be positive.\")]\n    [(<\
    \ number 1000) (error \"Invalid input: number must be less than 1000.\")]\n  \
    \  [else (cond\n             [(= (modulo number 100) 0) (int_to_mini_roman 0 (+\
    \ number 100))\n               (= (modulo number 100) 1) (int_to_mini_roman 0\
    \ (+ number 100))\n               (= (modulo number 100) 2) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 3) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 4) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 5) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 6) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 7) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 8) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 9) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 10) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 11) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 12) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 13) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 14) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 15) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 16) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 17) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 18) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 19) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number 100) 20) (int_to_mini_roman\
    \ 0 (+ number 100))\n               (= (modulo number ", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman floor (/ number\
    \ 1000))\n                                 (mini_roman_numeral (- number 1)))]\n\
    \    [else (string-append (int_to_mini_roman floor (/ number 1000))\n        \
    \                 (mini_roman_numeral (- number 1))\n                        \
    \ (mini_roman_numeral (- number 1)))]))\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (string-append (int_to_mini_roman floor (/ number 100))\
    \ 'i')]\n    [else (string-append (int_to_mini_roman floor (/ number 10)) 'x'\n\
    \                           (int_to_mini_roman floor (- (/ number 10) 10)) 'vi')]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman number) (int_to_mini_roman number))]\n  ))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [(< number 5000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ number) (int_to_mini_roman number))]))\n", "  (let loop ((num number) (acc '()))\n\
    \    (cond ((< num 1000)\n           (cons num (reverse acc)))\n          ((<\
    \ num 900)\n           (loop (/ num 100) (cons (mod num 100) acc)))\n        \
    \  ((< num 500))\n          ((< num 400)\n           (loop (/ num 100) (cons (mod\
    \ num 10) acc)))\n          ((< num 100)\n           (loop (/ num 10) (cons (mod\
    \ num 5) acc)))\n          ((< num 10)\n           (loop (/ num 5) (cons (mod\
    \ num 1) acc)))\n          ((< num 1)\n           (loop (/ num 1) (cons 'm acc)))\n\
    \          (else\n           (loop (/ num 10) (cons (mod num 5) acc))))))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman 100\
    \ (- number 1)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [(< number 4000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman number) (int_to_mini_roman number 4000))]\n\
    \  ))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- (/ number 100) 100)))]))\n", "  (cond\n    [(< number 1) (error \"\
    Invalid input: number must be positive.\")]\n    [(< number 1000) (error \"Invalid\
    \ input: number must be less than 1000.\")]\n    [else (let ([remainder (modulo\
    \ number 1000)])\n            (cond\n              [(< remainder 100) (cons (-\
    \ remainder 100) '(IV))\n               (< remainder 500) (cons (- remainder 100)\
    \ '(III))\n               (< remainder 1000) (cons (- remainder 100) '(II))\n\
    \               (< remainder 500) (cons (- remainder 100) '(I))\n            \
    \   (< remainder 100) (cons (- remainder 100) '(V))\n               (< remainder\
    \ 500) (cons (- remainder 100) '(VI))\n               (< remainder 1000) (cons\
    \ (- remainder 100) '(V))\n               (< remainder 500) (cons (- remainder\
    \ 100) '(IV))\n               (< remainder 100) (cons (- remainder 100) '(I))\n\
    \               (< remainder 500) (cons (- remainder 100) '(II))\n           \
    \    (< remainder 1000) (cons (- remainder 100) '(III))\n               (< remainder\
    \ 500) (cons (- remainder 100) '(III))\n               (< remainder 100) (cons\
    \ (- remainder 100) '(II))\n               (< remainder 500) (cons (- remainder\
    \ 100) '(III))\n               (< remainder 1000) (cons (- remainder 100) '(IV))\n\
    \               (< remainder 500) (cons (- remainder 100) '(IV))\n           \
    \    (< remainder 100) (cons (- remainder 100) '(I))\n               (< remainder\
    \ 500) (cons (- remainder 100) '(I))\n               (< remainder 1000) (cons\
    \ (- remainder 100) '(II))\n               (< remainder 500) (cons (- remainder\
    \ 100) '(II))\n               (< remainder 100) (cons (- remainder 100) '(III))\n\
    \               (< remainder 500) (cons (- remainder 100) '(III))\n          \
    \     (< remainder 100) (cons (- remainder 100) '(III))\n               (< remainder\
    \ 500) (cons (- ", "  (cond\n    [(< number 1) (error \"int_to_mini_roman: number\
    \ must be positive.\")]\n    [(< number 1000) (error \"int_to_mini_roman: number\
    \ must be <= 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n  \
    \          (cond\n              [(< remainder 100) (cons (substring \"MCMXCIV\"\
    \ 0 remainder) '())]\n              [(< remainder 500) (cons (substring \"DCLXVI\"\
    \ 0 remainder) '())]\n              [(< remainder 1000) (cons (substring \"MNXVI\"\
    \ 0 remainder) '())]\n              [(< remainder 5000) (cons (substring \"CXLVI\"\
    \ 0 remainder) '())]\n              [(< remainder 10000) (cons (substring \"LXVII\"\
    \ 0 remainder) '())]\n              [(< remainder 50000) (cons (substring \"XLVIII\"\
    \ 0 remainder) '())]\n              [(< remainder 100000) (cons (substring \"\
    XLIVII\" 0 remainder) '())]\n              [(< remainder 500000) (cons (substring\
    \ \"XLIVIII\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"XLIVIIII\" 0 remainder) '())]\n              [(< remainder 50000000) (cons\
    \ (substring \"XLIVIIIII\" 0 remainder) '())]\n              [(< remainder 100000000)\
    \ (cons (substring \"XLIVIIIIII\" 0 remainder) '())]\n              [(< remainder\
    \ 5000000000) (cons (substring \"XLIVIIIIIII\" 0 remainder) '())]\n          \
    \    [(< remainder 10000000000) (cons (substring \"XLIVIIIIIIII\" 0 remainder)\
    \ '())]\n              [(< remainder 500000000000) (cons (substring \"XLIVIIIIIIIII\"\
    \ 0 remainder) '())]\n              [(< remainder 1000000000000) (cons (substring\
    \ \"XLIVIIIIIIIIII\" 0 remainder) '())]\n              [(< remainder 50000000000000)\
    \ (cons (substring \"XLIVIIIIIIIIIII\" 0 remainder) '())]\n              [(< remainder ",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 100))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman number)\
    \ (int_to_mini_roman number))]\n  ))\n", "  (cond\n    [(< number 1) '']\n   \
    \ [(< number 1000) (int_to_mini_roman number)]\n    [(< number 4000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman number / 100) (int_to_mini_roman\
    \ number % 100))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman (/ number 100))\
    \ (append 'x' (int_to_mini_roman number)))]))\n", "  (cond\n    [(< number 1)\
    \ '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number\
    \ 100))))])\n  )\n)\n", "  (cond\n    [(= number 0) '']\n    [(= number 1) 'i']\n\
    \    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n    [(= number 4) 'iv']\n\
    \    [(= number 5) 'v']\n    [(= number 6) 'vi']\n    [(= number 7) 'vii']\n \
    \   [(= number 8) 'viii']\n    [(= number 9) 'ix']\n    [(= number 10) 'x']\n\
    \    [(= number 11) 'xii']\n    [(= number 12) 'xiii']\n    [(= number 13) 'xiv']\n\
    \    [(= number 14) 'xvi']\n    [(= number 15) 'xvii']\n    [(= number 16) 'xviii']\n\
    \    [(= number 17) 'xix']\n    [(= number 18) 'xx']\n    [(= number 19) 'xxi']\n\
    \    [(= number 20) 'xxii']\n    [(= number 21) 'xxiii']\n    [(= number 22) 'xxiv']\n\
    \    [(= number 23) 'xxv']\n    [(= number 24) 'xxvi']\n    [(= number 25) 'xxvii']\n\
    \    [(= number 26) 'xxviii']\n    [(= number 27) 'xxix']\n    [(= number 28)\
    \ 'xxx']\n    [(= number 29) 'xxxi']\n    [(= number 30) 'xxxii']\n    [(= number\
    \ 31) 'xxxiii']\n    [(= number 32) 'xxxiv']\n    [(= number 33) 'xxxv']\n   \
    \ [(= number 34) 'xxxvi']\n    [(= number 35) 'xxxvii']\n    [(= number 36) 'xxxviii']\n\
    \    [(= number 37) 'xxxix']\n    [(= number 38) 'xxxx']\n    [(= number 39) 'xxxxi']\n\
    \    [(= number 40) 'xxxxii']\n    [(= number 41) 'xxxxiii']\n    [(= number 42)\
    \ 'xxxxiv']\n    [(= number 43) 'xxxxv']\n    [(= number 44) 'xxxxvi']\n    [(=\
    \ number 45) 'xxxxvii']\n    [(= number 46) 'xxxxviii']\n    [(= ", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor)))) ]))\n", "  (let loop ((num number) (acc '()))\n \
    \   (cond ((< num 1000) (cons num acc))\n          ((< num 1000)\n           (loop\
    \ (sub1 num) (cons (sub1 num) (sub1 acc))))\n          (else\n           (loop\
    \ (sub1 num) (cons (sub1 num) (sub1 acc)))))\n    (reverse acc)))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  ))\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 100))))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 number))))]))\n", "  (cond\n    [(< number 1) '']\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman 100 (- number 1)))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [(< number 4000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ number) (int_to_mini_roman number 4000))]))\n", "  (cond\n    [(< number 1)\
    \ '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n",
  "  (cond\n    [(< number 1) (error \"Invalid input: number must be positive.\")]\n\
    \    [(< number 1000) (error \"Invalid input: number must be less than 1000.\"\
    )]\n    [else (cond\n            [(< number 500) (error \"Invalid input: number\
    \ must be less than 500.\")]\n            [else (cond\n                    [(<\
    \ number 100) (error \"Invalid input: number must be less than 100.\")]\n    \
    \                [else (cond\n                            [(< number 50) (error\
    \ \"Invalid input: number must be less than 50.\")]\n                        \
    \    [(< number 20) (error \"Invalid input: number must be less than 20.\")]\n\
    \                            [(< number 10) (error \"Invalid input: number must\
    \ be less than 10.\")]\n                            [(< number 5) (error \"Invalid\
    \ input: number must be less than 5.\")]\n                            [(< number\
    \ 1) (error \"Invalid input: number must be less than 1.\")]\n               \
    \             [else (cond\n                                    [(< number 1) (error\
    \ \"Invalid input: number must be less than 1.\")]\n                         \
    \           [(< number 9) (error \"Invalid input: number must be less than 9.\"\
    )]\n                                    [(< number 8) (error \"Invalid input:\
    \ number must be less than 8.\")]\n                                    [(< number\
    \ 7) (error \"Invalid input: number must be less than 7.\")]\n               \
    \                     [(< number 6) (error \"Invalid input: number must be less\
    \ than 6.\")]\n                                    [(< number 5) (error \"Invalid\
    \ input: number must be less than 5.\")]\n                                   \
    \ [(< number 4) (error \"Invalid input: number must be less than 4.\")]\n    \
    \                                [(< number 3) (error \"Invalid input: number\
    \ must be less than 3.\")]\n                                    [(< number 2)\
    \ (error \"Invalid input: number must be less than 2.\")]\n                  \
    \                  [(< number 1) (error \"Invalid input: number must be less than\
    \ 1.\")]\n                                    [else (error \"Invalid input: number\
    \ must be less than 1.\")]\n                                    )])])])", "  (let\
    \ ((roman (make-array (ceiling (/ number 100)) #:element-type 'string)))\n   \
    \ (let loop ((i 0) (j 0))\n      (cond ((< i number) '())\n            ((< j roman-size)\
    \ '())\n            ((= (modulo i 100) (modulo j 100))\n             (set! roman\
    \ (string-append roman \"M\")))\n            ((= (modulo i 100) (modulo j 10))\n\
    \             (set! roman (string-append roman \"CM\")))\n            ((= (modulo\
    \ i 10) (modulo j 100))\n             (set! roman (string-append roman \"D\")))\n\
    \            ((= (modulo i 10) (modulo j 10))\n             (set! roman (string-append\
    \ roman \"CD\")))\n            ((= (modulo i 1) (modulo j 100))\n            \
    \ (set! roman (string-append roman \"C\")))\n            ((= (modulo i 1) (modulo\
    \ j 10))\n             (set! roman (string-append roman \"XC\")))\n          \
    \  ((= (modulo i 10) (modulo j 1))\n             (set! roman (string-append roman\
    \ \"L\")))\n            ((= (modulo i 10) (modulo j 10))\n             (set! roman\
    \ (string-append roman \"XL\")))\n            ((= (modulo i 100) (modulo j 1))\n\
    \             (set! roman (string-append roman \"X\")))\n            ((= (modulo\
    \ i 100) (modulo j 10))\n             (set! roman (string-append roman \"IX\"\
    )))\n            ((= (modulo i 10) (modulo j 1))\n             (set! roman (string-append\
    \ roman \"V\")))\n            ((= (modulo i 10) (modulo j 10))\n             (set!\
    \ roman (string-append roman \"IV\")))\n            ((= (modulo i 1) (modulo j\
    \ 1))\n             (set! roman (string-append roman \"I\")))\n            (else\n\
    \             (set! roman (string-append roman \"I\")))\n            (loop (+\
    \ i 1) (+ j 1)))))\n    (string-lower (string-join roman \"\")))\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like your solution, however it only works for numbers\
    \ up to 999. I'm looking for a solution that works for numbers up to 999.999.\n\
    <|/ c |>\n<| c |>\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(<\
    \ number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_roman_numeral(number) (int_to_mini_roman number - 1))\n            \
    \  (int_to_mini_roman number - 1))]))\n", "  (cond\n    [(< number 1) '']\n  \
    \  [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ (/ number 100)) (int_to_mini_roman #(mod number 100)))]))\n", "  (cond\n   \
    \ [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_roman_numeral\
    \ number) (int_to_mini_roman number))]\n  ))\n", "  (cond\n    [(= number 0) '']\n\
    \    [(= number 1) 'i']\n    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n \
    \   [(= number 4) 'iv']\n    [(= number 5) 'v']\n    [(= number 6) 'vi']\n   \
    \ [(= number 7) 'vii']\n    [(= number 8) 'viii']\n    [(= number 9) 'ix']\n \
    \   [(= number 10) 'x']\n    [(= number 11) 'xi']\n    [(= number 12) 'xii']\n\
    \    [(= number 13) 'xiii']\n    [(= number 14) 'xiv']\n    [(= number 15) 'xv']\n\
    \    [(= number 16) 'xvi']\n    [(= number 17) 'xvii']\n    [(= number 18) 'xviii']\n\
    \    [(= number 19) 'xix']\n    [(= number 20) 'xx']\n    [(= number 21) 'xxi']\n\
    \    [(= number 22) 'xxii']\n    [(= number 23) 'xxiii']\n    [(= number 24) 'xxiv']\n\
    \    [(= number 25) 'xxv']\n    [(= number 26) 'xxvi']\n    [(= number 27) 'xxvii']\n\
    \    [(= number 28) 'xxviii']\n    [(= number 29) 'xxix']\n    [(= number 30)\
    \ 'xxx']\n    [(= number 31) 'xxxi']\n    [(= number 32) 'xxxii']\n    [(= number\
    \ 33) 'xxxiii']\n    [(= number 34) 'xxxiv']\n    [(= number 35) 'xxxv']\n   \
    \ [(= number 36) 'xxxvi']\n    [(= number 37) 'xxxvii']\n    [(= number 38) 'xxxviii']\n\
    \    [(= number 39) 'xxxiv']\n    [(= number 40) 'xxxv']\n    [(= number 41) 'xxxi']\n\
    \    [(= number 42) 'xxxiv']\n    [(= number 43) 'xxxv']\n    [(= number 44) 'xxvi']\n\
    \    [(= number 45) 'xxvii']\n    [(= number 46) 'xxviii']\n    [(= number 47",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) (error \"Invalid input: number must be positive.\")]\n    [(< number 1000)\
    \ (error \"Invalid input: number must be less than 1000.\")]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n            (cond\n              [(< remainder 100)\
    \ (cons remainder (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 400) (cons 'M (int_to_mini_roman remainder))]\n              [(< remainder 900)\
    \ (cons 'CM (int_to_mini_roman remainder))]\n              [(< remainder 500)\
    \ (cons 'D (int_to_mini_roman remainder))]\n              [(< remainder 400) (cons\
    \ 'CD (int_to_mini_roman remainder))]\n              [(< remainder 900) (cons\
    \ 'XC (int_to_mini_roman remainder))]\n              [(< remainder 500) (cons\
    \ 'C (int_to_mini_roman remainder))]\n              [(< remainder 400) (cons 'XC\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 900) (cons 'L (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (cons 'X (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons 'IX (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons 'V (int_to_mini_roman remainder))]\n \
    \             [(< remainder 500) (cons 'I (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 400) (cons 'VI (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 900) (cons 'IV (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 500) (cons 'I (int_to_mini_roman remainder))]\n   \
    \           [(< remainder 400) (cons 'IX (int_to_mini_roman remainder))]\n   \
    \           [(< remainder 900) (cons 'XC (int_to_mini_roman remainder))]\n   \
    \           [(< remainder 500) (cons 'C (int_to_mini_roman remainder))]\n    \
    \          [(< remainder 400) (cons 'CD (int_to_mini_roman remainder))]\n    \
    \          [(< remainder 900) (cons 'M (int_to_mini_roman remainder))]\n     \
    \         [(< remainder 500) (cons 'D (", "  (cond\n    [(< number 1) (error \"\
    Invalid input: number must be positive.\")]\n    [(< number 1000) (error \"Invalid\
    \ input: number must be less than 1000.\")]\n    [else (let ([remainder (modulo\
    \ number 1000)])\n            (cond\n              [(< remainder 100) (cons (substring\
    \ \"MCMXCIV\" 0 remainder) '())]\n              [(< remainder 500) (cons (substring\
    \ \"DCLXVI\" 0 remainder) '())]\n              [(< remainder 1000) (cons (substring\
    \ \"MCDXV\" 0 remainder) '())]\n              [(< remainder 5000) (cons (substring\
    \ \"CCLXV\" 0 remainder) '())]\n              [(< remainder 10000) (cons (substring\
    \ \"MCCCXV\" 0 remainder) '())]\n              [(< remainder 100000) (cons (substring\
    \ \"MMCCCXV\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"MMMCCCXV\" 0 remainder) '())]\n              [(< remainder 10000000) (cons\
    \ (substring \"MMMMCCCXV\" 0 remainder) '())]\n              [(< remainder 100000000)\
    \ (cons (substring \"MMMMMMMCCCXV\" 0 remainder) '())]\n              [(< remainder\
    \ 1000000000) (cons (substring \"MMMMMMMMCCCXV\" 0 remainder) '())]\n        \
    \      [(< remainder 10000000000) (cons (substring \"MMMMMMMMMMMCCCXV\" 0 remainder)\
    \ '())]\n              [(< remainder 100000000000) (cons (substring \"MMMMMMMMMMMMCCCXV\"\
    \ 0 remainder) '())]\n              [(< remainder 1000000000000) (cons (substring\
    \ \"MMMMMMMMMMMMMMMCCCXV\" 0 remainder) '())]\n              [(< remainder 10000000000000)\
    \ (cons (substring \"MMMMMMMMMMMMMMMMCCCXV\" 0 remainder) '())]\n            \
    \  [(< remainder 100000000000000) (cons (substring \"MMMMMMMMMMMMMMMMMMMCCCXV\"\
    \ 0 remainder) '())]\n              [(< remainder 1000000000000000) (cons (substring\
    \ \"MMMMMMMMMMMMMMMMMMMMCCCXV\" 0 remainder) '())]\n              [(< remainder\
    \ 10000000000000000) (cons (substring \"MMMMMMMMMMMMMMMMMMMMMMM", "  (cond\n \
    \   [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman 100 (- number\
    \ 1)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman (/ number 100)) (append 'x' (int_to_mini_roman\
    \ (- number 100))))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input:\
    \ number must be positive.\")]\n    [(< number 1000) (error \"Invalid input: number\
    \ must be less than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n\
    \            (cond\n              [(< remainder 100) (cons (- remainder 100) '(IV))\n\
    \              [(< remainder 500) (cons (- remainder 100) '(III))\n          \
    \    [(< remainder 1000) (cons (- remainder 100) '(II))\n              [(< remainder\
    \ 500) (cons (- remainder 100) '(I))\n              [(< remainder 100) (cons (-\
    \ remainder 100) '(V))\n              [(< remainder 500) (cons (- remainder 100)\
    \ '(VI))\n              [(< remainder 1000) (cons (- remainder 100) '(V))\n  \
    \            [(< remainder 500) (cons (- remainder 100) '(VI))\n             \
    \ [(< remainder 100) (cons (- remainder 100) '(IV))\n              [(< remainder\
    \ 500) (cons (- remainder 100) '(IV))\n              [(< remainder 1000) (cons\
    \ (- remainder 100) '(IV))\n              [(< remainder 500) (cons (- remainder\
    \ 100) '(IV))\n              [(< remainder 100) (cons (- remainder 100) '(IV))\n\
    \              [(< remainder 500) (cons (- remainder 100) '(IV))\n           \
    \   [(< remainder 1000) (cons (- remainder 100) '(IV))\n              [(< remainder\
    \ 500) (cons (- remainder 100) '(IV))\n              [(< remainder 100) (cons\
    \ (- remainder 100) '(IV))\n              [(< remainder 500) (cons (- remainder\
    \ 100) '(IV))\n              [(< remainder 1000) (cons (- remainder 100) '(IV))\n\
    \              [(< remainder 500) (cons (- remainder 100) '(IV))\n           \
    \   [(< remainder 100) (cons (- remainder 100) '(IV))\n              [(< remainder\
    \ 500) (cons (- remainder 100) '(IV))\n              [(< remainder 1000) (cons\
    \ (- remainder 100) '(IV))\n              [(< remainder 500) (cons (- remainder\
    \ 100) '", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman (/ number 100)) (append 'x' (int_to_mini_roman\
    \ (- number 100))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number 100))))])\n\
    \  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [(< number 4000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (/ number\
    \ 10) (int_to_mini_roman floor (/ number 1)))]))", "  (cond\n    [(< number 1)\
    \ '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [(< number 4000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman number) (int_to_mini_roman\
    \ number))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number 100)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor\
    \ (/ number 100)) (int_to_mini_roman 100 (- number 1)))]))\n", "  (cond\n    [(<\
    \ number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(= number 0) '']\n\
    \    [(= number 1) 'i']\n    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n \
    \   [(= number 4) 'iv']\n    [(= number 5) 'v']\n    [(= number 6) 'vi']\n   \
    \ [(= number 7) 'vii']\n    [(= number 8) 'viii']\n    [(= number 9) 'ix']\n \
    \   [(= number 10) 'x']\n    [(= number 11) 'xii']\n    [(= number 12) 'xiii']\n\
    \    [(= number 13) 'xiv']\n    [(= number 14) 'xvi']\n    [(= number 15) 'xvii']\n\
    \    [(= number 16) 'xviii']\n    [(= number 17) 'xix']\n    [(= number 18) 'xx']\n\
    \    [(= number 19) 'xxi']\n    [(= number 20) 'xxii']\n    [(= number 21) 'xxiii']\n\
    \    [(= number 22) 'xxiv']\n    [(= number 23) 'xxv']\n    [(= number 24) 'xxvi']\n\
    \    [(= number 25) 'xxvii']\n    [(= number 26) 'xxviii']\n    [(= number 27)\
    \ 'xxix']\n    [(= number 28) 'xxx']\n    [(= number 29) 'xxxi']\n    [(= number\
    \ 30) 'xxxii']\n    [(= number 31) 'xxxiii']\n    [(= number 32) 'xxxiv']\n  \
    \  [(= number 33) 'xxxv']\n    [(= number 34) 'xxxvi']\n    [(= number 35) 'xxxvii']\n\
    \    [(= number 36) 'xxxviii']\n    [(= number 37) 'xxxiv']\n    [(= number 38)\
    \ 'xxxv']\n    [(= number 39) 'xxxvi']\n    [(= number 40) 'xxxvii']\n    [(=\
    \ number 41) 'xxxviii']\n    [(= number 42) 'xxxi']\n    [(= number 43) 'xxxi']\n\
    \    [(= number 44) 'xxxi']\n    [(= number 45) 'xxxi']\n    [(= number 46) 'xxxi']\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman\
    \ number) (mini_roman_numeral_to_char number))]\n    [else (mini_roman_numeral_to_char\
    \ (int_to_mini_roman number))]))\n", "  (cond\n    [(< number 1) '']\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman 100 (- number 1)))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- (/ number 100) 10)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_roman_numeral(number)\
    \ (int_to_mini_roman number))])))\n", "  (let loop ((num number)\n           \
    \  (str \"\")\n             (i 0))\n    (cond\n      [(= num 0) str]\n      [(<\
    \ num 1000) (loop (- num 1000) (append str (char->string (char->integer 'm'))\n\
    \                                         (char->string (char->integer 'd'))\n\
    \                                         (char->string (char->integer 'c'))\n\
    \                                         (char->string (char->integer 'l'))\n\
    \                                         (char->string (char->integer 'x')))]\n\
    \      [(< num 4000)\n       (loop (- num 4000) (append str (char->string (char->integer\
    \ 'c'))\n                                   (char->string (char->integer 'l'))\n\
    \                                   (char->string (char->integer 'x'))\n     \
    \                              (char->string (char->integer 'i'))\n          \
    \                         (char->string (char->integer 'x')))]\n      [(< num\
    \ 9000)\n       (loop (- num 9000) (append str (char->string (char->integer 'd'))\n\
    \                                   (char->string (char->integer 'l'))\n     \
    \                              (char->string (char->integer 'x'))\n          \
    \                         (char->string (char->integer 'v'))\n               \
    \                    (char->string (char->integer 'i'))\n                    \
    \               (char->string (char->integer 'x')))]\n      [(< num 5000)\n  \
    \     (loop (- num 5000) (append str (char->string (char->integer 'd'))\n    \
    \                               (char->string (char->integer 'l'))\n         \
    \                          (char->string (char->integer 'x'))\n              \
    \                     (char->string (char->integer 'v'))\n                   \
    \                (char->string (char->integer 'i'))\n                        \
    \           (char->string (char->integer 'x')))]\n      [(< num 10000)\n     \
    \  (loop (- num 10000) (append str (char->string (char->integer 'c'))\n      \
    \                             (char->string (char->integer 'l'))\n           \
    \                        (char->string (char->integer 'x'))\n                \
    \                   (char->string (char->integer 'v'))\n                     \
    \              (char->string (char->integer 'i'))\n                          \
    \         (char->string (char->integer 'x')))]\n      [(< num 15000) \n      \
    \ (loop (- num 15000) (append str (char->string (char->integer 'c'))\n       \
    \                            (char->string (char->integer 'l'))\n            \
    \                       (char->string (char->integer 'x'))\n                 \
    \                  (char->string (char->integer 'v'))\n                      \
    \             (char->", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number 100))))])\n\
    \  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number (* 100 number))))]))\n", "  (cond\n    [(< number 1) '']\n \
    \   [(< number 1000) (int_to_mini_roman number)]\n    [(< number 4000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman number) (int_to_mini_roman number\
    \ 4000))]\n  ))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number\
    \ must be greater than 1.\")]\n    [(< number 1000) (error \"Invalid input: number\
    \ must be less than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n\
    \            (cond\n              [(< remainder 100) (cons remainder (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 500) (cons remainder (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000) (cons remainder (int_to_mini_roman\
    \ remainder))]\n              [else (error \"Invalid input: number must be less\
    \ than 1000.\")]))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_roman_numeral number)\n\
    \                (int_to_mini_roman number))]))\n", "  (cond\n    [(< number 1)\
    \ '']\n    [(< number 1000) (string-append (int_to_mini_roman floor (/ number\
    \ 100)) 'i')]\n    [else (string-append (int_to_mini_roman floor (/ number 1000))\
    \ 'mvi')])\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (substring\
    \ 'MCMXCIV VIIIIV IIXIV XCIV XLVIII XLIX XVIII XLXII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX XIII XLIX\
    \ XIII XLIX XIII XLI", "  (let loop ((num number)\n             (roman '())\n\
    \             (i 0))\n    (if (< i 1000)\n        (if (= (modulo num 100) 0)\n\
    \            (loop (quotient num 100)\n                  (cons (modulo num 100)\
    \ roman)\n                  (+ i 1))\n            (loop (quotient num 10)\n  \
    \                (cons (modulo num 10) roman)\n                  (+ i 1)))\n \
    \       (loop (quotient num 5)\n              (cons (modulo num 5) roman)\n  \
    \            (+ i 1)))))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number 100))))])\n\
    \  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number (* 100 floor)))) ]))\n", "  (let loop ((num number) (acc '()))\n\
    \    (cond ((< num 1000) (cons num (reverse acc)))\n          ((< num 900) (cons\
    \ num (reverse acc)))\n          ((< num 500) (cons num (reverse acc)))\n    \
    \      ((< num 400) (cons num (reverse acc)))\n          ((< num 100) (cons num\
    \ (reverse acc)))\n          ((< num 90) (cons num (reverse acc)))\n         \
    \ ((< num 50) (cons num (reverse acc)))\n          ((< num 40) (cons num (reverse\
    \ acc)))\n          ((< num 10) (cons num (reverse acc)))\n          ((< num 9)\
    \ (cons num (reverse acc)))\n          ((< num 5) (cons num (reverse acc)))\n\
    \          ((< num 4) (cons num (reverse acc)))\n          ((< num 1) (cons num\
    \ (reverse acc)))\n          ((< num 9) (cons num (reverse acc)))\n          ((<\
    \ num 5) (cons num (reverse acc)))\n          ((< num 4) (cons num (reverse acc)))\n\
    \          ((< num 1) (cons num (reverse acc)))\n          ((< num 9) (cons num\
    \ (reverse acc)))\n          ((< num 5) (cons num (reverse acc)))\n          ((<\
    \ num 4) (cons num (reverse acc)))\n          ((< num 1) (cons num (reverse acc)))\n\
    \          ((< num 9) (cons num (reverse acc)))\n          ((< num 5) (cons num\
    \ (reverse acc)))\n          ((< num 4) (cons num (reverse acc)))\n          ((<\
    \ num 1) (cons num (reverse acc)))\n          ((< num 9) (cons num (reverse acc)))\n\
    \          ((< num 5) (cons num (reverse acc)))\n          ((< num 4) (cons num\
    \ (reverse acc)))\n          ((< num 1) (cons num (reverse acc)))\n          ((<\
    \ num 9) (cons num (reverse acc)))\n          ((< num 5) (cons num (reverse acc)))\n\
    \          ((< num 4) (cons num (reverse acc)))\n          ((< num 1) (cons num\
    \ (reverse acc)))\n          ((< num 9) (cons num (reverse acc)))\n          ((<\
    \ num 5) (cons num (reverse acc)))\n          ((< num 4) (con", "  (let ((roman-numerals\
    \ '(\n                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n        \
    \             ((i . 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i\
    \ . 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i . 1) (c . 10))\
    \ (m . 100) (l . 1000))\n                     ((i . 1) (c . 10)) (m . 100) (l\
    \ . 1000))\n                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n  \
    \                   ((i . 1) (c . 10)) (m . 100) (l . 1000))\n               \
    \      ((i . 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i . 1)\
    \ (c . 10)) (m . 100) (l . 1000))\n                     ((i . 1) (c . 10)) (m\
    \ . 100) (l . 1000))\n                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n\
    \                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n             \
    \        ((i . 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i .\
    \ 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i . 1) (c . 10))\
    \ (m . 100) (l . 1000))\n                     ((i . 1) (c . 10)) (m . 100) (l\
    \ . 1000))\n                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n  \
    \                   ((i . 1) (c . 10)) (m . 100) (l . 1000))\n               \
    \      ((i . 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i . 1)\
    \ (c . 10)) (m . 100) (l . 1000))\n                     ((i . 1) (c . 10)) (m\
    \ . 100) (l . 1000))\n                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n\
    \                     ((i . 1) (c . 10)) (m . 100) (l . 1000))\n             \
    \        ((i . 1) (c . 10)) (m . 100) (l . 1000))\n                     ((i .\
    \ 1) (c . 10)) (m . 100) (l . 1000))\n                     (", "  (cond\n    [(<\
    \ number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [(< number\
    \ 4000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman number)\
    \ (int_to_mini_roman number))]))\n", "  (cond\n    [(< number 1) '']\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman 100 (- number 1)))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [(< number 5000) (int_to_mini_roman number)]\n    [else (cons (int_to_roman\
    \ (/ number 100)) (int_to_mini_roman \n                                 (- number\
    \ 100)))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number must\
    \ be positive.\")]\n    [(< number 1000) (error \"Invalid input: number must be\
    \ less than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n   \
    \         (cond\n              [(= remainder 0) 'm']\n              [(= remainder\
    \ 100) 'd']\n              [(= remainder 500) 'c']\n              [(= remainder\
    \ 1000) 'x']\n              [else (error \"Invalid input: number must be less\
    \ than 1000.\")]))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n", "  (cond\n\
    \    [(< number 1) (error \"Invalid input: number must be positive.\")]\n    [(<\
    \ number 1000) (error \"Invalid input: number must be less than 1000.\")]\n  \
    \  [else (let ([remainder (modulo number 1000)])\n            (cond\n        \
    \      [(< remainder 100) (cons remainder (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (cons remainder (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (cons remainder (int_to_mini_rom", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ number) (int_to_mini_roman number - 1))]))\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 number))))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(= number\
    \ 0) '']\n    [(= number 1) 'i']\n    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n\
    \    [(= number 4) 'iv']\n    [(= number 5) 'v']\n    [(= number 6) 'vi']\n  \
    \  [(= number 7) 'vii']\n    [(= number 8) 'viii']\n    [(= number 9) 'ix']\n\
    \    [(= number 10) 'x']\n    [(= number 11) 'xii']\n    [(= number 12) 'xiii']\n\
    \    [(= number 13) 'xiv']\n    [(= number 14) 'xv']\n    [(= number 15) 'xvi']\n\
    \    [(= number 16) 'xvii']\n    [(= number 17) 'xviii']\n    [(= number 18) 'xix']\n\
    \    [(= number 19) 'xx']\n    [(= number 20) 'xxi']\n    [(= number 21) 'xxii']\n\
    \    [(= number 22) 'xxiii']\n    [(= number 23) 'xxiv']\n    [(= number 24) 'xxv']\n\
    \    [(= number 25) 'xxvi']\n    [(= number 26) 'xxvii']\n    [(= number 27) 'xxviii']\n\
    \    [(= number 28) 'xxix']\n    [(= number 29) 'xxx']\n    [(= number 30) 'xxxi']\n\
    \    [(= number 31) 'xxxii']\n    [(= number 32) 'xxxiii']\n    [(= number 33)\
    \ 'xxxiv']\n    [(= number 34) 'xxxv']\n    [(= number 35) 'xxxvi']\n    [(= number\
    \ 36) 'xxxvii']\n    [(= number 37) 'xxxviii']\n    [(= number 38) 'xxxiv']\n\
    \    [(= number 39) 'xxxv']\n    [(= number 40) 'xxxi']\n    [(= number 41) 'xxxii']\n\
    \    [(= number 42) 'xxxiii']\n    [(= number 43) 'xxxiv']\n    [(= number 44)\
    \ 'xxxv']\n    [(= number 45) 'xxxvi']\n    [(= number 46) 'xxxvii']\n    [(=\
    \ number ", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number (* 100 100))))]))\n", "  (cond\n    [(< number 1) '']\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ number) (int_to_mini_roman number))]\n  ))\n", "  (cond\n    [(< number 1) (error\
    \ \"Invalid input: number must be positive.\")]\n    [(< number 1000) (error \"\
    Invalid input: number must be less than 1000.\")]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n            (cond\n              [(< remainder 100)\
    \ (cons (- remainder 100) '(I))\n              [(< remainder 500) (cons (- remainder\
    \ 100) '(II))\n              [(< remainder 1000) (cons (- remainder 100) '(III))\n\
    \              [(< remainder 5000) (cons (- remainder 100) '(IV))\n          \
    \    [(< remainder 10000) (cons (- remainder 100) '(V))\n              [(< remainder\
    \ 50000) (cons (- remainder 100) '(VI))\n              [(< remainder 100000) (cons\
    \ (- remainder 100) '(VII))\n              [(< remainder 500000) (cons (- remainder\
    \ 100) '(VIII))\n              [(< remainder 1000000) (cons (- remainder 100)\
    \ '(IX))\n              [(< remainder 50000000) (cons (- remainder 100) '(IXI))\n\
    \              [(< remainder 100000000) (cons (- remainder 100) '(IXII))\n   \
    \           [(< remainder 500000000) (cons (- remainder 100) '(IXIII))\n     \
    \         [(< remainder 1000000000) (cons (- remainder 100) '(X))\n          \
    \    [(< remainder 5000000000) (cons (- remainder 100) '(XI))\n              [(<\
    \ remainder 10000000000) (cons (- remainder 100) '(XI))\n              [(< remainder\
    \ 50000000000) (cons (- remainder 100) '(XII))\n              [(< remainder 100000000000)\
    \ (cons (- remainder 100) '(XIII))\n              [(< remainder 500000000000)\
    \ (cons (- remainder 100) '(XIV))\n              [(< remainder 1000000000000)\
    \ (cons (- remainder 100) '(XV))\n              [(< remainder 5000000000000) (cons\
    \ (- remainder 100) '(XVI))\n              [(< remainder 10000000000000) (cons\
    \ (- remainder 100) '(XVII))\n              [(< remainder 500000000000000) (cons\
    \ (- remainder 100) '(XVIII))\n              [(< ", "  (cond\n    [(< number 1)\
    \ (error \"Invalid input: number must be positive.\")]\n    [(< number 1000) (error\
    \ \"Invalid input: number must be <= 1000.\")]\n    [else (let ([remainder (modulo\
    \ number 1000)])\n            (cond\n              [(< remainder 100) (cons remainder\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 500) (cons (- remainder\
    \ 100) (int_to_mini_roman remainder))]\n              [(< remainder 1000) (cons\
    \ (- remainder 500) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 5000) (cons (- remainder 1000) (int_to_mini_roman remainder))]\n           \
    \   [(< remainder 10000) (cons (- remainder 5000) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 100000) (cons (- remainder 10000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 1000000) (cons (- remainder 100000)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 10000000) (cons\
    \ (- remainder 1000000) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000000) (cons (- remainder 10000000) (int_to_mini_roman remainder))]\n  \
    \            [(< remainder 1000000000) (cons (- remainder 100000000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 10000000000) (cons (- remainder 1000000000)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 100000000000) (cons\
    \ (- remainder 10000000000) (int_to_mini_roman remainder))]\n              [(<\
    \ remainder 1000000000000) (cons (- remainder 100000000000) (int_to_mini_roman\
    \ remainder))]\n              [(< remainder 10000000000000) (cons (- remainder\
    \ 1000000000000) (int_to_mini_roman remainder))]\n              [(< remainder\
    \ 100000000000000) (cons (- remainder 10000000000000) (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000000000000000) (cons (- remainder 100000000000000)\
    \ (int_to_mini_roman remainder))]\n              [(< remainder 10000000000000000)\
    \ (cons (- remainder 1000000000000000) (int_to_mini_roman remainder))]\n     \
    \         [(< remainder 100000000000000000) (cons (- remainder 10000000000000000",
  "  (cond\n    [(= number 0) '']\n    [(= number 1) 'i']\n    [(= number 2) 'ii']\n\
    \    [(= number 3) 'iii']\n    [(= number 4) 'iv']\n    [(= number 5) 'v']\n \
    \   [(= number 6) 'vi']\n    [(= number 7) 'vii']\n    [(= number 8) 'viii']\n\
    \    [(= number 9) 'ix']\n    [(= number 10) 'x']\n    [(= number 11) 'xii']\n\
    \    [(= number 12) 'xiii']\n    [(= number 13) 'xiv']\n    [(= number 14) 'xvi']\n\
    \    [(= number 15) 'xvii']\n    [(= number 16) 'xviii']\n    [(= number 17) 'xix']\n\
    \    [(= number 18) 'xx']\n    [(= number 19) 'xxi']\n    [(= number 20) 'xxii']\n\
    \    [(= number 21) 'xxiii']\n    [(= number 22) 'xxiv']\n    [(= number 23) 'xxv']\n\
    \    [(= number 24) 'xxvi']\n    [(= number 25) 'xxvii']\n    [(= number 26) 'xxviii']\n\
    \    [(= number 27) 'xxix']\n    [(= number 28) 'xxx']\n    [(= number 29) 'xxxi']\n\
    \    [(= number 30) 'xxxii']\n    [(= number 31) 'xxxiii']\n    [(= number 32)\
    \ 'xxxiv']\n    [(= number 33) 'xxxv']\n    [(= number 34) 'xxxvi']\n    [(= number\
    \ 35) 'xxxvii']\n    [(= number 36) 'xxxviii']\n    [(= number 37) 'xxxiv']\n\
    \    [(= number 38) 'xxxv']\n    [(= number 39) 'xxxvi']\n    [(= number 40) 'xxxvii']\n\
    \    [(= number 41) 'xxxix']\n    [(= number 42) 'xxxx']\n    [(= number 43) 'xxxxi']\n\
    \    [(= number 44) 'xxxxii']\n    [(= number 45) 'xxxxiii']\n    [(= number 46)\
    \ 'xxxxiv']\n    [(= ", "  (cond\n    [(< number 1) (error \"Invalid input: number\
    \ must be positive.\")]\n    [(< number 1000) (error \"Invalid input: number must\
    \ be less than 1000.\")]\n    [else (cond [(= (mod number 100) 0)\n          \
    \        (cond [(= (mod number 10) 0)\n                        (cond [(= (mod\
    \ number 5) 0)\n                              (cond [(= (mod number 4) 0)\n  \
    \                                    (cond [(= (mod number 3) 0)\n           \
    \                                   (cond [(= (mod number 2) 0)\n            \
    \                                          (cond [(= (mod number 1) 0)\n     \
    \                                                         (cond [(= (mod number\
    \ 0) 0)\n                                                                    (error\
    \ \"Invalid input: number must be greater than 0.\")]\n                      \
    \                                       [else (error \"Invalid input: number must\
    \ be greater than 0.\")]\n                                                   \
    \       [else (error \"Invalid input: number must be greater than 0.\")]\n   \
    \                                                     [else (error \"Invalid input:\
    \ number must be greater than 0.\")]\n                                       \
    \               [else (error \"Invalid input: number must be greater than 0.\"\
    )]\n                                                    [else (error \"Invalid\
    \ input: number must be greater than 0.\")]\n                                \
    \                  [else (error \"Invalid input: number must be greater than 0.\"\
    )]\n                                                [else (error \"Invalid input:\
    \ number must be greater than 0.\")]\n                                       \
    \       [else (error \"Invalid input: number must be greater than 0.\")]\n   \
    \                                         [else (error \"Invalid input: number\
    \ must be greater than 0.\")]\n                                          [else\
    \ (error \"Invalid input: number must be greater than 0.\")]\n               \
    \                         [else (error \"Invalid input: number must be greater\
    \ than 0.\")]\n                                      [else (error \"Invalid input:\
    \ number must be greater than 0.\")]\n                                    [else\
    \ (error \"Invalid input: number must be greater than 0.\")]\n               \
    \                   [else (error \"Invalid input: number must be greater than\
    \ 0.\")]\n                                [else (error \"Invalid input: number\
    \ must be greater than 0.\")]\n                              [else (error \"Invalid\
    \ input: number must be greater than 0.\")]\n                            [else\
    \ (error \"Invalid input: number must be greater than 0.\")]\n               \
    \           [else (error \"Invalid input: number must be greater than 0.\")]\n\
    \                        [else (error \"Invalid input: number must be greater\
    \ than 0.\")]\n                      [else (error \"Invalid input: number must\
    \ be greater than 0.\")]\n                    [else (error \"Invalid input: number\
    \ must be greater than 0.\")]\n                  [else (error \"Invalid input:\
    \ number must be greater than 0.\")]\n                [else (error \"Invalid input:\
    \ number must be greater than 0.\")]\n              [else (error \"Invalid input:\
    \ number must be greater than 0.\")]\n            [else (error \"Invalid ", " \
    \ (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman (/ number 100)) (append 'x' (int_to_mini_roman\
    \ (mod number 100))))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input:\
    \ number must be greater than 1.\")]\n    [(< number 1000) (error \"Invalid input:\
    \ number must be less than 1000.\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(< remainder 100) (cons (substring\
    \ \"MCMXCIV\" 0 remainder) '())]\n              [(< remainder 500) (cons (substring\
    \ \"DCCCXV\" 0 remainder) '())]\n              [(< remainder 1000) (cons (substring\
    \ \"MCDXV\" 0 remainder) '())]\n              [(< remainder 5000) (cons (substring\
    \ \"CMXCIV\" 0 remainder) '())]\n              [(< remainder 10000) (cons (substring\
    \ \"MCCXV\" 0 remainder) '())]\n              [(< remainder 100000) (cons (substring\
    \ \"DCCXV\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"CMXV\" 0 remainder) '())]\n              [(< remainder 10000000) (cons (substring\
    \ \"MCCI\" 0 remainder) '())]\n              [(< remainder 100000000) (cons (substring\
    \ \"DCCI\" 0 remainder) '())]\n              [(< remainder 1000000000) (cons (substring\
    \ \"CMX\" 0 remainder) '())]\n              [(< remainder 10000000000) (cons (substring\
    \ \"MCI\" 0 remainder) '())]\n              [(< remainder 100000000000) (cons\
    \ (substring \"DC\" 0 remainder) '())]\n              [(< remainder 1000000000000)\
    \ (cons (substring \"CM\" 0 remainder) '())]\n              [(< remainder 10000000000000)\
    \ (cons (substring \"D\" 0 remainder) '())]\n              [(< remainder 100000000000000)\
    \ (cons (substring \"C\" 0 remainder) '())]\n              [(< remainder 1000000000000000)\
    \ (cons (substring \"X\" 0 remainder) '())]\n              [(< remainder 10000000000000000)\
    \ (cons (substring \"I\" 0 remainder) '())]\n              [(< remainder 100000000000000000)\
    \ (cons (substring \"V\" 0 remainder) '())]\n              [(< remainder 1000000000000000000)\
    \ (cons (substring \"I", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (substring 'MCMXCIV V' 0 number)]\n    [else (substring\
    \ 'MCMXCIV V' number (- number 1000))]))\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number\
    \ 100))))])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- (/ number 100) (floor (/ number 1000))))])\n\
    \  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number 100)))]))\n", "  (let ((roman-numerals '(\n                \
    \     '(I 1) (II 4) (V 5) (IV 9) (X 10) (L 50) (C 100) (D 500) (M 1000)\n    \
    \                 (M 10000) (M 100000) (M 1000000) (M 10000000) (M 100000000)\n\
    \                     (M 1000000000) (M 10000000000) (M 100000000000) (M 1000000000000)\n\
    \                     (M 10000000000000) (M 100000000000000) (M 1000000000000000)\n\
    \                     (M 10000000000000000) (M 100000000000000000)\n         \
    \            (M 1000000000000000000) (M 10000000000000000000)\n              \
    \       (M 100000000000000000000) (M 1000000000000000000000)\n               \
    \      (M 10000000000000000000000) (M 100000000000000000000000)\n            \
    \         (M 1000000000000000000000000) (M 10000000000000000000000000)\n     \
    \                (M 100000000000000000000000000) (M 1000000000000000000000000000)\n\
    \                     (M 10000000000000000000000000000) (M 100000000000000000000000000000)\n\
    \                     (M 1000000000000000000000000000000) (M 10000000000000000000000000000000)\n\
    \                     (M 100000000000000000000000000000000) (M 1000000000000000000000000000000000)\n\
    \                     (M 1000000000000000000000000000000000) (M 1000000000000000000000000000000000)))\n\
    \    (cond\n      [(< number 1) (error \"Number must be positive.\")]\n      [(<\
    \ number 1000) (error \"Number must be less than 1,000.\")]\n      [(< number\
    \ 1000000) (error \"Number must be less than 1,000,000.\")]\n      [(< number\
    \ 1000000000) (error \"Number must be less than 1,000,000,000.\")]\n      [(<\
    \ number 100000000000) (error \"Number must be less than 1,000,000,000,000.\"\
    )]\n      [(< number 1000000000000) (error \"Number must be less than 1,000,000,000,000,000.\"\
    )]\n      [(< number 100000000000000) (error \"Number must be less than 1,000,000,000,000,000,000.\"\
    )]\n      [(< number 1000000000000000) (error \"Number must be less than 1,000,000,000,000,000,000,000.\"\
    )]\n      [(< number 10000000000000000) (error \"Number must be less than 1,000,000,000,000,000,000,000,000.\"\
    )]\n      [(< number 100000000000000000) (error \"Number must be less than 1,000,000,000,000,000,000,000,000,000.\"\
    )]\n      [(< number 1000000000000000000) (error \"Number must be less than 1,000,000,000,000,000,000,000,000,000,000.\"\
    )]\n      [(< number 10000000000000000000) (error \"Number must be less than 1,000,000,000,000,000,000,000,000,000,000,000,000.\"\
    )]\n      [(< number 100000000000000000000) (error \"Number must be less than\
    \ 1,000,000,000,000,000,000,000,000,", "  (cond\n    [(< number 1) '']\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [(< number 4000) (int_to_mini_roman\
    \ number)]\n    [else (cons (string->char (floor (/ number 1000))) (int_to_mini_roman\
    \ \n                                       (- number 1000)))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) (error \"Invalid input: number too small.\")]\n    [(< number 1000) (error\
    \ \"Invalid input: number too large.\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(< remainder 100) (cons (substring\
    \ \"MCMXCIV\" 0 remainder) '())]\n              [(< remainder 500) (cons (substring\
    \ \"DCCCXV\" 0 remainder) '())]\n              [(< remainder 1000) (cons (substring\
    \ \"MCDXC\" 0 remainder) '())]\n              [(< remainder 5000) (cons (substring\
    \ \"CMXC\" 0 remainder) '())]\n              [(< remainder 10000) (cons (substring\
    \ \"MCCX\" 0 remainder) '())]\n              [(< remainder 100000) (cons (substring\
    \ \"DCCX\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"CMX\" 0 remainder) '())]\n              [(< remainder 10000000) (cons (substring\
    \ \"MCC\" 0 remainder) '())]\n              [(< remainder 100000000) (cons (substring\
    \ \"DCC\" 0 remainder) '())]\n              [(< remainder 1000000000) (cons (substring\
    \ \"CM\" 0 remainder) '())]\n              [(< remainder 10000000000) (cons (substring\
    \ \"C\" 0 remainder) '())]\n              [(< remainder 100000000000) (cons (substring\
    \ \"X\" 0 remainder) '())]\n              [(< remainder 1000000000000) (cons (substring\
    \ \"L\" 0 remainder) '())]\n              [(< remainder 10000000000000) (cons\
    \ (substring \"V\" 0 remainder) '())]\n              [(< remainder 100000000000000)\
    \ (cons (substring \"I\" 0 remainder) '())]\n              [(< remainder 1000000000000000)\
    \ (cons (substring \"XC\" 0 remainder) '())]\n              [(< remainder 10000000000000000)\
    \ (cons (substring \"XL\" 0 remainder) '())]\n              [(< remainder 100000000000000000)\
    \ (cons (substring \"LX\" 0 remainder) '())]\n              [(< remainder 1000000000000000000)\
    \ (cons (substring \"XIX\" 0 remainder) ", "  (cond\n    [(< number 1) '']\n \
    \   [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ (/ number 100)) (list 'm))]))\n", "  (let loop ((num number)\n             (roman\
    \ '())\n             (i 0))\n    (if (< i 1000)\n        (if (< num 1000)\n  \
    \          (loop (+ num 100) (cons (substring roman 0 i) roman) (+ i 1))\n   \
    \         (loop (+ num 100) (cons (substring roman 0 i) roman) (+ i 1)))\n   \
    \     (loop (+ num 100) (cons (substring roman 0 i) roman) (+ i 1))))\n  (substring\
    \ roman 0 i))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ floor (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(<\
    \ number 1) (error \"Invalid input: number must be positive.\")]\n    [(< number\
    \ 1000) (error \"Invalid input: number must be less than 1000.\")]\n    [else\
    \ (let ([remainder (modulo number 1000)])\n            (cond\n              [(<\
    \ remainder 100) (error \"Invalid input: number must be less than 1000.\")]\n\
    \              [(< remainder 400) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (concat \"l\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"c\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"d\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 400) (concat \"v\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 900) (concat \"i\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 500) (concat \"x\" (int_to_mini_roman remainder))]\n\
    \              [(< remainder 1000) (concat \"l\" (int_to_mini_", "  (cond\n  \
    \  [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman (quotient number 1000))\n                (int_to_mini_roman\
    \ number))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (substring\
    \ 'MCMXCIV V' 0 number)]\n    [else (substring 'MCMXCIV V' number\n          \
    \          (- number (length 'MCMXCIV V')))]))\n", "  (cond\n    [(< number 1)\
    \ '']\n    [(< number 1000) (string-append (int_to_mini_roman floor (/ number\
    \ 100)) 'vi)]\n    [else (string-append (int_to_mini_roman floor (/ number 1000))\
    \ 'cm)]\n    [else (string-append (int_to_mini_roman floor (/ number 1000)) 'm)]\n\
    \    [else (string-append (int_to_mini_roman floor (/ number 1000)) 'l)]\n   \
    \ [else (string-append (int_to_mini_roman floor (/ number 1000)) 'x)]\n    [else\
    \ (string-append (int_to_mini_roman floor (/ number 1000)) 'c)]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_roman_numeral(number) (int_to_mini_roman number))])))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman 100\
    \ (- number 1)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (string-append (int_to_mini_roman floor (/ number 100)) 'vi)]\n    [else (string-append\
    \ (int_to_mini_roman floor (/ number 1000)) 'xixvi)]\n  )\n)\n", "  (cond\n  \
    \  [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (substring 'MCMXCIV V' 0 number)]\n    [else (substring\
    \ 'MCMXCIV V' number (- number 1))]))\n", "  (cond\n    [(< number 1) '']\n  \
    \  [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number\
    \ 100))))])\n  )\n)\n", "  (let ((roman (make-roman (- number 1)))\n        (str\
    \ (make-string number)))\n    (loop for i from 0 to (- number 1)\n          for\
    \ j from 0 to (- roman i)\n          for k from 0 to (- roman j)\n          for\
    \ l from 0 to (- roman k)\n          for m from 0 to (- roman l)\n          for\
    \ n from 0 to (- roman m)\n          for o from 0 to (- roman n)\n          for\
    \ p from 0 to (- roman o)\n          for q from 0 to (- roman p)\n          for\
    \ r from 0 to (- roman q)\n          for s from 0 to (- roman r)\n          for\
    \ t from 0 to (- roman s)\n          for u from 0 to (- roman t)\n          for\
    \ v from 0 to (- roman u)\n          for w from 0 to (- roman v)\n          for\
    \ x from 0 to (- roman w)\n          for y from 0 to (- roman x)\n          for\
    \ z from 0 to (- roman y)\n          for a from 0 to (- roman z)\n          for\
    \ b from 0 to (- roman a)\n          for c from 0 to (- roman b)\n          for\
    \ d from 0 to (- roman c)\n          for e from 0 to (- roman d)\n          for\
    \ f from 0 to (- roman e)\n          for g from 0 to (- roman f)\n          for\
    \ h from 0 to (- roman g)\n          for i from 0 to (- roman h)\n          for\
    \ j from 0 to (- roman i)\n          for k from 0 to (- roman j)\n          for\
    \ l from 0 to (- roman k)\n          for m from 0 to (- roman l)\n          for\
    \ n from 0 to (- roman m)\n          for o from 0 to (- roman n)\n          for\
    \ p from 0 to (- roman o)\n          for q from 0 to (- roman p)\n          for\
    \ r from 0 to (- roman q)\n          for s from 0 to (- roman r)\n          for\
    \ t from 0 to (- roman s)\n          for u from 0 to (- roman t)\n          for\
    \ v from 0 to (- roman u)\n          for w from 0 to (- roman v)\n          for\
    \ x from 0 to (- roman w)\n          for y from 0 to (- roman x)\n          for\
    \ z from 0 to (- roman y)\n          for a from 0 to (- roman ", "  (cond\n  \
    \  [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 number))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor (/ number 100))))])\n\
    \  )\n)\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ 100 (- number 1)))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input:\
    \ number must be positive.\")]\n    [(< number 1000) (error \"Invalid input: number\
    \ must be less than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n\
    \            (cond\n              [(< remainder 100) (cons (- remainder 100) '(I))\n\
    \               (< remainder 500) (cons (- remainder 100) '(II))\n           \
    \    (< remainder 1000) (cons (- remainder 100) '(III))\n               (< remainder\
    \ 5000) (cons (- remainder 100) '(IV))\n               (< remainder 10000) (cons\
    \ (- remainder 100) '(V))\n               (< remainder 100000) (cons (- remainder\
    \ 100) '(VI))\n               (< remainder 1000000) (cons (- remainder 100) '(vi))\n\
    \               (< remainder 100000000) (cons (- remainder 100) '(vii))\n    \
    \           (< remainder 1000000000) (cons (- remainder 100) '(viii))\n      \
    \         (< remainder 10000000000) (cons (- remainder 100) '(ix))\n         \
    \      (< remainder 100000000000) (cons (- remainder 100) '(xx))\n           \
    \    (< remainder 1000000000000) (cons (- remainder 100) '(xx))\n            \
    \   (< remainder 10000000000000) (cons (- remainder 100) '(xx))\n            \
    \   (< remainder 100000000000000) (cons (- remainder 100) '(xx))\n           \
    \    (< remainder 1000000000000000) (cons (- remainder 100) '(xx))\n         \
    \      (< remainder 10000000000000000) (cons (- remainder 100) '(xx))\n      \
    \         (< remainder 100000000000000000) (cons (- remainder 100) '(xx))\n  \
    \             (< remainder 1000000000000000000) (cons (- remainder 100) '(xx))\n\
    \               (else (error \"Invalid input: number too large.\"))])]))\n", " \
    \ (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_roman_numeral(number)\
    \ (int_to_mini_roman number - 1))\n              (int_to_mini_roman number - 1))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman (/ number 100)) (append 'x' (int_to_mini_roman\
    \ (- number 100))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman number) (int_to_mini_roman\
    \ number - 1))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ 100 (- number 1)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 number))))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman\
    \ number) (mini_roman_numeral (- number 1)))]\n    [else (string-append (int_to_mini_roman\
    \ number) (mini_roman_numeral (- number 1000)))]))\n", "  (cond\n    [(= number\
    \ 0) '']\n    [(= number 1) 'i']\n    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n\
    \    [(= number 4) 'iv']\n    [(= number 5) 'v']\n    [(= number 6) 'vi']\n  \
    \  [(= number 7) 'vii']\n    [(= number 8) 'viii']\n    [(= number 9) 'ix']\n\
    \    [(= number 10) 'x']\n    [(= number 11) 'xi']\n    [(= number 12) 'xii']\n\
    \    [(= number 13) 'xiii']\n    [(= number 14) 'xiv']\n    [(= number 15) 'xv']\n\
    \    [(= number 16) 'xvi']\n    [(= number 17) 'xvii']\n    [(= number 18) 'xviii']\n\
    \    [(= number 19) 'xix']\n    [(= number 20) 'xx']\n    [(= number 21) 'xxi']\n\
    \    [(= number 22) 'xxii']\n    [(= number 23) 'xxiii']\n    [(= number 24) 'xxiv']\n\
    \    [(= number 25) 'xxv']\n    [(= number 26) 'xxvi']\n    [(= number 27) 'xxvii']\n\
    \    [(= number 28) 'xxviii']\n    [(= number 29) 'xxix']\n    [(= number 30)\
    \ 'xxx']\n    [(= number 31) 'xxxi']\n    [(= number 32) 'xxxii']\n    [(= number\
    \ 33) 'xxxiii']\n    [(= number 34) 'xxxiv']\n    [(= number 35) 'xxxv']\n   \
    \ [(= number 36) 'xxxvi']\n    [(= number 37) 'xxxvii']\n    [(= number 38) 'xxxviii']\n\
    \    [(= number 39) 'xxxiv']\n    [(= number 40) 'xxxv']\n    [(= number 41) 'xxxi']\n\
    \    [(= number 42) 'xxxiv']\n    [(= number 43) 'xxxv']\n    [(= number 44) 'xxvi']\n\
    \    [(= number 45) 'xxvii']\n    [(= number 46) 'xxviii']\n    [(= number 47",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_roman (mod number 1000)) 'm')])\n)\n", "  (cond\n   \
    \ [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 100))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) '(I V))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [(< number 4000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_mini_roman number) (int_to_mini_roman number 4000))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman\
    \ number) (mini_roman_numeral (- number 1)))]\n    [else (mini_roman_numeral (-\
    \ number 1))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ 100 (- number 1)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman 100 (- number 1)))]))\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ (/ number 100)) (list (char (mod number 100) 'i')))]))\n", "  (cond\n    [(=\
    \ number 0) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (substring (string->list number) #'(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)) (int_to_mini_roman\
    \ number))]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number too\
    \ small\")]\n    [(< number 1000) (error \"Invalid input: number too large\")]\n\
    \    [else (let ([remainder (modulo number 1000)])\n            (cond\n      \
    \        [(< remainder 100) (cons (- remainder 100) '())]\n              [(< remainder\
    \ 500) (cons 'M (int_to_mini_roman remainder))]\n              [(< remainder 1000)\
    \ (cons 'D (int_to_mini_roman remainder))]\n              [(< remainder 5000)\
    \ (cons 'C (int_to_mini_roman remainder))]\n              [(< remainder 10000)\
    \ (cons 'L (int_to_mini_roman remainder))]\n              [(< remainder 100000)\
    \ (cons 'X (int_to_mini_roman remainder))]\n              [(< remainder 1000000)\
    \ (cons 'V (int_to_mini_roman remainder))]\n              [(< remainder 10000000)\
    \ (cons 'I (int_to_mini_roman remainder))]\n              [(< remainder 100000000)\
    \ (cons 'X (int_to_mini_roman remainder))]\n              [(< remainder 1000000000)\
    \ (cons 'L (int_to_mini_roman remainder))]\n              [(< remainder 10000000000)\
    \ (cons 'C (int_to_mini_roman remainder))]\n              [(< remainder 100000000000)\
    \ (cons 'V (int_to_mini_roman remainder))]\n              [(< remainder 1000000000000)\
    \ (cons 'I (int_to_mini_roman remainder))]\n              [(< remainder 10000000000000)\
    \ (cons 'X (int_to_mini_roman remainder))]\n              [(< remainder 100000000000000)\
    \ (cons 'L (int_to_mini_roman remainder))]\n              [(< remainder 1000000000000000)\
    \ (cons 'C (int_to_mini_roman remainder))]\n              [(< remainder 10000000000000000)\
    \ (cons 'V (int_to_mini_roman remainder))]\n              [(< remainder 100000000000000000)\
    \ (cons 'I (int_to_mini_roman remainder))]\n              [(< remainder 1000000000000000000)\
    \ (cons 'X (int_to_mini_roman remainder))]\n              [(< remainder 10000000000000000000)\
    \ (cons 'L (int_to_mini_roman remainder))]\n              [(< remainder 100000000000000000000)\
    \ (cons 'C (int_to_mini_roman ", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [(< number 4000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman number) (int_to_mini_roman number 4000))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_roman_numeral(number)\
    \ (int_to_mini_roman number - 1))\n              (int_to_mini_roman number - 1))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman number) (int_to_mini_roman number))]\n  ))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman (/ number 100)) (list (char (mod number 100)\
    \ 'i'))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (substring\
    \ 'MCMXCIV V' number)]\n    [else (substring 'MCMXCI I' number)]\n  )\n)\n", " \
    \ (cond\n    [(= number 0) '']\n    [(= number 1) 'i']\n    [(= number 2) 'ii']\n\
    \    [(= number 3) 'iii']\n    [(= number 4) 'iv']\n    [(= number 5) 'v']\n \
    \   [(= number 6) 'vi']\n    [(= number 7) 'vii']\n    [(= number 8) 'viii']\n\
    \    [(= number 9) 'ix']\n    [(= number 10) 'x']\n    [(= number 11) 'xii']\n\
    \    [(= number 12) 'xiii']\n    [(= number 13) 'xiv']\n    [(= number 14) 'xvi']\n\
    \    [(= number 15) 'xvii']\n    [(= number 16) 'xviii']\n    [(= number 17) 'xix']\n\
    \    [(= number 18) 'xx']\n    [(= number 19) 'xxi']\n    [(= number 20) 'xxii']\n\
    \    [(= number 21) 'xxiii']\n    [(= number 22) 'xxiv']\n    [(= number 23) 'xxv']\n\
    \    [(= number 24) 'xxvi']\n    [(= number 25) 'xxvii']\n    [(= number 26) 'xxviii']\n\
    \    [(= number 27) 'xxix']\n    [(= number 28) 'xxx']\n    [(= number 29) 'xxxi']\n\
    \    [(= number 30) 'xxxii']\n    [(= number 31) 'xxxiii']\n    [(= number 32)\
    \ 'xxxiv']\n    [(= number 33) 'xxxv']\n    [(= number 34) 'xxxvi']\n    [(= number\
    \ 35) 'xxxvii']\n    [(= number 36) 'xxxviii']\n    [(= number 37) 'xxxix']\n\
    \    [(= number 38) 'xx']\n    [(= number 39) 'xxi']\n    [(= number 40) 'xxii']\n\
    \    [(= number 41) 'xxiii']\n    [(= number 42) 'xxiv']\n    [(= number 43) 'xxv']\n\
    \    [(= number 44) 'xxvi']\n    [(= number 45) 'xxvii']\n    [(= number 46) 'xxviii']\n\
    \    [(= ", "  (cond\n    [(< number 1) (error \"int_to_mini_roman: number must\
    \ be > 1\")]\n    [(< number 1000) (error \"int_to_mini_roman: number must be\
    \ <= 1000\")]\n    [else (cond\n             [(= (modulo number 100) 0)\n    \
    \           (cons (char->string 'M) (int_to_mini_roman number))\n            \
    \   (char->string 'D) (int_to_mini_roman number)\n               (char->string\
    \ 'C) (int_to_mini_roman number)\n               (char->string 'L) (int_to_mini_roman\
    \ number)\n               (char->string 'X) (int_to_mini_roman number)\n     \
    \          (char->string 'V) (int_to_mini_roman number)\n               (char->string\
    \ 'I) (int_to_mini_roman number)]\n             [(= (modulo number 10) 0)\n  \
    \             (cons (char->string 'X) (int_to_mini_roman number))\n          \
    \     (char->string 'V) (int_to_mini_roman number)\n               (char->string\
    \ 'I) (int_to_mini_roman number)]\n             [(= (modulo number 5) 0)\n   \
    \            (cons (char->string 'I) (int_to_mini_roman number))\n           \
    \    (char->string 'V) (int_to_mini_roman number)\n               (char->string\
    \ 'X) (int_to_mini_roman number)]\n             [(= (modulo number 4) 0)\n   \
    \            (cons (char->string 'V) (int_to_mini_roman number))\n           \
    \    (char->string 'X) (int_to_mini_roman number)]\n             [(= (modulo number\
    \ 3) 0)\n               (cons (char->string 'X) (int_to_mini_roman number))\n\
    \               (char->string 'L) (int_to_mini_roman number)]\n             [(=\
    \ (modulo number 2) 0)\n               (cons (char->string 'L) (int_to_mini_roman\
    \ number))\n               (char->string 'X) (int_to_mini_roman number)]\n   \
    \          [(= (modulo number 1) 0)\n               (cons (char->string 'X) (int_to_mini_roman\
    \ number))\n               (char->string 'C) (int_to_mini_roman number)]\n   \
    \          [else (error \"int_to_mini_roman: number must be between 1 and 999\"\
    )]\n             )])\n</cell>", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor\
    \ (/ number 100)) (int_to_mini_roman floor (- (/ number 100) 100)))]))\n", " \
    \ (cond\n    [(< number 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman\
    \ floor (/ number 1000))\n                                 (mini_roman_numeral\
    \ (- number 1000)))]\n    [else (string-append (int_to_mini_roman floor (/ number\
    \ 1000))\n                         (mini_roman_numeral (- number 1000))\n    \
    \                     (mini_roman_numeral (- number 100)))]))\n", "  (cond\n \
    \   [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else\
    \ (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor (- number\
    \ (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) 'i')])\n  )\n)\n", "  (let loop ((num number) (acc '()))\n\
    \    (cond ((< num 1000) (cons num (reverse acc)))\n          ((< num 1000)\n\
    \           (loop (sub1 num) (cons (sub1 num) acc)))\n          (else\n      \
    \     (loop (sub1 num) (cons (sub1 num) acc))))))\n", "  (cond\n    [(= number\
    \ 0) '']\n    [(= number 1) 'i']\n    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n\
    \    [(= number 4) 'iv']\n    [(= number 5) 'v']\n    [(= number 6) 'vi']\n  \
    \  [(= number 7) 'vii']\n    [(= number 8) 'viii']\n    [(= number 9) 'ix']\n\
    \    [(= number 10) 'x']\n    [(= number 11) 'xi']\n    [(= number 12) 'xii']\n\
    \    [(= number 13) 'xiii']\n    [(= number 14) 'xiv']\n    [(= number 15) 'xv']\n\
    \    [(= number 16) 'xvi']\n    [(= number 17) 'xvii']\n    [(= number 18) 'xviii']\n\
    \    [(= number 19) 'xix']\n    [(= number 20) 'xx']\n    [(= number 21) 'xxi']\n\
    \    [(= number 22) 'xxii']\n    [(= number 23) 'xxiii']\n    [(= number 24) 'xxiv']\n\
    \    [(= number 25) 'xxv']\n    [(= number 26) 'xxvi']\n    [(= number 27) 'xxvii']\n\
    \    [(= number 28) 'xxviii']\n    [(= number 29) 'xxix']\n    [(= number 30)\
    \ 'xxx']\n    [(= number 31) 'xxxi']\n    [(= number 32) 'xxxii']\n    [(= number\
    \ 33) 'xxxiii']\n    [(= number 34) 'xxxiv']\n    [(= number 35) 'xxxv']\n   \
    \ [(= number 36) 'xxxvi']\n    [(= number 37) 'xxxvii']\n    [(= number 38) 'xxxviii']\n\
    \    [(= number 39) 'xxxiv']\n    [(= number 40) 'xxxv']\n    [(= number 41) 'xxxi']\n\
    \    [(= number 42) 'xxxiv']\n    [(= number 43) 'xxxv']\n    [(= number 44) 'xxvi']\n\
    \    [(= number 45) 'xxvii']\n    [(= number 46) 'xxviii']\n    [(= number 47",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (substring 'I I I (int_to_mini_roman\
    \ number))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [(< number 4000) (int_to_mini_roman number)]\n    [else (cond\
    \ [(= (mod number 100) 0) (int_to_mini_roman number)]\n              [(= (mod\
    \ number 100) 1) (cons 'x (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 2) (cons 'l (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 3) (cons 'i (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 4) (cons 'v (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 5) (cons 'c (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 6) (cons 'd (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 7) (cons 'm (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 8) (cons 'n (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 9) (cons 'p (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 10) (cons 'q (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 11) (cons 'r (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 12) (cons 's (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 13) (cons 't (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 14) (cons 'v (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 15) (cons 'c (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 16) (cons 'd (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 17) (cons 'm (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 18) (cons 'n (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 19) (cons 'p (int_to_mini_roman number))]\n              [(= (mod\
    \ number 100) 20) (cons 'q (int_", "  (cond\n    [(< number 1) (error \"Invalid\
    \ input: number must be positive.\")]\n    [(< number 1000) (error \"Invalid input:\
    \ number must be less than 1000.\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(< remainder 100) (cons (substring\
    \ \"MCMXCIV\" 0 remainder) '())]\n              [(< remainder 500) (cons (substring\
    \ \"DCLXVI\" 0 remainder) '())]\n              [(< remainder 1000) (cons (substring\
    \ \"MCCCXV\" 0 remainder) '())]\n              [(< remainder 5000) (cons (substring\
    \ \"DCCCXV\" 0 remainder) '())]\n              [(< remainder 10000) (cons (substring\
    \ \"MCCCXI\" 0 remainder) '())]\n              [(< remainder 50000) (cons (substring\
    \ \"DCCCXI\" 0 remainder) '())]\n              [(< remainder 100000) (cons (substring\
    \ \"MCCCI\" 0 remainder) '())]\n              [(< remainder 500000) (cons (substring\
    \ \"DCCCI\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"MCCC\" 0 remainder) '())]\n              [(< remainder 50000000) (cons (substring\
    \ \"DCCC\" 0 remainder) '())]\n              [(< remainder 100000000) (cons (substring\
    \ \"MCC\" 0 remainder) '())]\n              [(< remainder 5000000000) (cons (substring\
    \ \"DCC\" 0 remainder) '())]\n              [(< remainder 1000000000) (cons (substring\
    \ \"M\" 0 remainder) '())]\n              [(< remainder 50000000000) (cons (substring\
    \ \"D\" 0 remainder) '())]\n              [(< remainder 10000000000) (cons (substring\
    \ \"CM\" 0 remainder) '())]\n              [(< remainder 500000000000) (cons (substring\
    \ \"D\" 0 remainder) '())]\n              [(< remainder 100000000000) (cons (substring\
    \ \"C\" 0 remainder) '())]\n              [(< remainder 5000000000000) (cons (substring\
    \ \"XC\" 0 remainder) '())]\n              [(< remainder 1000000000000) (cons\
    \ (sub", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (string-append\
    \ (int_to_mini_roman number) (mini_roman_numeral (- number 1)))]\n    [else (mini_roman_numeral\
    \ (- number 1))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ 100 (- number 1)))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number 1000)\
    \ (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor (/ number\
    \ 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 100))))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman 100\
    \ (- number 1)))]))\n", "  (cond\n    [(= number 0) '']\n    [(= number 1) 'i']\n\
    \    [(= number 2) 'ii']\n    [(= number 3) 'iii']\n    [(= number 4) 'iv']\n\
    \    [(= number 5) 'v']\n    [(= number 6) 'vi']\n    [(= number 7) 'vii']\n \
    \   [(= number 8) 'viii']\n    [(= number 9) 'ix']\n    [(= number 10) 'x']\n\
    \    [(= number 11) 'xi']\n    [(= number 12) 'xii']\n    [(= number 13) 'xiii']\n\
    \    [(= number 14) 'xiv']\n    [(= number 15) 'xv']\n    [(= number 16) 'xvi']\n\
    \    [(= number 17) 'xvii']\n    [(= number 18) 'xviii']\n    [(= number 19) 'xix']\n\
    \    [(= number 20) 'xx']\n    [(= number 21) 'xxi']\n    [(= number 22) 'xxii']\n\
    \    [(= number 23) 'xxiii']\n    [(= number 24) 'xxiv']\n    [(= number 25) 'xxv']\n\
    \    [(= number 26) 'xxvi']\n    [(= number 27) 'xxvii']\n    [(= number 28) 'xxviii']\n\
    \    [(= number 29) 'xxix']\n    [(= number 30) 'xxx']\n    [(= number 31) 'xxxi']\n\
    \    [(= number 32) 'xxxii']\n    [(= number 33) 'xxxiii']\n    [(= number 34)\
    \ 'xxxiv']\n    [(= number 35) 'xxxv']\n    [(= number 36) 'xxxvi']\n    [(= number\
    \ 37) 'xxxvii']\n    [(= number 38) 'xxxviii']\n    [(= number 39) 'xxxiv']\n\
    \    [(= number 40) 'xxxv']\n    [(= number 41) 'xxxi']\n    [(= number 42) 'xxxiv']\n\
    \    [(= number 43) 'xxxv']\n    [(= number 44) 'xxvi']\n    [(= number 45) 'xxvii']\n\
    \    [(= number 46) 'xxviii']\n    [(= number 47", "  (cond\n    [(< number 1)\
    \ '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ (/ number 100)) (append 'x' (int_to_mini_roman (- number (* 100 number))))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_roman_numeral(number) (int_to_mini_roman number))\n \
    \              (int_to_mini_roman number))]))\n", "  (cond\n    [(< number 1)\
    \ (error \"Invalid input: number must be greater than 1.\")]\n    [(< number 1000)\
    \ (error \"Invalid input: number must be less than 1000.\")]\n    [else (let ([remainder\
    \ (modulo number 1000)])\n            (cond\n              [(< remainder 100)\
    \ (cons (- remainder 100) '(I))\n               (< remainder 500) (cons (- remainder\
    \ 100) '(V))\n               (< remainder 1000) (cons (- remainder 100) '(X))\n\
    \               (< remainder 5000) (cons (- remainder 100) '(L))\n           \
    \    (< remainder 10000) (cons (- remainder 100) '(C))\n               (< remainder\
    \ 100000) (cons (- remainder 100) '(D))\n               (< remainder 1000000)\
    \ (cons (- remainder 100) '(M))\n               (< remainder 10000000) (cons (-\
    \ remainder 100) '(M))\n               (< remainder 100000000) (cons (- remainder\
    \ 100) '(CM))\n               (< remainder 1000000000) (cons (- remainder 100)\
    \ '(D))\n               (< remainder 10000000000) (cons (- remainder 100) '(CD))\n\
    \               (< remainder 100000000000) (cons (- remainder 100) '(CM))\n  \
    \             (< remainder 1000000000000) (cons (- remainder 100) '(M))\n    \
    \           (< remainder 10000000000000) (cons (- remainder 100) '(M))\n     \
    \          (< remainder 100000000000000) (cons (- remainder 100) '(M))\n     \
    \          (< remainder 1000000000000000) (cons (- remainder 100) '(M))\n    \
    \           (< remainder 10000000000000000) (cons (- remainder 100) '(M))\n  \
    \             (< remainder 100000000000000000) (cons (- remainder 100) '(M))\n\
    \               (< remainder 1000000000000000000) (cons (- remainder 100) '(M))\n\
    \               (else (error \"Invalid input: number too large.\"))])]))\n", " \
    \ (let ((roman-numerals '(\n                       ((i . 1) (x . 10)) (j . 5)\
    \ (l . 50) (m . 500) (n . 1000)\n                       ((i . 1) (x . 10)) (j\
    \ . 5) (l . 50) (m . 500) (n . 1000)\n                       ((i . 1) (x . 10))\
    \ (j . 5) (l . 50) (m . 500) (n . 1000)\n                       ((i . 1) (x .\
    \ 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n                       ((i . 1)\
    \ (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n                       ((i\
    \ . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n                     \
    \  ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n                \
    \       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n           \
    \            ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n      \
    \                 ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n \
    \                      ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n . 1000)\n\
    \                       ((i . 1) (x . 10)) (j . 5) (l . 50) (m . 500) (n ", " \
    \ (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [(< number 4000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ number) (int_to_mini_roman number / 1000))]))\n", "  (let ((roman-chars '(\n\
    \                   ((i . i) (n . n) (x . x))\n                   ((i . i) (n\
    \ . n) (c . c))\n                   ((i . i) (n . n) (l . l))\n              \
    \     ((i . i) (n . n) (c . c))\n                   ((i . i) (n . n) (l . l))\n\
    \                   ((i . i) (n . n) (c . c))\n                   ((i . i) (n\
    \ . n) (l . l))\n                   ((i . i) (n . n) (c . c))\n              \
    \     ((i . i) (n . n) (l . l))\n                   ((i . i) (n . n) (c . c))\n\
    \                   ((i . i) (n . n) (l . l))\n                   ((i . i) (n\
    \ . n) (c . c))\n                   ((i . i) (n . n) (l . l))\n              \
    \     ((i . i) (n . n) (c . c))\n                   ((i . i) (n . n) (l . l))\n\
    \                   ((i . i) (n . n) (c . c))\n                   ((i . i) (n\
    \ . n) (l . l))\n                   ((i . i) (n . n) (c . c))\n              \
    \     ((i . i) (n . n) (l . l))\n                   ((i . i) (n . n) (c . c))\n\
    \                   ((i . i) (n . n) (l . l))\n                   ((i . i) (n\
    \ . n) (c . c))\n                   ((i . i) (n . n) (l . l))\n              \
    \     ((i . i) (n . n) (c . c))\n                   ((i . i) (n . n) (l . l))\n\
    \                   ((i . i) (n . n) (c . c))\n                   ((i . i) (n\
    \ . n) (l . l))\n                   ((i . i) (n . n) (c . c))\n              \
    \     ((i . i) (n . n) (l . l))\n                   ((i . i) (n . n) (c . c))\n\
    \                   ((i . i) (n . n) (l . l))\n                   ((i . i) (",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor)))) ]))\n", "  (cond\n    [(< number 1) '']\n    [(<\
    \ number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number 100)))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor (/ number 100))))])\n  )\n)\n", "  (cond\n    [(< number\
    \ 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number 100)))]))\n", "  (cond\n\
    \    [(= number 0) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman floor (/ number 100)) (list (int_to_mini_roman\
    \ floor (- number 100))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor\
    \ (/ number 100)) (int_to_mini_roman 100 (- number 1)))]))\n", "  (cond\n    [(<\
    \ number 1) (error \"Number must be positive.\")]\n    [(< number 1000) (error\
    \ \"Number must be less than 1000.\")]\n    [else (let ([remainder (modulo number\
    \ 1000)])\n            (cond\n              [(= remainder 0) (cons \"I\" '())]\n\
    \              [(= remainder 100) (cons \"V\" '())]\n              [(= remainder\
    \ 500) (cons \"X\" '())]\n              [(= remainder 1000) (cons \"L\" '())]\n\
    \              [(= remainder 500) (cons \"C\" '())]\n              [(= remainder\
    \ 100) (cons \"D\" '())]\n              [(= remainder 500) (cons \"M\" '())]\n\
    \              [(= remainder 1000) (cons \"M\" '())]\n              [(= remainder\
    \ 500) (cons \"D\" '())]\n              [(= remainder 100) (cons \"C\" '())]\n\
    \              [(= remainder 500) (cons \"L\" '())]\n              [(= remainder\
    \ 1000) (cons \"X\" '())]\n              [(= remainder 500) (cons \"V\" '())]\n\
    \              [(= remainder 100) (cons \"I\" '())]\n              [(= remainder\
    \ 500) (cons \"I\" '())]\n              [(= remainder 100) (cons \"I\" '())]\n\
    \              [(= remainder 500) (cons \"I\" '())]\n              [(= remainder\
    \ 100) (cons \"I\" '())]\n              [(= remainder 500) (cons \"I\" '())]\n\
    \              [(= remainder 100) (cons \"I\" '())]\n              [(= remainder\
    \ 500) (cons \"I\" '())]\n              [(= remainder 100) (cons \"I\" '())]\n\
    \              [(= remainder 500) (cons \"I\" '())]\n              [(= remainder\
    \ 100) (cons \"I\" '())]\n              [(= remainder 500) (cons \"I\" '())]\n\
    \              [(= remainder 100) (cons \"I\" '())]\n              [(= remainder\
    \ 500) (cons \"I\" '())]\n              [(= remainder 100) (cons \"I\" '())]\n\
    \              [(= remainder 500) (cons \"I\" '())]\n              [(= remainder\
    \ 100) (cons \"I\" '())]\n              [(= remainder 500) (cons \"I", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n   \
    \ [else (cons (int_to_mini_roman (/ number 100)) (list (char 'i) (char 'x) (int_to_mini_roman\
    \ number)))]))\n", "  (let ((roman-numerals '(\n                     ((i . 1)\
    \ (c . x))\n                     ((i . 5) (c . l))\n                     ((i .\
    \ 10) (c . d))\n                     ((i . 50) (c . c))\n                    \
    \ ((i . 100) (c . x))\n                     ((i . 500) (c . l))\n            \
    \         ((i . 1000) (c . d))\n                     ((i . 5000) (c . c))\n  \
    \                   ((i . 10000) (c . x))\n                     ((i . 50000) (c\
    \ . l))\n                     ((i . 100000) (c . d))\n                     ((i\
    \ . 500000) (c . c))\n                     ((i . 1000000) (c . x))\n         \
    \            ((i . 5000000) (c . l))\n                     ((i . 10000000) (c\
    \ . d))\n                     ((i . 50000000) (c . c))\n                     ((i\
    \ . 100000000) (c . x))\n                     ((i . 500000000) (c . l))\n    \
    \                 ((i . 1000000000) (c . d))\n                     ((i . 5000000000)\
    \ (c . c))\n                     ((i . 10000000000) (c . x))\n               \
    \      ((i . 50000000000) (c . l))\n                     ((i . 100000000000) (c\
    \ . d))\n                     ((i . 500000000000) (c . c))\n                 \
    \    ((i . 1000000000000) (c . x))\n                     ((i . 5000000000000)\
    \ (c . l))\n                     ((i . 10000000000000) (c . d))\n            \
    \         ((i . 50000000000000) (c . c))\n                     ((i . 100000000000000)\
    \ (c . x))\n                     ((i . 500000000000000) (c . l))\n           \
    \          ((i . 1000000000000000) (c . d))\n                     ((i . 5000000000000000)\
    \ (c . c))\n                     ((i . 10000000000000000) (c . x))\n         \
    \            ((i . 5000000000000000) (c . l))\n                     ((i . 100000000000000000)\
    \ (c . d))\n                     ((i . 50000000000000000) (c . c))\n         \
    \            ((i . 1000000000000000000) (c . x))\n                     ((i . 50000000000000000)\
    \ (c . l))\n                     ((i . 10000000000000000000) (c . d))\n      \
    \               ((i . 500000000000000000) (c . c))\n                     ((i .\
    \ 100000000000000000000) (c . x))\n                     ((i . 50000000000000000000)\
    \ (c . l))\n                     ((i . 100", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n",
  "  (let ((roman (make-array '(1001 . .) '(. . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . ", "  (cond\n    [(< number 1) '']\n\
    \    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) 'i')])\n  )\n)\n", "  (cond\n    [(< number 1) '']\n \
    \   [(< number 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman\
    \ floor (/ number 100)) (int_to_mini_roman floor (- number 100)))]))\n", "  (cond\n\
    \    [(< number 1) '']\n    [(< number 1000) (string-append (int_to_mini_roman\
    \ floor (/ number 100)) 'i')]\n    [else (string-append (int_to_mini_roman floor\
    \ (/ number 10)) 'x'\n                         (int_to_mini_roman floor (- number\
    \ (floor (/ number 10))))]))\n", "  (cond\n    [(< number 1) '']\n    [(< number\
    \ 1000) (int_to_mini_roman number)]\n    [else (cons (int_to_mini_roman floor\
    \ (/ number 100)) (int_to_mini_roman floor (- number (* 100 floor)))) ]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (substring 'MCMXCIV V' 0 number)]\n\
    \    [else (substring 'MCMXCIV V' number (- number 1000))]))\n", "  (cond\n  \
    \  [(< number 1) (error \"Invalid input: number must be positive.\")]\n    [(<\
    \ number 1000) (error \"Invalid input: number must be less than 1000.\")]\n  \
    \  [else (cond\n            [(< number 500) (cons (string->char (- number 500)\
    \ 'M) (int_to_mini_roman 500))]\n            [(< number 400) (cons (string->char\
    \ (- number 400) 'D) (int_to_mini_roman 400))]\n            [(< number 100) (cons\
    \ (string->char (- number 100) 'C) (int_to_mini_roman 100))]\n            [(<\
    \ number 90) (cons (string->char (- number 90) 'X) (int_to_mini_roman 90))]\n\
    \            [(< number 50) (cons (string->char (- number 50) 'V) (int_to_mini_roman\
    \ 50))]\n            [(< number 40) (cons (string->char (- number 40) 'L) (int_to_mini_roman\
    \ 40))]\n            [(< number 10) (cons (string->char (- number 10) 'X) (int_to_mini_roman\
    \ 10))]\n            [(< number 9) (cons (string->char (- number 9) 'IX) (int_to_mini_roman\
    \ 9))]\n            [(< number 5) (cons (string->char (- number 5) 'VI) (int_to_mini_roman\
    \ 5))]\n            [(< number 4) (cons (string->char (- number 4) 'IV) (int_to_mini_roman\
    \ 4))]\n            [(< number 1) (cons (string->char (- number 1) 'I) (int_to_mini_roman\
    \ 1))]\n            [else (error \"Invalid input: number must be less than 1000.\"\
    )]\n            )]))\n", "  (cond\n    [(< number 1) (error \"Invalid input: number\
    \ must be positive.\")]\n    [(< number 1000) (error \"Invalid input: number must\
    \ be less than 1000.\")]\n    [else (let ([remainder (modulo number 1000)])\n\
    \            (cond\n              [(< remainder 100) (cons (substring \"MCMXCIV\"\
    \ 0 remainder) '())]\n              [(< remainder 500) (cons (substring \"DCLXVI\"\
    \ 0 remainder) '())]\n              [(< remainder 1000) (cons (substring \"MNCLXV\"\
    \ 0 remainder) '())]\n              [(< remainder 5000) (cons (substring \"CMLXVI\"\
    \ 0 remainder) '())]\n              [(< remainder 10000) (cons (substring \"DXLXV\"\
    \ 0 remainder) '())]\n              [(< remainder 50000) (cons (substring \"CLXVI\"\
    \ 0 remainder) '())]\n              [(< remainder 100000) (cons (substring \"\
    MXLXV\" 0 remainder) '())]\n              [(< remainder 500000) (cons (substring\
    \ \"LXVI\" 0 remainder) '())]\n              [(< remainder 1000000) (cons (substring\
    \ \"MXXLV\" 0 remainder) '())]\n              [(< remainder 50000000) (cons (substring\
    \ \"LXVII\" 0 remainder) '())]\n              [(< remainder 100000000) (cons (substring\
    \ \"MXXVII\" 0 remainder) '())]\n              [(< remainder 5000000000) (cons\
    \ (substring \"LXXVIII\" 0 remainder) '())]\n              [(< remainder 10000000000)\
    \ (cons (substring \"MXXXVIII\" 0 remainder) '())]\n              [(< remainder\
    \ 500000000000) (cons (substring \"LXXXVIIII\" 0 remainder) '())]\n          \
    \    [(< remainder 1000000000000) (cons (substring \"MXXVIIIII\" 0 remainder)\
    \ '())]\n              [(< remainder 5000000000000) (cons (substring \"LXXVIIIIII\"\
    \ 0 remainder) '())]\n              [(< remainder 10000000000000) (cons (substring\
    \ \"MXXXVIIIIII\" 0 remainder) '())]\n              [(< ", "  (let loop ((num\
    \ number) (str \"\"))\n    (cond [(< num 1000)\n           (loop (sub1 num) (append\
    \ str (mini_roman_numeral (sub1 num))))]\n          [(< num 900)\n           (loop\
    \ (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n          [(< num\
    \ 5000)\n           (loop (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n\
    \          [(< num 4000)\n           (loop (sub1 num) (append str (mini_roman_numeral\
    \ (sub1 num))))]\n          [(< num 3000)\n           (loop (sub1 num) (append\
    \ str (mini_roman_numeral (sub1 num))))]\n          [(< num 2000)\n          \
    \ (loop (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n          [(<\
    \ num 1000)\n           (loop (sub1 num) (append str (mini_roman_numeral (sub1\
    \ num))))]\n          [(< num 900)\n           (loop (sub1 num) (append str (mini_roman_numeral\
    \ (sub1 num))))]\n          [(< num 500)\n           (loop (sub1 num) (append\
    \ str (mini_roman_numeral (sub1 num))))]\n          [(< num 400)\n           (loop\
    \ (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n          [(< num\
    \ 300)\n           (loop (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n\
    \          [(< num 200)\n           (loop (sub1 num) (append str (mini_roman_numeral\
    \ (sub1 num))))]\n          [(< num 100)\n           (loop (sub1 num) (append\
    \ str (mini_roman_numeral (sub1 num))))]\n          [(< num 90)\n           (loop\
    \ (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n          [(< num\
    \ 50)\n           (loop (sub1 num) (append str (mini_roman_numeral (sub1 num))))]\n\
    \          [(< num 40)\n           (loop (sub1 num) (append str (mini_roman_numeral\
    \ (sub1 num))))]\n          [(< num 30)\n           (loop (sub1 num) (append str\
    \ (mini_roman_numeral (sub1 num))))]\n", "  (let ((roman (make-array '(1001 .\
    \ .) '(. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . ", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman number) (int_to_mini_roman number))]))\n",
  "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n\
    \    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman floor\
    \ (- number (* 100 floor)))))]))\n", "  (cond\n    [(< number 1) (error \"Invalid\
    \ input: number must be greater than 1\")]\n    [(< number 1000) (error \"Invalid\
    \ input: number must be less than 1000\")]\n    [else (let ([remainder (modulo\
    \ number 1000)])\n            (cond\n              [(< remainder 100) (cons (-\
    \ remainder 100) '(M))\n               (< remainder 500) (cons (- remainder 100)\
    \ '(MM))\n               (< remainder 1000) (cons (- remainder 100) '(MMM))\n\
    \               (< remainder 5000) (cons (- remainder 100) '(MMMM))\n        \
    \       (< remainder 10000) (cons (- remainder 100) '(MMMMM))\n              \
    \ (< remainder 100000) (cons (- remainder 100) '(MMMMMMM))\n               (<\
    \ remainder 1000000) (cons (- remainder 100) '(MMMMMMMM))\n               (< remainder\
    \ 100000000) (cons (- remainder 100) '(MMMMMMMMM))\n               (< remainder\
    \ 1000000000) (cons (- remainder 100) '(MMMMMMMMMMM))\n               (< remainder\
    \ 100000000000) (cons (- remainder 100) '(MMMMMMMMMMMM))\n               (< remainder\
    \ 1000000000000) (cons (- remainder 100) '(MMMMMMMMMMMMM))\n               (<\
    \ remainder 100000000000000) (cons (- remainder 100) '(MMMMMMMMMMMMMMM))\n   \
    \            (< remainder 10000000000000000) (cons (- remainder 100) '(MMMMMMMMMMMMMMMM))\n\
    \               (< remainder 100000000000000000) (cons (- remainder 100) '(MMMMMMMMMMMMMMMMM))\n\
    \               (< remainder 1000000000000000000) (cons (- remainder 100) '(MMMMMMMMMMMMMMMMMMM))\n\
    \               (else (error \"Invalid input: number too large\"))])]))\n", " \
    \ (cond\n    [(< number 1) '']\n    [(< number 1000) (substring 'MCMXCIV V' 0\
    \ number)]\n    [else (substring 'MCMXCIV V' 0 number)]))\n", "  (cond\n    [(<\
    \ number 1) '']\n    [(< number 1000) (int_to_mini_roman number)]\n    [else (cons\
    \ (int_to_roman_numeral(number) (int_to_mini_roman number - 1))\n            \
    \  (int_to_mini_roman number - 1))]))\n", "  (cond\n    [(< number 1) (error \"\
    Invalid input: number must be positive.\")]\n    [(< number 1000) (error \"Invalid\
    \ input: number must be less than 1000.\")]\n    [else (let ([remainder (modulo\
    \ number 1000)])\n            (cond\n              [(< remainder 100) (cons (-\
    \ remainder 100) '(IV))\n               (< remainder 500) (cons (- remainder 100)\
    \ '(III))\n               (< remainder 1000) (cons (- remainder 100) '(II))\n\
    \               (< remainder 500) (cons (- remainder 100) '(I))\n            \
    \   (< remainder 100) (cons (- remainder 100) '(V))\n               (< remainder\
    \ 500) (cons (- remainder 100) '(VI))\n               (< remainder 1000) (cons\
    \ (- remainder 100) '(V))\n               (< remainder 500) (cons (- remainder\
    \ 100) '(IV))\n               (< remainder 100) (cons (- remainder 100) '(IX))\n\
    \               (< remainder 500) (cons (- remainder 100) '(XX))\n           \
    \    (< remainder 1000) (cons (- remainder 100) '(XXI))\n               (< remainder\
    \ 500) (cons (- remainder 100) '(XXX))\n               (< remainder 100) (cons\
    \ (- remainder 100) '(XXXI))\n               (< remainder 500) (cons (- remainder\
    \ 100) '(XXV))\n               (< remainder 1000) (cons (- remainder 100) '(XXVI))\n\
    \               (< remainder 500) (cons (- remainder 100) '(XXVII))\n        \
    \       (< remainder 100) (cons (- remainder 100) '(XXIX))\n               (<\
    \ remainder 500) (cons (- remainder 100) '(XXVIII))\n               (< remainder\
    \ 100) (cons (- remainder 100) '(XXIX))\n               (< remainder 500) (cons\
    \ (- remainder 100) '(XXVI))\n               (< remainder 100) (cons (- remainder\
    \ 100) '(XXV))\n               (< remainder 500) (cons (- remainder 100) '(XXI))\n\
    \               (< remainder 100) (cons (- remainder 100) '(XX))\n           \
    \   ", "  (cond\n    [(< number 1) '']\n    [(< number 1000) (int_to_mini_roman\
    \ number)]\n    [else (cons (int_to_mini_roman floor (/ number 100)) (int_to_mini_roman\
    \ 100 (- number 1)))]))\n", "  (cond\n    [(< number 1) (error \"int_to_mini_roman:\
    \ number must be positive.\")]\n    [(< number 1000) (error \"int_to_mini_roman:\
    \ number must be <= 1000.\")]\n    [else (cond\n            [(< number 500) (cons\
    \ (string->char (floor (/ number 500)) '(IV))\n                              \
    \ (int_to_mini_roman floor (/ number 500)))]\n            [(< number 100) (cons\
    \ (string->char (floor (/ number 100)) '(II))\n                              \
    \ (int_to_mini_roman floor (/ number 100)))]\n            [else (cons (string->char\
    \ (floor (/ number 50)) '(III))\n                       (int_to_mini_roman floor\
    \ (/ number 50)))]))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
