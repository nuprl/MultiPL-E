name: HumanEval_52_below_threshold
language: racket
prompt: "#lang racket\n\n;; Return True if all numbers in the list l are below threshold\
  \ t.\n;; >>> below_threshold([1, 2, 4, 10], 100)\n;; True\n;; >>> below_threshold([1,\
  \ 20, 4, 10], 5)\n;; False\n(define (below_threshold l t)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n\
  \    (check-equal? (candidate (list 1 2 4 10) 100) #t)\n    (check-equal? (candidate\
  \ (list 1 20 4 10) 5) #f)\n    (check-equal? (candidate (list 1 20 4 10) 21) #t)\n\
  \    (check-equal? (candidate (list 1 20 4 10) 22) #t)\n    (check-equal? (candidate\
  \ (list 1 8 4 10) 11) #t)\n    (check-equal? (candidate (list 1 8 4 10) 10) #f)\n\
  ))\n\n(test-humaneval)"
completions: ['  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))',
  '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))', "  (cond\n\
    \    ((null? l) false)\n    ((< (car l) t) false)\n    (else (below_threshold\
    \ (cdr l) t))))\n", "  (for/fold ((acc #f) (n l)) ((#t acc) (#f acc)) (set! acc\
    \ (< n t))))\n", '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n   \
    \ [(< (first l) t) false]\n    [else (below_threshold (rest l) t)]))\n", "  (for/fold\
    \ ((acc #t) (n) (l))\n            (#f acc)\n            (lambda (n acc)\n    \
    \          (if (< n t)\n                  (set! acc (not acc))\n             \
    \     acc))))\n", "  (for/fold ((acc #t) (n (in-list l)))\n            (#f acc)\n\
    \            (if (< n t)\n                (set! acc (not acc))\n             \
    \   acc)))\n", '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n    [(<\
    \ (first l) t) false]\n    [else (below_threshold (rest l) t)]))\n", '  (< (length
    l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))',
  '  (< (length l) t))', "  (for/or ([x l])\n    (and (< x t) (< x t))))\n", "  (for/fold\
    \ ((acc #f) (n (in-list l)))\n            (#t acc)\n            (if (< n t)\n\
    \                (set! acc (not acc))\n                acc)))\n", '  (< (length
    l) t))', "  (for/fold ((acc #t) (n l)) (i t) (if (< i n) acc #f))\n  acc)\n",
  '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))', "  (< (length\
    \ l) t))\n", '  (< (length l) t))', "  (for/fold ((acc #f) (n l)) ((#t acc)) (#f\
    \ acc))\n  (not (or (= t n) (< n t))))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(< (first l) t) false]\n    [else (below_threshold (rest l) t)]\n  ))\n",
  '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) 2))',
  '  (< (length l) t))', "  (for/fold ((acc #t) (x) (acc #f x))\n            (l (acc\
    \ #t) (acc #f x))\n            (acc #t))\n  acc)\n", '  (< (length l) t))', " \
    \ (for/fold ((acc #f) (n (in-list l)))\n            (#t acc)\n            (if\
    \ (< n t)\n                (set! acc (not acc))\n                acc)))\n", '  (<
    (length l) t))', '  (< (length l) t))', "  (for/fold ((acc #f) (n l)) ((acc t)\
    \ (n l))\n    (if (< n t)\n      (set! acc (not acc))\n      acc)))\n", "  (for/fold\
    \ ((acc #t) (v l))\n            (#f acc)\n            (lambda (x acc)\n      \
    \        (if (< x t)\n                  (set! acc (not acc))\n               \
    \   acc))))\n", "  (for/fold ((acc #t) (n) (l l))\n            (#f acc)\n    \
    \        (lambda (n acc)\n              (if (< n t)\n                  (set! acc\
    \ (not acc))\n                  acc))))\n", '  (< (length l) t))', "  (cond\n\
    \    [(empty? l) false]\n    [(<= (car l) t) (below_threshold (cdr l) t)]\n  \
    \  [else (below_threshold (cdr l) t)]))\n", "  (for/fold ((acc #t) (x) (l))\n\
    \            (#f (acc #f))\n            (lambda (x acc)\n              (cond\n\
    \                [(< x t) (set! acc (not acc))]\n                [else (set! acc\
    \ (not acc))]))))\n", '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) t))', "  (< (length l) 2))\n", '  (< (length l) t))', '  (< (length l) t))',
  "  (for/fold ((acc #t) (v l))\n            (#f acc)\n            (lambda (x acc)\n\
    \              (if (< x t)\n                  (set! acc (not acc))\n         \
    \         acc))))\n", "  (for/fold ((acc #f) (n (in-list l)))\n            (#t\
    \ acc)\n            (lambda (x acc)\n              (if (< x t)\n             \
    \     (set! acc (not acc))\n                  acc))))\n", '  (< (length l) t))',
  '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) t))', '  (< (length l) t))', '  (< (length l) t))', "  (for/fold ((acc #t)\
    \ (n (in-list l)))\n            (#f acc)\n            (if (< n t)\n          \
    \      (set! acc (not acc))\n                acc)))\n", "  (for/fold ((acc #f)\
    \ (n l))\n            ((#t acc) (#f acc))\n            ((#f acc) (not acc)))\n\
    \  acc)\n", '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))',
  '  (< (length l) 2))', '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n\
    \    [(< (first l) t) false]\n    [else (below_threshold (rest l) t)]))\n", '  (<
    (length l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length l)
    t))', "  (for/fold ((acc #f) (n (in-list l)))\n            (#:when (< n t))\n\
    \            (set! acc (not acc))\n            acc))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(< (first l) t) false]\n    [else (below_threshold (rest l)\
    \ t)]\n  ))\n", "  (for/fold ((acc #t) (v l))\n            (#f acc)\n        \
    \    (lambda (x acc)\n              (if (< x t)\n                  (set! acc (not\
    \ acc))\n                  acc))))\n", '  (< (length l) t))', '  (< (length l)
    t))', "  (cond\n    [(empty? l) false]\n    [(< (first l) t) false]\n    [else\
    \ (below_threshold (rest l) t)]))\n", "  (for/fold ((acc #t) (n) (l l))\n    \
    \        (#f (acc #f))\n    (if (< n t)\n        (acc #t)\n        acc)))\n",
  "  (cond\n    [(empty? l) false]\n    [(< (first l) t) false]\n    [else (below_threshold\
    \ (rest l) t)]))\n", "  (for/fold ((acc #t) (n) (l l))\n            ((acc #f)\
    \ (n) (l l))\n    (if (< n t)\n        (set! acc (not acc))\n        acc)))\n",
  '  (< (length l) 2))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) 2))',
  '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n    [(< (first l) t) false]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))', '  (< (length
    l) 2))', "  (for/fold ((acc #t) (n) (l l))\n            ((acc #f) (n) (l l))\n\
    \    (if (< n t)\n        (set! acc (not acc))\n        acc)))\n", '  (< (length
    l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length l) t))',
  '  (< (length l) t))', '  (< (length l) t))', "  (for/fold ((acc #f) (n l))\n  \
    \          (#f (acc #t) (acc #t))\n            (#t (acc #t) (acc #t)))\n  acc)\n",
  '  (< (length l) t))', "  (< (length l) t))\n", '  (< (length l) t))', "  (cond\n\
    \    [(empty? l) false]\n    [(< (first l) t) false]\n    [else (below_threshold\
    \ (rest l) t)]))\n", '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n\
    \    [(< (first l) t) false]\n    [else (below_threshold (rest l) t)]))\n", '  (<
    (length l) t))', "  (for/fold ((acc #f) (n (in-list l)))\n            (#t acc)\n\
    \            (if (< n t)\n                (set! acc (not acc))\n             \
    \   acc)))\n", '  (< (length l) t))', '  (< (length l) t))', '  (< (length l)
    t))', '  (< (length l) 2))', '  (< (length l) t))', '  (< (length l) t))', " \
    \ (cond\n    [(empty? l) false]\n    [(< (first l) t) false]\n    [else (below_threshold\
    \ (rest l) t)]\n  ))\n", '  (< (length l) t))', '  (< (length l) 2))', "  (< (length\
    \ l) t))\n", '  (< (length l) t))', "  (for/fold ((acc #t) (n (in-list l)))\n\
    \            (#f acc)\n            (if (< n t)\n                (set! acc (not\
    \ acc))\n                acc)))\n", '  (< (length l) t))', '  (< (length l) t))',
  "  (< (length l) t))\n", '  (< (length l) t))', "  (for/fold ((acc #f) (n l))\n\
    \            (#t (acc #t)))\n  (not (or (and acc (< n t)) (and acc (< t n))))))\n",
  "  (for/fold ((acc #t) (n (in-list l)))\n            (#f (acc #f))\n           \
    \ (#t (or (< n t) (acc #t))))\n  acc)\n", "  (for/fold ((acc #f) (n (in-list l)))\n\
    \            (#t acc)\n            (if (< n t)\n                (set! acc (not\
    \ acc))\n                acc)))\n", '  (< (length l) t))', '  (< (length l) 2))',
  '  (< (length l) t))', "  (for/fold ((acc #t) (n) (l l))\n            ((acc #f)\
    \ (n n))\n            (if (< n t)\n                (set! acc (not acc))\n    \
    \            acc)))\n", "  (for/or ([n l])\n    (and (< n t)\n         (not (number?\
    \ n))))\n  (not (empty? l)))\n", '  (< (length l) t))', '  (< (length l) t))',
  "  (for/fold ((acc #f) (n l))\n            (#t #f)\n            (lambda (n acc)\n\
    \              (if (< n t)\n                  (set! acc (not acc))\n         \
    \         acc))))\n", '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) t))', "  (for/or ([i l])\n    (< (car i) t)))\n", '  (< (length l) t))', '  (<
    (length l) t))', '  (< (length l) t))', "  (< (length l) t))\n", '  (< (length
    l) t))', '  (< (length l) 2))', '  (< (length l) t))', "  (cond\n    [(empty?\
    \ l) false]\n    [(< (first l) t) false]\n    [else (below_threshold (rest l)\
    \ t)]))\n", '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n    [(< (first\
    \ l) t) false]\n    [else (below_threshold (rest l) t)]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(< (first l) t) false]\n    [else (below_threshold (rest l)\
    \ t)]))\n", '  (< (length l) t))', "  (for/fold ((acc #f) (n (in-list l)))\n \
    \           (#t acc)\n            (if (< n t)\n                (set! acc (not\
    \ acc))\n                acc)))\n", "  (< (length l) t))\n", '  (< (length l)
    t))', '  (< (length l) t))', '  (< (length l) t))', "  (< (length l) t))\n", '  (<
    (length l) t))', "  (cond\n    ((null? l) false)\n    ((< (car l) t) false)\n\
    \    (else (below_threshold (cdr l) t))))\n", '  (< (length l) t))', '  (< (length
    l) t))', "  (< (length l) t))\n", "  (for/or ([x l])\n    (and (< x t) (< x (-\
    \ t 1)))))\n", '  (< (length l) t))', '  (< (length l) t))', "  (for/fold ((acc\
    \ #t) (n) (l (rest l)))\n            (#f acc)\n            (lambda (n acc)\n \
    \             (if (< n t)\n                  (set! acc (not acc))\n          \
    \        acc))))\n", '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n\
    \    [(< (first l) t) false]\n    [else (below_threshold (rest l) t)]\n  ))\n",
  '  (< (length l) t))', "  (cond\n    [(empty? l) false]\n    [(< (first l) t) false]\n\
    \    [else (below_threshold (rest l) t)]))\n", '  (< (length l) t))', '  (< (length
    l) t))', "  (for/fold ((acc #t) (n (in-list l)))\n            (#f acc)\n     \
    \       (if (< n t)\n                (set! acc (not acc))\n                acc)))\n",
  "  (for/fold ((acc #f) (n (in-list l)))\n            (#t acc)\n            (if (<\
    \ n t)\n                (set! acc (not acc))\n                acc)))\n", '  (<
    (length l) t))', '  (< (length l) t))', '  (< (length l) t))', '  (< (length l)
    t))', '  (< (length l) t))', '  (< (length l) t))', "  (for/fold ((acc #f) (n\
    \ l))\n            ((acc #t) (n l))\n    (if (< n t)\n        (set! acc (not acc))\n\
    \        acc)))\n", '  (< (length l) t))', '  (< (length l) t))', "  (for/or ([x\
    \ l])\n    (< x t)))\n", '  (< (length l) t))', '  (< (length l) t))', '  (< (length
    l) t))', '  (< (length l) t))', "  (for/fold ((acc #f) (n (in-list l)))\n    \
    \        (#t (in-list acc))\n            (#f (set! acc (in-list acc))))\n  (<\
    \ (length l) t))\n", "  (for/fold ((acc #f) (n l)) ((acc t) (n l)) acc))\n", " \
    \ (for/fold ((acc #f) (n l)) ((#t acc)) (n acc))\n  (not (eq? n t))))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(< (first l) t) false]\n    [else (below_threshold\
    \ (rest l) t)]\n  ))\n", "  (< (length l) t))\n", '  (< (length l) t))', '  (<
    (length l) t))', '  (< (length l) t))']
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
