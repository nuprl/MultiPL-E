name: HumanEval_49_modp
language: racket
prompt: "#lang racket\n\n;; Return 2^n modulo p (be aware of numerics).\n;; >>> modp(3,\
  \ 5)\n;; 3\n;; >>> modp(1101, 101)\n;; 2\n;; >>> modp(0, 101)\n;; 1\n;; >>> modp(3,\
  \ 11)\n;; 8\n;; >>> modp(100, 101)\n;; 1\n(define (modp n p)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n\
  \    (check-equal? (candidate 3 5) 3)\n    (check-equal? (candidate 1101 101) 2)\n\
  \    (check-equal? (candidate 0 101) 1)\n    (check-equal? (candidate 3 11) 8)\n\
  \    (check-equal? (candidate 100 101) 1)\n    (check-equal? (candidate 30 5) 4)\n\
  \    (check-equal? (candidate 31 5) 3)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (=\
    \ n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ (- n 1) p))))\n", "  (let ((m (* n p)))\n    (if (= m 0)\n        1\n      \
    \  (/ m p))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", " \
    \ (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp n (- p 1)))))\n", "  (let ((m (expt 2 n)))\n    (if (=\
    \ m 0)\n        1\n        (modulo (modulo m p) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p\
    \ 1) 1]\n        [else (* 2 (modp (- n 1) p))]))\n", "  (if (= n 0)\n      1\n\
    \      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo (expt\
    \ 2 n) p)))\n", "  (let ((m (expt 2 n)))\n    (if (= m 0)\n        1\n       \
    \ (expt m p))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (let ((m (mod-n n\
    \ p)))\n    (if (= m 0)\n        1\n        (/ m p))))\n", "  (if (= n 0)\n  \
    \    1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (sub1 p))))) ;; #lang racket\n", " \
    \ (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p 1) 1]\n        [else (*\
    \ 2 (modp (- n 1) p)) (modp n (- p 1))]))\n", "  (if (= n 0)\n      1\n      (*\
    \ 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (let ((x (expt 2 n)))\n    (if (= x 0)\n        1\n        (* x (modp x (expt\
    \ p x))))))\n", "  (let ((x (expt 2 n)))\n    (if (= x 0)\n        1\n       \
    \ (modulo x p))))\n", "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p\
    \ 1) 1]\n        [else (* 2 (modp (- n 1) p))]))\n", "  (let ((m (expt 2 n)))\n\
    \    (if (= m 0)\n        1\n        (modulo (modulo m p) p))))\n", "  (let ((m\
    \ (expt 2 n)))\n    (if (= m 0)\n        1\n        (mod m p))))\n", "  (cond\
    \ [(= n 0) 1]\n        [(= n 1) 0]\n        [else (* 2 (modp (- n 1) p))]))\n",
  "  (if (= n 0)\n      1\n      (* p (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (expt 2 n) p)))\n", "  (cond [(= n 0) 1]\n        [(= n 1)\
    \ 0]\n        [(= p 1) 0]\n        [else (mod n (modp n (sub1 p))) ]))\n", " \
    \ (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n  \
    \    1\n      (* 2 (modp n (- p 1)))))\n", "  (cond [(= n 0) 1]\n        [(= n\
    \ 1) 0]\n        [else (* 2 (modp (- n 1) p))]))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp n (- p 1)))))\n", "  (cond [(= n 0) 1]\n        [(= n p) 0]\n\
    \        [else (* 2 (modp n (sub1 p)))]))\n", "  (let ((x (expt n p)))\n    (if\
    \ (= x 0)\n        1\n        (- x (modp x (- p 1))))))\n", "  (if (= n 0)\n \
    \     1\n      (* 2 (modp (- n 1) p))))\n", "  (cond [(= n 0) 1]\n        [(=\
    \ n p) 0]\n        [(= (- n p) 1) (modp (- n p) (/ p 2))]\n        [else (* 2\
    \ (modp n (/ p 2)))]))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (let ((m (expt 2 n)))\n    (if (= n 0)\n        m\n        (modp m p))))\n",
  "  (let ((m (expt 2 n)))\n    (if (= m 0)\n        1\n        (modulo (modulo m\
    \ p) p))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* p (modp (- n 1) p))))\n",
  "  (let ((m (* n p)))\n    (if (= m 0)\n        1\n        (/ m p))))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp n (- p 1)))))\n", "  (let ((x (mod n p)))\n    (if (= x 0)\n\
    \        1\n        (* x p))))\n", "  (let ((m (modulo n p)))\n    (if (= m 0)\n\
    \        1\n        (- m 1))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n\
    \ (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", " \
    \ (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n  \
    \    1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (* 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (let ((m (expt 2\
    \ n)))\n    (if (= m 0)\n        1\n        (expt m p))))\n", "  (if (= n 0)\n\
    \      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p 1) (modp n (sub1 p))])\n\
    \  (* 2 (modp n (sub1 p))))\n", "  (let ((m (expt 2 n)))\n    (if (= m 0)\n  \
    \      1\n        (modulo (modulo m p) p))))\n", "  (if (= n 0)\n      1\n   \
    \   (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2\
    \ n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (let ((m (* n p)))\n\
    \    (if (< m p)\n        (- m p)\n        m)))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (cond [(= n 0) 1]\n        [(= n 1) p]\n        [else (modp\
    \ (- n 1) (* p p))]))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p 1) 1]\n        [else (*\
    \ 2 (modp (- n 1) p))]))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n)\
    \ p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n\
    \      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo (expt\
    \ 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", " \
    \ (let ((m (expt 2 n)))\n    (if (= m 0)\n        1\n        (expt (modulo (modulo\
    \ m p) p) p))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (* 2 n) p)))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (let ((q (/ n p)))\n    (if (= q 0)\n        1\n        (* q (modp q (- p 1))))))\n",
  "  (if (= n 0)\n      1\n      (* p (modp n (- n 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (cond [(= n 0) 1]\n        [(= n p) 0]\n        [else (*\
    \ 2 (modp (- n 1) p))]))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p\
    \ 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (let ((q (/ n p)))\n\
    \    (if (= q 0)\n        1\n        (* q (modp q (remainder n p))))))\n", " \
    \ (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n  \
    \    1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (* 2 (modp (- n 1) p))))\n", "  (let ((m (expt 2 n)))\n    (if (=\
    \ m 0)\n        1\n        (modulo (modulo m p) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* p (modp n (- n 1)))))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (let ((x (expt 2 n)))\n    (if (= x 0)\n        1\n   \
    \     (modulo x p))))\n", "  (if (= n 0)\n      1\n      (modulo (expt n p) p)))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [(= p 1) (modp n (/ n p))]))\n",
  "  (let ((m (* n p)))\n    (if (= m 0)\n        1\n        (/ m p))))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (let ((q (remainder n p)))\n    (if (= q 0)\n        p\n        (modp q (quotient\
    \ n p))))))\n", "  (let ((m (* n p)))\n    (if (= m 0)\n        1\n        (/\
    \ m p))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if\
    \ (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (let ((m (* n p)))\n\
    \    (if (< m p)\n        m\n        (modp m p))))\n", "  (if (= n 0)\n      1\n\
    \      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n    \
    \  1\n      (modulo (expt 2 n) p)))\n", "  (let ((m (expt 2 n)))\n    (if (= m\
    \ 0)\n        1\n        (expt m p))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (let ((m (mod-n n\
    \ p)))\n    (if (= m 0)\n        1\n        (/ m p))))\n", "  (if (= n 0)\n  \
    \    1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo\
    \ (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (cond [(= n 0) 1]\n\
    \        [(= n 1) 0]\n        [else (* 2 (modp (- n 1) p) (modulo p n))]))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (modulo (expt 2 n) p)))\n", "  (if (= n 0)\n      1\n      (* 2 (modp\
    \ n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (* 2 (modp (- n 1) p))))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [else (* 2 (modp n (- p 1)))\
    \ (modulo (* n p) p)]))\n", "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n", "  (if (= n 0)\n   \
    \   1\n      (* 2 (modp (- n 1) p))))\n", "  (if (= n 0)\n      1\n      (* 2\
    \ (modp n (- p 1)))))\n", "  (if (= n 0)\n      1\n      (modulo (expt 2 n) p)))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 0]\n        [else (* 2 (modp (- n 1) p))]))\n",
  "  (if (= n 0)\n      1\n      (* 2 (modp n (- p 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
