name: HumanEval_161_solve
language: racket
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\n;; solve(\"\
  ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second\
    \ s)]\n    [else (cons (first s)\n                (solve (substring (second s)\
    \ 0 (- (length s) 1)))\n                (solve (substring (second s) 1 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 2 (- (length s) 1)))\n\
    \                (solve (substring (second s) 3 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 4 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 5 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 6 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 7 (- (length s) 1)))\n                (solve (substring (second s) 8 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 9 (- (length s) 1)))\n\
    \                (solve (substring (second s) 10 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 11 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 12 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 13 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 14 (- (length s) 1)))\n                (solve (substring (second s) 15 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 16 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 17 (- (length s) 1)))\n\
    \                (solve (substring (second s) 18 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 19 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 20 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 21 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 22 (- (length s) 1)))\n                (solve (substring (second s) 23 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 24 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 25 (- (length s) 1)))\n\
    \                (solve (substring (second s) 26 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 27 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 28 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 29 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 30 (- (length s) 1)))\n                (solve (substring (second s) 31 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 32 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 33 (- (length s) 1)))\n\
    \                (solve (substring (second s) 34 (", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                           #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q \n                                           #\\R #\\S #\\\
    T #\\U #\\V \n                                           #\\W #\\X #\\Y #\\Z)))\n\
    \     (string-append (map (lambda (c) (if (char->string c) \n                \
    \                       (char->string (char->string c) \n                    \
    \                               '#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I\
    \ #\\J \n                                                   '#\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q \n                                                   '#\\R #\\\
    S #\\T #\\U #\\V \n                                                   '#\\W #\\\
    X #\\Y #\\Z)\n                                       (char->string c))\n     \
    \                         (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                                #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q \n                                                #\\R #\\\
    S #\\T #\\U #\\V \n                                                #\\W #\\X #\\\
    Y #\\Z)))\n                      (map char->string '(#\\A #\\B #\\C #\\D #\\E\
    \ #\\F #\\G #\\H #\\I #\\J \n                                                #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                           \
    \     #\\R #\\S #\\T #\\U #\\V \n                                            \
    \    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))])))\
    \ \n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                             #\\W #\\X #\\Y #\\Z)))\n\
    \     (string-append (map (lambda (c) (if (char->string c) \n                \
    \                       (char->string (char->string c) \n                    \
    \                                  (char->string c))\n                       \
    \                (char->string c))\n                          (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                                 #\\W #\\X #\\Y\
    \ #\\Z)))\n                     (first s))]\n    [else (cons (first s)\n     \
    \          (map (lambda (c) (if (char->string c) \n                          \
    \         (char->string (char->string c) \n                                  \
    \                (char->string c))\n                                   (char->string\
    \ c))\n                     (rest s))))]\n  ))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (first s)) (cond\n                             [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \       [(equal? (first s) 'a) (set! s (string-append (substring s 'a) 'A))\n\
    \                                                             s]\n           \
    \                                                 [(equal? (first s) 'A) (set!\
    \ s (string-append (substring s 'A) 'a))]\n                                  \
    \                          [(equal? (first s) '#) (set! s (string-append (substring\
    \ s '#) '#))\n                                                             s]\n\
    \                                                            [(equal? (first s)\
    \ '#) (set! s (string-append (substring s '#) '#))]\n                        \
    \                                    [(equal? (first s) '@) (set! s (string-append\
    \ (substring s '@) '@))\n                                                    \
    \         s]\n                                                            [(equal?\
    \ (first s) '@) (set! s (string-append (substring s '@) '@))]\n              \
    \                                              [(equal? (first s) '#) (set! s\
    \ (string-append (substring s '#) '#))\n                                     \
    \                        s]\n                                                \
    \            [(equal? (first s) '#) (set! s (string-append (substring s '#) '#))]\n\
    \                                                            [(equal? (first s)\
    \ 'A) (set! s (string-append (substring s 'A) 'A))\n                         \
    \                                    s]\n                                    \
    \                        [(equal? (first s) 'A) (set! s (string-append (substring\
    \ s 'A) 'a))]\n                                                            [(equal?\
    \ (first s) 'a) (set! s (string-append (substring s 'a) 'A))\n               \
    \                                              s]\n                          \
    \                                  [(equal? (first s) 'a) (set! s (string-append\
    \ (substring s 'a) 'a))]\n                                                   \
    \         [(equal? (first s) '#) (set! s (string-append (substring s '#) '#))\n\
    \                                                             s]\n           \
    \                                                 [(equal? (first s) '#) (set!\
    \ s (string-append (substring s '#) '#))]\n                                  \
    \                          [(equal? (first s) '@) (set! s (string-append (substring\
    \ s '@) '@))\n                                                             s]\n\
    \                                                            [(equal? (first s)\
    \ '@) (set! s (string-append (substring s '@) '@))]\n                        \
    \                                    [(equal? (first s) '#) (set! s (string-append\
    \ (substring s '#) '#))\n                                                    \
    \         s]\n                                                            [(equal?\
    \ (first s) '#) (set! s (string-append (substring s '#) '#))]\n              \
    \                                              [(equal? (first s) 'A) (set! s\
    \ (string-append (substring s 'A) 'A", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (cons (second s) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s)\
    \ (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s)\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                          #\\W #\\X #\\\
    Y #\\Z)))\n     (reverse (map string->char (map char->string '(#\\A #\\B #\\C\
    \ #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n    \
    \                                            #\\W #\\X #\\Y #\\Z)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s))\
    \ (second s)]\n    [else (cons (first s)\n                (solve (second s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n   \
    \                                         #\\W #\\X #\\Y #\\Z))) \n     (string-append\
    \ (map (lambda (c) (if (char->string c) \n                                   \
    \    (char->string (char->string c) \n                                       \
    \ (char->string (char->string c) \n                                         (char->string\
    \ (char->string c) \n                                         (char->string (char->string\
    \ c) \n                                         (char->string (char->string c)\
    \ \n                                         (char->string (char->string c) \n\
    \                                         (char->string (char->string c) \n  \
    \                                       (char->string (char->string c) \n    \
    \                                     (char->string (char->string c) \n      \
    \                                   (char->string (char->string c) \n        \
    \                                 (char->string (char->string c) \n          \
    \                               (char->string (char->string c) \n            \
    \                             (char->string (char->string c) \n              \
    \                           (char->string (char->string c) \n                \
    \                         (char->string (char->string c) \n                  \
    \                       (char->string (char->string c) \n                    \
    \                     (char->string (char->string c) \n                      \
    \                   (char->string (char->string c) \n                        \
    \                 (char->string (char->string c) \n                          \
    \               (char->string (char->string c) \n                            \
    \             (char->string (char->string c) \n                              \
    \           (char->string (char->string c) \n                                \
    \         (char->string (char->string c) \n                                  \
    \       (char->string (char->string c) \n                                    \
    \     (char->string (char->string c) \n                                      \
    \   (char->string (char->string c) \n                                        \
    \ (char->string (char->string c) \n                                         (char->string\
    \ (char->string c) \n                                         (char->string (char->string\
    \ c) \n                                         (char->string (char->string c)\
    \ \n                                         (char->string (char->string c) \n\
    \                                         (char->string (char->string c) \n  \
    \                                       (char->string (char->string c) \n    \
    \                                     (char->string (char->string c) \n      \
    \                                   (char->string (char->string c) \n        \
    \                                 (char->", "  (cond\n    [(empty? s) s]\n   \
    \ [(equal? (first s) (first (rest s))) (cons (first (rest s)) (solve (rest s)))]\n\
    \    [else (cons (first (rest s)) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(character? (first s)) (cond\n                             [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                     [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                 [(equal? (first s) (first s)) (cond\n                      \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (", "  (cond\n    [(empty? s) s]\n\
    \    [(member (car s) (list 'a 'b 'c)) (cond \n      [((char->integer (car s))\
    \ >= 65 \n        (char->integer (car s)) - 65)\n       ((char->integer (car s))\
    \ <= 90 \n        (char->integer (car s)) + 65)]\n      [else (cond \n       \
    \ [(char->integer (car s)) >= 97 \n         (char->integer (car s)) - 97]\n  \
    \      [(char->integer (car s)) <= 122 \n         (char->integer (car s)) + 97])])]\n\
    \    [else (cond \n      [else (cond \n        [(char->integer (car s)) >= 97\
    \ \n         (char->integer (car s)) - 97]\n        [(char->integer (car s)) <=\
    \ 122 \n         (char->integer (car s)) + 97])]\n      [else (cond \n       \
    \ [else (cond \n          [(char->integer (car s)) >= 97 \n           (char->integer\
    \ (car s)) - 97]\n          [(char->integer (car s)) <= 122 \n           (char->integer\
    \ (car s)) + 97])]\n        [else (cond \n          [(char->integer (car s)) >=\
    \ 97 \n           (char->integer (car s)) - 97]\n          [(char->integer (car\
    \ s)) <= 122 \n           (char->integer (car s)) + 97])])])]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                                #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \          #\\W #\\X #\\Y #\\Z))\n                     (map char->string '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                            \
    \                #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n\
    \                                            #\\w #\\x #\\y #\\z)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nI like your solution, although it does require a lot of extra memory\
    \ and complexity (O(n^2)). I'm still trying to figure out how to do it without\
    \ using extra memory and complexity. I'll post my solution when I have it.\n<|/\
    \ c |>\n<| c |>\nI added my solution to my question. Thanks for your help!\n<|/\
    \ c |>\n<| a tags=racket,scheme |>\nI figured out a solution that doesn't require\
    \ extra memory and complexity. I'm still trying to figure out how to do it without\
    \ using extra memory and complexity. I'll post my solution when I have it.\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (second s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons\
    \ (first s)\n                (solve (substring (second s) 0 (- (length s) 1)))\n\
    \                (solve (substring (second s) 1 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 2 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 3 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 4 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 5 (- (length s) 1)))\n                (solve (substring (second s) 6 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 7 (- (length s) 1)))\n\
    \                (solve (substring (second s) 8 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 9 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 10 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 11 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 12 (- (length s) 1)))\n                (solve (substring (second s) 13 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 14 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 15 (- (length s) 1)))\n\
    \                (solve (substring (second s) 16 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 17 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 18 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 19 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 20 (- (length s) 1)))\n                (solve (substring (second s) 21 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 22 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 23 (- (length s) 1)))\n\
    \                (solve (substring (second s) 24 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 25 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 26 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 27 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 28 (- (length s) 1)))\n                (solve (substring (second s) 29 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 30 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 31 (- (length s) 1)))\n\
    \                (solve (substring (second s) 32 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 33 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (second s)]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a tags=scheme,racket |>\n<| a tags=scheme,racket dscore=0 |>\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (upper-case (first\
    \ s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThank you so much! I really appreciate your\
    \ help!\n<|/ c |>\n<| c |>\nYou're welcome! I added a solution that doesn't use\
    \ recursion.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n\
    \                                          [(char? (car s)) (cond\n          \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                   [(char?\
    \ (car s)) (cond\n                                                           \
    \         [(char? (car s)) (cond\n                                           \
    \                          [(char? (car s)) (cond\n                          \
    \                                            [(char? (car s)) (cond\n        \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \    [(char? (car s)) (cond\n                                                \
    \                         [(char? (car s)) (cond\n                           \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                 [(char? (car s)) (cond\n                                   \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \               [(char? (car s)) (cond\n                                     \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                        [(char?\
    \ (car s)) (cond\n                                                           \
    \                       [(char? (car s)) (cond\n                             \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                         (char? (car s)) (cond\n            \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                            [(char? (car s)) (cond\n                        \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                         [(char? (car s)) (cond\n                           \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                       [(char? (car s)) (cond\n                             \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \                        [(char? (car s)) (cond\n                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                        [(char? (car s)) (cond\n                            \
    \                                                                            \
    \   [(char? (car s)) (cond\n                                                 \
    \                                                           [(char? (", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n       \
    \                                      #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ string->char (map char->string (map char->string s))))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond\n                            [(equal? (char-code (car s)) 97) (cond\n\
    \                                                        [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \        [(equal? (char-code (car s)) 97) (cond\n                            \
    \                                                                     [(equal?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                            \
    \           [(equal? (char-code (car s)) 97) (cond\n                         \
    \                                                                            \
    \                                                    [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                   [(equal? (char-code (car s)) 97) (cond\n \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (char-code (car s)) 65) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (char-code (car s)) 97) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (char-code (car s)) 65) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (char-code (car s))\
    \ 97) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \ [(equal? (char-code (car s)) 65) (cond\n                                   \
    \                                                                            \
    \                                                                            \
    \                                                [(equal? (char-code (car s))\
    \ 97) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (char-code (car s)) 65) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (char-code (car s)) 97) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (char-code (car s)) 65) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (char-code (car s)) 97) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (char-code (car s)) 65) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (char-code (car s)) 65) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (char-code (car s)) 97) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (char-code (car\
    \ s)) 97) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (char-code (car s)) 97) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (char-code (car s)) 65) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                        ", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                               #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \        #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works. But I still don't understand why my code doesn't work. Could you\
    \ please explain it to me?\n<|/ c |>\n<| c |>\nYour code doesn't work because\
    \ you didn't use my code. Your code doesn't work because you didn't use my code.\
    \ Your code doesn't work because you didn't use my code. Your code doesn't work\
    \ because you didn't use my code. Your code doesn't work because you didn't use\
    \ my code. Your code doesn't work because you didn't use my code. Your code doesn't\
    \ work because you didn't use my code. Your code doesn't work because you didn't\
    \ use my code. Your code doesn't work because you didn't use my code. Your code\
    \ doesn't work because you didn't use my code. Your code doesn't work because\
    \ you didn't use my code. Your code doesn't work because you didn't use my code.\
    \ Your code doesn't work because you didn't use my code. Your code doesn't work\
    \ because you didn't use my code. Your code doesn't work because you didn't use\
    \ my code. Your code doesn't work because you didn't use my code. Your code doesn't\
    \ work because you didn't use my code. Your code doesn't work because you didn't\
    \ use my code. Your code doesn't work because you didn't use my code. Your code\
    \ doesn't work because you didn't use my code. Your code doesn't work because\
    \ you didn't use my code. Your code doesn't work ", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cond \n                            [(equal? (char-case\
    \ (car s)) 'upper) (cons (char-case (car s)) (reverse (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'lower) (cons\
    \ (char-case (car s)) (substring s (+ 0 (length s))))]\n                     \
    \       [else (cons (car s) (solve (substring s (+ 0 (length s)))))])]\n    [else\
    \ (solve (substring s (+ 0 (length s))))]))) \n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n  \
    \              (solve (substring (second s) 0 (- (length s) 1)))\n           \
    \     (solve (substring (second s) 1 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 2 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 3 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 4 (- (length s) 1)))\n                (solve (substring (second s) 5 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 6 (- (length s) 1)))\n\
    \                (solve (substring (second s) 7 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 8 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 9 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 10 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 11 (- (length s) 1)))\n                (solve (substring (second s) 12 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 13 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 14 (- (length s) 1)))\n\
    \                (solve (substring (second s) 15 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 16 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 17 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 18 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 19 (- (length s) 1)))\n                (solve (substring (second s) 20 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 21 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 22 (- (length s) 1)))\n\
    \                (solve (substring (second s) 23 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 24 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 25 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 26 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 27 (- (length s) 1)))\n                (solve (substring (second s) 28 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 29 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 30 (- (length s) 1)))\n\
    \                (solve (substring (second s) 31 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 32 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 33 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first\
    \ s)) (second s)]\n    [else (cons (first s)\n                (solve (substring\
    \ (second s) 0 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 1 (- (length s) 1)))\n                (solve (substring (second s) 2 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 3 (- (length s) 1)))\n\
    \                (solve (substring (second s) 4 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 5 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 6 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 7 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 8 (- (length s) 1)))\n                (solve (substring (second s) 9 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 10 (- (length s) 1)))\n\
    \                (solve (substring (second s) 11 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 12 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 13 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 14 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 15 (- (length s) 1)))\n                (solve (substring (second s) 16 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 17 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 18 (- (length s) 1)))\n\
    \                (solve (substring (second s) 19 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 20 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 21 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 22 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 23 (- (length s) 1)))\n                (solve (substring (second s) 24 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 25 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 26 (- (length s) 1)))\n\
    \                (solve (substring (second s) 27 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 28 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 29 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 30 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 31 (- (length s) 1)))\n                (solve (substring (second s) 32 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 33 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 34 (", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cons (char->upper (car s)) \n            \
    \                  (solve (rest s)))]\n    [else (cons (car s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! But I still don't understand how this works. Can you please explain it a\
    \ little bit more? I understand that `solve` takes one argument, but how does\
    \ it know what to do? I thought it would be something like `solve \"1234\"`, but\
    \ that doesn't work. Thanks again!\n<|/ c |>\n<| c |>\nThe function `solve` takes\
    \ one argument, `s`, which is a string. `s` is bound to `\"1234\"` at the time\
    \ the function is called. When you call `solve` with `\"1234\"`, it calls `(solve\
    \ \"1234\")`, which calls `(solve (rest \"1234\"))`, which calls `(solve (rest\
    \ \"4321\"))`, which calls `(solve (rest \"3214\"))`, which calls `(solve (rest\
    \ \"2143\"))`, which calls `(solve (rest \"4231\"))`, which calls `(solve (rest\
    \ \"321\"))`, which calls `(solve (rest \"1\"))`, which calls `(solve (rest \"\
    \"))`, which calls `(solve \"\")`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())`, which calls `(solve\
    \ ())`, which calls `(solve ())`, which calls `(solve ())", "  (cond\n    [(empty?\
    \ s) s]\n    [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n\
    \                                        [(char? (car s)) (cond\n            \
    \                                           [(char? (car s)) (cond\n         \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                      [(char? (car s)) (cond\n                              \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                       [(char? (car s)) (cond\n             \
    \                                                                            \
    \           [(char? (car s)) (cond\n                                         \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                   [(char? (car s)) (cond\n \
    \                                                                            \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                            \
    \                     [(char? (car s)) (cond\n                               \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                                                [(char? (car s)) (cond\n    \
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                          [(", "  (cond\n   \
    \ [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (second s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(char? (car s)) (cond\n                       [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                      [(char=?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                               [(char=? (char-code (car s)) 97) (cond\n     \
    \                                                                            \
    \                           [(char=? (char-code (car s)) 65) (cond\n         \
    \                                                                            \
    \                                         [(char=? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                    [(char=? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                      [(char=?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \            [(char=? (char-code (car s)) 65) (cond\n                        \
    \                                                                            \
    \                                  [(char=? (char-code (car s)) 97) (cond\n  \
    \                                                                            \
    \                                                          [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \       [(char=? (char-code (car s)) 97) (cond\n                             \
    \                                                                            \
    \                                   [(char=? (char-code (car s)) 65) (cond\n \
    \                                                                            \
    \                                                                 [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \             [(char=? (char-code (car s)) 65) (cond\n                       \
    \                                                                            \
    \                                               [(char=? (char-code (car s)) 97)\
    \ (cond\n                                                                    \
    \                                                                            \
    \    [(char=? (char-code (car s)) 65) (cond\n                                \
    \                                                                            \
    \                                          [(char=? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            [(char=?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                            \
    \                                  [(char=? (char-code (car s)) 97) (cond\n  \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) 65) (cond\n                                  \
    \                                                                            \
    \                                                [(char=? (char-code (car s))\
    \ 97) (cond\n                                                                \
    \                                                                            \
    \                    [(char=? (char-code (car s)) 65) (cond\n                \
    \                                                                            \
    \                                                                      [(char=?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                            [(char=? (char-code (car s)) 65)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                      [(char=? (char-code (car s)) 97) (cond\n              \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) 65) (cond\n                                  \
    \                                                                            \
    \                                                            [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                         [(char=? (char-code (car s)) 65) (cond\n\
    \                                                                ", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond\n                       \
    \      [(lower? (car s)) (cons (upper? (car s)) (cdr s))]\n                  \
    \           [(upper? (car s)) (cons (lower? (car s)) (cdr s))])]\n    [else (cons\
    \ (car s) (solve (cdr s)))]))\n</code>\n<|/ a |>\n<| c |>\nI like your solution\
    \ but I think it can be simplified a bit. Instead of using cond you could use\
    \ `(cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n              \
    \               [(lower? (car s)) (cons (upper? (car s)) (cdr s))]\n         \
    \                    [(upper? (car s)) (cons (lower? (car s)) (cdr s))])]\n  \
    \  [else (cons (car s) (solve (cdr s)))])` which I think is more readable.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I just wanted to show how to use `cond` with\
    \ multiple conditions. But I agree with you, it is more readable this way.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                            [(char-lower? (car s)) (cons (char-upper?\
    \ (car s)) (cdr s))]\n                            [(char-upper? (car s)) (cons\
    \ (char-lower? (car s)) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-upper? (car\
    \ s)) (cons (car s) (cdr s))]\n                            [(char-lower? (car\
    \ s)) (cons (car s) (cdr s))]", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                      #\\W #\\X #\\Y #\\\
    Z)))\n     (string-append (substring (first s) 0 (- (length s) (first s))) \n\
    \                    (substring (first s) (first s) (length s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                               #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char\
    \ (map char->string (map char->string s))))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\\
    W #\\X #\\Y #\\Z)) (cons (char->string (first s)) \n                         \
    \             (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                               #\\W #\\X #\\Y #\\Z))) \n     (string-append (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                       #\\W #\\X #\\Y #\\Z)) (first\
    \ s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                           #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \               #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U\
    \ #\\V \n                                           #\\W #\\X #\\Y #\\Z)) (first\
    \ s))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (second s)]\n    [else (cons (first s)\n                (solve\
    \ (second s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car s))\
    \ (cond\n                            [(equal? (char-case (car s)) 'upper) (cons\
    \ (char-case (car s)) (reverse (substring (string s) 0 (- (length s) 1)))]\n \
    \                           [(equal? (char-case (car s)) 'lower) (cons (char-case\
    \ (car s)) (substring (string s) 0 (- (length s) 1)))]\n                     \
    \       [(equal? (char-case (car s)) 'other) (cons (char-case (car s)) (reverse\
    \ (substring (string s) 0 (- (length s) 1)))])]\n                            [else\
    \ (cons (char-case (car s)) (reverse (substring (string s) 0 (- (length s) 1)))])])]\n\
    \    [else (cons (char-case (car s)) (reverse (substring (string s) 0 (- (length\
    \ s) 1)))])]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                          #\\W #\\X #\\\
    Y #\\Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (upper\
    \ (car s)) \n                                (solve (sub (car s) 1)))]\n    [else\
    \ (cons (car s) (solve (sub (car s) 1)))]))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J\
    \ \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (upper (first s))]\n    [else\
    \ (lower (first s))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s)\
    \ (first s)) (second s)]\n    [else (cons (first s)\n                (solve (substring\
    \ (second s) 0 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 1 (- (length s) 1)))\n                (solve (substring (second s) 2 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 3 (- (length s) 1)))\n\
    \                (solve (substring (second s) 4 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 5 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 6 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 7 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 8 (- (length s) 1)))\n                (solve (substring (second s) 9 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 10 (- (length s) 1)))\n\
    \                (solve (substring (second s) 11 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 12 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 13 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 14 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 15 (- (length s) 1)))\n                (solve (substring (second s) 16 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 17 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 18 (- (length s) 1)))\n\
    \                (solve (substring (second s) 19 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 20 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 21 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 22 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 23 (- (length s) 1)))\n                (solve (substring (second s) 24 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 25 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 26 (- (length s) 1)))\n\
    \                (solve (substring (second s) 27 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 28 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 29 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 30 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 31 (- (length s) 1)))\n                (solve (substring (second s) 32 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 33 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 34 (", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\\
    E #\\F #\\G #\\H #\\I #\\J \n                                           #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                    #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                            #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                                \
    \    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->string\
    \ (char->integer (first s))) \n                                (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->upper (car s))\
    \ \n                                      (solve (cdr s)))]\n    [else (cons (car\
    \ s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X #\\Y\
    \ #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \      #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm still trying\
    \ to understand your solution. Could you please explain how you came up with that\
    \ solution? What does it mean to reverse the case of a letter? What does it mean\
    \ to reverse the string? What does it mean to reverse the string?\n<|/ c |>\n\
    <| c |>\nI added some comments to the code above. Hope that helps.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. I'm still trying to understand your solution.\
    \ Could you please explain how you came up with that solution? What does it mean\
    \ to reverse the case of a letter? What does it mean to reverse the string? What\
    \ does it mean to reverse the string?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code above. Hope that helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nI like your solution, however it would be better to use a `case`\
    \ expression to avoid the nested `cond` expressions.\n<|/ c |>\n<| c |>\nI agree,\
    \ case expressions are more elegant and more readable. I'll edit my answer to\
    \ include it.\n<|/ c |>\n<| a |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve(rest s))))]\n    [else\
    \ (cons (char->lower (car s)) (reverse (solve(rest s))))]\n  )\n)\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))) \n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q \n                                           #\\R #\\S #\\T #\\U #\\V \n   \
    \                                        #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n     \
    \                                #\\R #\\S #\\T #\\U #\\V \n                 \
    \                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `(solve \"#a@C\")`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the function `solve` as defined in the question. Maybe you forgot to copy the\
    \ function definition?\n<|/ c |>\n<| c |>\nI tested it again and it works. I used\
    \ the function `solve` as defined in the question. Maybe you forgot to copy the\
    \ function definition?\n<|/ c |>\n<| c |>\nI tested it again and it works. I used\
    \ the function `solve` as defined in the question. Maybe you forgot to copy the\
    \ function definition?\n<|/ c |>\n<| c |>\nI tested it again and it works. I used\
    \ the function `solve` as defined in the question. Maybe you forgot to copy the\
    \ function definition?\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks for your answer. I'm new to racket and I didn't know about\
    \ `cond`. But I still don't understand how it works. Could you please explain\
    \ it a little bit?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm new to racket and\
    \ I didn't know about `cond`. But I still don't understand how it works. Could\
    \ you please explain it a little bit?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm\
    \ new to racket and I didn't know about `cond`. But I still don't understand how\
    \ it works. Could you please explain it a little bit?\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S\
    \ #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThe question was tagged `racket`, not `scheme`.\n<|/ c |>\n<| c\
    \ |>\nThe question was tagged `racket`, not `scheme`.\n<|/ c |>\n<| c |>\nI didn't\
    \ realize it was tagged `racket` until I read your comment. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->upper (first\
    \ s)) \n                                  (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(char?\
    \ (car s)) (cons (char->string (char->integer (char->lower (car s))))\n      \
    \                        (solve (cdr s)))]\n        [else (cons (char->string\
    \ (char->integer (char->upper (car s))))\n                    (solve (cdr s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                     #\\W #\\X #\\Y #\\Z)) (cons (upper-case (car s))\
    \ \n                                (solve (lower-case (cdr s))))]\n    [else\
    \ (cons (car s) (solve (lower-case (cdr s))))]))\n", "  (cond [(empty? s) s]\n\
    \        [(character? (car s)) (cond [(equal? (char-code (car s)) 97) (cond [(equal?\
    \ (char-code (car s)) 65) (cond [(equal? (char-code (car s)) 66) (cond [(equal?\
    \ (char-code (car s)) 67) (cond [(equal? (char-code (car s)) 68) (cond [(equal?\
    \ (char-code (car s)) 69) (cond [(equal? (char-code (car s)) 70) (cond [(equal?\
    \ (char-code (car s)) 71) (cond [(equal? (char-code (car s)) 72) (cond [(equal?\
    \ (char-code (car s)) 73) (cond [(equal? (char-code (car s)) 74) (cond [(equal?\
    \ (char-code (car s)) 75) (cond [(equal? (char-code (car s)) 76) (cond [(equal?\
    \ (char-code (car s)) 77) (cond [(equal? (char-code (car s)) 78) (cond [(equal?\
    \ (char-code (car s)) 79) (cond [(equal? (char-code (car s)) 80) (cond [(equal?\
    \ (char-code (car s)) 81) (cond [(equal? (char-code (car s)) 82) (cond [(equal?\
    \ (char-code (car s)) 83) (cond [(equal? (char-code (car s)) 84) (cond [(equal?\
    \ (char-code (car s)) 85) (cond [(equal? (char-code (car s)) 86) (cond [(equal?\
    \ (char-code (car s)) 87) (cond [(equal? (char-code (car s)) 88) (cond [(equal?\
    \ (char-code (car s)) 89) (cond [(equal? (char-code (car s)) 90) (cond [(equal?\
    \ (char-code (car s)) 91) (cond [(equal? (char-code (car s)) 92) (cond [(equal?\
    \ (char-code (car s)) 93) (cond [(equal? (char-code (car s)) 94) (cond [(equal?\
    \ (char-code (car s)) 95) (cond [(equal? (char-code (car s)) 96) (cond [(equal?\
    \ (char-code (car s)) 97) (cond [(equal? (char-code (car s)) 65) (cond ", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cons (second s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(char? (car\
    \ s)) (cond\n                       [(char=? (char-code (car s)) ?A) (cond\n \
    \                                                     [(char=? (char-code (car\
    \ s)) ?a) (cond\n                                                            \
    \               [(char=? (char-code (car s)) ?A) (cond\n                     \
    \                                                                            \
    \       [(char=? (char-code (car s)) ?a) (cond\n                             \
    \                                                                            \
    \              [(char=? (char-code (car s)) ?A) (cond\n                      \
    \                                                                            \
    \                                      [(char=? (char-code (car s)) ?a) (cond\n\
    \                                                                            \
    \                                                                            \
    \      [(char=? (char-code (car s)) ?A) (cond\n                              \
    \                                                                            \
    \                                                                 [(char=? (char-code\
    \ (car s)) ?a) (cond\n                                                       \
    \                                                                            \
    \                                        [(char=? (char-code (car s)) ?A) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(char=? (char-code (car s)) ?a) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) ?A) (cond\n                                  \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) ?a) (cond\n                                                       \
    \                                                                            \
    \                                        [(char=? (char-code (car s)) ?A) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(char=? (char-code (car s)) ?a) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) ?A) (cond\n                                  \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) ?a) (cond\n                                                       \
    \                                                                            \
    \                                        [(char=? (char-code (car s)) ?A) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(char=? (char-code (car s)) ?a) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) ?A) (cond\n                                  \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) ?a) (cond\n                                                       \
    \                                                                            \
    \                                        [(char=? (char-code (car s)) ?A) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(char=? (char-code (car s)) ?a) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) ?A) (cond\n                                  \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) ?a) (cond\n                                                       \
    \                                                                            \
    \                                        [(char=? (char-code (car s)) ?A) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(char=? (char-code (car s)) ?a) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \  [(char", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n  \
    \                          [(lower? (car s)) (cond\n                         \
    \                      [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n   \
    \                                            [(upper? (car s)) (cons (lower (car\
    \ s)) (cdr s))])]\n                            [(upper? (car s)) (cons (lower\
    \ (car s)) (cdr s))])]\n    [else (cons (car s) (solve (cdr s)))]))\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n \
    \   [(character? (first s)) (cond\n                            [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                              ", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                          #\\W #\\\
    X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \     #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThank you for your answer! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n   \
    \ [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \ #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                                       #\\\
    W #\\X #\\Y #\\Z))\n                    (map string->char (map char->string '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                            \
    \                           #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t\
    \ #\\u #\\v \n                                                       #\\w #\\\
    x #\\y #\\z)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n   \
    \ [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                      #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      #\\W #\\\
    X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \     #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n  \
    \  [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                       #\\K\
    \ #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                  \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                    #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \                 #\\W #\\X #\\Y #\\Z)))\n                  (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nI guess this was the most elegant solution. Thanks!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\\
    X #\\Y #\\Z)) (cons (char->string \n                                         \
    \   (char->integer (char->integer \n                                         \
    \                 (first s))))\n                                (solve (rest s)))]\n\
    \    [else (cons (first s)\n                (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond \n                      \
    \      [(equal? (char-case (car s)) 'upper) (cons (char-case (car s)) (reverse\
    \ (substring (string (car s) 0 1) (substring (string (car s) 1 1) (substring (string\
    \ (car s) 2 1) (substring (string (car s) 3 1) (substring (string (car s) 4 1)\
    \ (substring (string (car s) 5 1) (substring (string (car s) 6 1) (substring (string\
    \ (car s) 7 1) (substring (string (car s) 8 1) (substring (string (car s) 9 1)\
    \ (substring (string (car s) 10 1) (substring (string (car s) 11 1) (substring\
    \ (string (car s) 12 1) (substring (string (car s) 13 1) (substring (string (car\
    \ s) 14 1) (substring (string (car s) 15 1) (substring (string (car s) 16 1) (substring\
    \ (string (car s) 17 1) (substring (string (car s) 18 1) (substring (string (car\
    \ s) 19 1) (substring (string (car s) 20 1) (substring (string (car s) 21 1) (substring\
    \ (string (car s) 22 1) (substring (string (car s) 23 1) (substring (string (car\
    \ s) 24 1) (substring (string (car s) 25 1) (substring (string (car s) 26 1) (substring\
    \ (string (car s) 27 1) (substring (string (car s) 28 1) (substring (string (car\
    \ s) 29 1) (substring (string (car s) 30 1) (substring (string (car s) 31 1) (substring\
    \ (string (car s) 32 1) (substring (string (car s) 33 1) (substring (string (car\
    \ s) 34 1) (substring (string (car s) 35 1) (substring (string (car s) 36 1) (substring\
    \ (string (car s) 37 1) (substring (string (car s) 38 1) (substring (string (car\
    \ s) 39 1) (substring (string (car s) 40 1) (substring (string (car s) 41 1) (substring\
    \ (string (car s) 42 1) (substring (string (car s) 43 1) (substring (string (car\
    \ s) 44 1) (substring (string (car s) 45 1) (substring (string (car s) 46 1) (substring\
    \ (string (car s) 47 1) (substring (string (car s) 48 1) (substring (string (car\
    \ s) 49 1) (substring (string (car ", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond \n                            [(equal? (char-case (car s)) 'lower)\
    \ (cons (char-case (car s)) (solve (reverse (cdr s))))]\n                    \
    \        [(equal? (char-case (car s)) 'upper) (cons (char-case (car s)) (solve\
    \ (reverse (cdr s))))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n            \
    \                [(equal? (char-case (car s)) 'space) (cons (char-case (car s))\
    \ (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) 'number) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n  \
    \                          [(equal? (char-case (car s)) 'symbol) (cons (char-case\
    \ (car s)) (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) 'null) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n    \
    \                        [(equal? (char-case (car s)) '#) (cons (char-case (car\
    \ s)) (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) '$) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n       \
    \                     [(equal? (char-case (car s)) '@) (cons (char-case (car s))\
    \ (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) '^) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n       \
    \                     [(equal? (char-case (car s)) '&) (cons (char-case (car s))\
    \ (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) '|) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n       \
    \                     [(equal? (char-case (car s)) '~) (cons (char-case (car s))\
    \ (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) '(space) (cons (char-case (car s)) (solve (reverse (cdr s))))]\n  \
    \                          [(equal? (char-case (car s)", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \              #\\W #\\X #\\Y #\\Z)))\n     (string-append (substring (first s)\
    \ 0 (- (length s) (first s))) (substring (first s) (first s) (length s)))]\n \
    \   [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                            #\\K #\\L #\\M\
    \ #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \                #\\W #\\X #\\Y #\\Z)))\n     (string-append (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z))\n \
    \                    (first s))]\n    [else (cons (first s) (solve (rest s)))])))\
    \ \n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis doesn't work for \"#a@C\"\
    \ which should return \"#A@c\"\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution for that case. Thanks for pointing that out.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons\
    \ (second s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any built-in functions. I tried to solve it using recursion and it didn't\
    \ work out. Can you please help me with that?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses recursion.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any built-in functions. I tried to solve it using recursion and it didn't\
    \ work out. Can you please help me with that?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                       #\\W #\\X #\\Y #\\Z)) (cons (char->string\
    \ (upper-case (first s))) \n                                       (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                            #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z))\n        \
    \            (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i\
    \ #\\j \n                                          #\\k #\\l #\\m #\\n #\\o #\\\
    p #\\q #\\r #\\s #\\t #\\u #\\v \n                                          #\\\
    w #\\x #\\y #\\z)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cond\n                        \
    \    [(upper? (first s)) (cond\n                                             \
    \  [(lower? (first s)) (first s)]\n                                          \
    \     [else (first s)])]\n                            [else (first s)])]\n   \
    \ [else (cons (first s)\n               (solve (rest s)))]))\n", "  (cond\n  \
    \  [(empty? s) s]\n    [(char? (car s)) (cons (char->upper (car s)) \n       \
    \                   (solve (char->lower (car s))))]\n    [else (cons (car s) (solve\
    \ (cdr s)))]))\n</code>\n<|/ a tags=recursion,racket,scheme |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\n\
    I added some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code. Hope it helps.\n<|/ c |>\n<| a tags=recursion,racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                            [(equal? (first s) (first s)) (cons (second s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (second (first s)) (solve (rest (rest s))))]\n                            [(equal?\
    \ (first s) (first s)) (cons (second (first s)) (solve (rest (rest (rest s)))))]\n\
    \                            [(equal? (first s) (first s)) (cons (second (first\
    \ s)) (solve (rest (rest (rest (rest s))))))]\n                            [(equal?\
    \ (first s) (first s)) (cons (second (first s)) (solve (rest (rest (rest (rest\
    \ (rest s))))))])]\n    [else (cons (first s) (solve (rest (rest s))))]))\n</code>\n\
    <|/ a |>\n<| c |>\nI appreciate your efforts, but I do not understand how this\
    \ works. Can you please explain how it works?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nI added some comments to the\
    \ code. Hope it helps.\n<|/ c |>\n<| c |>\nI added some comments to the code.\
    \ Hope it helps.\n<|/ c |>\n<| a tags=scheme,racket dscore=0 |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \ #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n             \
    \                          #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                    #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \                 #\\W #\\X #\\Y #\\Z)))\n                    (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                    #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \                 #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s)\n       \
    \        (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (second s)]\n    [else (cons (first s)\n                (solve\
    \ (substring (second s) 0 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 1 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 2 (- (length s) 1)))\n                (solve (substring (second s) 3 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 4 (- (length s) 1)))\n\
    \                (solve (substring (second s) 5 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 6 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 7 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 8 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 9 (- (length s) 1)))\n                (solve (substring (second s) 10 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 11 (- (length s) 1)))\n\
    \                (solve (substring (second s) 12 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 13 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 14 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 15 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 16 (- (length s) 1)))\n                (solve (substring (second s) 17 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 18 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 19 (- (length s) 1)))\n\
    \                (solve (substring (second s) 20 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 21 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 22 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 23 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 24 (- (length s) 1)))\n                (solve (substring (second s) 25 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 26 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 27 (- (length s) 1)))\n\
    \                (solve (substring (second s) 28 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 29 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 30 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 31 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 32 (- (length s) 1)))\n                (solve (substring (second s) 33 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 34 (", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C\
    \ #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \ #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n             \
    \                          #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                                 #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \         #\\W #\\X #\\Y #\\Z))))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis solution does not work if\
    \ you have a string like \"#a@C\"\n<|/ c |>\n<| c |>\nIt works, I tested it before\
    \ posting it. The problem was the missing `else` clause in the `cond` expression.\n\
    <|/ c |>\n<| c |>\nI tested it again and it doesn't work. Try it on \"#a@C\"\n\
    <|/ c |>\n<| c |>\nIt works, I tested it before posting it. The problem was the\
    \ missing `else` clause in the `cond` expression.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it doesn't work. Try it on \"#a@C\"\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                          #\\W #\\X #\\\
    Y #\\Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\\
    Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI like the way you used `map` here, but I wonder if\
    \ there's a way to do it without `map`?\n<|/ c |>\n<| c |>\nI guess you could\
    \ use `(apply append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                          #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \    #\\W #\\X #\\Y #\\Z)))` but that would require an extra `apply` call.\n<|/\
    \ c |>\n<| c |>\nI guess you could use `map` but then you'd have to do `(apply\
    \ append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                          #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                          #\\W #\\\
    X #\\Y #\\Z)))` which would require an extra `map` call and an extra `apply` call.\n\
    <|/ c |>", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n    \
    \                        [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(lower? (first s)) (cons (first s) (solve (rest\
    \ s)))])]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=scheme,racket,recursion\
    \ |>\n<| a |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n\
    \                       [(char? (car s)) (cond\n                             \
    \           [(char? (car s)) (cond\n                                         \
    \                [(char? (car s)) (cond\n                                    \
    \                            [(char? (car s)) (cond\n                        \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                  [(char? (car\
    \ s)) (cond\n                                                                \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                  [(char? (car s)) (cond\n                                  \
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                      [(char? (car s)) (cond\n              \
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                  [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                                           ",
  "  (cond\n    [(empty? s) \"\"]\n    [(member (first s) (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThe question was about Scheme, not Racket.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest ", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                \
    \            [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons\
    \ (reverse (first s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n\
    \                            [(lower? (car s)) (cond\n                       \
    \                         [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n\
    \                                                [(upper? (car s)) (cons (lower\
    \ (car s)) (cdr s))])]\n                            [(upper? (car s)) (cons (lower\
    \ (car s)) (cdr s))])]\n    [else (cons (car s) (solve (cdr s)))]))\n</code>\n\
    <|/ a tags=scheme,racket,string |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (first s)) (cons (second s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n\
    \        [(character? (first s)) (cons (first s) (solve (rest s)))]\n        [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(letter? (first\
    \ s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate\
    \ your help!\n<|/ c |>\n<| c |>\nYou're welcome. I'm glad I could help. If this\
    \ answer solved your problem, please consider accepting it by clicking the check\
    \ mark next to it.\n<|/ c |>\n<| c |>\nI did but since I'm new it says I have\
    \ to wait 5 minutes before I can accept it\n<|/ c |>\n<| c |>\nOh, I see. Thanks\
    \ for letting me know. :)\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper (car s)) \n\
    \                              (solve (cdr s)))]\n    [else (cons (car s) (solve\
    \ (cdr s)))]))\n", "  (cond [(empty? s) s]\n        [(character? (car s)) (cons\
    \ (char->string (char->integer car s)) \n                                (solve\
    \ (rest s)))]\n        [else (cons (char->string (char->integer car s)) \n   \
    \               (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cond\n                            [(equal? (first s) (first s))\
    \ (cons (second s) (solve (rest s)))]\n                            [(equal? (first\
    \ s) (first s)) (cons (second (first s)) (solve (rest (rest s))))]\n         \
    \                   [(equal? (first s) (first s)) (cons (second (first s)) (solve\
    \ (rest (rest (rest s)))))]\n                            [(equal? (first s) (first\
    \ s)) (cons (second (first s)) (solve (rest (rest (rest (rest s))))))]\n     \
    \                       [(equal? (first s) (first s)) (cons (second (first s))\
    \ (solve (rest (rest (rest (rest (rest s))))))])]\n    [else (cond\n         \
    \    [(equal? (first s) (first s)) (cons (second s) (solve (rest s)))]\n     \
    \        [(equal? (first s) (first s)) (cons (second (first s)) (solve (rest (rest\
    \ s))))]\n             [(equal? (first s) (first s)) (cons (second (first s))\
    \ (solve (rest (rest (rest s)))))]\n             [(equal? (first s) (first s))\
    \ (cons (second (first s)) (solve (rest (rest (rest (rest s))))))]\n         \
    \    [(equal? (first s) (first s)) (cons (second (first s)) (solve (rest (rest\
    \ (rest (rest (rest s))))))])]\n    [else (cond\n             [(equal? (first\
    \ s) (first s)) (cons (second s) (solve (rest s)))]\n             [(equal? (first\
    \ s) (first s)) (cons (second (first s)) (solve (rest (rest s))))]\n         \
    \    [(equal? (first s) (first s)) (cons (second (first s)) (solve (rest (rest\
    \ (rest s)))))]\n             [(equal? (first s) (first s)) (cons (second (first\
    \ s)) (solve (rest (rest (rest (rest s))))))]\n             [(equal? (first s)\
    \ (first s)) (cons (second (first s)) (solve (rest (rest (rest (rest (rest s))))))])]\n\
    \    [else (cond\n             [(equal? (first s) (first s)) (cons (second s)\
    \ (solve (rest s)))]\n             [(equal? (first s) (first s)) (cons (second\
    \ (first s)) (solve (rest (rest s))))]\n             [(equal? (first s) (first\
    \ s)) (cons (second (first s)) (solve (rest (", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n\
    \                (solve (substring (second s) 0 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 1 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 2 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 3 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 4 (- (length s) 1)))\n                (solve (substring (second s) 5 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 6 (- (length s) 1)))\n\
    \                (solve (substring (second s) 7 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 8 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 9 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 10 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 11 (- (length s) 1)))\n                (solve (substring (second s) 12 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 13 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 14 (- (length s) 1)))\n\
    \                (solve (substring (second s) 15 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 16 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 17 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 18 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 19 (- (length s) 1)))\n                (solve (substring (second s) 20 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 21 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 22 (- (length s) 1)))\n\
    \                (solve (substring (second s) 23 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 24 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 25 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 26 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 27 (- (length s) 1)))\n                (solve (substring (second s) 28 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 29 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 30 (- (length s) 1)))\n\
    \                (solve (substring (second s) 31 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 32 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 33 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 34", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S\
    \ #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=scheme,racket,string |>\n<code>", "  (cond\n    [(empty? s) s]\n   \
    \ [(letter? (first s)) (cond\n                            [(upper? (first s))\
    \ (cond\n                                              [(lower? (first s)) (first\
    \ s)]\n                                              [else (first s)]])]\n   \
    \                         [(lower? (first s)) (cond\n                        \
    \                      [(upper? (first s)) (first s)]\n                      \
    \                        [else (first s)]])]\n                            [else\
    \ (first s)])]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a\
    \ tags=scheme,racket,string |>\n<| c |>\nThis doesn't work. Try it with `(solve\
    \ \"ab\")`.\n<|/ c |>\n<| c |>\nIt works. I tested it with `(solve \"ab\")`. What\
    \ is the error you get?\n<|/ c |>\n<| c |>\nI tested it with `(solve \"ab\")`\
    \ and it returns `\"aB\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nI tested it\
    \ with `(solve \"ab\")` and it returns `\"aB\"` instead of `\"AB\"`. What is the\
    \ error you get?\n<|/ c |>\n<| c |>\nI tested it with `(solve \"ab\")` and it\
    \ returns `\"aB\"` instead of `\"AB\"`. What is the error you get?\n<|/ c |>\n\
    <| a tags=scheme,racket,string |>\n<code>", "  (cond\n    [(empty? s) s]\n   \
    \ [(character? (first s)) (cond\n                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \ [(equal? (first s) (first s)) (cond\n                                      \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                  ", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->upper (first\
    \ s)) \n                                    (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(letter?\
    \ (first s)) (cond\n                            [(upper? (first s)) (cond\n  \
    \                                             [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                               [else\
    \ (cons (first s) (solve (rest s)))])]\n                            [else (cons\
    \ (first s) (solve (rest s)))])]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                             #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                      #\\W #\\X #\\Y #\\Z)))\n     (string-append (map (lambda\
    \ (c) (if (char->string c) \n                                       (char->string\
    \ (char->string c) \n                                        (char->string (char->string\
    \ c) \n                                          (char->string (char->string c)\
    \ \n                                           #\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                           #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \          #\\W #\\X #\\Y #\\Z)\n                                       (char->string\
    \ c))))\n                   (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first\
    \ s)) (second s)]\n    [else (cons (first s)\n                (solve (substring\
    \ (second s) 0 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 1 (- (length s) 1)))\n                (solve (substring (second s) 2 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 3 (- (length s) 1)))\n\
    \                (solve (substring (second s) 4 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 5 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 6 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 7 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 8 (- (length s) 1)))\n                (solve (substring (second s) 9 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 10 (- (length s) 1)))\n\
    \                (solve (substring (second s) 11 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 12 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 13 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 14 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 15 (- (length s) 1)))\n                (solve (substring (second s) 16 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 17 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 18 (- (length s) 1)))\n\
    \                (solve (substring (second s) 19 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 20 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 21 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 22 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 23 (- (length s) 1)))\n                (solve (substring (second s) 24 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 25 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 26 (- (length s) 1)))\n\
    \                (solve (substring (second s) 27 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 28 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 29 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 30 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 31 (- (length s) 1)))\n                (solve (substring (second s) 32 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 33 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 34 (", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char->upper (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (concat \n                     \
    \                (reverse (concat \n                                         (reverse\
    \ (car s))\n                                         (char->lower (car s))))\n\
    \                                   (char->upper (car s))))\n                \
    \                (char->lower (car s)))]\n                            [(equal?\
    \ (char->lower (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (concat \n                     \
    \                (reverse (concat \n                                         (reverse\
    \ (car s))\n                                         (char->upper (car s))))\n\
    \                                   (char->lower (car s))))\n                \
    \                (char->upper (car s)))]\n                            [(equal?\
    \ (char->upper (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (concat \n                     \
    \                (reverse (concat \n                                         (reverse\
    \ (car s))\n                                         (char->lower (car s))))\n\
    \                                   (char->upper (car s))))\n                \
    \                (char->lower (car s)))]\n                            [(equal?\
    \ (char->lower (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (concat \n                     \
    \                (reverse (concat \n                                         (reverse\
    \ (car s))\n                                         (char->upper (car s))))\n\
    \                                   (char->lower (car s))))\n                \
    \                (char->upper (car s)))]\n                            [(equal?\
    \ (char->upper (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (concat \n                     \
    \                (reverse (concat \n                                         (reverse\
    \ (car s))\n                                         (char->lower (car s))))\n\
    \                                   (char->upper (car s))))\n                \
    \                (char->lower (car s)))]\n                            [(equal?\
    \ (char->lower (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (concat \n                     \
    \                (reverse (concat \n                                         (reverse\
    \ (car s))\n                                         (char->upper (car s))))\n\
    \                                   (char->lower (car s))))\n                \
    \                (char->upper (car s)))]\n                            [(equal?\
    \ (char->upper (car s)) (car s)) (concat \n                                (concat\
    \ \n                                 (reverse (con", "  (cond\n    [(empty? s)\
    \ s]\n    [(char? (car s)) (cond\n                      [(char-lower? (car s))\
    \ (cons (char-upper? (car s)) (cdr s))]\n                      [(char-upper? (car\
    \ s)) (cons (char-lower? (car s)) (cdr s))]\n                      [(char-lower?\
    \ (car s)) (cons (car s) (cdr s))])]\n    [else (cons (car s) (solve (cdr s)))]))\n\
    </code>\n<|/ a tags=scheme,racket,string |>\n<| c |>\nThank you for answering!\
    \ I appreciate it!\n<|/ c |>\n<| c |>\nI did some testing and it seems like this\
    \ solution is much slower than the other solutions posted here. I was wondering\
    \ if there was a way to make it faster.\n<|/ c |>\n<| c |>\nI tested this solution\
    \ on a large string and it took about 2 seconds to solve a large string. I'm wondering\
    \ if there is a way to make it faster?\n<|/ c |>\n<| c |>\nI tested this solution\
    \ on a large string and it took about 2 seconds to solve a large string. I'm wondering\
    \ if there is a way to make it faster?\n<|/ c |>\n<| c |>\nI tested this solution\
    \ on a large string and it took about 2 seconds to solve a large string. I'm wondering\
    \ if there is a way to make it faster?\n<|/ c |>\n<| a dscore=1 |>\n<code>", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (char->string (char->integer\
    \ first (first s))) (reverse (solve (rest s))))]\n    [else (cons (first s) (reverse\
    \ (solve (rest s))))]\n  )\n)\n", "  (cond\n    [(empty? s) \"\"]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a |>\n<| a tags=recursion,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                             [(equal? (first s) (first s)) (cond\n          \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                       [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                                       [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first ", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (first s)) (", "  (cond\n    [(empty? s) s]\n    [(member (first s)\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                           #\\W #\\X #\\\
    Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \      #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer. Could you\
    \ please explain how you did this in detail?\n<|/ c |>\n<| c |>\nI added some\
    \ comments. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Could you\
    \ please explain how you did this in detail?\n<|/ c |>\n<| c |>\nI added some\
    \ comments. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Could you\
    \ please explain how you did this in detail?\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T\
    \ #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n   \
    \ [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI like your solution, but I believe it can be simplified a bit. For example,\
    \ you can replace `(map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                          #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \    #\\W #\\X #\\Y #\\Z))` with `(list #\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                          #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \    #\\W #\\X #\\Y #\\Z)`.\n<|/ c |>\n<| c |>\nThanks for your suggestion. I\
    \ think it would be more readable and easier to understand.\n<|/ c |>\n<| c |>\n\
    I agree with you. My solution was more of a \"proof of concept\" than a real solution.\
    \ Your solution is much more elegant.\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    Here's a solution that uses ", "  (cond\n    [(empty? s) \"\"]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) \n                               (solve\
    \ (rest s)))]\n    [else (cons (char->lower (car s)) \n                (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char? (car s)) (cond\n\
    \                        [(char=? (char-code (car s)) 97) (cond\n            \
    \                                      [(char=? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \  [(char=? (char-code (car s)) 97) (cond\n                                  \
    \                                                                      [(char=?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                      [(char=?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \    [(char=? (char-code (car s)) 65) (cond\n                                \
    \                                                                            \
    \                        [(char=? (char-code (car s)) 97) (cond\n            \
    \                                                                            \
    \                                                                            \
    \    [(char=? (char-code (car s)) 65) (cond\n                                \
    \                                                                            \
    \                                                                      [(char=?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                             [(char=? (char-code\
    \ (car s)", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons\
    \ (second s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                 \
    \           [(upper? (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                   [(lower? (first s)) (cons (first s) (solve (rest s)))])]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=scheme,racket,string |>\n<code>", "  (cond\n    [(empty? s) s]\n   \
    \ [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                            #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \           #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \   #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n           \
    \                         #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test cases. I guess you didn't test it properly. Try it again and let me\
    \ know if it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the\
    \ test cases. I guess you didn't test it properly. Try it again and let me know\
    \ if it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ cases. I guess you didn't test it properly. Try it again and let me know if\
    \ it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test cases.\
    \ I guess you didn't test it properly. Try it again and let me know if it works.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X\
    \ #\\Y #\\Z))) \n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                   #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \  #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                     #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                     #\\W #\\X #\\Y #\\Z)) (cons\
    \ (char->string (car s)) \n                                (solve (rest s)))]\n\
    \    [else (cons (car s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (cons (second s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(character?\
    \ (first s)) (cons (second (first s)) (solve (rest s)))]\n        [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                           #\\W #\\\
    X #\\Y #\\Z)))\n     (reverse (map string->char (map char->string '(#\\A #\\B\
    \ #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                                   #\\W #\\X #\\Y #\\Z))))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (car s) '(#\\A #\\B #\\c #\\D #\\E #\\f #\\G #\\H #\\I #\\\
    j #\\k #\\L #\\M #\\N #\\o #\\P #\\Q #\\R #\\s #\\t #\\U #\\v #\\w #\\X #\\Y #\\\
    Z)) (cons (upper-case (car s)) (solve (sub1 (car s))))]\n    [else (cons (car\
    \ s) (solve (sub1 (car s))))]\n  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(char?\
    \ (car s)) (cond\n                      [(char? (car s)) (cond\n             \
    \                          [(char? (car s)) (cond\n                          \
    \                            [(char? (car s)) (cond\n                        \
    \                                             [(char? (car s)) (cond\n       \
    \                                                                            \
    \   [(char? (car s)) (cond\n                                                 \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                            \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                         [(char? (car s)) (cond\n           \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                         [(char? (car s)) (cond\n           \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                         [(char? (car s)) (cond\n           \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                         [(char? (car s)) (cond\n           \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                         [(char? (car s)) (cond\n           \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                                         [(char? (car s)) (cond\n           \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                   [(char? (car s)) (cond\n", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                          #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \         #\\W #\\X #\\Y #\\Z)))\n     (reverse (map string->char (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T\
    \ #\\U #\\V \n                                                #\\W #\\X #\\Y #\\\
    Z))))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work for me. `solve(\"ab\")` returns `\"A\"` instead\
    \ of `\"AB\"`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (second s)]\n    [(equal? (first s) (first\
    \ s)) (second (second s))]\n    [else (cons (first s)\n               (solve (second\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U\
    \ #\\V \n                                           #\\W #\\X #\\Y #\\Z)))\n \
    \    (string-append (map string->char (map char->string '(#\\A #\\B #\\C #\\D\
    \ #\\E #\\F #\\G #\\H #\\I #\\J \n                                           \
    \            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n  \
    \                                                     #\\W #\\X #\\Y #\\Z)))\n\
    \                  (map string->char (map char->string '(#\\a #\\b #\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j \n                                                \
    \       #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n       \
    \                                                #\\w #\\x #\\y #\\z)))]\n   \
    \ [else (cons (first s) (solve (rest s)))]))) \n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution, but I wonder if there is a way to do this without\
    \ using any built-in functions. I guess this would be a good exercise for me to\
    \ learn about recursion.\n<|/ c |>\n<| c |>\nI added a recursive solution. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your help! I really appreciate it!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X\
    \ #\\Y #\\Z)))\n     (string-append (map (lambda (c) (if (char->string c) \n \
    \                                      (char->string (char->string c) \n     \
    \                                                 (char->string (char->string\
    \ c) \n                                                                     (char->string\
    \ (char->string c) \n                                                        \
    \                           (char->string (char->string c) \n                \
    \                                                                    (char->string\
    \ (char->string c) \n                                                        \
    \                             (char->string (char->string c) \n              \
    \                                                                        (char->string\
    \ (char->string c) \n                                                        \
    \                               (char->string (char->string c) \n            \
    \                                                                            (char->string\
    \ (char->string c) \n                                                        \
    \                                 (char->string (char->string c) \n          \
    \                                                                            \
    \   (char->string (char->string c) \n                                        \
    \                                                 (char->string (char->string\
    \ c) \n                                                                      \
    \                   (char->string (char->string c) \n                        \
    \                                                                 (char->string\
    \ (char->string c) \n                                                        \
    \                                 (char->string (char->string c) \n          \
    \                                                                            \
    \   (char->string (char->string c) \n                                        \
    \                                                 (char->string (char->string\
    \ c) \n                                                                      \
    \                   (char->string (char->string c) \n                        \
    \                                                                 (char->string\
    \ (char->string c) \n                                                        \
    \                                 (char->string (char->string c) \n          \
    \                                                                            \
    \   (char->string (char->string c) \n                                        \
    \                                                 (char->string (char->string\
    \ c) \n                                                                      \
    \                   (char->string (char->string c) \n                        \
    \                                                                 (char->string\
    \ (char->string c) \n                                                        \
    \                                 (char->string (char->string c) \n          \
    \                                                                            \
    \   (char->string (char->string c) \n                                        \
    \                                                 (char->string (char->string\
    \ c) \n                                                                      \
    \                   (char->string (char->string c) \n                        \
    \                                                                 (char->string\
    \ (char->string c) \n                                                        \
    \                                 (char->string (char->string c) \n          \
    \                                                                            \
    \   (char->string (char->string c) \n                                        \
    \                                                 (char->string (char->string\
    \ c) \n                                                                      \
    \                   (char->string (char->string c) \n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (car s) (list 'a 'b 'c 'd)) (cond \n      [((char->integer\
    \ (car s)) > (char->integer (char->lower (car s))))\n       (char->lower (car\
    \ s))]\n      [((char->integer (car s)) < (char->integer (char->upper (car s))))\n\
    \       (char->upper (car s))]\n      [else (car s)])]\n    [else (cond \n   \
    \   [else (solve (substring (cons (car s) '()))])]))) \n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->upper (first\
    \ s)) \n                                      (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                          #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                          #\\W #\\\
    X #\\Y #\\Z)))\n     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\\
    E #\\F #\\G #\\H #\\I #\\J \n                                          #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                   #\\W #\\X #\\Y #\\Z)) (first s))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've\
    \ fixed the code. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it\
    \ with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've fixed\
    \ the code. Now it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n   \
    \ [(empty? s) \"\"]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (substring s 0 (- (length s) 1)))\n\
    \                (solve (substring s 1 (- (length s) 1)))\n                (solve\
    \ (substring s 2 (- (length s) 1)))\n                (solve (substring s 3 (-\
    \ (length s) 1)))\n                (solve (substring s 4 (- (length s) 1)))\n\
    \                (solve (substring s 5 (- (length s) 1)))\n                (solve\
    \ (substring s 6 (- (length s) 1)))\n                (solve (substring s 7 (-\
    \ (length s) 1)))\n                (solve (substring s 8 (- (length s) 1)))\n\
    \                (solve (substring s 9 (- (length s) 1)))\n                (solve\
    \ (substring s 10 (- (length s) 1)))\n                (solve (substring s 11 (-\
    \ (length s) 1)))\n                (solve (substring s 12 (- (length s) 1)))\n\
    \                (solve (substring s 13 (- (length s) 1)))\n                (solve\
    \ (substring s 14 (- (length s) 1)))\n                (solve (substring s 15 (-\
    \ (length s) 1)))\n                (solve (substring s 16 (- (length s) 1)))\n\
    \                (solve (substring s 17 (- (length s) 1)))\n                (solve\
    \ (substring s 18 (- (length s) 1)))\n                (solve (substring s 19 (-\
    \ (length s) 1)))\n                (solve (substring s 20 (- (length s) 1)))\n\
    \                (solve (substring s 21 (- (length s) 1)))\n                (solve\
    \ (substring s 22 (- (length s) 1)))\n                (solve (substring s 23 (-\
    \ (length s) 1)))\n                (solve (substring s 24 (- (length s) 1)))\n\
    \                (solve (substring s 25 (- (length s) 1)))\n                (solve\
    \ (substring s 26 (- (length s) 1)))\n                (solve (substring s 27 (-\
    \ (length s) 1)))\n                (solve (substring s 28 (- (length s) 1)))\n\
    \                (solve (substring s 29 (- (length s) 1)))\n                (solve\
    \ (substring s 30 (- (length s) 1)))\n                (solve (substring s 31 (-\
    \ (length s) 1)))\n                (solve (substring s 32 (- (length s) 1)))\n\
    \                (solve (substring s 33 (- (length s) 1)))\n                (solve\
    \ (substring s 34 (- (length s) 1)))\n                (solve (substring s 35 (-\
    \ (length s) 1)))\n                (solve (substring s 36 (- (length s) 1)))\n\
    \                (solve (", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cons (second s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n</code>\n<|/ a tags=scheme,racket,functional-programming |>\n<| c |>\n\
    Thanks for the answer! I understand that my code is not very efficient, but I\
    \ still don't understand how to make it more efficient. Could you please give\
    \ me some hints?\n<|/ c |>\n<| c |>\nI added a solution that uses `map` instead\
    \ of `for` loops. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! But I still don't understand how to make it more efficient.\
    \ Could you please give me some hints?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses `map` instead of `for` loops. I hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! But I still don't understand how\
    \ to make it more efficient. Could you please give me some hints?\n<|/ c |>\n\
    <| a tags=scheme,racket,functional-programming |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cond\n                              [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                           [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                  [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                     [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                 ", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n\
    \                       [(char? (car s)) (cond\n                             \
    \           [(char? (car s)) (cond\n                                         \
    \              [(char? (car s)) (cond\n                                      \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                        [(char?\
    \ (car s)) (cond\n                                                           \
    \                                 [(char? (car s)) (cond\n                   \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                     [(char? (car s)) (cond\n               \
    \                                                                            \
    \       [(char? (car s)) (cond\n                                             \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \  [(char? (car s)) (cond\n                                                  \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \                                        [(char? (car s)) (cond\n            \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \            [(char? (car s)) (cond\n                                        \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                                            \
    \            [(char? (car s)) (cond\n                                        \
    \                                                                            \
    \                [(char? (car s)) (cond\n                                    \
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                            \
    \                      [(char? (car s)) (cond\n                              \
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \                                [(char? (car s)) (cond\n                    \
    \                                                                            \
    \                                    [(char? (car s)) (cond\n                \
    \                                                                            \
    \                                        [(char? (car s)) (cond\n            \
    \                                                                            \
    \                                        [(char? (car s)) (cond\n            \
    \                                                                            \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                                                    [(char? (car s)) (cond\n\
    \                                                                ", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                    #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                             [(equal? (first s) (first s)) (cond\n          \
    \                                                                            \
    \                                          [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                 ", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (let*\
    \ ([s (first s)] [(first s) (second s)] [(second s) (third s)] [(third s) (fourth\
    \ s)])\n                        (cond\n                          [(empty? s) s]\n\
    \                          [(letter? (first s)) (let* ([s (first s)] [(first s)\
    \ (second s)] [(second s) (third s)] [(third s) (fourth s)])\n               \
    \                           (cond\n                                          \
    \  [(empty? s) s]\n                                            [(letter? (first\
    \ s)) (let* ([s (first s)] [(first s) (second s)] [(second s) (third s)] [(third\
    \ s) (fourth s)])\n                                                          \
    \  (cond\n                                                              [(empty?\
    \ s) s]\n                                                              [(letter?\
    \ (first s)) (let* ([s (first s)] [(first s) (second s)] [(second s) (third s)]\
    \ [(third s) (fourth s)])\n                                                  \
    \                          (cond\n                                           \
    \                                   [(empty? s) s]\n                         \
    \                                                     [(letter? (first s)) (let*\
    \ ([s (first s)] [(first s) (second s)] [(second s) (third s)] [(third s) (fourth\
    \ s)])\n                                                                     \
    \                           (cond\n                                          \
    \                                                        [(empty? s) s]\n    \
    \                                                                            \
    \                  [(letter? (first s)) (let* ([s (first s)] [(first s) (second\
    \ s)] [(second s) (third s)] [(third s) (fourth s)])\n                       \
    \                                                                            \
    \               (cond\n                                                      \
    \                                                              [(empty? s) s]\n\
    \                                                                            \
    \                                        [(letter? (first s)) (let* ([s (first\
    \ s)] [(first s) (second s)] [(second s) (third s)] [(third s) (fourth s)])\n\
    \                                                                            \
    \                                         (cond\n                            \
    \                                                                            \
    \               [(empty? s) s]\n                                             \
    \                                                                          [(letter?\
    \ (first s)) (let* ([s (first s)] [(first s) (second s)] [(second s) (third s)]\
    \ [(third s) (fourth s)])\n                                                  \
    \                                                                     (cond\n\
    \                                                                            \
    \                                             [(empty? s) s]\n               \
    \                                                                            \
    \                              [(letter? (first s)) (let* ([s (first s)] [(first\
    \ s) (second s)] [(second s) (third s)] [(third s) (fourth s)])\n            \
    \                                                                            \
    \                                 (cond\n                                    \
    \                                                                            \
    \           [(empty? s) s]\n                                                 \
    \                                                                          [(letter?\
    \ (first s)) (let* ([s (first s)] [(first s) (second s)] [(second s) (third s)]\
    \ [(third s) (fourth s)])\n                                                  \
    \                                                                         (cond\n\
    \                                                                            \
    \                                                 [(empty? s) s]\n           \
    \                                                                            \
    \                                      [(letter? (first s)) (let* ([s (first s)",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map (lambda (c) (if (char->string c) \n                                   \
    \      (char->string (char->string c) \n                                     \
    \      (char->string (char->string c) \n                                     \
    \      #\\U))))\n                       (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                          #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                  \
    \                        #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))) \n", "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n\
    \                       [(char? (car s)) (cond\n                             \
    \           [(char? (car s)) (cond\n                                         \
    \                [(char? (car s)) (cond\n                                    \
    \                                      [(char? (car s)) (cond\n              \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n", "  (cond\n    [(empty? s) s]\n   \
    \ [(member (car s) (list 'a 'b 'c 'd 'e)) (cond \n      [((char->integer (car\
    \ s)) >= 65 and\n        (char->integer (car s)) <= 90) \n       (char->integer\
    \ (car s))\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (car s)) <= 57)\n       ((char->integer (car s)) >= 97 and\n        (char->integer\
    \ (car s)) <= 122)\n       ((char->integer (car s)) >= 48 and\n        (char->integer\
    \ (c", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U\
    \ #\\V \n                                           #\\W #\\X #\\Y #\\Z)))\n \
    \    (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \ #\\W #\\X #\\Y #\\Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (char->upper (first\
    \ s)) (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,string |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \        [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n  \
    \                           [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                             [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                             [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \ [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                    [(equal? (first s) (first s)) (cons (first s) (solve (rest\
    \ s)))]\n                             [(equal? (first s) (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                             [(equal? (first s) (first\
    \ s)) (cons (first s) (solve (rest s)))]\n                             [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \           [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                             [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                             [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                             [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \ [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                    [(equal? (first s) (first s)) (cons (first s) (solve (rest\
    \ s)))]\n                             [(equal? (first s) (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                             [(equal? (first s) (first\
    \ s)) (cons (first s) (solve (rest s)))]\n                             [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \           [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                             [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                             [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                             [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \ [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                    [(equal? (first s) (first s)) (", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cond\n                             [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond \n                            [(equal? (char-case (car s)) 'upper)\
    \ (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'upper)))]\n                            [(equal? (char-case (car s))\
    \ 'lower) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'lower)))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'other)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'other)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'other)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'other)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car ", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \ #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n             \
    \                          #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)) (first s))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (car s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->string \n  \
    \                                            (char->integer (char->lower (car\
    \ s))))\n                                (solve (cdr s)))]\n    [else (cons (car\
    \ s)\n              (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n\
    \    [(char? (car s)) (cond\n                      [(char=? (char-code (car s))\
    \ 65) (cond\n                                                 [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                       [(char=? (char-code (car s)) 65) (cond\n             \
    \                                                                            \
    \           [(char=? (char-code (car s)) 97) (cond\n                         \
    \                                                                            \
    \         [(char=? (char-code (car s)) 65) (cond\n                           \
    \                                                                            \
    \             [(char=? (char-code (car s)) 97) (cond\n                       \
    \                                                                            \
    \                                   [(char=? (char-code (car s)) 65) (cond\n \
    \                                                                            \
    \                                                           [(char=? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                           [(char=? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                            [(char=? (char-code (car s)) 97) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                      [(char=? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                [(char=? (char-code (car s))\
    \ 97) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                      [(char=? (char-code (car s)) 65) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(char=? (char-code (car s)) 97) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            [(char=?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    [(char=?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              [(char=? (char-code (car s)) 65) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                          [(char=?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      [(char=? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        [(char=? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(char=? (char-code (car s)) 97) (cond\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               [(char=? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(char=? (char-code (car s)) 97) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(char=? (char-code (car s)) 65)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                [(char=? (char-",
  "  (cond\n    [(empty? s) s]\n    [(member (car s) (list 'a 'b 'c 'd)) (cond \n\
    \      [((char->integer (car s)) >= 65 (char->integer (car s))) \n       ((char->integer\
    \ (car s)) + 32)]\n      [else (char->integer (car s))])]\n    [else (cond \n\
    \      [else (cond \n        [(char->integer (car s)) >= 65 ((char->integer (car\
    \ s)) - 32)]\n        [else (char->integer (car s))])]\n      [else (cond \n \
    \       [else (cond \n          [(char->integer (car s)) >= 97 ((char->integer\
    \ (car s)) - 32)]\n          [else (char->integer (car s))])]\n        [else (cond\
    \ \n          [(char->integer (car s)) >= 97 ((char->integer (car s)) - 32)]\n\
    \          [else (char->integer (car s))])]\n        [else (cond \n          [(char->integer\
    \ (car s)) >= 97 ((char->integer (car s)) - 32)]\n          [else (char->integer\
    \ (car s))])]\n        [else (cond \n          [(char->integer (car s)) >= 97\
    \ ((char->integer (car s)) - 32)]\n          [else (char->integer (car s))])]\n\
    \        [else (cond \n          [(char->integer (car s)) >= 97 ((char->integer\
    \ (car s)) - 32)]\n          [else (char->integer (car s))])]\n        [else (cond\
    \ \n          [(char->integer (car s)) >= 97 ((char->integer (car s)) - 32)]\n\
    \          [else (char->integer (car s))])]\n        [else (cond \n          [(char->integer\
    \ (car s)) >= 97 ((char->integer (car s)) - 32)]\n          [else (char->integer\
    \ (car s))])]\n        [else (cond \n          [(char->integer (car s)) >= 97\
    \ ((char->integer (car s)) - 32)]\n          [else (char->integer (car s))])]\n\
    \        [else (cond \n          [(char->integer (car s)) >= 97 ((char->integer\
    \ (car s)) - 32)]\n          [else (char->integer (car s))])]\n        [else (cond\
    \ \n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V\
    \ \n                                      #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                   #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                      #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks for your answer. Could you please explain how you did this\
    \ in more detail? I understand that `member` checks if the first element is a\
    \ letter, but how does it know to reverse the case? Also, how does `(map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V\
    \ \n                                      #\\W #\\X #\\Y #\\Z))` work?\n<|/ c\
    \ |>\n<| c |>\nThe `member` function checks if the first element is a letter.\
    \ `char->string` converts a character to a string. `map` applies a function to\
    \ each element of a list. `'(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                      #\\W #\\X #\\Y #\\\
    Z)` is a list containing the letters of the alphabet. `member` checks if the first\
    \ element ", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z)))\n\
    \     (cond\n       [(empty? (rest s)) s]\n       [(char->string? (first s)) (cond\n\
    \                                [(char->string? (rest s)) (cond\n           \
    \                                            [(char->string? (first s)) (cond\n\
    \                                                                           [(char->string?\
    \ (rest s)) (cond\n                                                          \
    \                                         [(char->string? (first s)) (cond\n \
    \                                                                            \
    \                              [(char->string? (rest s)) (cond\n             \
    \                                                                            \
    \                          [(char->string? (first s)) (cond\n                \
    \                                                                            \
    \                             [(char->string? (rest s)) (cond\n              \
    \                                                                            \
    \                                     [(char->string? (first s)) (cond\n     \
    \                                                                            \
    \                                                  [(char->string? (rest s)) (cond\n\
    \                                                                            \
    \                                                               [(char->string?\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \          [(char->string? (rest s)) (cond\n                                 \
    \                                                                            \
    \                                      [(char->string? (first s)) (cond\n    \
    \                                                                            \
    \                                                                       [(char->string?\
    \ (rest s)) (cond\n                                                          \
    \                                                                            \
    \                     [(char->string? (first s)) (cond\n                     \
    \                                                                            \
    \                                                              [(char->string?\
    \ (rest s)) (cond\n                                                          \
    \                                                                            \
    \                             [(char->string? (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \      [(char->string? (rest s)) (cond\n                                     \
    \                                                                            \
    \                                                                  [(char->string?\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                                  [(char->string? (rest s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                   [(char->string? (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                [(char->string? (rest s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                [(char->string? (first s)) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                         [(char->string? (rest s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                     [(char->string? (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                   [(char->string?\
    \ (rest s)) (cond\n                                                          \
    \                                                                            \
    \                                                                            \
    \     [(char->string? (first s)) (cond\n                                     \
    \                                                                            \
    \                                                                            \
    \                              [(char->string? (rest s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                          [(char->string? (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \           [(char->string? (rest s)) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \                                                   [(char->", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cond\n                             [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \           [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                             [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                             [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                             [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \ [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                    [(equal? (first s) (first s)) (cons (first s) (solve (rest\
    \ s)))]\n                             [(equal? (first s) (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                             [(equal? (first s) (first\
    \ s)) (cons (first s) (solve (rest s)))]\n                             [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \           [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                             [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                             [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                             [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \ [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                    [(equal? (first s) (first s)) (cons (first s) (solve (rest\
    \ s)))]\n                             [(equal? (first s) (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                             [(equal? (first s) (first\
    \ s)) (cons (first s) (solve (rest s)))]\n                             [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n                  \
    \           [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n\
    \                             [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                             [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n                             [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \ [(equal? (first s) (first s)) (", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                            #\\K #\\L #\\M #\\N #\\O #\\P\
    \ #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \ #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                           \
    \ #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n             \
    \                               #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like\
    \ your solution, but I wonder if it would be possible to do it without using recursion.\
    \ I'm still trying to wrap my head around recursion.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without recursion.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ recursion.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond\n                            [(lower?\
    \ (car s)) (cond\n                                               [(upper? (car\
    \ s)) (cons (upper-case-char (car s)) (reverse (substring s (+ 0 (string-length\
    \ s)))))]\n                                               [(upper? (car s)) (cons\
    \ (lower-case-char (car s)) (reverse (substring s (+ 0 (string-length s)))))]\n\
    \                                               [(lower? (car s)) (cons (lower-case-char\
    \ (car s)) (reverse (substring s (+ 0 (string-length s)))))]\n               \
    \                                [(lower? (car s)) (cons (upper-case-char (car\
    \ s)) (reverse (substring s (+ 0 (string-length s)))))]\n                    \
    \                           [(upper? (car s)) (cons (upper-case-char (car s))\
    \ (reverse (substring s (+ 0 (string-length s)))))]\n                        \
    \                       [(upper? (car s)) (cons (lower-case-char (car s)) (reverse\
    \ (substring s (+ 0 (string-length s)))))]\n                                 \
    \              [(lower? (car s)) (cons (lower-case-char (car s)) (reverse (substring\
    \ s (+ 0 (string-length s)))))]\n                                            \
    \   [(lower? (car s)) (cons (upper-case-char (car s)) (reverse (substring s (+\
    \ 0 (string-length s)))))]\n                                               [(upper?\
    \ (car s)) (cons (upper-case-char (car s)) (reverse (substring s (+ 0 (string-length\
    \ s)))))]\n                                               [(upper? (car s)) (cons\
    \ (lower-case-char (car s)) (reverse (substring s (+ 0 (string-length s)))))]\n\
    \                                               [(lower? (car s)) (cons (lower-case-char\
    \ (car s)) (reverse (substring s (+ 0 (string-length s)))))]\n               \
    \                                [(lower? (car s)) (cons (upper-case-char (car\
    \ s)) (reverse (substring s (+ 0 (string-length s)))))]\n                    \
    \                           [(upper? (car s)) (cons (upper-case-char (car s))\
    \ (reverse (substring s (+ 0 (string-length s)))))]\n                        \
    \                       [(upper? (car s)) (cons (lower-case-char (car s)) (reverse\
    \ (substring s (+ 0 (string-length s)))))]\n                                 \
    \              [(lower? (car ", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X #\\Y\
    \ #\\Z)))\n     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M\
    \ #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \           #\\W #\\X #\\Y #\\Z)) (first s))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder\
    \ why you used `map` instead of `filter`?\n<|/ c |>\n<| c |>\n`filter` would also\
    \ work, but `map` would also work. `filter` would also work, but `map` would also\
    \ work. `filter` would also work, but `map` would also work. `filter` would also\
    \ work, but `map` would also work. `filter` would also work, but `map` would also\
    \ work. `filter` would also work, but `map` would also work. `filter` would also\
    \ work, but `map` would also work. `filter` would also work, but `map` would also\
    \ work. `filter` would also work, but `map` would also work. `filter` would also\
    \ work, but `map` would also work. `filter` would also work, but `map` would also\
    \ work. `filter` would also work, but `map` would also work. `filter` would also\
    \ work, but `map` would also work. `filter` would also work, but `map` would also\
    \ work. `filter` would also work, but `map` would also work. `filter` would also\
    \ work, but `map` would also work. `filter` would also work, but `map` would also\
    \ work. `filter` would also work, but `map` would also work. ", "  (cond\n   \
    \ [(empty? s) s]\n    [(character? (first s)) (cond\n                        \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                          [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                          [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \              [else (cons (first s) (solve (rest s)))])])])])])])])])]\n    \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                         [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                       [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                 [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                      [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                                      [else (cons (first s) (solve (rest s)))])])])])])])])])])]\n\
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                       [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                 [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                      [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                           [(equal? (first s) (first s)) (",
  "  (cond\n    [(empty? s) \"\"]\n    [(equal? (first s) (first s)) (second s)]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cons (second s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I fixed it.\n\
    <|/ c |>\n<| a tags=scheme,racket dscore=0 |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond\n                            [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \           [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (solve\
    \ (string-append (substring s (+ 1 i) (+ 1 i)))\n                            \
    \                                                                     (substring\
    \ s (+ 1 i) (+ 1 i)))]\n                                                     \
    \  [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (solve (string-append\
    \ (substring s (+ 1 i) (+ 1 i)))\n                                           \
    \                                                      (substring s (+ 1 i) (+\
    \ 1 i)))]\n                                                       [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (string-append (substring s (+\
    \ 1 i) (+ 1 i)))\n                                                           \
    \                                      (substring s (+ 1 i) (+ 1 i)))]\n     \
    \                                                  [(equal? (char-code (car s))\
    \ 97) (cons (char-code (car s)) (solve (string-append (substring s (+ 1 i) (+\
    \ 1 i)))\n                                                                   \
    \                              (substring s (+ 1 i) (+ 1 i)))]\n             \
    \                                          [(equal? (char-code (car s)) 65) (cons\
    \ (char-code (car s)) (solve (string-append (substring s (+ 1 i) (+ 1 i)))\n \
    \                                                                            \
    \                    (substring s (+ 1 i) (+ 1 i)))]\n                       \
    \                                [(equal? (char-code (car s)) 97) (cons (char-code\
    \ (car s)) (solve (string-append (substring s (+ 1 i) (+ 1 i)))\n            \
    \                                                                            \
    \         (substring s (+ 1 i) (+ 1 i)))]\n                                  \
    \                     [(equal? (char-code (car s)) 97) (cons (char-code (car s))\
    \ (solve (string-append (substring s (+ 1 i) (+ 1 i)))\n                     \
    \                                                                            (substring\
    \ s (+ 1 i) (+ 1 i)))]\n                                                     \
    \  [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (solve (string-append\
    \ (substring s (+ 1 i) (+ 1 i)))\n                                           \
    \                                                      (substring s (+ 1 i) (+\
    \ 1 i)))]\n                                                       [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (string-append (substring s (+\
    \ 1 i) (+ 1 i", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons\
    \ (char->upper (car s)) \n                               (solve (rest s)))]\n\
    \    [else (cons (char->lower (car s)) \n                 (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n                \
    \            [(equal? (char-code (car s)) 97) (cond\n                        \
    \                                    [(equal? (char-code (car s)) 65) (cons (char-code\
    \ (car s)) (solve (substring s 0 (char-code (car s)))))]\n                   \
    \                                         [(equal? (char-code (car s)) 65) (cons\
    \ (char-code (car s)) (solve (substring s 1 (char-code (car s)))))]\n        \
    \                                                    [(equal? (char-code (car\
    \ s)) 97) (cons (char-code (car s)) (solve (substring s 2 (char-code (car s)))))]\n\
    \                                                            [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (substring s 3 (char-code (car\
    \ s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (solve (substring s 4 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (solve (substring s 5 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (solve (substring s 6 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (solve (substring s 7 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (solve (substring s 8 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (solve (substring s 9 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (solve (substring s 10 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (solve (substring s 11 (char-code\
    \ (car s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (solve (sub", "  (cond\n \
    \   [(empty? s) s]\n    [(member (car s) (list 'a 'b 'c 'd)) (cond \n      [(member\
    \ 'A (car s)) (cond \n        [(member 'a (car s)) (cond \n          [(member\
    \ 'A (car s)) (cond \n            [(member 'a (car s)) (cond \n              [(member\
    \ 'A (car s)) (cond \n                [else (cond \n                  [(member\
    \ 'a (car s)) (cond \n                    [else (cond \n                     \
    \ [(member 'A (car s)) (cond \n                        [(member 'a (car s)) (cond\
    \ \n                          [(member 'A (car s)) (cond \n                  \
    \          [(member 'a (car s)) (cond \n                              [(member\
    \ 'A (car s)) (cond \n                                [(member 'a (car s)) (cond\
    \ \n                                  [(member 'A (car s)) (cond \n          \
    \                          [(member 'a (car s)) (cond \n                     \
    \                 [(member 'A (car s)) (cond \n                              \
    \          [(member 'a (car s)) (cond \n                                     \
    \     [(member 'A (car s)) (cond \n                                          \
    \  [(member 'a (car s)) (cond \n                                             \
    \ [(member 'A (car s)) (cond \n                                              \
    \  [(member 'a (car s)) (cond \n                                             \
    \     [(member 'A (car s)) (cond \n                                          \
    \          [(member 'a (car s)) (cond \n                                     \
    \                 [(member 'A (car s)) (cond \n                              \
    \                          [(member 'a (car s)) (cond \n                     \
    \                                     [(member 'A (car s)) (cond \n          \
    \                                                  [(member 'a (car s)) (cond\
    \ \n                                                              [(member 'A\
    \ (car s)) (cond \n                                                          \
    \      [(member 'a (car s)) (cond \n                                         \
    \                         [(member 'A (car s)) (cond \n                      \
    \                                              [(member 'a (car s)) (cond \n \
    \                                                                     [(member\
    \ 'A (car s)) (cond \n                                                       \
    \                 [(member 'a (car s)) (cond \n                              \
    \                                            [(member 'A (car s)) (cond \n   \
    \                                                                         [(member\
    \ 'a (car s)) (cond \n                                                       \
    \                       [(member 'A (car s)) (cond \n                        \
    \                                                        [else (cond \n      \
    \                                                                            [(member\
    \ 'a (car s)) (cond \n                                                       \
    \                             [else (con", "  (cond\n    [(empty? s) s]\n    [(char?\
    \ (car s)) (cond\n                       [(char=? (char-code (car s)) 97) (cond\n\
    \                                                      [(char=? (char-code (car\
    \ s)) 65) (cons (char-code (car s)) (cons (char-code (car s)) (reverse (sub1 (char-code\
    \ (car s)))))]\n                                                      [(char=?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (cons (char-code (car s))\
    \ (reverse (sub2 (char-code (car s)))))]\n                                   \
    \                   [(char=? (char-code (car s)) 65) (cons (char-code (car s))\
    \ (cons (char-code (car s)) (reverse (sub3 (char-code (car s)))))]\n         \
    \                                             [(char=? (char-code (car s)) 65)\
    \ (cons (char-code (car s)) (cons (char-code (car s)) (reverse (sub4 (char-code\
    \ (car s)))))]\n                                                      [(char=?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (cons (char-code (car s))\
    \ (reverse (sub5 (char-code (car s)))))]\n                                   \
    \                   [(char=? (char-code (car s)) 65) (cons (char-code (car s))\
    \ (cons (char-code (car s)) (reverse (sub6 (char-code (car s)))))]\n         \
    \                                             [(char=? (char-code (car s)) 65)\
    \ (cons (char-code (car s)) (cons (char-code (car s)) (reverse (sub7 (char-code\
    \ (car s)))))]\n                                                      [(char=?\
    \ (char-code (car s)) 65) (cons (char-code (car s)) (cons (char-code (car s))\
    \ (reverse (sub8 (char-code (car s)))))]\n                                   \
    \                   [(char=? (char-code (car s)) 65) (cons (char-code (car s))\
    \ (cons (char-code (car s)) (reverse (sub9 (char-code (car s)))))]\n         \
    \                                             [(char=? (char-code (car s)) 65)\
    \ (cons (char-code (car s)) (cons (char-code (car s)) (reverse (sub10 (char-code\
    \ (car s)))))]\n                                                      [(char=?\
    \ (char-code (c", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                                #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \               #\\W #\\X #\\Y #\\Z))\n                     (map string->char\
    \ (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n   \
    \                                             #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\u #\\v \n                                                #\\\
    w #\\x #\\y #\\z)))]\n    [else (cons (first s) (solve (rest s)))]))) \n", " \
    \ (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper (car\
    \ s)) (reverse (solve (cdr s))))]\n    [else (cons (car s) (reverse (solve (cdr\
    \ s))))]\n  ))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S\
    \ #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                            #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (string-append (map string->char\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                            #\\W #\\X\
    \ #\\Y #\\Z))\n                    (map string->char (map char->string '(#\\a\
    \ #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                            \
    \                #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n\
    \                                            #\\w #\\x #\\y #\\z)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))) \n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nI love the use of map and string->char. Thanks for sharing.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) \"\"]\n    [(character?\
    \ (first s)) (cond\n                             [(equal? (first s) (first s))\
    \ (cond\n                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                                         [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                    [(equal? (first s) (first ",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                          #\\W #\\X #\\\
    Y #\\Z)) (first s))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (second s)]\n    [else (cons (first s) (second (solve (sub1\
    \ s))))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest ", " \
    \ (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond \n              \
    \              [(equal? (char->upper (car s)) (car s)) (cons (char->lower (car\
    \ s)) (reverse (cons (char->upper (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->lower (car s)) (car s)) (cons (char->upper (car\
    \ s)) (reverse (cons (char->lower (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->upper (car s)) (car s)) (cons (char->lower (car\
    \ s)) (reverse (cons (char->upper (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->lower (car s)) (car s)) (cons (char->upper (car\
    \ s)) (reverse (cons (char->lower (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->upper (car s)) (car s)) (cons (char->lower (car\
    \ s)) (reverse (cons (char->upper (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->lower (car s)) (car s)) (cons (char->upper (car\
    \ s)) (reverse (cons (char->lower (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->upper (car s)) (car s)) (cons (char->lower (car\
    \ s)) (reverse (cons (char->upper (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->lower (car s)) (car s)) (cons (char->upper (car\
    \ s)) (reverse (cons (char->lower (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->upper (car s)) (car s)) (cons (char->lower (car\
    \ s)) (reverse (cons (char->upper (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->lower (car s)) (car s)) (cons (char->upper (car\
    \ s)) (reverse (cons (char->lower (car s)) (reverse (cdr s)))))]\n           \
    \                 [(equal? (char->upper (car s)", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n  \
    \              (solve (substring (second s) 0 (- (length s) 1)))\n           \
    \     (solve (substring (second s) 1 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 2 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 3 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 4 (- (length s) 1)))\n                (solve (substring (second s) 5 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 6 (- (length s) 1)))\n\
    \                (solve (substring (second s) 7 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 8 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 9 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 10 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 11 (- (length s) 1)))\n                (solve (substring (second s) 12 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 13 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 14 (- (length s) 1)))\n\
    \                (solve (substring (second s) 15 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 16 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 17 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 18 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 19 (- (length s) 1)))\n                (solve (substring (second s) 20 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 21 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 22 (- (length s) 1)))\n\
    \                (solve (substring (second s) 23 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 24 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 25 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 26 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 27 (- (length s) 1)))\n                (solve (substring (second s) 28 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 29 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 30 (- (length s) 1)))\n\
    \                (solve (substring (second s) 31 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 32 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 33 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons\
    \ (char->upper (car s)) (reverse (solve (rest s))))]\n    [else (cons (car s)\
    \ (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it out with input \"#a@C\"\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test cases and output in the answer. Can you please tell me what\
    \ is the problem you are facing?\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test cases and output in the answer. Can you please tell me what\
    \ is the problem you are facing?\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test cases and output in the answer. Can you please tell me what\
    \ is the problem you are facing?\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the test cases and output in the answer. Can you please tell me what\
    \ is the problem you are facing?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                                  #\\W #\\X #\\Y #\\Z)))\n     (cond\n      \
    \ [(equal? (first s) (first s)) (cons (second s) (solve (rest s)))]\n       [(equal?\
    \ (first s) (second s)) (cons (first s) (solve (rest s)))]\n       [(equal? (first\
    \ s) (third s)) (cons (second s) (solve (rest s)))]\n       [(equal? (first s)\
    \ (fourth s)) (cons (third s) (solve (rest s)))]\n       [(equal? (first s) (fifth\
    \ s)) (cons (fourth s) (solve (rest s)))]\n       [(equal? (first s) (sixth s))\
    \ (cons (fifth s) (solve (rest s)))]\n       [(equal? (first s) (seventh s)) (cons\
    \ (sixth s) (solve (rest s)))]\n       [(equal? (first s) (eighth s)) (cons (seventh\
    \ s) (solve (rest s)))]\n       [(equal? (first s) (ninth s)) (cons (eighth s)\
    \ (solve (rest s)))]\n       [(equal? (first s) (tenth s)) (cons (ninth s) (solve\
    \ (rest s)))]\n       [(equal? (first s) (eleventh s)) (cons (tenth s) (solve\
    \ (rest s)))]\n       [(equal? (first s) (twelfth s)) (cons (eleventh s) (solve\
    \ (rest s)))]\n       [(equal? (first s) (thirteenth s)) (cons (twelfth s) (solve\
    \ (rest s)))]\n       [(equal? (first s) (fourteenth s)) (cons (thirteenth s)\
    \ (solve (rest s)))]\n       [(equal? (first s) (fifteenth s)) (cons (fourteenth\
    \ s) (solve (rest s)))]\n       [(equal? (first s) (sixteenth s)) (cons (fifteenth\
    \ s) (solve (rest s)))]\n       [(equal? (first s) (seventeenth s)) (cons (sixteenth\
    \ s) (solve (rest s)))", "  (cond\n    [(empty? s) s]\n    [(equal? (first s)\
    \ (first s)) (second s)]\n    [else (cons (first s)\n                (solve (substring\
    \ s (+ 1 i)))\n                (solve (substring s (- i 1)))]))))\n", "  (cond\
    \ [(empty? s) s]\n        [(character? (car s)) (cond [(equal? (char-code (car\
    \ s)) 65) (cons #\\A (solve (reverse (cdr s))))]\n                           \
    \         [(equal? (char-code (car s)) 97) (cons #\\a (reverse (solve (reverse\
    \ (cdr s)))))]\n                                    [(equal? (char-code (car s))\
    \ 65) (cons #\\A (solve (reverse (cdr s))))]\n                               \
    \     [(equal? (char-code (car s)) 97) (cons #\\a (reverse (solve (reverse (cdr\
    \ s)))))]\n                                    [(equal? (char-code (car s)) 97)\
    \ (cons #\\A (solve (reverse (cdr s))))]\n                                   \
    \ [(equal? (char-code (car s)) 65) (cons #\\A (solve (reverse (cdr s))))]\n  \
    \                                  [(equal? (char-code (car s)) 97) (cons #\\\
    a (reverse (solve (reverse (cdr s)))))]\n                                    [(equal?\
    \ (char-code (car s)) 97) (cons #\\A (solve (reverse (cdr s))))]\n           \
    \                         [(equal? (char-code (car s)) 65) (cons #\\A (solve (reverse\
    \ (cdr s))))]\n                                    [(equal? (char-code (car s))\
    \ 97) (cons #\\a (reverse (solve (reverse (cdr s)))))]\n                     \
    \               [(equal? (char-code (car s)) 97) (cons #\\A (solve (reverse (cdr\
    \ s))))]\n                                    [(equal? (char-code (car s)) 65)\
    \ (cons #\\A (solve (reverse (cdr s))))]\n                                   \
    \ [(equal? (char-code (car s)) 97) (cons #\\a (reverse (solve (reverse (cdr s)))))]\n\
    \                                    [(equal? (char-code (car s)) 97) (cons #\\\
    A (solve (reverse (cdr s))))]\n                                    [(equal? (char-code\
    \ (car s)) 65) (cons #\\A (solve (reverse (cdr s))))]\n                      \
    \              [(equal? (char-code (car s)) 97) (cons #\\a (reverse (solve (reverse\
    \ (cdr s)))))]\n                                    [(equal? (char-code (car s))\
    \ 97) (cons #\\A (solve (reverse (cdr s))))]\n", "  (cond\n    [(empty? s) s]\n\
    \    [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n \
    \                                         [(char? (car s)) (cond\n           \
    \                                                [(char? (car s)) (cond\n    \
    \                                                            [(char? (car s))\
    \ (cond\n                                                                   [(char?\
    \ (car s)) (cond\n                                                           \
    \         [(char? (car s)) (cond\n                                           \
    \                          [(char? (car s)) (cond\n                          \
    \                                            [(char? (car s)) (cond\n        \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \    [(char? (car s)) (cond\n                                                \
    \                         [(char? (car s)) (cond\n                           \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                 [(char? (car s)) (cond\n                                   \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \               [(char? (car s)) (cond\n                                     \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                        [(char?\
    \ (car s)) (cond\n                                                           \
    \                       [(char? (car s)) (cond\n                             \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                         (char? (car s)) (cond\n            \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                            [(char? (car s)) (cond\n                        \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                         [(char? (car s)) (cond\n                           \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                       [(char? (car s)) (cond\n                             \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                       [(char? (car s)) (cond\n             \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \      [(char? (car s)) (cond\n                                              \
    \                                                               [(char? (", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\\
    E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                      #\\W #\\X #\\Y #\\Z))\
    \ (cons (char->upper (first s)) \n                                        (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a\
    \ tags=racket,scheme |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                      #\\W #\\X #\\Y #\\Z)) (cons (char->upper (first\
    \ s)) \n                                      (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(member\
    \ (car s) (list 'a 'b 'c 'd 'e)) (cons (char->string (char->integer 'A)) (solve\
    \ (cdr s)))]\n    [else (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cond\n                              [(lower?\
    \ (first s)) (cons (upper (first s)) (solve (rest s)))]\n                    \
    \          [(upper? (first s)) (cons (lower (first s)) (solve (rest s)))]\n  \
    \                            [else (cons (first s) (solve (rest s)))])]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work for strings like \"#a@C\"\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works for strings like \"#a@C\".\n<|/ c |>\n\
    <| c |>\nI fixed the bug, thanks for pointing it out. Now it works for strings\
    \ like \"#a@C\".\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n  \
    \  [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                          #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                  \
    \                        #\\W #\\X #\\Y #\\Z)))\n     (string-append (map (lambda\
    \ (c) (if (char->string c) \n                                       (char->string\
    \ (char->string c) \n                                         (char->string (char->string\
    \ c) \n                                           (char->string (char->string\
    \ c) \n                                             (char->string (char->string\
    \ c) \n                                               (char->string (char->string\
    \ c) \n                                                 (char->string (char->string\
    \ c) \n                                                   (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper\
    \ (car s)) (reverse (cons (char->lower (car s)) (reverse (cdr s)))))]\n    [else\
    \ (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond \n                            [(equal? (char-code (car s)) 97)\
    \ (cons \n                                (char-code (car s)) (cons (char-code\
    \ \n                                (char-code (car s)) + 32) (solve (cdr s))))]\n\
    \                            [(equal? (char-code (car s)) 65) (cons \n       \
    \                         (char-code (car s)) (cons (char-code \n            \
    \                    (char-code (car s)) - 32) (solve (cdr s))))]\n          \
    \                  [(equal? (char-code (car s)) 97) (cons \n                 \
    \               (char-code (car s)) (cons (char-code \n                      \
    \          (char-code (car s)) + 32) (solve (cdr s))))]\n                    \
    \        [(equal? (char-code (car s)) 65) (cons \n                           \
    \     (char-code (car s)) (cons (char-code \n                                (char-code\
    \ (car s)) - 32) (solve (cdr s))))]))]\n    [else (cons (car s) (solve (cdr s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n    \
    \                                       #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                                          #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                                   #\\W #\\X #\\Y #\\Z))\n                  \
    \     (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                                    #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \              #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s)\n          \
    \     (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G)) (cons (char->string (char->integer\
    \ (char->integer s))) (solve (rest s)))]\n    [else (cons (char->string (char->integer\
    \ (char->integer s))) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first (rest s))) (cons (first (rest s)) (solve (rest\
    \ s)))]\n    [else (cons (first (rest s)) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                                #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \          #\\W #\\X #\\Y #\\Z))\n                     (map string->char (map\
    \ char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n        \
    \                                        #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\u #\\v \n                                                #\\w #\\\
    x #\\y #\\z))))]\n    [else (cons (first s) (solve (rest s)))]))) \n", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cons (first s) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, although it does have a few issues. Firstly, it uses `first`\
    \ and `rest` which are not part of the standard library. Secondly, it uses `letter?`\
    \ which is not part of the standard library. Thirdly, it uses `cond` which is\
    \ not part of the standard library. Fourthly, it uses `first` which is not part\
    \ of the standard library. Fifthly, it uses `rest` which is not part of the standard\
    \ library. Sixthly, it uses `letter?` which is not part of the standard library.\
    \ Seventhly, it uses `cond` which is not part of the standard library. Eighthly,\
    \ it uses `first` which is not part of the standard library. Ninthly, it uses\
    \ `rest` which is not part of the standard library.\n<|/ c |>\n<| c |>\nI agree\
    \ with you that `first` and `rest` are not part of the standard library, but `letter?`\
    \ is part of the standard library and I used it because I thought it was the easiest\
    \ way to check if a character is a letter. `cond` is part of the standard library\
    \ and I used it because I thought it was the easiest way to check if a list is\
    \ empty. `first` and `rest` are part of the standard library and I used them because\
    \ I thought they were the easiest way to get the first and rest of a list. `letter?`\
    \ is part of the standard library and I used it because I thought it was the easiest\
    \ way to check if a character is a letter. `cond` is part of the standard library\
    \ and I used it because I thought it was the easiest way to check if a list is\
    \ empty. `first` and `rest` are part of the standard library and I used them because\
    \ I thought they were the easiest way to get the first and rest of a list. `letter?`\
    \ is part of the standard library and I used it because I thought it was the easiest\
    \ way to check if a character is a letter.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that `first` and `rest` are not part of the standard library, but `letter?`\
    \ is part of the standard library and I used it because I thought it was the easiest\
    \ way to check if a character is a letter. `cond` is part of the standard library\
    \ and I used it because I thought it was the easiest way to check if a list is\
    \ empty. `first` and `rest` are part of the standard library and I used them because\
    \ I thought they were the easiest way to get the first and ", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first\
    \ s)\n                (solve (substring (second s) 0 (- (length s) 1)))\n    \
    \            (solve (substring (second s) 1 (- (length s) 1)))\n             \
    \   (solve (substring (second s) 2 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 3 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 4 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 5 (- (length s) 1)))\n                (solve (substring (second s) 6 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 7 (- (length s) 1)))\n\
    \                (solve (substring (second s) 8 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 9 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 10 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 11 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 12 (- (length s) 1)))\n                (solve (substring (second s) 13 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 14 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 15 (- (length s) 1)))\n\
    \                (solve (substring (second s) 16 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 17 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 18 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 19 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 20 (- (length s) 1)))\n                (solve (substring (second s) 21 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 22 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 23 (- (length s) 1)))\n\
    \                (solve (substring (second s) 24 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 25 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 26 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 27 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 28 (- (length s) 1)))\n                (solve (substring (second s) 29 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 30 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 31 (- (length s) 1)))\n\
    \                (solve (substring (second s) 32 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 33 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                           #\\W #\\\
    X #\\Y #\\Z)))\n     (cond\n       [(empty? (rest s)) s]\n       [(member (first\
    \ s) (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n\
    \                                             #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\u #\\v \n                                             #\\\
    w #\\x #\\y #\\z))\n        (cond\n          [(empty? (rest s)) s]\n         \
    \ [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                               #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \              #\\W #\\X #\\Y #\\Z))\n           (cond\n             [(empty?\
    \ (rest s)) s]\n             [(member (first s) (map char->string '(#\\a #\\b\
    \ #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                                 \
    \                 #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v\
    \ \n                                                  #\\w #\\x #\\y #\\z))\n\
    \              (cond\n                [(empty? (rest s)) s]\n                [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                                      #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T ", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                           #\\W #\\\
    X #\\Y #\\Z)))\n     (string-append (map (lambda (c) (if (char->string c) \n \
    \                                      (char->string (char->string c) \n     \
    \                                                (char->string (char->string c)\
    \ \n                                                                   #\\U))\n\
    \                                       (char->string c))\n                  \
    \            (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I\
    \ #\\J \n                                                   #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \                  #\\W #\\X #\\Y #\\Z)))\n                    (first s))]\n \
    \   [else (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n \
    \       [(character? (first s)) (cons (first s) (solve (rest s)))]\n        [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n \
    \   [(char? (car s)) (cond\n                       [(char=? (car s) (toupper (car\
    \ s))) (cons (toupper (car s)) (reverse (sub1 (car s))))]\n                  \
    \     [(char=? (car s) (tolower (car s))) (cons (tolower (car s)) (reverse (sub1\
    \ (car s))))]\n                       [else (cons (car s) (reverse (sub1 (car\
    \ s))))]\n                      )]\n    [else (cons (car s) (solve (cdr s)))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer. I'm sorry I didn't\
    \ specify that I was looking for a solution using only recursion.\n<|/ c |>\n\
    <| c |>\nNo problem. I've added a solution that uses only recursion.\n<|/ c |>\n\
    <| c |>\nThank you for your answer. I tried your solution and it works perfectly.\
    \ I'm sorry I didn't specify that I was looking for a solution using only recursion.\n\
    <|/ c |>\n<| a |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (second s)]\n    [else (cons (first s) (solve (second s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n              \
    \                [(lower? (first s)) (cond\n                                 \
    \                 [(upper? (first s)) (cons (first s) (solve (rest s)))]\n   \
    \                                               [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(lower? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(upper? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(lower?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n                            \
    \                      [(upper? (first s)) (cons (first s) (solve (rest s)))]\n\
    \                                                  [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                                  [(upper?\
    \ (first s)) (cons (first s) (solve (rest s)))", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (first s)) (cond\n                            [(equal? (first\
    \ s) (first s)) (cons (second s) (solve (rest s)))]\n                        \
    \    [(equal? (first s) (second s)) (cons (first s) (solve (rest s)))]\n     \
    \                       [(equal? (first s) (third s)) (cons (second s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (fourth s)) (cons\
    \ (third s) (solve (rest s)))]\n                            [(equal? (first s)\
    \ (fifth s)) (cons (fourth s) (solve (rest s)))]\n                           \
    \ [(equal? (first s) (sixth s)) (cons (fifth s) (solve (rest s)))]\n         \
    \                   [(equal? (first s) (seventh s)) (cons (sixth s) (solve (rest\
    \ s)))]\n                            [(equal? (first s) (eighth s)) (cons (seventh\
    \ s) (solve (rest s)))]\n                            [(equal? (first s) (ninth\
    \ s)) (cons (eighth s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (tenth s)) (cons (ninth s) (solve (rest s)))]\n                  \
    \          [(equal? (first s) (eleventh s)) (cons (tenth s) (solve (rest s)))]\n\
    \                            [(equal? (first s) (twelfth s)) (cons (eleventh s)\
    \ (solve (rest s)))]\n                            [(equal? (first s) (thirteenth\
    \ s)) (cons (twelfth s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (fourteenth s)) (cons (thirteenth s) (solve (rest s)))]\n        \
    \                    [(equal? (first s) (fifteenth s)) (cons (fourteenth s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (sixteenth s)) (cons\
    \ (fifteenth s) (solve (rest s)))]\n                            [(equal? (first\
    \ s) (seventeenth s)) (cons (sixteenth s) (solve (rest s)))]\n               \
    \             [(equal? (first s) (eighteenth s)) (cons (seventeenth s) (solve\
    \ (rest s)))]\n                            [(equal? (first s) (nineteenth s))\
    \ (cons (eighteenth s) (solve (rest s)))]\n                            [(equal?\
    \ (first s) (twenty s)) (cons (nineteenth s) (solve (rest s)))]\n            \
    \                [(equal? (first s) (twentyfirst ", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char? (car s)) (cond\n                       [(char? (car s)) (cond\n\
    \                                          [(char? (car s)) (cond\n          \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                   [(char?\
    \ (car s)) (cond\n                                                           \
    \         [(char? (car s)) (cond\n                                           \
    \                          [(char? (car s)) (cond\n                          \
    \                                            [(char? (car s)) (cond\n        \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \    [(char? (car s)) (cond\n                                                \
    \                         [(char? (car s)) (cond\n                           \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                 [(char? (car s)) (cond\n                                   \
    \                                          [(char? (car s)) (cond\n          \
    \                                                                    [(char? (car\
    \ s)) (cond\n                                                                \
    \               [(char? (car s)) (cond\n                                     \
    \                                           [(char? (car s)) (cond\n         \
    \                                                                        [(char?\
    \ (car s)) (cond\n                                                           \
    \                       [(char? (car s)) (cond\n                             \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                         (char? (car s)) (cond\n            \
    \                                                                          [(char?\
    \ (car s)) (cond\n                                                           \
    \                            [(char? (car s)) (cond\n                        \
    \                                                                [(char? (car\
    \ s)) (cond\n                                                                \
    \                         [(char? (car s)) (cond\n                           \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                       [(char? (car s)) (cond\n                             \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                               [(char? (car s)) (cond\n                     \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                       [(char? (car s)) (cond\n             \
    \                                                                            \
    \          [(char? (car s)) (cond\n                                          \
    \                                                          [(char? (car s)) (cond\n\
    \                                                                            \
    \                         [(char? (car s)) (cond\n                           \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                            \
    \                    [(char? (car s)) (cond\n                                \
    \                                                                         [(char?\
    \ (car s)) (cond\n                                                           \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                            \
    \                          [(char? (car s)) (cond\n                          \
    \                                                                            \
    \      [(char? (car s)) (cond\n                                              \
    \                                                               [(char", "  (cond\n\
    \    [(empty? s) s]\n    [(letter? (first s)) (cond\n                        \
    \    [(upper? (first s)) (cond\n                                             \
    \  [(lower? (first s)) (first s)\n                                           \
    \      (first #\\A) (first #\\Z)]\n                                          \
    \     [(upper? (first s)) (first #\\A)\n                                     \
    \            (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]\n                                               [(upper?\
    \ (first s)) (first #\\Z)]\n                                               [(upper?\
    \ (first s)) (first #\\A)]\n                                               [(lower?\
    \ (first s)) (first #\\Z)]\n                                               [(lower?\
    \ (first s)) (first #\\A)]", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cond\n                             [(equal? (first s) (first s)) (cond\n\
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                 [(equal? (first s) (first s)) (cond\n                      \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                       [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                 "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
