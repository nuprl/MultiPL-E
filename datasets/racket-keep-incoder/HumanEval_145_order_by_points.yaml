name: HumanEval_145_order_by_points
language: racket
prompt: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
  ;; in ascending order according to the sum of their digits.\n;; Note: if there are\
  \ several items with similar sum of their digits,\n;; order them based on their\
  \ index in original list.\n;; For example:\n;; >>> order_by_points([1, 11, -1, -11,\
  \ -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n(define (order_by_points\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
  \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
  \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56\
  \ 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
  \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
  \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
  \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? nums) empty]\n    [(zero? (first nums)) (first\
    \ nums)]\n    [else (let ([sum (+ (first nums) (first nums))])\n            (cons\
    \ (first nums)\n                   (order_by_points (rest nums)\n            \
    \                       sum))))]))\n", "  (if (empty? nums)\n      '()\n     \
    \ (append (sort (map #(sum (modulo n 10)) nums)\n                     <)\n   \
    \           (cons (first nums) (order_by_points (rest nums))))))\n", "  (if (empty?\
    \ nums)\n      nums\n      (let ((sum (+ (first nums) (second nums))))\n     \
    \   (if (= sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n\
    \            (cons (first nums)\n                  (order_by_points (rest nums)\n\
    \                                (lambda (x y)\n                             \
    \     (if (< x y)\n                                      (cons x y)\n        \
    \                              (cons y x)))))\n            (cons (first nums)\n\
    \                  (order_by_points (rest nums)\n                            \
    \    (lambda (x y)\n                                  (if (< x y)\n          \
    \                            (cons y x)\n                                    \
    \  (cons x y))))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (reverse nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (reverse nums))))\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (empty? nums)\n      nums\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (if (equal? sum 0)\n            (order_by_points\
    \ (rest nums))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)))))))\n", "  (if (empty? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (> (abs (- sum (first nums)\
    \ (second nums)))) sum (- sum (first nums) (second nums))) \n               (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (sum\
    \ (map digit nums))])\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                (lambda (x y)\n               \
    \                   (if (< x y)\n                                      (cons x\
    \ y)\n                                      (cons y x)))))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                   (lambda (x y)\n                                  (if (< x\
    \ y)\n                                      (cons x (+ y 1))\n               \
    \                       (cons (+ x 1) y))))))))))\n", "  (if (null? nums)\n  \
    \    '()\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n     \
    \   (if (= sum 0)\n            (cons nums nums)\n            (cons (car nums)\
    \ (order_by_points (cdr nums)))))))\n", "  (cond\n    [(empty? nums) nums]\n \
    \   [(zero? (first nums)) (cons (first nums) nums)]\n    [else (cons (first nums)\n\
    \                (order_by_points (rest nums))\n                (cons (first nums)\
    \ nums))]))\n", "  (if (null? nums)\n      '()\n      (let ((sum (reduce (lambda\
    \ (x y) (+ x y)) nums)))\n        (cond ((= sum 0) nums)\n              ((< sum\
    \ 0) (cons 0 (order_by_points (filter (lambda (x) (= (mod x 10) 0)) nums)))\n\
    \              (else (cons (car nums) (order_by_points (filter (lambda (x) (not\
    \ (= (mod x 10) 0)) nums)))))))\n      )\n  )\n", "  (define (helper nums acc)\n\
    \    (if (null? nums)\n        acc\n        (helper (cdr nums) (cons (+ (car nums)\
    \ (sum (cdr nums))) acc)))))\n  (helper nums []))\n", "  (if (null? nums)\n  \
    \    nums\n      (let ((sum (+ (first nums) (second nums))))\n        (if (= sum\
    \ 0)\n            (cons (first nums) (order_by_points (rest nums)))\n        \
    \    (cons (first nums) (order_by_points (rest nums))\n                   (order_by_points\
    \ (rest nums))))))))\n", "  (if (empty? nums)\n      nums\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (if (= sum 0)\n            (order_by_points\
    \ (rest nums))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)))))))\n", "  (if (empty? nums)\n      '()\n      (let ((sum (sum\
    \ (map digit nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                  (lambda (x y)\n             \
    \                       (if (= x y)\n                                        (-\
    \ x y)\n                                        (+ x y)))))))))\n", "  (cond\n\
    \    [(empty? nums) empty]\n    [(cons? nums) (cons (first nums) (order_by_points\
    \ (rest nums)))]\n    [else (cons (first nums) (order_by_points (rest nums)))]))\n",
  "  (if (empty? nums)\n      '()\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (cons (first nums)\n              (order_by_points (rest nums)\n    \
    \                           (lambda (x y)\n                                 (if\
    \ (= x y)\n                                     (+ x y)\n                    \
    \                 (if (< x y)\n                                         (- x y)\n\
    \                                         (- y x)))))\n              (if (= sum\
    \ 0)\n                  (order_by_points (rest nums)\n                       \
    \          (lambda (x y)\n                                   (if (< x y)\n   \
    \                                    (- x y)\n                               \
    \        (- y x)))))))))\n", "  (cond\n    [(empty? nums) '()]\n    [(zero? (first\
    \ nums)) (cons (first nums) (order_by_points (rest nums)))]\n    [else (cons (first\
    \ nums)\n                (order_by_points (rest nums))\n                (order_by_points\
    \ (rest nums)))]))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (> (+ sum 10) 0)\n        \
    \           (cons (first nums) (second nums))\n                   (cons (first\
    \ nums) (first nums))))\n               (order_by_points (rest nums)))))\n", " \
    \ (cond\n    [(empty? nums) empty]\n    [(zero? (first nums)) (first nums)]\n\
    \    [else (cons (first nums)\n                (order_by_points (rest nums)))]))\n",
  "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (helper\
    \ (cdr nums) (cons (+ (car nums) (sum (cdr nums))) acc)))))\n  (helper nums []))\n",
  "  (if (null? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums) (order_by_points (rest nums))\n    \
    \               (list (+ 0 (first nums))))))))\n", "  (if (null? nums)\n     \
    \ '()\n      (append (sort (map sum (map cdr nums))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (", "  (if (empty?\
    \ nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n   \
    \     (cons (if (> (abs sum) 0) (/ sum 10) (- sum (abs sum))) \n             \
    \  (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      '()\n    \
    \  (let ((sum (sum (map digit nums))))\n        (cons (if (= sum 0) nums (sub1\
    \ nums))\n              (order_by_points (sub1 nums))))))\n", "  (if (empty? nums)\n\
    \      '()\n      (let ((sum (+ (first nums) (second nums))))\n        (if (>\
    \ sum 0)\n            (cons (first nums) (order_by_points (rest nums))))\n   \
    \         (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      '()\n\
    \      (let ([sum (sum (map digits (map reverse nums)))])\n        (if (= sum\
    \ 0)\n            (cons (first nums) (order_by_points (rest nums)))\n        \
    \    (cons (first nums)\n                  (order_by_points (rest nums)\n    \
    \                              (lambda (x y)\n                               \
    \     (if (< x y)\n                                        (cons x y)\n      \
    \                                  (cons y x))))))))))\n", "  (if (empty? nums)\n\
    \      (list)\n      (let ((sum (sum-digits (first nums))))\n        (append (order_by_points\
    \ (rest nums))\n                (list (first nums) sum)\n                (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (= sum 0) (first nums) (second\
    \ nums)) (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n      nums\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (if (equal? sum 0)\n\
    \            (order_by_points (rest nums))\n            (cons (first nums) (order_by_points\
    \ (rest nums)))))))\n", "  (if (empty? nums)\n      (list)\n      (let ((sum (sum\
    \ (cdr nums))))\n        (append (list (car nums))\n                (list (if\
    \ (= sum 0)\n                          (car nums)\n                          (order_by_points\
    \ (cdr nums))))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits nums))\n                     (lambda (x y) (< (+ x y) 0))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ ", "  (define (helper nums acc)\n    (cond\n\
    \      [(empty? nums) acc]\n      [(equal? (sum (first nums)) 0)\n       (helper\
    \ (rest nums) (cons (first nums) acc))]\n      [else\n       (helper (rest nums)\n\
    \              (cons (first nums)\n                    (helper (rest nums)\n \
    \                           (cons (first nums) acc))))]))\n  (helper nums []))\n",
  "  (if (empty? nums)\n      nums\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (abs sum) 0) (/ sum 10) (- (abs sum) 10))\n            \
    \   (order_by_points (rest nums)))))))\n", "  (if (empty? nums)\n      nums\n\
    \      (let ((sum (reduce (lambda (x y) (+ x y)) (map (lambda (x) (* x 10)) nums))))\n\
    \        (if (= sum 0)\n            (order_by_points nums)\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)))))))\n", "  (if\
    \ (null? nums)\n      '()\n      (let ((sum (foldr (\u03BB (x y) (+ x y)) 0 nums)))\n\
    \        (cons (first nums)\n              (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (fold_left (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (if (= sum 0)\n            (cons 0 nums)\n            (cons\
    \ (car nums) (order_by_points (cdr nums)))))))\n", "  (if (empty? nums)\n    \
    \  (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (cons (if\
    \ (> (+ sum 1) 0)\n                   (first nums)\n                   (second\
    \ nums))\n              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n\
    \      '()\n      (let ((sum (sum-of-digits nums)))\n        (if (= sum 0)\n \
    \           (cons nums (order_by_points rest))\n            (cons (cons nums sum)\
    \ (order_by_points rest)))))\n", "  (if (null? nums)\n      (list)\n      (let\
    \ ([sum (+ (first nums) (second nums))])\n        (cons (if (> (- sum 10) 0) (-\
    \ sum 10) sum) \n               (order_by_points (rest nums))))))\n", "  (if (empty?\
    \ nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n   \
    \     (cons (first nums)\n              (order_by_points (rest nums)\n       \
    \                        (lambda (x y)\n                                 (if (=\
    \ x y)\n                                     (list x y)\n                    \
    \                 (< (+ x y) sum))))))))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum (map digit nums))])\n        (if (= sum 0)\n          \
    \  (cons (first nums) (order_by_points (rest nums)))\n            (cons (first\
    \ nums)\n                  (order_by_points (rest nums)\n                    \
    \            (lambda (x y)\n                                  (if (< x y)\n  \
    \                                    (cons x y)\n                            \
    \          (cons y x)))))))))\n", "  (cond\n    [(empty? nums) nums]\n    [(zero?\
    \ (first nums)) (order_by_points rest)]\n    [else (cons (first nums)\n      \
    \          (order_by_points (rest nums)))]))\n", "  (if (empty? nums)\n      (list)\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (abs\
    \ sum) 0) (/ sum 10) (- (abs sum) 10))\n              (order_by_points (rest nums)))))))\n",
  "  (if (empty? nums)\n      '()\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                      (if (< x y)\n                                        (cons\
    \ x y)\n                                        (cons y x)))))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                    (lambda (x y)\n                                    (if (<\
    \ x y)\n                                        (cons x y)\n                 \
    \                       (cons y x))\n                                    (lambda\
    \ (x y)\n                                      (if (< x y)\n                 \
    \                         (cons x y)\n                                       \
    \   (cons y x))))))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits (reverse nums))))\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (cond\n    [(empty? nums) nums]\n    [(= (length nums)\
    \ 1) nums]\n    [(= (length nums) 2) (cons (first nums) (order_by_points (rest\
    \ nums)))]\n    [else (cons (first nums) (order_by_points (rest nums))\n     \
    \           (order_by_points (rest nums)))]))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (reverse nums))))\n              (list\
    \ (car nums)))))\n", "  (if (empty? nums)\n      nums\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (cons (first nums)\n              (order_by_points\
    \ (rest nums)\n                              (lambda (x y)\n                 \
    \               (if (= x y)\n                                    0\n         \
    \                           (+ (- x y) (- y sum))))))))))\n", "  (if (empty? nums)\n\
    \      nums\n      (let ([sum (+ (first nums) (second nums))])\n        (if (=\
    \ sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n    \
    \        (cons (first nums) (order_by_points (rest nums))\n                  \
    \ (order_by_points (rest nums)))))))\n", "  (if (empty? nums)\n      (list)\n\
    \      (append (sort (map sum (map digits (rest nums))) <)\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   '()\n      (append (sort (map sum (map digits nums)) <)\n              (list\
    \ (first nums)))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (reverse nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (rest nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (rest nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      nums\n      (let ((sum (reduce\
    \ (lambda (x y) (+ x y)) (map digit nums))))\n        (if (= sum 0)\n        \
    \    (cons 0 (order_by_points (rest nums)))\n            (cons (car nums) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (empty? nums)\n      nums\n      (let ([sum (+ (first\
    \ nums) (second nums))])\n        (if (= sum 0)\n            (cons (first nums)\
    \ (order_by_points (rest nums)))\n            (cons (first nums) (order_by_points\
    \ (rest nums)))))))\n", "  (if (null? nums)\n      nums\n      (let ((sum (sum\
    \ (map digit nums))))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                     (if (< x y)\n                                       x\n\
    \                                       y)))))))))\n", "  (if (empty? nums)\n\
    \      '()\n      (append (sort (map digit-sum nums)\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x ", "  (if (null?\
    \ nums)\n      '()\n      (append (sort (map #(+ (mod % 10) (* (% 10) 10)) nums)\n\
    \                    (lambda (x y)\n                      (< (+ x y) 10)))\n \
    \              (order_by_points (rest nums)))))\n", "  (if (empty? nums)\n   \
    \   nums\n      (let ((sum (+ (first nums) (second nums))))\n        (if (> (first\
    \ nums) (second nums))\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (if (empty? nums)\n      '()\n      (append (sort (map sum (map digits nums))\n\
    \                     <\n                     (lambda (x y)\n                \
    \       (< (+ x y) 0))))\n      nums))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (sum-of-digits nums)])\n        (cond [(= sum 0) (cons nums\
    \ nums)]\n              [(< sum 0) (cons (car nums) (order_by_points (cdr nums)))]\n\
    \              [else (cons (car nums) (order_by_points (cdr nums)))])))\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I understand your solution,\
    \ but I still don't understand why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nThe reason why your code doesn't\
    \ work is that your `order_by_points` function doesn't actually sort the list.\
    \ It just returns a new list with the elements in the order you want, but doesn't\
    \ actually change the original list. Try adding `(set! nums (order_by_points nums))`\
    \ after your `return` statement, and you'll see that it doesn't actually sort\
    \ the list.\n<|/ c |>\n<| c |>\nI see. But why doesn't my code change the original\
    \ list? I thought that `return` statement would change the original list. Could\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nThe `return`\
    \ statement doesn't change the original list. It just returns a new list with\
    \ the elements in the order you want. Try adding `(set! nums (order_by_points\
    \ nums))` after your `return` statement, and you'll see that it doesn't actually\
    \ sort the list.\n<|/ c |>\n<| c |>\nI see. But why doesn't my code change the\
    \ original list? I thought that `return` statement would change the original list.\
    \ Could you please explain why my code doesn't work?\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nThe problem is that the return statement is returning the value from the\
    \ function and not the list itself. Try this instead:\n<code>", "  (if (null?\
    \ nums)\n      nums\n      (let ((sum (sum (map digit nums))))\n        (cond\
    \ ((= sum 0) nums)\n              ((< sum 0) (cons nums (reverse nums)))\n   \
    \           (else (cons (car nums) (order_by_points (cdr nums)))))))\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution. Thanks for sharing it.\n<|/ c |>\n<|\
    \ a tags=scheme,racket |>\nHere's a solution that doesn't use recursion:\n<code>",
  "  (if (null? nums)\n      '()\n      (let ((sum (sum-digits (first nums))))\n \
    \       (if (= sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n\
    \            (cons (first nums)\n                  (order_by_points (rest nums)\n\
    \                                 (lambda (x y)\n                            \
    \         (if (< x y)\n                                         (cons x y)\n \
    \                                        (cons y x)))))\n            (order_by_points\
    \ (rest nums)\n                          (lambda (x y)\n                     \
    \       (if (< x y)\n                                (cons x y)\n            \
    \                    (cons y x))))))))\n", "  (if (empty? nums)\n      '()\n \
    \     (append (sort (map sum (map digits (rest nums))) <)\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n  \
    \    (list)\n      (let ([sum (sum (map digit nums)))\n            (num (first\
    \ nums))\n            (nums (rest nums))]\n        (if (= sum 0)\n           \
    \ (cons num nums)\n            (cons (cons num nums) (order_by_points (cons num\
    \ (order_by_points nums)))))))\n)\n", "  (if (empty? nums)\n      nums\n     \
    \ (let ((sum (+ (first nums) (second nums))))\n        (if (equal? sum 0)\n  \
    \          (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                   (order_by_points (rest nums)\n            \
    \                       (lambda (x y)\n                                     (if\
    \ (< x y)\n                                         (cons x y)\n             \
    \                            (cons y x)))))\n            (cons (first nums)\n\
    \                   (order_by_points (rest nums)\n                           \
    \        (lambda (x y)\n                                     (if (< x y)\n   \
    \                                      (cons y x)\n                          \
    \               (cons x y))))))))))\n", "  (if (empty? nums)\n      nums\n   \
    \   (let ([sum (+ (first nums) (second nums))])\n        (cons (if (> (abs (-\
    \ sum (first nums)))) (first nums) (first nums))\n              (order_by_points\
    \ (rest nums)))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (rest nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort_by_digits\
    \ (first nums)\n                         (rest nums))\n                (order_by_points\
    \ (rest nums)))))\n", "  (if (null? nums)\n      (list)\n      (let ((sum (sum\
    \ (map digit nums))))\n        (cons (if (= sum 0) nums \n                  (if\
    \ (< sum 0) \n                      (cons (car nums) (order_by_points (cdr nums)))\n\
    \                      (order_by_points (cdr nums))))\n              (order_by_points\
    \ (cdr nums))))))\n", "  (cond\n    [(empty? nums) '()]\n    [(= (length nums)\
    \ 1) nums]\n    [else (cons (first nums)\n                (order_by_points (rest\
    \ nums)))]))\n", "  (if (empty? nums)\n      nums\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (if (equal? sum 0)\n            (order_by_points\
    \ (rest nums))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (if (empty? nums)\n      (list)\n      (let ((sum (fold_left (lambda (x y) (+\
    \ x y)) 0 nums)))\n        (if (= sum 0)\n            (list)\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)))))))\n", "  (if\
    \ (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse nums))))\n\
    \              (cons (first nums) (order_by_points (rest nums))))))\n", "  (if\
    \ (empty? nums)\n      nums\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                     (if (< x y)\n                                       x\n\
    \                                       y))))))))\n", "  (if (empty? nums)\n \
    \     '()\n      (append (sort (map sum (map digits (rest nums))) <)\n       \
    \       (cons (first nums) (order_by_points (rest nums))))))\n", "  (if (null?\
    \ nums)\n      '()\n      (let ((sum (+ (first nums) (second nums))))\n      \
    \  (cons (first nums)\n              (order_by_points (rest nums)\n          \
    \                    (lambda (x y)\n                                (if (= x y)\n\
    \                                    0\n                                    (+\
    \ (- x y) sum))))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits nums))\n                     <\n                     (lambda\
    \ (x y)\n                       (< (+ x y) 0))\n                     <\n     \
    \                (lambda (x y)\n                       (< (+ x y) 0))\n      \
    \               <\n                     (lambda (x y)\n                      \
    \ (< (+ x y) 0))\n                     <\n                     (lambda (x y)\n\
    \                       (< (+ x y) 0))\n                     <\n             \
    \        (lambda (x y)\n                       (< (+ x y) 0))\n              \
    \       <\n                     (lambda (x y)\n                       (< (+ x\
    \ y) 0))\n                     <\n                     (lambda (x y)\n       \
    \                (< (+ x y) 0))\n                     <\n                    \
    \ (lambda (x y)\n                       (< (+ x y) 0))\n                     <\n\
    \                     (lambda (x y)\n                       (< (+ x y) 0))\n \
    \                    <\n                     (lambda (x y)\n                 \
    \      (< (+ x y) 0))\n                     <\n                     (lambda (x\
    \ y)\n                       (< (+ x y) 0))\n                     <\n        \
    \             (lambda (x y)\n                       (< (+ x y) 0))\n         \
    \            <\n                     (lambda (x y)\n                       (<\
    \ (+ x y) 0))\n                     <\n                     (lambda (x y)\n  \
    \                     (< (+ x y) 0))\n                     <\n               \
    \      (lambda (x y)\n                       (< (+ x y) 0))\n                \
    \     <\n                     (lambda (x y)\n                       (< (+ x y)\
    \ 0))\n                     <\n                     (lambda (x y)\n          \
    \             (< (+ x y) 0))\n                     <\n                     (lambda\
    \ (x y)\n                       (< (+ x y) 0))\n                     <\n     \
    \                (lambda (x y)\n                       (< (+ x y) 0))\n      \
    \               <\n                     (lambda (x y)\n                      \
    \ (< (+ x y) 0))\n                     <\n                     (lambda (x y)\n\
    \                       (< (+ x y) 0))\n                     <\n             \
    \        (lambda (x y)\n                       (< (+ x y) 0))\n              \
    \       <\n                     (lambda (x y)\n                       (< (+ x\
    \ y) 0))\n                     <\n                     (lambda (x y)\n       \
    \                (< (+ x y) 0))\n                     <\n                    \
    \ (lambda (x y)\n                       (< (+ x y) 0))\n                     <\n\
    \                     (lambda (x y)\n                       (< (+ x y) 0))\n \
    \                    <\n                     (lambda (x y)\n                 \
    \      (< (+ x y) 0))\n                     <\n                     (lambda (x\
    \ y)\n                       (< (+ x y) 0))\n                     <\n        \
    \             (lambda (x y)\n                       (< (+ ", "  (if (null? nums)\n\
    \      '()\n      (let ((sum (+ (first nums) (second nums))))\n        (cons (if\
    \ (= sum 0) (first nums) (second nums))\n              (order_by_points (rest\
    \ nums)))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum\
    \ (map cdr nums))\n                     <)\n              (map car nums))))\n",
  "  (if (empty? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (+ sum 1) 0)\n                  (cons (first nums) (order_by_points\
    \ (rest nums)))\n                  (cons (first nums) (order_by_points (rest nums))))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n  \
    \    nums\n      (let ((sum (sum (map digit nums))))\n        (if (= sum 0)\n\
    \            (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                  (order_by_points (rest nums)\n             \
    \                   (lambda (x y)\n                                  (if (< x\
    \ y)\n                                      (cons x y)\n                     \
    \                 (cons y x)))))))))\n", "  (define (helper nums acc)\n    (if\
    \ (null? nums)\n        acc\n        (helper (cdr nums) (cons (+ (car nums) (*\
    \ 10 acc)) acc))))\n  (helper nums nil))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (reverse nums))))\n              (cons\
    \ (car nums) (order_by_points (cdr nums))))))\n", "  (if (null? nums)\n      nums\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (if (> (length nums)\
    \ 1)\n            (cons (first nums) (order_by_points (rest nums)))\n        \
    \    (cons sum (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n  \
    \    (list)\n      (let ([sum (sum-digits nums)])\n        (cond [(= sum 0) (cons\
    \ 0 (order_by_points nums))]\n              [(< sum 0) (cons 0 (order_by_points\
    \ nums))]\n              [else (cons (car nums) (order_by_points (cdr nums)))])))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis doesn't work. Try it with\
    \ `(order_by_points '(1 2 3 4 5 6 7 8 9))`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (if (null? nums)\n      nums\n      (let ([sum (+ (first nums)\
    \ (second nums))])\n        (if (= sum 0)\n            (order_by_points (rest\
    \ nums))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (cond\n    [(empty? nums) '()]\n    [(zero? (first nums)) (first nums)]\n   \
    \ [else (let ([sum (+ (first nums) (first nums))])\n            (cons (first nums)\n\
    \                  (order_by_points (rest nums))))])))\n", "  (if (empty? nums)\n\
    \      nums\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n  \
    \      (if (= sum 0)\n            (cons 0 (order_by_points (rest nums)))\n   \
    \         (cons (car nums) (order_by_points (cdr nums)))))))\n", "  (if (empty?\
    \ nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n   \
    \     (cons (if (> (abs sum) 0) (/ sum 10) (- sum))\n               (order_by_points\
    \ (rest nums)))))))\n", "  (if (empty? nums)\n      nums\n      (let ((sum (+\
    \ (first nums) (second nums))))\n        (if (> (first nums) (second nums))\n\
    \            (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums) (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n  \
    \    '()\n      (append (sort (map digits-sum nums)\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x ", "  (if (empty?\
    \ nums)\n      '()\n      (append (sort (map sum (map digits (rest nums))) <)\n\
    \              (cons (first nums) (order_by_points (rest nums))))))\n", "  (cond\n\
    \    [(empty? nums) empty]\n    [(zero? (first nums)) (first nums)]\n    [else\
    \ (cons (first nums)\n                (order_by_points (rest nums)))]))\n", " \
    \ (if (empty? nums)\n      (list)\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                     (if (< x y)\n                                       (cons\
    \ x y)\n                                       (cons y x)))))))))\n", "  (if (null?\
    \ nums)\n      '()\n      (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n\
    \        (cons (if (= sum 0) (first nums) (first nums)) \n               (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      nums\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (if (= sum 0)\n            (cons (first nums)\
    \ (order_by_points (rest nums)))\n            (cons (first nums) (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums)))))))\n", "  (if\
    \ (empty? nums)\n      (list)\n      (let ([sum (sum (map digit nums)))\n    \
    \        (nums (sort nums #(< (+ %1 %2) sum))))))\n", "  (if (empty? nums)\n \
    \     nums\n      (let ((sum (sum (map digits (rest nums)))))\n        (cons (first\
    \ nums)\n              (if (> sum 0)\n                  (order_by_points (remove\
    \ (first nums) nums)\n                                   (cons (first nums) nums))\n\
    \                  nums)))))\n", "  (if (empty? nums)\n      (list)\n      (let\
    \ ((sum (sum (map digit nums))))\n        (cons (if (= sum 0)\n              \
    \     (first nums)\n                   (first nums))\n              (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits nums))\n                    (lambda (x y) (< (+ x y) 0))\n \
    \                   (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x ",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))))\n              (cons (car nums) (order_by_points (cdr nums))))))\n",
  "  (define (helper nums acc)\n    (if (empty? nums)\n        acc\n        (helper\
    \ (rest nums)\n                (cons (+ (first nums) (first acc))\n          \
    \            acc)))\n    (helper (rest nums)\n            (cons (first nums)\n\
    \                  acc))))\n  (helper nums nil))\n", "  (if (empty? nums)\n  \
    \    '()\n      (append (sort_by_digits (first nums)) \n              (order_by_points\
    \ (rest nums)))))\n", "  (define (helper nums acc)\n    (cond\n      [(empty?\
    \ nums) acc]\n      [(equal? (sum (first nums)) 0)\n       (helper (rest nums)\
    \ (cons (first nums) acc))]\n      [else\n       (helper (rest nums)\n       \
    \       (cons (first nums)\n                    (helper (rest nums)\n        \
    \                    (cons (sum (first nums)) acc))))]))\n  (helper nums nil))\n",
  "  (if (empty? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (if (> (abs sum) 0) (/ sum 10) (- sum))\n               (order_by_points\
    \ (rest nums)))))))\n", "  (if (null? nums)\n      (list)\n      (let ([sum (+\
    \ (first nums) (second nums))])\n        (cons (if (= sum 0) (first nums) (second\
    \ nums))\n              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n\
    \      nums\n      (let ([sum (sum (map digit nums))])\n        (if (= sum 0)\n\
    \            (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                   (order_by_points (rest nums)\n            \
    \                       (lambda (x y)\n                                     (if\
    \ (< x y)\n                                         (cons x y)\n             \
    \                            (cons y x)))))\n            (order_by_points (rest\
    \ nums)\n                            (lambda (x y)\n                         \
    \     (if (< x y)\n                                  (cons x y)\n            \
    \                      (cons y x)))))\n        (order_by_points (rest nums)\n\
    \                         (lambda (x y)\n                          (if (< x y)\n\
    \                              (cons x y)\n                              (cons\
    \ y x))))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map #(+\
    \ 0 (modulo (modulo (modulo (+ 0 (modulo (modulo (modulo (+ 0 (modulo (modulo\
    \ (modulo (+ 0 (modulo (modulo (modulo (+ 0 (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modu", "  (cond\n    [(empty? nums) empty]\n\
    \    [(zero? (first nums)) (first nums)]\n    [else (cons (first nums)\n     \
    \           (order_by_points (rest nums)))]))\n", "  (if (null? nums)\n      (list)\n\
    \      (let ([sum (+ (first nums) (second nums))])\n        (cons (if (= sum 0)\
    \ (first nums) (second nums))\n              (order_by_points (rest nums)))))))\n",
  "  (if (empty? nums)\n      nums\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (cons (first nums)\n              (order_by_points (rest nums)\n    \
    \                          (lambda (x y)\n                                (if\
    \ (= x y)\n                                    (+ x y)\n                     \
    \               (if (< x y)\n                                        (+ x sum)\n\
    \                                        (+ y sum))))))))))\n", "  (if (empty?\
    \ nums)\n      '()\n      (let ((sum (sum-digits nums)))\n        (if (= sum 0)\n\
    \            (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums)\n                   (order_by_points (rest nums)\n            \
    \                       (lambda (x y)\n                                     (if\
    \ (< x y)\n                                         (cons x y)\n             \
    \                            (cons y x)))))))))\n", "  (if (empty? nums)\n   \
    \   (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (cons (if\
    \ (= sum 0)\n                   (first nums)\n                   (second nums))\n\
    \               (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n \
    \     nums\n      (let ((sum (sum (map digit nums))))\n        (if (= sum 0)\n\
    \            (map car (sort_by_digits (map digit nums) nums))\n            (sort_by_digits\
    \ (map digit nums) nums)))))\n", "  (define (helper nums acc index)\n    (cond\n\
    \      [(empty? nums) (cons index acc)]\n      [(> (first nums) (first acc)) (helper\
    \ (rest nums) (cons (first nums) acc) index)]\n      [else (helper (rest nums)\
    \ (cons (first nums) acc) index)]))\n  (helper nums #f 0))\n", "  (if (empty?\
    \ nums)\n      nums\n      (let ([sum (+ (first nums) (second nums))])\n     \
    \   (if (equal? sum 0)\n            (order_by_points (rest nums))\n          \
    \  (cons (first nums)\n                  (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits nums))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ ", "  (if (null? nums)\n      '()\n      (let ((sum (sum-digits\
    \ nums)))\n        (cond ((= sum 0) nums)\n              ((< sum 0) (cons nums\
    \ (order_by_points (cdr nums))))\n              (else (cons (car nums) (order_by_points\
    \ (cdr nums)))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map cdr nums))\n                     <\n                     (lambda (x\
    \ y)\n                       (< (+ x y) 0))\n                     (lambda (x y)\n\
    \                       (< (+ x y) 0))\n                     (lambda (x y)\n \
    \                      (< (+ x y) 0))\n                     (lambda (x y)\n  \
    \                     (< (+ x y) 0))\n                     (lambda (x y)\n   \
    \                    (< (+ x y) 0))\n                     (lambda (x y)\n    \
    \                   (< (+ x y) 0))\n                     (lambda (x y)\n     \
    \                  (< (+ x y) 0))\n                     (lambda (x y)\n      \
    \                 (< (+ x y) 0))\n                     (lambda (x y)\n       \
    \                (< (+ x y) 0))\n                     (lambda (x y)\n        \
    \               (< (+ x y) 0))\n                     (lambda (x y)\n         \
    \              (< (+ x y) 0))\n                     (lambda (x y)\n          \
    \             (< (+ x y) 0))\n                     (lambda (x y)\n           \
    \            (< (+ x y) 0))\n                     (lambda (x y)\n            \
    \           (< (+ x y) 0))\n                     (lambda (x y)\n             \
    \          (< (+ x y) 0))\n                     (lambda (x y)\n              \
    \         (< (+ x y) 0))\n                     (lambda (x y)\n               \
    \        (< (+ x y) 0))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 0))\n                     (lambda (x y)\n                 \
    \      (< (+ x y) 0))\n                     (lambda (x y)\n                  \
    \     (< (+ x y) 0))\n                     (lambda (x y)\n                   \
    \    (< (+ x y) 0))\n                     (lambda (x y)\n                    \
    \   (< (+ x y) 0))\n                     (lambda (x y)\n                     \
    \  (< (+ x y) 0))\n                     (lambda (x y)\n                      \
    \ (< (+ x y) 0))\n                     (lambda (x y)\n                       (<\
    \ (+ x y) 0))\n                     (lambda (x y)\n                       (< (+\
    \ x y) 0))\n                     (lambda (x y)\n                       (< (+ x\
    \ y) 0))\n                     (lambda (x y)\n                       (< (+ x y)\
    \ 0))\n                     (lambda (x y)\n                       (< (+ x y) 0))\n\
    \                     (lambda (x y)\n                       (< (+ x y) 0))\n \
    \                    (lambda (x y)\n                       (< (+ x y) 0))\n  \
    \                   (lambda (x y)\n                       (< (+ x y) 0))\n   \
    \                  (lambda (x y)\n                       (< (+ x y) 0))\n    \
    \                 (lambda (x y)\n                       (< (+ x y) 0))\n     \
    \                (lambda (x y)\n                       (< (", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map sum (map cdr nums))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y)\
    \ 0))\n                     (lambda (x y) (< (+ x y) 0))\n                   \
    \  (lambda (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (", " \
    \ (if (null? nums)\n      '()\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (cons (if (= sum 0) (first nums) (second nums)) \n              (order_by_points\
    \ (rest nums))))))\n", "  (if (empty? nums)\n      (list)\n      (let ([sum (sum\
    \ (first nums))])\n        (append (order_by_points (rest nums)) (list (first\
    \ nums))))\n      )\n  )\n", "  (if (null? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits (reverse nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      nums\n      (let ((sum (sum\
    \ (map digits (rest nums)))))\n        (if (= sum 0)\n            (cons (first\
    \ nums) (order_by_points (rest nums)))\n            (cons (first nums)\n     \
    \             (order_by_points (rest nums)\n                                 (lambda\
    \ (x y)\n                                   (if (< x y)\n                    \
    \                   (cons x y)\n                                       (cons y\
    \ x)))))))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (sum (map digit\
    \ nums))))\n        (cons (if (= sum 0) (first nums) (first nums)) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      '()\n      (let ((sum (sum-digits\
    \ nums)))\n        (if (= sum 0)\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y)\n              \
    \                       (if (> x y)\n                                        \
    \ (- x y)\n                                         (- y x)))))))))\n", "  (if\
    \ (empty? nums)\n      '()\n      (append (sort (map digit-sum (map reverse nums))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (", "  (if (null? nums)\n      (list)\n      (let ((sum (fold_left (lambda\
    \ (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n            (list nums)\n \
    \           (let ((idx (fold_left (lambda (x y) (+ x y)) 0 nums)))\n         \
    \     (cons (cons idx nums) (order_by_points (remove idx nums))))))))\n", "  (if\
    \ (null? nums)\n      nums\n      (let ((sum (sum-digits (first nums))))\n   \
    \     (if (= sum 0)\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums)))\n            (cons (first nums)\n                   (order_by_points\
    \ (rest nums))\n                   (order_by_points (rest nums))))))))\n", " \
    \ (if (null? nums)\n      nums\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (> (first nums) (second nums))\n            (cons (first nums) (order_by_points\
    \ (rest nums)))\n            (cons (first nums) (order_by_points (rest nums)))))))\n",
  "  (if (null? nums)\n      nums\n      (let ((sum (+ (first nums) (second nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                (lambda (x y)\n               \
    \                   (if (< x y)\n                                      (cons x\
    \ y)\n                                      (cons y x))))))))\n", "  (if (empty?\
    \ nums)\n      nums\n      (let ([sum (+ (first nums) (second nums))])\n     \
    \   (if (= sum 0)\n            (append (list (first nums))\n                 \
    \   (order_by_points (rest nums)))\n            (append (list (first nums))\n\
    \                    (order_by_points (rest nums))\n                    (list\
    \ (second nums))))))))\n", "  (if (empty? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits nums))\n                     (lambda (x y) (< (+ x y) 0))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ ", "  (if (null? nums)\n      nums\n \
    \     (let ((sum (+ (first nums) (second nums))))\n        (if (= sum 0)\n   \
    \         (cons (first nums) (order_by_points (rest nums)))\n            (cons\
    \ (first nums) (order_by_points (rest nums))\n                   (cons (second\
    \ nums) (order_by_points (rest nums)))))))) ; #lang racket\n", "  (if (empty?\
    \ nums)\n      (list)\n      (let ((sum (sum (map digits (rest nums)))))\n   \
    \     (if (= sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n\
    \            (cons (first nums)\n                  (order_by_points (rest nums)\n\
    \                                (lambda (x y)\n                             \
    \     (if (= x y)\n                                      (cons x y)\n        \
    \                              (cons x (lambda (y)\n                         \
    \                       (cons y y)))))))))\n        (order_by_points (rest nums)))))\n",
  "  (if (empty? nums)\n      (list)\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (cons (first nums)\n              (order_by_points (rest nums)\n    \
    \                           (lambda (x y)\n                                 (if\
    \ (= x y)\n                                     (list x y)\n                 \
    \                    (list x y)))))))))\n", "  (if (empty? nums)\n      (list)\n\
    \      (let ((sum (sum (map digit nums))))\n        (if (= sum 0)\n          \
    \  (cons (first nums) (order_by_points (rest nums)))\n            (cons (first\
    \ nums)\n                  (order_by_points (rest nums)\n                    \
    \            (lambda (x y)\n                                  (if (> x y)\n  \
    \                                    (- x y)\n                               \
    \       (- y x)))))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                (lambda (x y)\n               \
    \                   (if (< x y)\n                                      (- x y)\n\
    \                                      (- y x)))))))))\n", "  (if (empty? nums)\n\
    \      (list)\n      (append (sort (map sum (map digits (rest nums))) <)\n   \
    \           (cons (first nums) (order_by_points (rest nums))))))\n", "  (if (empty?\
    \ nums)\n      '()\n      (let ((sum (+ (first nums) (second nums))))\n      \
    \  (cons (if (= sum 0)\n                   (first nums)\n                   (second\
    \ nums))\n              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n\
    \      '()\n      (append (sort (map digit-sum (map digits nums))\n          \
    \          (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (", "  (if (empty? nums)\n      '()\n      (append\
    \ (sort (map sum (map digits (reverse nums))))\n              (cons (first nums)\
    \ (order_by_points (rest nums))))))\n", "  (if (null? nums)\n      '()\n     \
    \ (let ((sum (fold_left (lambda (x y) (+ x y)) 0 nums)))\n        (if (= sum 0)\n\
    \            (cons 0 nums)\n            (cons (car nums) (order_by_points (cdr\
    \ nums)))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map sum\
    \ (map digits nums))\n                     (lambda (x y) (< (+ x y) 0))\n    \
    \                 (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ x y) 0))\n                     (lambda (x\
    \ y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n     \
    \                (lambda (x y) (< (+ ", "  (if (null? nums)\n      '()\n     \
    \ (append (sort (map sum (map digits (reverse nums))) <)\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n  \
    \    (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (if (=\
    \ sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n    \
    \        (cons (first nums) (order_by_points (rest nums))\n                  \
    \ (list (+ 2 (first nums)))))))) ; +2 to avoid duplicates\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThis doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| c |>\n: I added a note about that in the answer.\n<|/ c |>\n\
    <| c |>\nI added a note about that in the answer.\n<|/ c |>\n<| c |>\nI added\
    \ a note about that in the answer.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (if (empty? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))))\n              (cons (first nums) (order_by_points (rest nums))))))\n",
  "  (cond\n    [(empty? nums) nums]\n    [(zero? (first nums)) (order_by_points nums)]\n\
    \    [else (cons (first nums)\n                (order_by_points (rest nums)))]))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))) <)\n              (list (first nums)))))\n", "  (if (null? nums)\n \
    \     '()\n      (let ((sum (sum-digits (first nums))))\n        (cons (first\
    \ nums)\n              (order_by_points (rest nums)\n                        \
    \      (lambda (x y)\n                                (if (= x y)\n          \
    \                          (+ x y)\n                                    (if (<\
    \ x y)\n                                        (+ x sum)\n                  \
    \                      (+ sum x)))))))))\n", "  (if (empty? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (reverse nums))))\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n  \
    \    '()\n      (append (sort_by_digits nums)\n              (order_by_points\
    \ (rest nums)))))\n", "  (if (empty? nums)\n      '()\n      (append (sort (map\
    \ sum (map cdr nums))\n                     (lambda (x y) (< (+ x y) 0))\n   \
    \                  (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (", "  (if (empty? nums)\n      '()\n   \
    \   (append (sort (map digit-sum nums)\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) ", "  (if (null? nums)\n      nums\n      (let ((sum (reduce + (map digit\
    \ nums))))\n        (if (= sum 0)\n            (cons 0 (order_by_points (rest\
    \ nums)))\n            (cons (car nums) (order_by_points (cdr nums)))))))\n",
  "  (if (empty? nums)\n      '()\n      (append (sort (map digits (reverse nums))\n\
    \                     <\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x y) 10))\n                     (lambda (x y)\n                \
    \       (< (+ x ", "  (define (helper nums acc)\n    (cond\n      [(empty? nums)\
    \ acc]\n      [(equal? (sum (first nums)) 0)\n       (helper (rest nums) (cons\
    \ (first nums) acc))]\n      [else\n       (helper (rest nums)\n             \
    \ (cons (first nums)\n                    (helper (rest nums)\n              \
    \              (cons (first nums) acc))))]))\n  (helper nums nil))\n", "  (if\
    \ (empty? nums)\n      (list)\n      (let ((sum (reduce + (map digits (reverse\
    \ nums)))))\n        (cons (if (= sum 0) 0 (+ sum (digit-sum sum))) \n       \
    \        (order_by_points (remove (lambda (x) (= (digit-sum x) 0)) nums))))))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (foldr (lambda (x y) (+ x y)) 0\
    \ nums)))\n        (if (= sum 0)\n            (cons 0 (order_by_points (rest nums)))\n\
    \            (cons (first nums) (order_by_points (rest nums)))))))\n", "  (if\
    \ (empty? nums)\n      '()\n      (append (sort (map digit-sum nums)\n       \
    \             (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) ", "  (if (null? nums)\n      '()\n  \
    \    (let ((sum (fold_left (lambda (x y) (+ x y)) 0 (map digits (reverse nums)))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums) (order_by_points (rest nums))))))))\n",
  "  (cond\n    [(empty? nums) empty]\n    [(zero? (first nums)) (first nums)]\n \
    \   [else (cons (first nums)\n                (order_by_points (rest nums)))]))\n",
  "  (if (empty? nums)\n      '()\n      (append (sort (map sum (map digits nums))\n\
    \                     (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ x y) 0))\n                     (lambda (x y) (< (+ x y) 0))\n  \
    \                   (lambda (x y) (< (+ x y) 0))\n                     (lambda\
    \ (x y) (< (+ ", "  (if (null? nums)\n      '()\n      (append (sort (map digit-sum\
    \ nums)\n                    (lambda (x y) (< (+ x y) 0))\n                  \
    \  (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) ", "  (define (helper nums\
    \ acc)\n    (cond\n      [(empty? nums) acc]\n      [(equal? (sum (first nums))\
    \ 0)\n       (helper (rest nums) (cons (first nums) acc))]\n      [else\n    \
    \   (helper (rest nums)\n              (cons (first nums)\n                  \
    \  (helper (rest nums)\n                          (cons (first nums) acc))))]))\n\
    \  (helper nums nil))\n", "  (if (null? nums)\n      '()\n      (append (sort\
    \ (map sum (map digits (reverse nums))) <)\n              (cons (first nums) (order_by_points\
    \ (rest nums))))))\n", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ digits-sum (map digits nums))\n                     <)\n              (cons\
    \ (car nums) (order_by_points (cdr nums))))))\n", "  (cond\n    [(empty? nums)\
    \ empty]\n    [(zero? (first nums)) (first nums)]\n    [else (cons (first nums)\n\
    \                (order_by_points (rest nums))))]\n  )\n)\n", "  (if (empty? nums)\n\
    \      '()\n      (append (sort (map sum (map digits (rest nums))) <)\n      \
    \        (cons (first nums) (order_by_points (rest nums))))))\n", "  (cond\n \
    \   [(empty? nums) empty]\n    [(zero? (first nums)) (first nums)]\n    [else\
    \ (cons (first nums)\n                (order_by_points (rest nums))\n        \
    \        (first nums))]))\n", "  (if (empty? nums)\n      nums\n      (let ([sum\
    \ (+ (first nums) (second nums))])\n        (cons (if (> (abs sum) 0) (/ sum 10)\
    \ (- (abs sum) 10)) (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n\
    \      (list)\n      (let ((sum (sum (map digit nums))))\n        (cons (if (=\
    \ sum 0) (first nums) (first nums)) (order_by_points (rest nums))))))\n", "  (define\
    \ (helper nums sum)\n    (if (null? nums)\n        (list)\n        (let ([sum-so-far\
    \ (+ sum digit-sum (first nums))])\n          (cons (first nums)\n           \
    \     (helper (rest nums)\n                        sum-so-far))))))\n  (helper\
    \ nums 0))\n", "  (if (empty? nums)\n      (list)\n      (let ((sum (sum (map\
    \ digit nums))))\n        (cons (if (= sum 0)\n                   (first nums)\n\
    \                   (first nums))\n               (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      nums\n      (let ([sum (+ (first nums) (second nums))])\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums) (order_by_points (rest nums))\n    \
    \               (order_by_points (rest nums)))))))\n", "  (if (null? nums)\n \
    \     '()\n      (append (sort (map sum (map digits (reverse nums))) <)\n    \
    \          (cons (first nums) (order_by_points (rest nums))))))\n", "  (if (null?\
    \ nums)\n      '()\n      (let ((sum (sum (map digit nums))))\n        (if (=\
    \ sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n    \
    \        (cons (first nums)\n                  (order_by_points (rest nums)\n\
    \                                  (lambda (x y)\n                           \
    \         (if (< x y)\n                                        (cons x y)\n  \
    \                                      (cons y x)))))))))\n", "  (if (empty? nums)\n\
    \      (list)\n      (let ((sum (+ (first nums) (second nums))))\n        (cons\
    \ (if (> (+ sum 1) 0)\n                  (cons (first nums) (order_by_points (rest\
    \ nums)))\n                  (cons (first nums) (order_by_points (rest nums))))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (null? nums)\n   \
    \   '()\n      (append (sort (map sum (map digits (reverse nums))))\n        \
    \      (cons (first nums) (order_by_points (rest nums))))))\n", "  (if (empty?\
    \ nums)\n      (list)\n      (let ((sum (sum (map digit nums))))\n        (if\
    \ (= sum 0)\n            (cons (first nums) (order_by_points (rest nums)))\n \
    \           (cons (first nums)\n                  (order_by_points (rest nums)\n\
    \                                (lambda (x y)\n                             \
    \     (if (< x y)\n                                      (cons x y)\n        \
    \                              (cons y x))))))))))\n", "  (if (null? nums)\n \
    \     '()\n      (append (sort (map digit-sum nums)\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n   \
    \                 (lambda (x y) (< (+ x y) 0))\n                    (lambda (x\
    \ y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n      \
    \              (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y)\
    \ (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n         \
    \           (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (<\
    \ (+ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n            \
    \        (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+\
    \ x y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n               \
    \     (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x\
    \ y) 0))\n                    (lambda (x y) (< (+ x y) 0))\n                 \
    \   (lambda (x y) (< (+ x y) 0))\n                    (lambda (x y) (< (+ x y)\
    \ 0))\n                    (lambda (x y) (< (+ x y) 0))\n                    (lambda\
    \ (x y) (< (+ x y) ", "  (if (null? nums)\n      '()\n      (append (sort (map\
    \ sum (map digits (reverse nums))))\n              (list (car nums)))))\n", " \
    \ (if (empty? nums)\n      '()\n      (append (sort (map sum (map digits (rest\
    \ nums))) <)\n              (cons (first nums) (order_by_points (rest nums))))))\n",
  "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (helper\
    \ (cdr nums) (cons (+ (car nums) (first acc)) acc)))))\n  (helper nums []))\n",
  "  (if (empty? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))))\n              (cons (first nums) (order_by_points (rest nums))))))\n",
  "  (if (null? nums)\n      '()\n      (append (sort (map sum (map digits (reverse\
    \ nums))) <)\n              (cons (first nums) (order_by_points (rest nums))))))\n",
  "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(< 0\
    \ (first nums)) (helper (rest nums) (cons (first nums) acc))]\n      [else (helper\
    \ (rest nums) (cons (first nums) (helper nums (cons (first nums) acc))))]))\n\
    \  (helper nums nil))\n", "  (if (null? nums)\n      (list)\n      (let ((sum\
    \ (fold_left (lambda (x y) (+ x y)) 0 (map digit nums))))\n        (if (= sum\
    \ 0)\n            (cons 0 (order_by_points (rest nums)))\n            (cons (car\
    \ nums) (order_by_points (cdr nums)))))))\n", "  (if (null? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (reverse nums))) <)\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (cond\n    [(empty? nums)\
    \ '()]\n    [(= (length nums) 1) nums]\n    [(= (length nums) 2) (cons (+ (first\
    \ nums) (second nums)) nums)]\n    [else (let ([sum (+ (first nums) (second nums))])\n\
    \             (if (member sum nums)\n                 (order_by_points (remove\
    \ sum nums))\n                 (cons (first nums) (order_by_points (rest nums)))))))])\n",
  "  (if (null? nums)\n      nums\n      (let ((sum (sum (map digit nums))))\n   \
    \     (if (= sum 0)\n            (cons 0 (order_by_points (rest nums)))\n    \
    \        (cons (first nums) (order_by_points (rest nums)))))))\n", "  (if (empty?\
    \ nums)\n      (list)\n      (let ((sum (sum (map digit nums))))\n        (cons\
    \ (if (= sum 0)\n                   (first nums)\n                   (first nums))\n\
    \              (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n  \
    \    (list)\n      (let ((sum (reduce (lambda (x y) (+ x y)) (map digit nums))))\n\
    \        (if (= sum 0)\n            (cons (first nums) (order_by_points (rest\
    \ nums)))\n            (cons (first nums)\n                  (order_by_points\
    \ (rest nums)\n                                 (lambda (x y) (+ x y))))))))\n",
  "  (if (null? nums)\n      '()\n      (let ((sum (fold_left (lambda (x y) (+ x y))\
    \ 0 nums)))\n        (if (= sum 0)\n            (append (list nums)\n        \
    \            (order_by_points (reverse nums)))\n            (append (list nums)\n\
    \                    (order_by_points (reverse (filter (lambda (x) (= x sum))\
    \ nums)))))))\n</code>\n<|/ a tags=scheme,racket,sorting |>\n<| c |>\nThis is\
    \ not an answer to the question. He wants to sort by sum of digits, not by their\
    \ absolute value.\n<|/ c |>\n<| c |>\nI agree with you. My answer was to show\
    \ how it could be done with fold. My answer was inspired by this [answer](https://stackoverflow.com/a/47098068/849891)\
    \ by [Jack Maney](http://stackoverflow.com/users/4709806/jack-maney).\n<|/ c |>\n\
    <| c |>\nI agree with you. My answer was to show how it could be done with fold.\
    \ My answer was inspired by this [answer](https://stackoverflow.com/a/47098068/849891)\
    \ by [Jack Maney](http://stackoverflow.com/users/4709806/jack-maney).\n<|/ c |>\n\
    <| c |>\nI agree with you. My answer was to show how it could be done with fold.\
    \ My answer was inspired by this [answer](https://stackoverflow.com/a/47098068/849891)\
    \ by [Jack Maney](http://stackoverflow.com/users/4709806/jack-maney).\n<|/ c |>\n\
    <| a |>\n<code>", "  (if (empty? nums)\n      (list)\n      (let ((sum (sum (map\
    \ digit nums))))\n        (cons (if (= sum 0) nums (sub1 (car nums))) \n     \
    \          (order_by_points (cdr nums))))))\n", "  (if (empty? nums)\n      '()\n\
    \      (append (sort (map sum (map digits (rest nums))) <)\n              (cons\
    \ (first nums) (order_by_points (rest nums))))))\n", "  (if (empty? nums)\n  \
    \    nums\n      (let ((sum (+ (first nums) (second nums))))\n        (cons (if\
    \ (= sum 0) (first nums) (second nums))\n              (order_by_points (rest\
    \ nums))))))\n", "  (if (empty? nums)\n      (list)\n      (let ((sum (+ (first\
    \ nums) (second nums))))\n        (if (> sum 0)\n            (cons (first nums)\
    \ (order_by_points (rest nums)))\n            (order_by_points (rest nums))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
