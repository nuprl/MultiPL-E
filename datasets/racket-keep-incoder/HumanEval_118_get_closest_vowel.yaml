name: HumanEval_118_get_closest_vowel
language: racket
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; get_closest_vowel(\"yogurt\") ==> \"u\"\n;; get_closest_vowel(\"FULL\") ==> \"\
  U\"\n;; get_closest_vowel(\"quick\") ==> \"\"\n;; get_closest_vowel(\"ab\") ==>\
  \ \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (vowel-search start end)\n    (cond [(empty? word) \"\"]\n\
    \          [(equal? (first word) start) (vowel-search (rest word) (+ end 1))]\n\
    \          [(equal? (first word) end) (vowel-search (rest word) (+ start 1))]\n\
    \          [else (vowel-search (rest word) (min start end))]))\n  (vowel-search\
    \ \"a\" \"z\"))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (get-vowel-between\
    \ (rest word) (first word))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\
    \ ((null? word) \"\")\n          ((char=? (char-code (car word)) (first vowels))\
    \ \n           (get_closest_vowel (cdr word)))\n          ((char=? (char-code\
    \ (car word)) (last vowels)) \n           (get_closest_vowel (cdr word)))\n  \
    \        (else (get-closest-vowel (cdr word)))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThis doesn't work. Try it with `(get-closest-vowel \"ab\")`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for `get-closest-vowel\
    \ \"ab\"`. Try it with `(get-closest-vowel \"ab\")`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Can you give me an example where it doesn't work?\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (define\
    \ (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(equal? (first\
    \ word) 'a) (vowel-check (rest word))]\n          [(equal? (first word) 'e) (vowel-check\
    \ (rest word))]\n          [(equal? (first word) 'i) (vowel-check (rest word))]\n\
    \          [(equal? (first word) 'o) (vowel-check (rest word))]\n          [(equal?\
    \ (first word) 'u) (vowel-check (rest word))]\n          [(equal? (first word)\
    \ 'A) (vowel-check (rest word))]\n          [(equal? (first word) 'E) (vowel-check\
    \ (rest word))]\n          [(equal? (first word) 'I) (vowel-check (rest word))]\n\
    \          [(equal? (first word) 'O) (vowel-check (rest word))]\n          [(equal?\
    \ (first word) 'U) (vowel-check (rest word))]\n          [else (vowel-check (rest\
    \ word))]))\n  (vowel-check word))\n", "  (cond [(empty? word) \"\"]\n       \
    \ [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \        [else (first word)]))\n", "  (define (vowel-search start end)\n    (cond\n\
    \      [(null? start) \"\"]\n      [(null? end) \"\"]\n      [(char=? (char-code\
    \ start) 97) (vowel-search (cdr start) end)]\n      [(char=? (char-code start)\
    \ 65) (vowel-search start (cdr start))]\n      [(char=? (char-code start) 97)\
    \ (vowel-search start (cdr start))]\n      [(char=? (char-code start) 65) (vowel-search\
    \ start (cdr start))]\n      [(char=? (char-code start) 97) (vowel-search start\
    \ (cdr start))]\n      [(char=? (char-code start) 65) (vowel-search start (cdr\
    \ start))]\n      [(char=? (char-code start) 97) (vowel-search start (cdr start))]\n\
    \      [(char=? (char-code start) 65) (vowel-search start (cdr start))]\n    \
    \  [(char=? (char-code start) 97) (vowel-search start (cdr start))]\n      [(char=?\
    \ (char-code start) 65) (vowel-search start (cdr start))]\n      [(char=? (char-code\
    \ start) 97) (vowel-search start (cdr start))]\n      [(char=? (char-code start)\
    \ 65) (vowel-search start (cdr start))]\n      [(char=? (char-code start) 97)\
    \ (vowel-search start (cdr start))]\n      [(char=? (char-code start) 65) (vowel-search\
    \ start (cdr start))]\n      [(char=? (char-code start) 97) (vowel-search start\
    \ (cdr start))]\n      [(char=? (char-code start) 65) (vowel-search start (cdr\
    \ start))]\n      [(char=? (char-code start) 97) (vowel-search start (cdr start))]\n\
    \      [(char=? (char-code start) 65) (vowel-search start (cdr start))]\n    \
    \  [(char=? (char-code start) 97) (vowel-search start (cdr start))]\n      [(char=?\
    \ (char-code start) 65) (vowel-search start (cdr start))]\n      [(char=? (char-code\
    \ start) 97) (vowel-search start (cdr start))]\n      [(char=? (char-code start)\
    \ 65) (vowel-search start (cdr ", "  (define (vowel-search vowel word)\n    (cond\
    \ [(empty? word) empty]\n          [(equal? (first word) vowel) (vowel-search\
    \ vowel (rest word))]\n          [else (vowel-search (first vowel) (rest word))]))\n\
    \  (vowel-search vowel word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first\
    \ word)]\n  )\n)\n", "  (define (vowel-check vowel)\n    (cond\n      [(char=?\
    \ vowel 'a) (char=? (char-after (char-after word vowel) 1) 'u)]\n      [(char=?\
    \ vowel 'e) (char=? (char-after (char-after word vowel) 1) 'i)]\n      [(char=?\
    \ vowel 'o) (char=? (char-after (char-after word vowel) 1) 'o)]\n      [(char=?\
    \ vowel 'u) (char=? (char-after (char-after word vowel) 1) 'u)]\n      [(char=?\
    \ vowel 'y) (char=? (char-after (char-after word vowel) 1) 'y)]\n      [(char=?\
    \ vowel 'A) (char=? (char-after (char-after word vowel) 1) 'U)]\n      [(char=?\
    \ vowel 'E) (char=? (char-after (char-after word vowel) 1) 'I)]\n      [(char=?\
    \ vowel 'O) (char=? (char-after (char-after word vowel) 1) 'O)]\n      [(char=?\
    \ vowel 'U) (char=? (char-after (char-after word vowel) 1) 'U)]\n      [(char=?\
    \ vowel 'Y) (char=? (char-after (char-after word vowel) 1) 'Y)]\n      [else (error\
    \ \"Not a vowel\")]))\n  (define (consonant-check consonant)\n    (cond\n    \
    \  [(char=? consonant 'a) (char=? (char-after word consonant) 'b)]\n      [(char=?\
    \ consonant 'e) (char=? (char-after word consonant) 'f)]\n      [(char=? consonant\
    \ 'i) (char=? (char-after word consonant) 'g)]\n      [(char=? consonant 'o) (char=?\
    \ (char-after word consonant) 'h)]\n      [(char=? consonant 'u) (char=? (char-after\
    \ word consonant) 'j)]\n      [(char=? consonant 'y) (char=? (char-after word\
    \ consonant) 'k)]\n      [(char=? consonant 'A) (char=? (char-after word consonant)\
    \ 'B)]\n      [(char=? consonant 'E) (char=? (char-after word consonant", "  (define\
    \ (vowel-search vowel word)\n    (cond [(empty? word) \"\"]\n          [(equal?\
    \ (first word) vowel) (vowel-search vowel (rest word))]\n          [else (vowel-search\
    \ (first word) (append (rest word) (list vowel)))]))\n  (vowel-search (first word)\
    \ (append (rest word) (list 'u))))\n", "  (let loop ((word word)\n           \
    \  (vowels '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member\
    \ (car word) vowels) (car word)]\n      [else (loop (cdr word) (cons (car word)\
    \ vowels))])))\n", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"\
    ]\n          [(char=? (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (cons (first word) (get_closest_vowel (rest word)))]))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel (rest word))]))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n  )\n)\n", " \
    \ (let loop ((word word) (vowels '(#\\a #e #i #o #u)))\n    (cond ((null? word)\
    \ \"\")\n          ((char=? (car word) (car vowels)) (car vowels))\n         \
    \ ((char=? (car word) (cadr vowels)) (loop (cdr word) vowels))\n          ((char=?\
    \ (car word) (caddr vowels)) (loop (cdr word) vowels))\n          ((char=? (car\
    \ word) (caddr vowels) (loop (cdr word) vowels))\n           (loop (cdr word)\
    \ vowels))\n          (else (loop (cdr word) vowels)))))\n", "  (define (helper\
    \ word vowel index count)\n    (cond\n      [(empty? word) \"\"]\n      [(equal?\
    \ vowel (first word)) (helper (rest word) vowel (+ index 1) count)]\n      [else\
    \ (helper (rest word) (first word) (+ index 1) count)]))\n  (helper (reverse word)\
    \ 'u (length word) 0))\n", "  (let loop ((vowels '(a e i o u)) (word word) (vowel\
    \ nil))\n    (cond ((null? word) vowel)\n          ((char=? (car word) (car vowels))\
    \ \n           (loop (cdr vowels) (cdr word) (car vowel)))\n          ((char=?\
    \ (car word) (car vowels)) \n           (loop (cdr vowels) (cdr word) (cdr vowel)))\n\
    \          ((char=? (car word) (car vowels)) \n           (loop (cdr vowels) (cdr\
    \ word) (cons vowel (car word))))\n          (else (loop (cdr vowels) (cdr word)\
    \ vowel)))))\n", "  (let loop ((word word)\n             (vowels '(a e i o u))\n\
    \             (vowels-count 0))\n    (cond ((null? word) \"\")\n          ((member\
    \ (car word) vowels) (car word))\n          ((member (car word) vowels) (loop\
    \ (cdr word) vowels vowels-count))\n          ((member (car word) vowels-count)\
    \ (loop (cdr word) vowels vowels-count))\n          (else (loop (cdr word) vowels\
    \ vowels-count))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThank you so\
    \ much! I really appreciate your help!\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any loops. I hope it helps.\n<|/ c |>\n<| c |>\nThank you so\
    \ much! I really appreciate your help!\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n     \
    \     [(char=? (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (define\
    \ (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=? (first\
    \ word) 'a) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n          [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (define (vowel-search\
    \ word vowel)\n    (cond [(empty? word) \"\"]\n          [(equal? vowel (first\
    \ word)) (vowel-search (rest word) vowel)]\n          [(equal? (first word) vowel)\
    \ (vowel-search (rest word) (first vowel))]\n          [else (vowel-search (rest\
    \ word) (first vowel))]))\n  (vowel-search word (first word)))\n", "  (define\
    \ (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=? (first\
    \ word) 'a) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n          [(char=?\
    \ (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n          [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (define (helper word\
    \ vowel)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word) vowel)\
    \ (helper (rest word) vowel)]\n      [else (helper (rest word) (append vowel (first\
    \ word)))]))\n  (helper word '()))\n", "  (let loop ((word word)\n           \
    \  (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char", "  (define (vowel-check word)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(char=? (first word) 'a) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'e) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'i) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'o) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'u) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (define (helper word vowel index count)\n    (cond [(null? word)\
    \ \"\"]\n          [(equal? (char-code (car word)) (char-code vowel)) (helper\
    \ (cdr word) vowel (+ index 1) count)]\n          [else (helper (cdr word) vowel\
    \ (+ index 1) count)]))\n  (helper (reverse word) 'u (length word) 0))\n", " \
    \ (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((member (car word) vowels) (car word))\n          ((member\
    \ (cdr word) vowels) (cdr word))\n          (else (loop (cdr word) (cons (car\
    \ word) vowels))))))\n", "  (define (vowel-check vowel word)\n    (cond\n    \
    \  [(empty? word) empty]\n      [(equal? vowel (first word)) vowel]\n      [else\
    \ (vowel-check (rest word) (first word))]))\n  (vowel-check (first word) word))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n  )\n)\n", " \
    \ (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((member (car word) vowels) (car word))\n          (else\
    \ (loop (cdr word) (cons (car word) vowels)))))))\n", "  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first\
    \ word)) (vowel-check vowel (rest word))]\n      [else (vowel-check vowel (rest\
    \ word))]\n    ))\n  (vowel-check (first word) word))\n", "  (define (vowel-search\
    \ start end)\n    (cond ((null? start) \"\")\n          ((null? end) \"\")\n \
    \         ((equal? (char-after (char-before (char-after start) start) 'a) 'a)\
    \ 'a)\n          ((equal? (char-after (char-before (char-after start) start) 'e)\
    \ 'e) 'e)\n          ((equal? (char-after (char-before (char-after start) start)\
    \ 'i) 'i) 'i)\n          ((equal? (char-after (char-before (char-after start)\
    \ start) 'o) 'o) 'o)\n          ((equal? (char-after (char-before (char-after\
    \ start) start) 'u) 'u) 'u)\n          ((equal? (char-after (char-before (char-after\
    \ start) start) 'A) 'A) 'A)\n          ((equal? (char-after (char-before (char-after\
    \ start) start) 'E) 'E) 'E)\n          ((equal? (char-after (char-before (char-after\
    \ start) start) 'I) 'I) 'I)\n          ((equal? (char-after (char-before (char-after\
    \ start) start) 'O) 'O) 'O)\n          ((equal? (char-after (char-before (char-after\
    \ start) start) 'U) 'U) 'U)\n          (else (vowel-search (char-after start)\
    \ (char-before end 1)))))\n  (vowel-search (string-length word) (string-length\
    \ word)))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (first word)]))\n",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((member (char-code (car word)) vowels) (car word))\n\
    \          ((member (char-code (cadr word)) vowels) (cadr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char", " \
    \ (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond\n   \
    \   [(empty? word) \"\"]\n      [(member (first word) vowels) (first word)]\n\
    \      [else (loop (rest word) (cons vowels (rest word)))]\n    )\n  )\n)\n",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond\n    \
    \  [(empty? word) \"\"]\n      [(member (first word) vowels) (first word)]\n \
    \     [else (loop (rest word) (cons vowels (rest vowels)))]\n    )\n  )\n)\n",
  "  (define (vowel-check vowel word)\n    (cond\n      [(equal? vowel word) vowel]\n\
    \      [else (vowel-check (cdr vowel) word)])\n  (vowel-check 'a '(cons word '())))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]))\n", "  (define\
    \ (helper word vowel vowel-index)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) (helper (cdr word) vowel (+ vowel-index 1)))\n          (else\
    \ (helper (cdr word) vowel (+ vowel-index 1)))))\n  (helper word 'u (length word)))\n",
  "  (define (helper word vowel start end)\n    (cond [(empty? word) \"\"]\n     \
    \     [(equal? vowel (first word)) (first word)]\n          [(equal? (first word)\
    \ vowel) (first word)]\n          [(equal? (first word) (first vowel)) (first\
    \ word)]\n          [(equal? (first word) (first vowel) (first start)) (first\
    \ word)]\n          [(equal? (first word) (first vowel) (first end)) (first word)]\n\
    \          [(equal? (first word) (first vowel) (second start)) (first word)]\n\
    \          [(equal? (first word) (first vowel) (second end)) (first word)]\n \
    \         [(equal? (first word) (first vowel) (third start)) (first word)]\n \
    \         [(equal? (first word) (first vowel) (third end)) (first word)]\n   \
    \       [(equal? (first word) (first vowel) (fourth start)) (first word)]\n  \
    \        [(equal? (first word) (first vowel) (fourth end)) (first word)]\n   \
    \       [(equal? (first word) (first vowel) (fifth start)) (first word)]\n   \
    \       [(equal? (first word) (first vowel) (fifth end)) (first word)]\n     \
    \     [(equal? (first word) (first vowel) (sixth start)) (first word)]\n     \
    \     [(equal? (first word) (first vowel) (sixth end)) (first word)]\n       \
    \   [(equal? (first word) (first vowel) (seventh start)) (first word)]\n     \
    \     [(equal? (first word) (first vowel) (seventh end)) (first word)]\n     \
    \     [(equal? (first word) (first vowel) (eighth start)) (first word)]\n    \
    \      [(equal? (first word) (first vowel) (eighth end)) (first word)]\n     \
    \     [(equal? (first word) (first vowel) (tenth start)) (first word)]\n     \
    \     [(equal? (first word) (first vowel) (tenth end)) (first word)]\n       \
    \   [(equal? (first word) (first vowel) (eleventh start)) (first word)]\n    \
    \      [(equal? (first word) (first vowel) (eleventh end)) (first word)]\n   \
    \       [(equal? (first word) (first vowel) (twelfth start)) (first word)]\n \
    \         [(equal? (first word) (first vowel) (twelfth end)) (first word)]\n \
    \         [(equal? (first word) (first vowel) (thirteenth start)) (first word)]\n\
    \          [(equal? (first word) (", "  (define (vowel-check word)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(char=? (first word) 'a) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'e) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'i) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'o) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [(char=? (first word) 'u) (cons (first word)\
    \ (vowel-check (rest word)))]\n      [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((member (char-code (car word)) vowels)\
    \ (car word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char", "  (define (helper word vowel index count)\n    (cond [(null?\
    \ word) \"\"]\n          [(equal? vowel (car word)) (helper (cdr word) vowel (+\
    \ index 1) count)]\n          [(equal? (car word) (substring vowel (+ index 1)\
    \ (length vowel))) (helper (cdr word) vowel (+ index 1) count)]\n          [else\
    \ (helper (cdr word) vowel (+ index 1) count)]))\n  (helper word 'u (length word)\
    \ 0))\n", "  (define (vowel-count vowel)\n    (cond\n      [(char=? (char-code\
    \ vowel) 97) (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n      [(char=?\
    \ (char-code vowel) 65) (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n\
    \      [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code (substring\
    \ vowel 0 -1))))]\n      [(char=? (char-code vowel) 48) (+ 1 (vowel-count (char-code\
    \ (substring vowel 0 -1))))]\n      [(char=? (char-code vowel) 57) (+ 1 (vowel-count\
    \ (char-code (substring vowel 0 -1))))]\n      [else 0]))\n  (define (vowel-count\
    \ vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (+ 1 (vowel-count (char-code\
    \ (substring vowel 0 -1))))]\n      [(char=? (char-code vowel) 65) (+ 1 (vowel-count\
    \ (char-code (substring vowel 0 -1))))]\n      [(char=? (char-code vowel) 90)\
    \ (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n      [(char=? (char-code\
    \ vowel) 48) (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n      [(char=?\
    \ (char-code vowel) 57) (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n\
    \      [else 0]))\n  (define (vowel-count vowel)\n    (cond\n      [(char=? (char-code\
    \ vowel) 97) (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n      [(char=?\
    \ (char-code vowel) 65) (+ 1 (vowel-count (char-code (substring vowel 0 -1))))]\n\
    \      [(char=? (char-code vowel) 90) (+ 1 (vowel-count (char-code (substring\
    \ vowel 0 -1))))]\n      [(char=? (char-code vowel) 48) (+ 1 (vowel-count (char-code\
    \ (substring vowel 0 -1))))]\n      [(char=? (char-code vowel) 57) (+ 1 (vowel-count\
    \ (char-code (substring vowel 0 -1))))]\n      [else 0]))\n  (define (vowel-count\
    \ vowel)\n    (cond", "  (define (vowel-finder start end)\n    (cond ((null? end)\
    \ \"\")\n          ((char=? (char-code (substring word start)) #\\a) (substring\
    \ word start))\n          ((char=? (char-code (substring word start)) #\\e) (substring\
    \ word start))\n          ((char=? (char-code (substring word start)) #\\i) (substring\
    \ word start))\n          ((char=? (char-code (substring word start)) #\\o) (substring\
    \ word start))\n          ((char=? (char-code (substring word start)) #\\u) (substring\
    \ word start))\n          (else (vowel-finder (+ start 1) end))))\n  (vowel-finder\
    \ 0 (length word)))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (char-after\
    \ (char-before (char-after word)) #\\a) word) \n         (char-after (char-before\
    \ (char-after word)) #\\a)]\n        [(equal? (char-after (char-before (char-after\
    \ word)) #\\e) word) \n         (char-after (char-before (char-after word)) #\\\
    e)]\n        [(equal? (char-after (char-before (char-after word)) #\\i) word)\
    \ \n         (char-after (char-before (char-after word)) #\\i)]\n        [(equal?\
    \ (char-after (char-before (char-after word)) #\\o) word) \n         (char-after\
    \ (char-before (char-after word)) #\\o)]\n        [else (get-closest-vowel (char-after\
    \ word))]))\n", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((equal? (char-after (car word) (car\
    \ vowels)) (car vowels))\n           (loop (cdr word) (cons (car vowels) vowels)))\n\
    \          ((equal? (char-after (car word) (car vowels)) (cdr vowels))\n     \
    \      (loop (cdr word) (cons (car vowels) vowels)))\n          (else (loop (cdr\
    \ word) (cons (car vowels) vowels))))))\n", "  (cond\n    [(empty? word) \"\"\
    ]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-closest-vowel (rest word))]))\n", "  (define (vowel-search vowel\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word) vowel)\
    \ (vowel-search (rest word) vowel)]\n      [(equal? (first word) (rest vowel))\
    \ (vowel-search vowel (rest word))]\n      [else (vowel-search vowel (rest word))]))\n\
    \  (vowel-search (first word) word))\n", "  (define (vowel-check word)\n    (cond\
    \ [(empty? word) \"\"]\n          [(char=? (first word) 'a) (vowel-check (rest\
    \ word))]\n          [(char=? (first word) 'e) (vowel-check (rest word))]\n  \
    \        [(char=? (first word) 'i) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'o) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'u) (vowel-check (rest word))]\n          [else (vowel-check (rest word))]))\n\
    \  (vowel-check word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (cons (first word)\
    \ (get_closest_vowel (rest word)))]))\n", "  (define (helper word vowel)\n   \
    \ (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel) vowel]\n\
    \          [(equal? (first word) (substring (second word) 0 1)) (helper (rest\
    \ word) (first vowel))]\n          [else (helper (rest word) (first vowel))]))\n\
    \  (helper word 'a))\n", "  (let loop ((word word)\n             (vowels '(a e\
    \ i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (first word)\
    \ vowels) (first word)]\n      [else (loop (rest word) (cons (first word) vowels))])))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (char-code (car word)) (first vowels)) \n           (get_closest_vowel (cdr\
    \ word)))\n          ((char=? (char-code (car word)) (last vowels)) \n       \
    \    (get_closest_vowel (cdr word)))\n          (else (get_closest_vowel (cdr\
    \ word)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your solution.\
    \ Very elegant. Thank you for sharing it.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  (let loop ((word word)\n             (vowels '(a e i o u))\n             (vowel-count\
    \ 0))\n    (cond ((null? word) \"\")\n          ((char=? (car word) 'a) (loop\
    \ (cdr word) (cons vowels vowel-count))\n           (loop (cdr word) (cons vowels\
    \ (- vowel-count 1))))\n          ((char=? (car word) 'e) (loop (cdr word) (cons\
    \ vowels (+ vowel-count 1)))\n           (loop (cdr word) (cons vowels (- vowel-count\
    \ 1))))\n          ((char=? (car word) 'i) (loop (cdr word) (cons vowels (+ vowel-count\
    \ 1)))\n           (loop (cdr word) (cons vowels (- vowel-count 1))))\n      \
    \    ((char=? (car word) 'o) (loop (cdr word) (cons vowels (+ vowel-count 1)))\n\
    \           (loop (cdr word) (cons vowels (- vowel-count 1))))\n          ((char=?\
    \ (car word) 'u) (loop (cdr word) (cons vowels (+ vowel-count 1)))\n         \
    \  (loop (cdr word) (cons vowels (- vowel-count 1))))\n          (else (loop (cdr\
    \ word) (cons vowels vowel-count))))))\n", "  (cond\n    [(empty? word) \"\"]\n\
    \    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'a) (char-after\
    \ (char-before (char-after word) 'a) 'a)]\n    [(equal? (char-after (char-before\
    \ (char-after word) 'a) 'a) 'e) (char-after (char-before (char-after word) 'a)\
    \ 'a)]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'i) (char-after\
    \ (char-before (char-after word) 'a) 'a)]\n    [(equal? (char-after (char-before\
    \ (char-after word) 'a) 'a) 'o) (char-after (char-before (char-after word) 'a)\
    \ 'a)]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'u) (char-after\
    \ (char-before (char-after word) 'a) 'a)]\n    [(equal? (char-after (char-before\
    \ (char-after word) 'a) 'a) 'y) (char-after (char-before (char-after word) 'a)\
    \ 'a)]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'u) (char-after\
    \ (char-before (char-after word) 'a) 'a)]\n    [(equal? (char-after (char-before\
    \ (char-after word) 'a) 'a) 'a) (char-after (char-before (char-after word) 'a)\
    \ 'a)]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'e) (char-after\
    \ (char-before (char-after word) 'a) 'a)]\n    [(equal? (char-after (char-before\
    \ (char-after word) 'a) 'a) 'i) (char-after (char-before (char-after word) 'a)\
    \ 'a)]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'o) (char-after\
    \ (char-before (char-after word) '", "  (define (helper word vowel)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(equal? (first word) vowel) (second word)]\n\
    \      [(equal? (first word) (substring (second word) 0 1)) (helper (rest word)\
    \ (substring (second word) 0 1))]\n      [(equal? (first word) (substring (second\
    \ word) 0 2)) (helper (rest word) (substring (second word) 0 2))]\n      [(equal?\
    \ (first word) (substring (second word) 0 3)) (helper (rest word) (substring (second\
    \ word) 0 3))]\n      [(equal? (first word) (substring (second word) 0 4)) (helper\
    \ (rest word) (substring (second word) 0 4))]\n      [(equal? (first word) (substring\
    \ (second word) 0 5)) (helper (rest word) (substring (second word) 0 5))]\n  \
    \    [(equal? (first word) (substring (second word) 0 6)) (helper (rest word)\
    \ (substring (second word) 0 6))]\n      [(equal? (first word) (substring (second\
    \ word) 0 7)) (helper (rest word) (substring (second word) 0 7))]))\n  (helper\
    \ (reverse word) 'u))\n", "  (let loop ((word word)\n             (vowels '(a\
    \ e i o u))\n             (vowels-count 0))\n    (cond ((null? word) \"\")\n \
    \         ((member (car word) vowels) (car word))\n          ((member (car word)\
    \ vowels) (loop (cdr word) vowels vowels-count))\n          ((member (car word)\
    \ vowels-count) (loop (cdr word) vowels vowels-count))\n          (else (loop\
    \ (cdr word) vowels vowels-count)))))\n", "  (define (vowel-check word)\n    (let\
    \ ((vowels '(a e i o u)))\n      (cond\n        ((null? word) \"\")\n        ((member\
    \ (char-code (car word)) vowels) (car word))\n        (else (vowel-check (cdr\
    \ word)))))\n  (vowel-check word))\n", "  (define (vowel-check vowel)\n    (cond\
    \ [(string=? (vowel-check vowel) word) vowel]\n          [(string=? (vowel-check\
    \ vowel) (substring (word 0 -1))) vowel]\n          [else \"\"]))\n  (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check (vowel-check\
    \ (", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n  )\n)\n", " \
    \ (define (helper word vowel start end)\n    (cond ((null? word) \"\")\n     \
    \     ((equal? (char-code (car word)) vowel) (helper (cdr word) vowel (+ start\
    \ 1) end))\n          ((equal? (char-code (car word)) (substring (char word end)\
    \ start)) (helper (cdr word) vowel start (- end 1)))\n          (else (helper\
    \ (cdr word) vowel (+ start 1) end))))\n  (helper word 'a '(length word) '(length\
    \ word)))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(member (car word) vowels) (car word)]\n      [else (let ((vowel\
    \ (find-vowel (cdr word) vowels)))\n              (cond\n               [(empty?\
    \ vowel) \"\"]\n               [(< vowel (car word)) (cons (car word) vowels)]\n\
    \               [else (cons (car word) vowels)]\n               )])]\n      )))\n",
  "  (define (vowel-check word)\n    (cond\n      [(empty? word) empty]\n      [(equal?\
    \ (first word) 'a) (equal? (second word) 'u)]\n      [(equal? (first word) 'e)\
    \ (equal? (second word) 'i)]\n      [(equal? (first word) 'o) (equal? (second\
    \ word) 'u)]\n      [(equal? (first word) 'u) (equal? (second word) 'i)]\n   \
    \   [(equal? (first word) 'A) (equal? (second word) 'U)]\n      [(equal? (first\
    \ word) 'E) (equal? (second word) 'I)]\n      [(equal? (first word) 'O) (equal?\
    \ (second word) 'U)]\n      [(equal? (first word) 'U) (equal? (second word) 'I)]\n\
    \      [(equal? (first word) 'y) (equal? (second word) 'u)]\n      [(equal? (first\
    \ word) 'Y) (equal? (second word) 'U)]\n      [(equal? (first word) 'g) (equal?\
    \ (second word) 'u)]\n      [(equal? (first word) 'G) (equal? (second word) 'U)]\n\
    \      [(equal? (first word) 'r) (equal? (second word) 'u)]\n      [(equal? (first\
    \ word) 'R) (equal? (second word) 'U)]\n      [(equal? (first word) 'q) (equal?\
    \ (second word) 'u)]\n      [(equal? (first word) 'Q) (equal? (second word) 'U)]\n\
    \      [(equal? (first word) 'b) (equal? (second word) 'u)]\n      [(equal? (first\
    \ word) 'B) (equal? (second word) 'U)]\n      [(equal? (first word) 'f) (equal?\
    \ (second word) 'u)]\n      [(equal? (first word) 'F) (equal? (second word) 'U)]\n\
    \      [(equal? (first word) 's) (equal? (second word) 'u)]\n      [(equal? (first\
    \ word) 'S) (equal? (second word) 'U)]\n      [(equal? (first word) 't) (equal?\
    \ (second word) 'u)]\n      [(equal? (first word) 'T) (equal? (second word) 'U)]\n\
    \      [(equal? (first word) 'h) (equal? (second word) 'u)]\n      [(equal? (first\
    \ word) 'H) (equal? (second word) 'U)]", "  (define (vowel-search start end)\n\
    \    (cond [(= start end) \"\"]\n          [(char=? (char-code (substring word\
    \ start)) #\\a) (vowel-search start (+ start 1))]\n          [(char=? (char-code\
    \ (substring word start)) #\\e) (vowel-search start (+ start 1))]\n          [(char=?\
    \ (char-code (substring word start)) #\\i) (vowel-search start (+ start 1))]\n\
    \          [(char=? (char-code (substring word start)) #\\o) (vowel-search start\
    \ (+ start 1))]\n          [(char=? (char-code (substring word start)) #\\u) (vowel-search\
    \ start (+ start 1))]\n          [else (vowel-search start (+ start 1))]))\n \
    \ (vowel-search 0 (string-length word)))\n", "  (let loop ((word word)\n     \
    \        (vowels '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n     \
    \ [(member (first word) vowels) (first word)]\n      [else (loop (rest word) (cons\
    \ (first word) vowels))])))\n", "  (let loop ((word word)\n             (vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (first\
    \ word) vowels) (first word)]\n      [else (loop (rest word) (cons (first word)\
    \ vowels))])))\n", "  (define (helper word vowel index count)\n    (cond ((null?\
    \ word) \"\")\n          ((char=? (char-code (car word)) vowel) \n           (helper\
    \ (cdr word) vowel (+ index 1) count))\n          ((char=? (char-code (car word))\
    \ #\\A) \n           (helper (cdr word) vowel (+ index 1) count))\n          ((char=?\
    \ (char-code (car word)) #\\z) \n           (helper (cdr word) vowel (+ index\
    \ 1) count))\n          ((char=? (char-code (car word)) #\\E) \n           (helper\
    \ (cdr word) vowel (+ index 1) count))\n          ((char=? (char-code (car word))\
    \ #\\I) \n           (helper (cdr word) vowel (+ index 1) count))\n          ((char=?\
    \ (char-code (car word)) #\\O) \n           (helper (cdr word) vowel (+ index\
    \ 1) count))\n          ((char=? (char-code (car word)) #\\U) \n           (helper\
    \ (cdr word) vowel (+ index 1) count))\n          ((char=? (char-code (car word))\
    \ #\\a) \n           (helper (cdr word) vowel (+ index 1) count))\n          ((char=?\
    \ (char-code (car word)) #\\e) \n           (helper (cdr word) vowel (+ index\
    \ 1) count))\n          ((char=? (char-code (car word)) #\\i) \n           (helper\
    \ (cdr word) vowel (+ index 1) count))\n          ((char=? (char-code (car word))\
    \ #\\o) \n           (helper (cdr word) vowel (+ index 1) count))\n          ((char=?\
    \ (char-code (car word)) #\\u) \n           (helper (cdr word) vowel (+ index\
    \ 1) count))\n          ((char=? (char-code (car word)) #\\U) \n           (helper\
    \ (cdr word) vowel (+ index 1) count))\n          ((char=? (char-code (car word))\
    \ #\\U) \n           (helper (cdr word) vowel (+ index 1) count))\n          ((char=?\
    \ (char-code (car word)) #\\U) \n           (helper (cdr word) vowel (+ index\
    \ 1) count))\n          ((char=? (char-code (car word)) #\\U) \n           (helper\
    \ (cdr word) vowel (+ index 1) count))\n", "  (define (vowel-check vowel word)\n\
    \    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check (cdr\
    \ vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel) word)])\n  (vowel-check (car word) word))\n  \n  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(string=? vowel word) vowel]\n      [else (vowel-check\
    \ (cdr vowel", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((member (char-code (car word)) vowels)\
    \ (car word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((member (car word) vowels) (car word))\n\
    \          ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (loop (cdr word) vowels))\n          ((member (cdr word) vowels) (loop\
    \ (car word) vowels))\n          (else (loop (cdr word) (cons (car word) vowels))))))\n",
  "  (define (vowel-check vowel word)\n    (cond\n      [(empty? word) \"\"]\n   \
    \   [(equal? vowel (first word)) (vowel-check vowel (rest word))]\n      [else\
    \ (vowel-check vowel (rest word))]\n    ))\n  (vowel-check (first word) (substring\
    \ (last word) 0 (- (length word) 1)))\n)\n", "  (define (helper word vowel)\n\
    \    (cond [(empty? word) \"\"]\n          [(char=? (first word) vowel) (helper\
    \ (rest word) vowel)]\n          [else (helper (rest word) (first vowel))]))\n\
    \  (helper word 'a))\n", "  (define (vowel-check word)\n    (cond [(empty? word)\
    \ \"\"]\n          [(char=? (first word) 'a) (vowel-check (rest word))]\n    \
    \      [(char=? (first word) 'e) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'i) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'o) (vowel-check (rest word))]\n          [(char=? (first word) 'u) (vowel-check\
    \ (rest word))]\n          [else (vowel-check (rest word))]\n          ))\n  (vowel-check\
    \ word))\n", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n\
    \    (cond ((null? word) \"\")\n          ((member (car word) vowels) (car word))\n\
    \          ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (loop (cdr word) vowels))\n          ((member (cdr word) vowels) (loop\
    \ (car word) vowels))\n          (else (loop (cdr word) vowels)))))\n", "  (let\
    \ loop ((word word) (vowels '(a e i o u)))\n    (cond ((null? word) \"\")\n  \
    \        ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-", "  (let loop\
    \ ((vowels '(a e i o u))\n             (word word))\n    (cond ((null? word) \"\
    \")\n          ((member (char-code (car word)) vowels) (car word))\n         \
    \ ((member (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (car word)) vowels) (car\
    \ word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n  \
    \        ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (cadddr word)) vowels) (cadddr word))\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (cadddr word)) vowels) (cadddr word))\n\
    \          ((member (char-code (car word)) vowels) (car word))\n          ((member\
    \ (char-code (cadr word)) vowels) (cadr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (cadddr word))\
    \ vowels) (cadddr word))\n          ((member (char-code (car word)) vowels) (car\
    \ word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n  \
    \        ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (cadddr word)) vowels) (cadddr word))\n          ((member (char-code\
    \ (car word)) vowels) (car word))\n          ((member (char-code (cadr word))\
    \ vowels) (cadr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (cadddr word)) vowels) (cadddr word))\n\
    \          ((", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n\
    \          [(char=? (first word) 'a) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'e) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'i) (vowel-check (rest word))]\n          [(char=? (first word) 'o) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'u) (vowel-check (rest word))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (let\
    \ loop ((word word)\n             (vowels '(a e i o u))\n             (vowel-count\
    \ 0))\n    (cond ((null? word) \"\")\n          ((member (char-code (car word))\
    \ vowels) (loop (cdr word) vowels vowel-count))\n          ((< vowel-count (length\
    \ vowels)) (loop (cdr word) vowels (+ vowel-count 1)))\n          (else (loop\
    \ (cdr word) vowels (+ vowel-count 1))))))\n", "  (define (vowel-check vowel word)\n\
    \    (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel) (vowel-check\
    \ vowel (rest word))]\n          [else (vowel-check (first word) (rest word))]))\n\
    \  (vowel-check (first word) (rest word)))\n", "  (define (vowel-search start\
    \ end)\n    (cond [(= start end) \"\"]\n          [(char-before? (char-code start)\
    \ 'a) (vowel-search (+ start 1) end)]\n          [(char-before? (char-code start)\
    \ 'e) (vowel-search (+ start 1) end)]\n          [(char-before? (char-code start)\
    \ 'i) (vowel-search (+ start 1) end)]\n          [(char-before? (char-code start)\
    \ 'o) (vowel-search (+ start 1) end)]\n          [(char-before? (char-code start)\
    \ 'u) (vowel-search (+ start 1) end)]\n          [else (vowel-search (+ start\
    \ 1) end)]\n          ))\n  (vowel-search 0 (string-length word)))\n", "  (define\
    \ (vowel-search vowel word)\n    (cond [(empty? word) \"\"]\n          [(char=?\
    \ (car word) vowel) vowel]\n          [(char=? (car word) (cadr word)) (vowel-search\
    \ (car word) (cdr word))]\n          [else (vowel-search (car word) (cdr word))]))\n\
    \  (vowel-search (car word) (cdr word)))\n", "  (cond\n    [(empty? word) \"\"\
    ]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (first word)]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first\
    \ word)]\n  )\n)\n", "  (define (helper word vowel index count)\n    (cond ((null?\
    \ word) \"\")\n          ((char=? (car word) vowel) (car word))\n          ((char=?\
    \ (car word) (cdr word)) (helper (cdr word) vowel (+ index 1) count))\n      \
    \    ((char=? (car word) (car word)) (helper (cdr word) vowel (+ index 1) count))\n\
    \          ((char=? (car word) (cdr word)) (helper (cdr word) vowel (+ index 1)\
    \ count))\n          (else (helper (cdr word) vowel (+ index 1) count))\n    \
    \      ))\n  (helper word 'a '0 0))\n", "  (define (vowel-search start end)\n\
    \    (cond [(null? start) \"\"]\n          [(char=? (char-code (char start end))\
    \ #\\a) (vowel-search (cdr start) end)]\n          [(char=? (char-code (char start\
    \ end)) #\\e) (vowel-search (cdr start) end)]\n          [(char=? (char-code (char\
    \ start end)) #\\i) (vowel-search (cdr start) end)]\n          [(char=? (char-code\
    \ (char start end)) #\\o) (vowel-search (cdr start) end)]\n          [(char=?\
    \ (char-code (char start end)) #\\u) (vowel-search (cdr start) end)]\n       \
    \   [else (vowel-search (cdr start) (min end (+ start 1)))]\n          ))\n  (vowel-search\
    \ word (length word)))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n\
    \  )\n)\n", "  (define (vowel-search start end)\n    (cond ((null? start) (null?\
    \ end))\n          ((char=? (char-code (car start)) #\\a) (vowel-search (cdr start)\
    \ end))\n          ((char=? (char-code (car end)) #\\a) (vowel-search (cdr start)\
    \ (cdr end)))\n          ((char=? (char-code (car start)) #\\e) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car end)) #\\e) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car start)) #\\i) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car end)) #\\i) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car start)) #\\o) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car end)) #\\o) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car start)) #\\u) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car end)) #\\u) (vowel-search\
    \ (cdr start) (cdr end)))\n          (else (vowel-search (cdr start) (cdr end)))))\n\
    \  (vowel-search word (substring (length word) 1)))", "  (define (helper word\
    \ vowel)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word) vowel)\
    \ (second word)]\n      [(equal? (first word) (substring (second word) 0 1)) (helper\
    \ (rest word) (first vowel))]\n      [(equal? (first word) (substring (second\
    \ word) 0 2)) (helper (rest word) (first vowel))]\n      [(equal? (first word)\
    \ (substring (second word) 0 3)) (helper (rest word) (first vowel))]\n      [(equal?\
    \ (first word) (substring (second word) 0 4)) (helper (rest word) (first vowel))]\n\
    \      [(equal? (first word) (substring (second word) 0 5)) (helper (rest word)\
    \ (first vowel))]\n      [(equal? (first word) (substring (second word) 0 6))\
    \ (helper (rest word) (first vowel))]\n      [(equal? (first word) (substring\
    \ (second word) 0 7)) (helper (rest word) (first vowel))]\n      [(equal? (first\
    \ word) (substring (second word) 0 8)) (helper (rest word) (first vowel))]\n \
    \     [(equal? (first word) (substring (second word) 0 9)) (helper (rest word)\
    \ (first vowel))]\n      [(equal? (first word) (substring (second word) 0 10))\
    \ (helper (rest word) (first vowel))]\n      [(equal? (first word) (substring\
    \ (second word) 0 11)) (helper (rest word) (first vowel))]\n      [(equal? (first\
    \ word) (substring (second word) 0 12)) (helper (rest word) (first vowel))]\n\
    \      [(equal? (first word) (substring (second word) 0 13)) (helper (rest word)\
    \ (first vowel))]\n      [(equal? (first word) (substring (second word) 0 14))\
    \ (helper (rest word) (first vowel))]\n      [(equal? (first word) (substring\
    \ (second word) 0 15)) (helper (rest word) (first vowel))]\n      [(equal? (first\
    \ word) (substring (second word) 0 16)) (helper (rest word) (first vowel))]\n\
    \      [(equal? (first word) (substring (second word) 0 17)) (helper (rest word)\
    \ (first vowel))]\n      [(equal? (first word) (substring (second word) 0 18))\
    \ (helper (rest word) (first vowel))]\n      [(equal? (first word) (substring\
    \ (second word) 0 19)) (helper (rest word) (first vowel))]\n      [(equal? (first\
    \ word", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond\
    \ [(empty? word) \"\"]\n          [(member (first word) vowels) (first word)]\n\
    \          [else (loop (rest word) (cons (first word) vowels))])))\n", "  (define\
    \ (vowel-search start end)\n    (cond ((= end start) \"\")\n          ((char=?\
    \ (char-code (char word start)) (char #\\a)) (vowel-search (+ start 1) end))\n\
    \          ((char=? (char-code (char word start)) (char #\\e)) (vowel-search (+\
    \ start 1) (+ end 1)))\n          ((char=? (char-code (char word start)) (char\
    \ #\\i)) (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (char word start)) (char #\\o)) (vowel-search (+ start 1) (+ end 1)))\n    \
    \      ((char=? (char-code (char word start)) (char #\\u)) (vowel-search (+ start\
    \ 1) (+ end 1)))\n          ((char=? (char-code (char word start)) (char #\\y))\
    \ (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code (char word\
    \ start)) (char #\\h)) (vowel-search (+ start 1) (+ end 1)))\n          ((char=?\
    \ (char-code (char word start)) (char #\\y)) (vowel-search (+ start 1) (+ end\
    \ 1)))\n          ((char=? (char-code (char word start)) (char #\\i)) (vowel-search\
    \ (+ start 1) (+ end 1)))\n          ((char=? (char-code (char word start)) (char\
    \ #\\o)) (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (char word start)) (char #\\u)) (vowel-search (+ start 1) (+ end 1)))\n    \
    \      ((char=? (char-code (char word start)) (char #\\y)) (vowel-search (+ start\
    \ 1) (+ end 1)))\n          ((char=? (char-code (char word start)) (char #\\h))\
    \ (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code (char word\
    \ start)) (char #\\y)) (vowel-search (+ start 1) (+ end 1)))\n          ((char=?\
    \ (char-code (char word start)) (char #\\i)) (vowel-search (+ start 1) (+ end\
    \ 1)))\n          ((char=? (char-code (char word start)) (char ", "  (define (vowel-search\
    \ start end)\n    (cond [(< start end) (empty)]\n          [(char=? (char-code\
    \ (substring word start)) #\\a) (cons (char-code (substring word start)) vowel-search\
    \ (+ start 1))]\n          [(char=? (char-code (substring word start)) #\\e) (cons\
    \ (char-code (substring word start)) vowel-search (+ start 1))]\n          [(char=?\
    \ (char-code (substring word start)) #\\i) (cons (char-code (substring word start))\
    \ vowel-search (+ start 1))]\n          [(char=? (char-code (substring word start))\
    \ #\\o) (cons (char-code (substring word start)) vowel-search (+ start 1))]\n\
    \          [(char=? (char-code (substring word start)) #\\u) (cons (char-code\
    \ (substring word start)) vowel-search (+ start 1))]\n          [else (vowel-search\
    \ (+ start 1) end)]\n          ))\n  (vowel-search 0 0))\n", "  (define (helper\
    \ word vowel vowel-index vowel-count)\n    (cond ((null? word) \"\")\n       \
    \   ((equal? vowel (car word)) vowel)\n          ((equal? (car word) vowel) (helper\
    \ (cdr word) vowel (+ vowel-index 1) vowel-count))\n          (else (helper (cdr\
    \ word) vowel (+ vowel-index 1) vowel-count))))\n  (helper word 'a '0 0))\n",
  "  (define (helper word vowel)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) vowel)\n          ((char=? (car word) (cdr word)) (helper\
    \ (cdr word) vowel))\n          (else (helper (cdr word) vowel))))\n  (helper\
    \ word 'u))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel\
    \ (rest word))]))\n", "  (define (vowel-check word)\n    (let loop ((vowels '(a\
    \ e i o u))\n               (vowel-count 0))\n      (cond ((null? word) \"\")\n\
    \            ((char=? (car word) (car vowels)) \n             (loop (cdr vowels)\
    \ (+ vowel-count 1)))\n            (else (loop (cdr vowels) vowel-count)))))\n\
    \  (vowel-check word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n\
    \  )\n)\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a)\
    \ (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel\
    \ (rest word))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (cons (first word)\
    \ (get_closest_vowel (rest word)))]))\n", "  (let ((vowels '(a e i o u)))\n  \
    \  (cond ((empty? word) \"\")\n          ((equal? (first word) 'a) (first vowels))\n\
    \          ((equal? (first word) 'e) (first vowels))\n          ((equal? (first\
    \ word) 'i) (first vowels))\n          ((equal? (first word) 'o) (first vowels))\n\
    \          ((equal? (first word) 'u) (first vowels))\n          ((equal? (first\
    \ word) 'A) (first vowels))\n          ((equal? (first word) 'E) (first vowels))\n\
    \          ((equal? (first word) 'I) (first vowels))\n          ((equal? (first\
    \ word) 'O) (first vowels))\n          ((equal? (first word) 'U) (first vowels))\n\
    \          (else (error \"Invalid input\")))))\n", "  (define (vowel-search word\
    \ vowel)\n    (cond [(empty? word) \"\"]\n          [(char=? (first word) vowel)\
    \ vowel]\n          [(char=? (second word) vowel) vowel]\n          [else (vowel-search\
    \ (rest word) vowel)]))\n  (vowel-search word 'u))\n", "  (define (helper word\
    \ vowel index count)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first\
    \ word) vowel) (helper (rest word) vowel (+ index 1) count)]\n      [(equal? (first\
    \ word) (substring vowel 0 1)) (helper (rest word) (substring vowel 0 1) (+ index\
    \ 1) count)]\n      [(equal? (first word) (substring vowel 0 2)) (helper (rest\
    \ word) (substring vowel 0 2) (+ index 1) count)]\n      [(equal? (first word)\
    \ (substring vowel 0 3)) (helper (rest word) (substring vowel 0 3) (+ index 1)\
    \ count)]\n      [(equal? (first word) (substring vowel 0 4)) (helper (rest word)\
    \ (substring vowel 0 4) (+ index 1) count)]\n      [(equal? (first word) (substring\
    \ vowel 0 5)) (helper (rest word) (substring vowel 0 5) (+ index 1) count)]\n\
    \      [(equal? (first word) (substring vowel 0 6)) (helper (rest word) (substring\
    \ vowel 0 6) (+ index 1) count)]\n      [(equal? (first word) (substring vowel\
    \ 0 7)) (helper (rest word) (substring vowel 0 7) (+ index 1) count)]\n      [(equal?\
    \ (first word) (substring vowel 0 8)) (helper (rest word) (substring vowel 0 8)\
    \ (+ index 1) count)]\n      [(equal? (first word) (substring vowel 0 9)) (helper\
    \ (rest word) (substring vowel 0 9) (+ index 1) count)]\n      [(equal? (first\
    \ word) (substring vowel 0 10)) (helper (rest word) (substring vowel 0 10) (+\
    \ index 1) count)]\n      [(equal? (first word) (substring vowel 0 11)) (helper\
    \ (rest word) (substring vowel 0 11) (+ index 1) count)]\n      [(equal? (first\
    \ word) (substring vowel 0 12)) (helper (rest word) (substring vowel 0 12) (+\
    \ index 1) count)]\n      [(equal? (first word) (substring vowel 0 13)) (helper\
    \ (rest word) (substring vowel 0 13) (+ index 1) count)]\n      [(equal? (first\
    \ word) (substring vowel 0 14)) (helper (rest word) (substring vowel 0 14) (+\
    \ index 1) count)]\n      [(equal? (first word) (sub", "  (define (helper word\
    \ vowel)\n    (cond ((null? word) \"\")\n          ((char=? (car word) vowel)\
    \ vowel)\n          ((char=? (car word) (cdr word)) (helper (cdr word) vowel))\n\
    \          (else (helper (cdr word) vowel))))\n  (helper word 'u))\n", "  (define\
    \ (vowel-check vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (char=?\
    \ (char-code vowel) 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code\
    \ vowel) 97)]\n      [else (vowel-check vowel)]))\n  (define (consonant-check\
    \ consonant)\n    (cond\n      [(char=? (char-code consonant) 97) (char=? (char-code\
    \ consonant) 65)]\n      [(char=? (char-code consonant) 65) (char=? (char-code\
    \ consonant) 97)]\n      [else (consonant-check consonant)]))\n  (define (vowel-check\
    \ vowel)\n    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel)\
    \ 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n\
    \      [else (vowel-check vowel)]))\n  (define (consonant-check consonant)\n \
    \   (cond\n      [(char=? (char-code consonant) 97) (char=? (char-code consonant)\
    \ 65)]\n      [(char=? (char-code consonant) 65) (char=? (char-code consonant)\
    \ 97)]\n      [else (consonant-check consonant)]))\n  (define (vowel-check vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n      [else\
    \ (vowel-check vowel)]))\n  (define (consonant-check consonant)\n    (cond\n \
    \     [(char=? (char-code consonant) 97) (char=? (char-code consonant) 65)]\n\
    \      [(char=? (char-code consonant) 65) (char=? (char-code consonant) 97)]\n\
    \      [else (consonant-check consonant)]))\n  (define (vowel-check vowel)\n \
    \   (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97", "  (let loop\
    \ ((vowels '(a e i o u)) (word word) (vowel null))\n    (cond ((null? word) vowel)\n\
    \          ((char=? (car word) (car vowels)) (loop (cdr vowels) (cdr word) (car\
    \ vowel)))\n          (else (loop (cdr vowels) (cdr word) vowel)))))\n", "  (define\
    \ (vowel-search vowel word index)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) (car word))\n          ((char=? (car word) (cdr word)) (vowel-search\
    \ (cdr word) word (cdr index)))\n          ((char=? (car word) (cdr word)) (vowel-search\
    \ (cdr word) word (cdr index)))\n          (else (vowel-search (cdr word) word\
    \ (cdr index))))\n  (vowel-search 'a word 0))", "  (define (helper word vowel)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word) vowel) (second\
    \ word)]\n      [else (helper (rest word) (cons (first word) vowel))]\n      ))\n\
    \  (helper word '()))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n\
    \  )\n)\n", "  (define (vowel-search vowel word)\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(equal? (first word) vowel) (vowel-search vowel (rest word))]\n\
    \      [else (vowel-search vowel (rest word))]))\n  (vowel-search vowel (reverse\
    \ word)))\n", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n\
    \          [(char=? (first word) 'a) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'e) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'i) (vowel-check (rest word))]\n          [(char=? (first word) 'o) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'u) (vowel-check (rest word))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (define\
    \ (vowel-check vowel word)\n    (cond ((null? word) \"\")\n          ((equal?\
    \ (char-code vowel) (char-code (car word))) (vowel-check vowel (cdr word)))\n\
    \          (else (vowel-check vowel (cdr word))))\n  (vowel-check 'a word))\n",
  "  (define (vowel-check word vowel)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) vowel)\n          (else (vowel-check (cdr word) vowel))))\n\
    \  (vowel-check word 'a))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (cons\
    \ (first word) (get_closest_vowel (rest word)))]))\n", "  (define (helper word\
    \ vowel index count)\n    (cond ((null? word) \"\")\n          ((equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count))\n          ((equal? (char-code (car word)) (char vowel))\
    \ (helper (cdr word) vowel (+ index 1) count))\n          ((equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count))\n          ((equal? (char-code (car word)) (char vowel))\
    \ (helper (cdr word) vowel (+ index 1) count))\n          ((equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count))\n          ((equal? (char-code (car word)) (char vowel))\
    \ (helper (cdr word) vowel (+ index 1) count))\n          ((equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count))\n          ((equal? (char-code (car word)) (char vowel))\
    \ (helper (cdr word) vowel (+ index 1) count))\n          ((equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count))\n          ((equal? (char-code (car word)) (char vowel))\
    \ (helper (cdr word) vowel (+ index 1) count))\n          ((equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count))", "  (let loop ((word word) (vowels '(a e i o u)))\n   \
    \ (cond ((null? word) \"\")\n          ((char=? (car word) 'a) (loop (cdr word)\
    \ (cons vowels 'a)))\n          ((char=? (car word) 'e) (loop (cdr word) (cons\
    \ vowels 'e)))\n          ((char=? (car word) 'i) (loop (cdr word) (cons vowels\
    \ 'i)))\n          ((char=? (car word) 'o) (loop (cdr word) (cons vowels 'o)))\n\
    \          ((char=? (car word) 'u) (loop (cdr word) (cons vowels 'u)))\n     \
    \     (else (loop (cdr word) (cons vowels (car word)))))))\n", "  (define (vowel-check\
    \ vowel word)\n    (cond [(empty? word) \"\"]\n          [(equal? (first word)\
    \ vowel) (vowel-check vowel (rest word))]\n          [else (vowel-check (first\
    \ word) (rest word))]))\n  (vowel-check (first word) (rest word)))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (get-closest-vowel (rest word))]))\n", "  (define (vowel-check\
    \ word)\n    (cond [(empty? word) \"\"]\n          [(char=? (first word) 'a) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'e) (vowel-check (rest word))]\n\
    \          [(char=? (first word) 'i) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'o) (vowel-check (rest word))]\n          [(char=? (first word)\
    \ 'u) (vowel-check (rest word))]\n          [else (vowel-check (rest word))]))\n\
    \  (vowel-check word))\n", "  (define (vowel-search vowel word index)\n    (cond\
    \ ((null? word) \"\")\n          ((char=? (car word) vowel) \n           (vowel-search\
    \ vowel (cdr word) (+ index 1)))\n          ((char=? (car word) (cdr word)) \n\
    \           (vowel-search vowel (cdr word) (+ index 1)))\n          (else (vowel-search\
    \ vowel (cdr word) (+ index 1)))))\n  (vowel-search 'a '(cons word '()) 0))\n",
  "  (define (helper word vowel start end)\n    (cond\n      [(empty? word) \"\"]\n\
    \      [(equal? vowel (first word)) (first word)]\n      [(equal? (first word)\
    \ vowel) (first word)]\n      [(equal? (first word) (first vowel)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (first start)) (first word)]\n    \
    \  [(equal? (first word) (first vowel) (first start) (first end)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (first start) (first end) (first start))\
    \ (first word)]\n      [(equal? (first word) (first vowel) (first start) (first\
    \ end) (first end)) (first word)]\n      [(equal? (first word) (first vowel) (first\
    \ start) (first end) (first end) (first start)) (first word)]\n      [(equal?\
    \ (first word) (first vowel) (first start) (first end) (first end) (first end))\
    \ (first word)]\n      [(equal? (first word) (first vowel) (first start) (first\
    \ end) (first end) (first end) (first start)) (first word)]\n      [(equal? (first\
    \ word) (first vowel) (first start) (first end) (first end) (first end) (first\
    \ end)) (first word)]\n      [(equal? (first word) (first vowel) (first start)\
    \ (first end) (first end) (first end) (first end) (first start)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (first start) (first end) (first end)\
    \ (first end) (first end) (first end) (first start)) (first word)]\n      [(equal?\
    \ (first word) (first vowel) (first start) (first end) (first end) (first end)\
    \ (first end) (first end) (first end) (first start)) (first word)]\n      [(equal?\
    \ (first word) (first vowel) (first start) (first end) (first end) (first end)\
    \ (first end) (first end) (first end) (first end) (first start)) (first word)]\n\
    \      [(equal? (first word) (first vowel) (first start) (first end) (first end)\
    \ (first end) (first end) (first end) (first end) (first end) (first end) (first\
    \ start)) (first word)]\n      [(equal? (first word) (first vowel) (first start)\
    \ (first end) (first end) (first end) (first end) (first end) (first end) (first\
    \ end) (first end) (first end) (first start)) (first word)]\n      [(equal? (",
  "  (define (vowel-search word vowel)\n    (cond [(empty? word) \"\"]\n         \
    \ [(equal? (first word) vowel) (vowel-search (rest word) vowel)]\n          [else\
    \ (vowel-search (rest word) (cons (first word) vowel))]))\n  (vowel-search word\
    \ 'u))\n", "  (let loop ((word word)\n             (vowels '(a e i o u)))\n  \
    \  (cond ((null? word) \"\")\n          ((member (char-code (car word)) vowels)\
    \ (car word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n\
    \  )\n)\n", "  (define (vowel-check vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(equal? vowel (first word)) vowel]\n      [else (vowel-check\
    \ (rest word) (first word))]\n    ))\n  (vowel-check (first word) (substring (second\
    \ word) 0 (- (length word) 1)))\n)\n", "  (define (helper word vowel index)\n\
    \    (cond\n      [(null? word) \"\"]\n      [(equal? vowel (car word)) (helper\
    \ (cdr word) vowel (+ index 1))]\n      [else (helper (cdr word) vowel (+ index\
    \ 1))]))\n  (helper (reverse word) (car word) 0))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-closest-vowel (rest word))]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-closest-vowel (rest word))]))\n", "  (cond [(empty? word) \"\"\
    ]\n        [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n      \
    \  [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n        [else (first word)]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-closest-vowel (rest word))]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'a) 'a]\n\
    \    [(equal? (char-after (char-before (char-after word) 'a) 'a) 'e) 'e]\n   \
    \ [(equal? (char-after (char-before (char-after word) 'a) 'a) 'i) 'i]\n    [(equal?\
    \ (char-after (char-before (char-after word) 'a) 'a) 'o) 'o]\n    [(equal? (char-after\
    \ (char-before (char-after word) 'a) 'a) 'u) 'u]\n    [(equal? (char-after (char-before\
    \ (char-after word) 'a) 'a) 'A) 'A]\n    [(equal? (char-after (char-before (char-after\
    \ word) 'a) 'a) 'E) 'E]\n    [(equal? (char-after (char-before (char-after word)\
    \ 'a) 'a) 'I) 'I]\n    [(equal? (char-after (char-before (char-after word) 'a)\
    \ 'a) 'O) 'O]\n    [(equal? (char-after (char-before (char-after word) 'a) 'a)\
    \ 'U) 'U]\n    [else \"\"]))\n", "  (define (helper word vowel)\n    (cond\n \
    \     [(empty? word) \"\"]\n      [(equal? (first word) vowel) (second word)]\n\
    \      [else (helper (rest word) (cons (first word) vowel))]\n      ))\n  (helper\
    \ word '()))\n", "  (define (vowel-check word)\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(char=? (first word) 'a) (cons (first word) (vowel-check (rest\
    \ word)))]\n      [(char=? (first word) 'e) (cons (first word) (vowel-check (rest\
    \ word)))]\n      [(char=? (first word) 'i) (cons (first word) (vowel-check (rest\
    \ word)))]\n      [(char=? (first word) 'o) (cons (first word) (vowel-check (rest\
    \ word)))]\n      [(char=? (first word) 'u) (cons (first word) (vowel-check (rest\
    \ word)))]\n      [else (vowel-check (rest word))]))\n  (vowel-check word))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]\n  )\n)\n", " \
    \ (define (helper word vowel index count)\n    (cond [(null? word) \"\"]\n   \
    \       [(equal? (char-code (car word)) (char vowel)) (helper (cdr word) vowel\
    \ (+ index 1) count)]\n          [(equal? (char-code (car word)) (char vowel))\
    \ (helper (cdr word) vowel (+ index 1) count)]\n          [(equal? (char-code\
    \ (car word)) (char vowel)) (helper (cdr word) vowel (+ index 1) count)]\n   \
    \       [else (helper (cdr word) vowel (+ index 1) count)]))\n  (helper word 'a\
    \ 0 0))\n", "  (define (vowel-search vowel word index)\n    (cond [(null? word)\
    \ \"\"]\n          [(char=? (char-code vowel) (char-code (substring word index\
    \ (+ index 1)))) vowel]\n          [else (vowel-search (substring vowel 1) word\
    \ (+ index 1))]))\n  (vowel-search (char-code (substring word 0 (- (length word)\
    \ 1))) word 0))\n", "  (cond [(empty? word) \"\"]\n        [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n        [else (cons (first\
    \ word) (get_closest_vowel (rest word)))]))\n", "  (define (helper word vowel\
    \ vowel-index vowel-count)\n    (cond [(vowel-index vowel-count) vowel]\n    \
    \      [(vowel-index (- vowel-count 1)) \"\"]\n          [else (helper (substring\
    \ word vowel-index vowel-count) (cons vowel vowels) (+ vowel-index 1) vowel-count)]))\n\
    \  (helper word #\\A 0 0))\n", "  (define (helper word vowel index count)\n  \
    \  (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first word)) (if (<\
    \ count 1) (first word) \"\")]\n      [(equal? (first word) vowel) (if (< count\
    \ 1) (first word) \"\")]\n      [(equal? (first word) (first vowel)) (if (< count\
    \ 1) (first word) \"\")]\n      [(equal? (first word) (first vowel) (first word))\
    \ (if (< count 1) (first word) \"\")]\n      [(equal? (first word) (first vowel)\
    \ (first word) (first vowel)) (if (< count 2) (first word) \"\")]\n      [(equal?\
    \ (first word) (first vowel) (first word) (first vowel) (first word)) (if (< count\
    \ 3) (first word) \"\")]\n      [(equal? (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel)) (if (< count 4) (first word) \"\"\
    )]\n      [(equal? (first word) (first vowel) (first word) (first vowel) (first\
    \ word) (first vowel) (first word)) (if (< count 5) (first word) \"\")]\n    \
    \  [(equal? (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel)) (if (< count 6) (first word) \"\"\
    )]\n      [(equal? (first word) (first vowel) (first word) (first vowel) (first\
    \ word) (first vowel) (first word) (first vowel) (first word)) (if (< count 7)\
    \ (first word) \"\")]\n      [(equal? (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel)) (if (< count 8) (first word) \"\")]\n      [(equal? (first word)\
    \ (first vowel) (first word) (first vowel) (first word) (first vowel) (first word)\
    \ (first vowel) (first word) (first vowel) (first word)) (if (< count 9) (first\
    \ word) \"\")]\n      [(equal? (first word) (first vowel) (first word) (first\
    \ vowel) (first word) (first vowel) (first word) (first vowel) (first word) (first\
    \ vowel) (first word) (first vowel) (first word)) (if (< count 10) (first word)\
    \ \"\")]\n      [(equal? (first word) (first vowel) (first word) (first vowel)\
    \ (first word) (first vowel) (first word) (first vowel) (first word) (first vowel)\
    \ (first word) (first vowel", "  (define (vowel-check word vowel)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(equal? vowel (first word)) (vowel-check (rest\
    \ word) vowel)]\n      [else (vowel-check (rest word) vowel)]))\n  (vowel-check\
    \ word \"a\"))\n", "  (let loop ((word word)\n             (vowels '(a e i o u))\n\
    \             (vowel-count 0))\n    (cond ((null? word) \"\")\n          ((member\
    \ (car word) vowels) (car word))\n          ((member (cdr word) vowels) (car word))\n\
    \          ((member (car word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (car word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (car word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (car word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (car word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (car word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (car word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (car word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))\n          ((member (car word)\
    \ vowels) (cdr word))\n          ((member (cdr word) vowels) (cdr word))\n   \
    \       ((member (car word) vowels) (cdr word))\n          ((member (cdr word)\
    \ vowels) (cdr word))\n          ((member (car word) vowels) (cdr word))\n   \
    \       ((member (cdr word) vowels) (cdr word))", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (first word)]\n  )\n)\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel\
    \ (rest word))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (cons (first word)\
    \ (get_closest_vowel (rest word)))]))\n", "  (cond\n    [(empty? word) \"\"]\n\
    \    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-closest-vowel (rest word))]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (get-closest-vowel (rest word))]))\n", "  (define (vowel-search start\
    \ end)\n    (cond ((null? start) (null? end))\n          ((char=? (char-code (car\
    \ start)) (char #\\a)) (vowel-search (cdr start) end))\n          ((char=? (char-code\
    \ (car end)) (char #\\a)) (vowel-search (cdr start) (cdr end)))\n          ((char=?\
    \ (char-code (car start)) (char #\\e)) (vowel-search (cdr start) (cdr end)))\n\
    \          ((char=? (char-code (car end)) (char #\\e)) (vowel-search (cdr start)\
    \ (cdr end)))\n          ((char=? (char-code (car start)) (char #\\i)) (vowel-search\
    \ (cdr start) (cdr end)))\n          ((char=? (char-code (car end)) (char #\\\
    i)) (vowel-search (cdr start) (cdr end)))\n          ((char=? (char-code (car\
    \ start)) (char #\\o)) (vowel-search (cdr start) (cdr end)))\n          ((char=?\
    \ (char-code (car end)) (char #\\o)) (vowel-search (cdr start) (cdr end)))\n \
    \         ((char=? (char-code (car start)) (char #\\u)) (vowel-search (cdr start)\
    \ (cdr end)))\n          ((char=? (char-code (car end)) (char #\\u)) (vowel-search\
    \ (cdr start) (cdr end)))\n          (else (vowel-search (cdr start) (cdr end))))\n\
    \  (vowel-search (reverse word) (reverse word)))\n", "  (let ((vowels '(a e i\
    \ o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (car word) vowels)\
    \ (car word)]\n      [else (get-closest-vowel (cdr word) vowels)])))\n", "  (define\
    \ (vowel-check vowel word)\n    (cond ((null? word) \"\")\n          ((char=?\
    \ (car word) vowel) vowel)\n          ((char=? (car word) (cdr word)) (vowel-check\
    \ (cdr word) word))\n          (else (vowel-check (cdr word) word))))\n  (vowel-check\
    \ (car word) word))\n", "  (define (helper word vowel vowel-index vowel-count)\n\
    \    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first word)) vowel]\n\
    \      [(equal? (first word) vowel) (helper (rest word) vowel (+ vowel-index 1)\
    \ vowel-count)]\n      [(equal? (first word) (first word)) (helper (rest word)\
    \ (first word) vowel-index vowel-count)]\n      [(equal? (first word) (first word)\
    \ (first word)) (helper (rest word) (first word) (+ vowel-index 1) vowel-count)]\n\
    \      [(equal? (first word) (first word) (first word) (first word)) (helper (rest\
    \ word) (first word) (+ vowel-index 1) (+ vowel-count 1))]\n      [(equal? (first\
    \ word) (first word) (first word) (first word) (first word)) (helper (rest word)\
    \ (first word) (first word) (+ vowel-index 1) (+ vowel-count 1))]\n      [(equal?\
    \ (first word) (first word) (first word) (first word) (first word) (first word))\
    \ (helper (rest word) (first word) (first word) (first word) (+ vowel-index 1)\
    \ (+ vowel-count 1))]\n      [(equal? (first word) (first word) (first word) (first\
    \ word) (first word) (first word) (first word)) (helper (rest word) (first word)\
    \ (first word) (first word) (first word) (first word) (+ vowel-index 1) (+ vowel-count\
    \ 1))]\n      [(equal? (first word) (first word) (first word) (first word) (first\
    \ word) (first word) (first word) (first word)) (helper (rest word) (first word)\
    \ (first word) (first word) (first word) (first word) (first word) (+ vowel-index\
    \ 1) (+ vowel-count 1))]\n      [(equal? (first word) (first word) (first word)\
    \ (first word) (first word) (first word) (first word) (first word) (first word))\
    \ (helper (rest word) (first word) (first word) (first word) (first word) (first\
    \ word) (first word) (first word) (first word) (+ vowel-index 1) (+ vowel-count\
    \ 1))]\n      [(equal? (first word) (first word) (first word) (first word) (first\
    \ word) (first word) (first word) (first word) (first word) (first word)) (helper\
    \ (rest word) (first word) (first word) (first word) (first word) (first word)\
    \ (first word) (first ", "  (let loop ((word word) (vowels '(a e i o u)))\n  \
    \  (cond ((null? word) \"\")\n          ((member (char-code (car word)) vowels)\
    \ (car word))\n          ((member (char-code (cadr word)) vowels) (cadr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-code (caddr word)) vowels) (caddr word))\n          ((member\
    \ (char-code (caddr word)) vowels) (caddr word))\n          ((member (char-code\
    \ (caddr word)) vowels) (caddr word))\n          ((member (char-code (caddr word))\
    \ vowels) (caddr word))\n          ((member (char-code (caddr word)) vowels) (caddr\
    \ word))\n          ((member (char-code (caddr word)) vowels) (caddr word))\n\
    \          ((member (char-code (caddr word)) vowels) (caddr word))\n         \
    \ ((member (char-", "  (define (vowel-check word)\n    (cond [(empty? word) \"\
    \"]\n          [(char=? (first word) 'a) (cons (first word) (vowel-check (rest\
    \ word)))]\n          [(char=? (first word) 'e) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'i) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'o) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [(char=? (first word) 'u) (cons (first word) (vowel-check\
    \ (rest word)))]\n          [else (vowel-check (rest word))]))\n  (vowel-check\
    \ word))\n", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"]\n \
    \         [(char=? (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (define\
    \ (vowel-search vowel word)\n    (cond [(empty? word) \"\"]\n          [(equal?\
    \ (first word) vowel) (vowel-search vowel (rest word))]\n          [else (vowel-search\
    \ (first vowel) (rest word))]))\n  (vowel-search 'a '(cons word '())))\n", " \
    \ (cond\n    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n    [else (first word)]))\n", "  (define\
    \ (vowel-count vowel)\n    (cond\n      [(equal? vowel (first vowel)) (+ 1 (vowel-count\
    \ (rest vowel)))]\n      [else 0]))\n  (define (vowel-count vowel count)\n   \
    \ (cond\n      [(equal? vowel (first vowel)) (+ count (vowel-count (rest vowel)))]\n\
    \      [else count]))\n  (define (vowel-count vowel count count)\n    (cond\n\
    \      [(equal? vowel (first vowel)) (+ count (vowel-count (rest vowel) count))]\n\
    \      [else count]))\n  (define (vowel-count vowel count count count)\n    (cond\n\
    \      [(equal? vowel (first vowel)) (+ count (vowel-count (rest vowel) count\
    \ count))]\n      [else count]))\n  (define (vowel-count vowel count count count\
    \ count)\n    (cond\n      [(equal? vowel (first vowel)) (+ count (vowel-count\
    \ (rest vowel) count count count))]\n      [else count]))\n  (define (vowel-count\
    \ vowel count count count count count)\n    (cond\n      [(equal? vowel (first\
    \ vowel)) (+ count (vowel-count (rest vowel) count count count count))]\n    \
    \  [else count]))\n  (define (vowel-count vowel count count count count count\
    \ count)\n    (cond\n      [(equal? vowel (first vowel)) (+ count (vowel-count\
    \ (rest vowel) count count count count count))]\n      [else count]))\n  (define\
    \ (vowel-count vowel count count count count count count count)\n    (cond\n \
    \     [(equal? vowel (first vowel)) (+ count (vowel-count (rest vowel) count count\
    \ count count count count))]\n      [else count]))\n  (define (vowel-count vowel\
    \ count count count count count count count count)\n    (cond\n      [(equal?\
    \ vowel (first vowel)) (+ count (vowel-count (rest vowel) count count count count\
    \ count count count))]\n      [else count]))\n  (define (vowel-count vowel count\
    \ count count count count count count count count)\n    (cond\n      [(equal?\
    \ vowel (first vowel)) (+ count (vowel-count (rest vowel) count count count count\
    \ count count count count count))]\n      [else count]))\n  (define (vowel-count\
    \ vowel count count count count count count count count count count count)\n \
    \   (cond\n      [(equal? vowel (first vowel)) (+ count (vowel-count (rest ",
  "  (define (vowel-check word)\n    (cond\n      [(empty? word) \"\"]\n      [(char=?\
    \ (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n      [(char=?\
    \ (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n      [else\
    \ (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (cond\n    [(empty?\
    \ word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (get-closest-vowel (rest word))]))\n", "  (cond [(empty?\
    \ word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n        [else (first word)]))\n", "  (define (vowel-check vowel)\n\
    \    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n      [else\
    \ (vowel-check vowel)]))\n  (define (consonant-check consonant)\n    (cond\n \
    \     [(char=? (char-code consonant) 97) (char=? (char-code consonant) 65)]\n\
    \      [(char=? (char-code consonant) 65) (char=? (char-code consonant) 97)]\n\
    \      [else (consonant-check consonant)]))\n  (define (vowel-check vowel)\n \
    \   (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n      [else\
    \ (vowel-check vowel)]))\n  (define (consonant-check consonant)\n    (cond\n \
    \     [(char=? (char-code consonant) 97) (char=? (char-code consonant) 65)]\n\
    \      [(char=? (char-code consonant) 65) (char=? (char-code consonant) 97)]\n\
    \      [else (consonant-check consonant)]))\n  (define (vowel-check vowel)\n \
    \   (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97)]\n      [else\
    \ (vowel-check vowel)]))\n  (define (consonant-check consonant)\n    (cond\n \
    \     [(char=? (char-code consonant) 97) (char=? (char-code consonant) 65)]\n\
    \      [(char=? (char-code consonant) 65) (char=? (char-code consonant) 97)]\n\
    \      [else (consonant-check consonant)]))\n  (define (vowel-check vowel)\n \
    \   (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code vowel) 65)]\n\
    \      [(char=? (char-code vowel) 65) (char=? (char-code vowel) 97", "  (let loop\
    \ ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null? word) \"\
    \")\n          ((member (car word) vowels) (car word))\n          ((member (cdr\
    \ word) vowels) (cdr word))\n          (else (loop (cdr word) (cons (car word)\
    \ vowels))))))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first word)\
    \ 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (get-closest-vowel\
    \ (rest word))]))\n", "  (let loop ((vowels '(a e i o u)) (word word))\n    (cond\
    \ ((null? word) \"\")\n          ((char=? (car word) (car vowels)) (car vowels))\n\
    \          ((char=? (car word) (cadr vowels)) (loop (cdr vowels) (cdr word)))\n\
    \          ((char=? (car word) (caddr vowels)) (loop (cdr vowels) (caddr word)))\n\
    \          ((char=? (car word) (cadddr vowels)) (loop (cdr vowels) (cadddr word)))\n\
    \          (else (loop (cdr vowels) (cadddr word))))))\n", "  (define (helper\
    \ word vowel index vowels)\n    (cond\n      [(empty? word) \"\"]\n      [(equal?\
    \ vowel (first vowels)) vowel]\n      [(equal? (first vowels) vowel) (helper (rest\
    \ word) vowel (+ index 1) vowels)]\n      [(equal? (first vowels) (first vowels))\
    \ (helper (rest word) (first vowels) (+ index 1) vowels)]\n      [(equal? (first\
    \ vowels) (first vowels)) (helper (rest word) (first vowels) (+ index 1) vowels)]\n\
    \      [(equal? (first vowels) (first vowels)) (helper (rest word) (first vowels)\
    \ (+ index 1) vowels)]\n      [(equal? (first vowels) (first vowels)) (helper\
    \ (rest word) (first vowels) (+ index 1) vowels)]\n      [(equal? (first vowels)\
    \ (first vowels)) (helper (rest word) (first vowels) (+ index 1) vowels)]\n  \
    \    [(equal? (first vowels) (first vowels)) (helper (rest word) (first vowels)\
    \ (+ index 1) vowels)]\n      [(equal? (first vowels) (first vowels)) (helper\
    \ (rest word) (first vowels) (+ index 1) vowels)]\n      [(equal? (first vowels)\
    \ (first vowels)) (helper (rest word) (first vowels) (+ index 1) vowels)]\n  \
    \    [(equal? (first vowels) (first vowels)) (helper (rest word) (first vowels)\
    \ (+ index 1) vowels)]\n      [(equal? (first vowels) (first vowels)) (helper\
    \ (rest word) (first vowels) (+ index 1) vowels)]\n      [(equal? (first vowels)\
    \ (first vowels)) (helper (rest word) (first vowels) (+ index 1) vowels)]\n  \
    \    [(equal? (first vowels) (first vowels)) (helper (rest word) (first vowels)\
    \ (+ index 1) vowels)]\n      [(equal? (first vowels) (first vowels)) (helper\
    \ (rest word) (first vowels) (+ index 1) vowels)]\n      [(equal? (first vowels)\
    \ (first vowels)) (helper (rest word) (first vowels) (+ index 1) vowels)]\n  \
    \    [(equal? (first vowels) (first vowels)) (helper (rest word) (first vowels)\
    \ (+ index 1) vowels)]\n      [(equal? (first vowels) (first vowels)) (helper\
    \ (rest word) (first vowels) (+ index 1) vowels)]\n      [(equal? (first vowels)\
    \ (first vowels)) (helper (rest word) (first vowels) (+ ", "  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(char=? (char-code vowel) 97) (char=? (char-code\
    \ vowel) 65)]\n      [(char=? (char-code vowel) 65) (char=? (char-code vowel)\
    \ 97)]\n      [else (vowel-check vowel (substring word 0 (- (length word) 1)))]))\n\
    \  (vowel-check (char-code (substring word 0 (- (length word) 1))) word))\n",
  "  (define (helper word vowel vowels)\n    (cond\n      [(empty? word) \"\"]\n \
    \     [(equal? vowel (first vowels)) vowel]\n      [else (helper (rest word) (first\
    \ vowels) vowels)]\n    ))\n  (helper word (first '(a e i o u)) (vowels '(a e\
    \ i o u)))\n)\n", "  (define (vowel-check word)\n    (cond [(empty? word) \"\"\
    ]\n          [(char=? (first word) 'a) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'e) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'i) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'o) (cons (first word) (vowel-check (rest word)))]\n\
    \          [(char=? (first word) 'u) (cons (first word) (vowel-check (rest word)))]\n\
    \          [else (vowel-check (rest word))]))\n  (vowel-check word))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (first word)]\n  )\n)\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (char-after (char-before (char-after word)) #\\a) word)\
    \ 'a]\n    [(equal? (char-after (char-before (char-after word)) #\\e) word) 'e]\n\
    \    [(equal? (char-after (char-before (char-after word)) #\\i) word) 'i]\n  \
    \  [(equal? (char-after (char-before (char-after word)) #\\o) word) 'o]\n    [(equal?\
    \ (char-after (char-before (char-after word)) #\\u) word) 'u]\n    [else (error\
    \ \"Not a vowel\")]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal? (first\
    \ word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'e) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first word)]))\n",
  "  (cond [(empty? word) \"\"]\n        [(equal? (first word) 'a) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'o) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'u) (get_closest_vowel (rest word))]\n        [else (first word)]))\n", "  (define\
    \ (vowel-check word)\n    (cond\n      [(empty? word) \"\"]\n      [(char-equal?\
    \ (char-after (first word) 'a) 'a) (char-after (first word) 'a)]\n      [(char-equal?\
    \ (char-after (first word) 'e) 'e) (char-after (first word) 'e)]\n      [(char-equal?\
    \ (char-after (first word) 'i) 'i) (char-after (first word) 'i)]\n      [(char-equal?\
    \ (char-after (first word) 'o) 'o) (char-after (first word) 'o)]\n      [(char-equal?\
    \ (char-after (first word) 'u) 'u) (char-after (first word) 'u)]\n      [else\
    \ (vowel-check (rest word))]))\n  (vowel-check (reverse word)))\n", "  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(empty? word) \"\"]\n      [(equal?\
    \ vowel (first word)) (vowel-check vowel (rest word))]\n      [(equal? (first\
    \ word) vowel) (vowel-check (rest word) vowel)]\n      [else (vowel-check (rest\
    \ word) vowel)]))\n  (vowel-check (first word) word))\n", "  (let loop ((word\
    \ word)\n             (vowels '(a e i o u)))\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(member (car word) vowels) (car word)]\n      [else (loop (cdr\
    \ word) (cons (car word) vowels))]\n      )))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (cons (first word) (get_closest_vowel (rest word)))]))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest\
    \ word))]\n    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n  \
    \  [(equal? (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (first word)]\n  )\n)\n", "  (define (helper word vowel\
    \ index count)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? vowel (first\
    \ word)) (if (> index count) \"\" vowel)]\n      [else (helper (rest word) (first\
    \ word) (+ index 1) count)]))\n  (helper (reverse word) 'u (length word) 0))\n",
  "  (define (helper word vowel index count)\n    (cond\n      [(empty? word) \"\"\
    ]\n      [(equal? (first word) vowel) (helper (rest word) vowel (+ index 1) count)]\n\
    \      [(equal? (first word) (substring vowel (+ index 1))) (helper (rest word)\
    \ (substring vowel (+ index 1)) count (+ count 1))]\n      [else (helper (rest\
    \ word) (substring vowel (+ index 1)) count (+ count 1))]))\n  (helper word 'a\
    \ 0 0))\n", "  (define (vowel-check vowel word)\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(equal? vowel (first word)) (vowel-check vowel (rest word))]\n\
    \      [else (vowel-check vowel (rest word))]\n      ))\n  (vowel-check (first\
    \ word) (substring (second word) 0 (- (length word) 1)))\n  )\n", "  (define (helper\
    \ word vowel index count)\n    (cond ((null? word) \"\")\n          ((char=? (car\
    \ word) vowel) \n           (helper (cdr word) vowel (+ index 1) count))\n   \
    \       ((char=? (car word) (cdr word)) \n           (helper (cdr word) vowel\
    \ (+ index 1) count))\n          ((char=? (car word) (car word)) \n          \
    \ (helper (cdr word) vowel (+ index 1) count))\n          ((char=? (car word)\
    \ (cdr word)) \n           (helper (cdr word) vowel (+ index 1) count))\n    \
    \      (else (helper (cdr word) vowel (+ index 1) count))\n          ))\n  (helper\
    \ word 'u (length word) 0))\n", "  (let loop ((word word)\n             (vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? word) \"\"]\n      [(member (first\
    \ word) vowels) (first word)]\n      [else (loop (rest word) (cons (first word)\
    \ vowels))])))\n", "  (define (vowel-finder start end)\n    (cond [(< end start)\
    \ (empty-string)] \n          [(char=? (char-code (substring word start)) #\\\
    a) (substring word (+ start 1))]\n          [(char=? (char-code (substring word\
    \ end)) #\\a) (substring word (- end 1))]\n          [(char=? (char-code (substring\
    \ word start)) #\\e) (substring word (+ start 1))]\n          [(char=? (char-code\
    \ (substring word end)) #\\e) (substring word (- end 1))]\n          [(char=?\
    \ (char-code (substring word start)) #\\i) (substring word (+ start 1))]\n   \
    \       [(char=? (char-code (substring word end)) #\\i) (substring word (- end\
    \ 1))]\n          [(char=? (char-code (substring word start)) #\\o) (substring\
    \ word (+ start 1))]\n          [(char=? (char-code (substring word end)) #\\\
    o) (substring word (- end 1))]\n          [(char=? (char-code (substring word\
    \ start)) #\\u) (substring word (+ start 1))]\n          [(char=? (char-code (substring\
    \ word end)) #\\u) (substring word (- end 1))]\n          [(char=? (char-code\
    \ (substring word start)) #\\A) (substring word (+ start 1))]\n          [(char=?\
    \ (char-code (substring word end)) #\\A) (substring word (- end 1))]\n       \
    \   [(char=? (char-code (substring word start)) #\\E) (substring word (+ start\
    \ 1))]\n          [(char=? (char-code (substring word end)) #\\E) (substring word\
    \ (- end 1))]\n          [(char=? (char-code (substring word start)) #\\I) (substring\
    \ word (+ start 1))]\n          [(char=? (char-code (substring word end)) #\\\
    I) (substring word (- end 1))]\n          [(char=? (char-code (substring word\
    \ start)) #\\O) (substring word (+ start 1))]\n          [(char=? (char-code (substring\
    \ word end)) #\\O) (substring word (- end 1))]\n          [(char", "  (define\
    \ (vowel-check word)\n    (cond [(empty? word) \"\"]\n          [(char=? (first\
    \ word) 'a) (vowel-check (rest word))]\n          [(char=? (first word) 'e) (vowel-check\
    \ (rest word))]\n          [(char=? (first word) 'i) (vowel-check (rest word))]\n\
    \          [(char=? (first word) 'o) (vowel-check (rest word))]\n          [(char=?\
    \ (first word) 'u) (vowel-check (rest word))]\n          [else (vowel-check (rest\
    \ word))]))\n  (vowel-check word))\n", "  (cond\n    [(empty? word) \"\"]\n  \
    \  [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal? (first\
    \ word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n    [else (first\
    \ word)]))\n", "  (define (helper word vowel vowels)\n    (cond\n      [(empty?\
    \ word) \"\"]\n      [(equal? (first word) vowel) (second vowels)]\n      [(equal?\
    \ (first word) (first vowels)) (second vowels)]\n      [(equal? (first word) (first\
    \ vowels)) (second vowels)]\n      [else (helper (rest word) (first vowels) vowels)]\n\
    \    )\n  )\n  (helper word 'a '(a e i o u))\n)\n", "  (define (helper word vowel)\n\
    \    (cond [(empty? word) \"\"]\n          [(equal? (first word) vowel) (second\
    \ word)]\n          [(equal? (second word) vowel) (third word)]\n          [(equal?\
    \ (third word) vowel) (fourth word)]\n          [(equal? (fourth word) vowel)\
    \ (fifth word)]\n          [(equal? (fifth word) vowel) (sixth word)]\n      \
    \    [(equal? (sixth word) vowel) (seventh word)]\n          [(equal? (seventh\
    \ word) vowel) (eighth word)]\n          [(equal? (eighth word) vowel) (tenth\
    \ word)]\n          [(equal? (tenth word) vowel) (eleventh word)]\n          [(equal?\
    \ (eleventh word) vowel) (twelfth word)]\n          [(equal? (twelfth word) vowel)\
    \ (thirteenth word)]\n          [(equal? (thirteenth word) vowel) (fourteenth\
    \ word)]\n          [(equal? (fourteenth word) vowel) (fifteenth word)]\n    \
    \      [(equal? (fifteenth word) vowel) (sixteenth word)]\n          [(equal?\
    \ (sixteenth word) vowel) (seventeenth word)]\n          [(equal? (seventeenth\
    \ word) vowel) (eighteenth word)]\n          [(equal? (eighteenth word) vowel)\
    \ (tenteenth word)]\n          [(equal? (tenteenth word) vowel) (eleventeenth\
    \ word)]\n          [(equal? (eleventeenth word) vowel) (twelveteenth word)]\n\
    \          [(equal? (twelveteenth word) vowel) (thirteenteenth word)]\n      \
    \    [(equal? (thirteenteenth word) vowel) (fourteenteenth word)]\n          [(equal?\
    \ (fourteenteenth word) vowel) (fifteenteenth word)]\n          [(equal? (fifteenteenth\
    \ word) vowel) (sixteenteenth word)]\n          [(equal? (sixteenteenteenth word)\
    \ vowel) (seventeenteenth word)]\n          [(equal? (seventeenteenth word) vowel)\
    \ (eighteenteenth word)]\n          [(equal? (eighteenteenth word) vowel) (tenteenteenth\
    \ word)]\n          [(equal? (tenteenteenth word) vowel) (eleventeenteenth word)]\n\
    \          [(equal? (eleventeenteenth word) vowel) (twelveteenteenth ", "  (define\
    \ (vowel-check vowel word)\n    (cond\n      [(string=? vowel (substring word\
    \ 0 (string-length word)))\n       (substring word 0 (string-length word))]\n\
    \      [(string=? vowel (substring word 0 (string-length word) 1))\n       (substring\
    \ word 0 (string-length word) 1)]\n      [(string=? vowel (substring word 0 (string-length\
    \ word) 2))\n       (substring word 0 (string-length word) 2)]\n      [(string=?\
    \ vowel (substring word 0 (string-length word) 3))\n       (substring word 0 (string-length\
    \ word) 3)]\n      [(string=? vowel (substring word 0 (string-length word) 4))\n\
    \       (substring word 0 (string-length word) 4)]\n      [(string=? vowel (substring\
    \ word 0 (string-length word) 5))\n       (substring word 0 (string-length word)\
    \ 5)]\n      [(string=? vowel (substring word 0 (string-length word) 6))\n   \
    \    (substring word 0 (string-length word) 6)]\n      [(string=? vowel (substring\
    \ word 0 (string-length word) 7))\n       (substring word 0 (string-length word)\
    \ 7)]\n      [(string=? vowel (substring word 0 (string-length word) 8))\n   \
    \    (substring word 0 (string-length word) 8)]\n      [(string=? vowel (substring\
    \ word 0 (string-length word) 9))\n       (substring word 0 (string-length word)\
    \ 9)]\n      [else\n       (substring word 0 (string-length word) 0)]))\n  (cond\n\
    \    [(empty? word)\n     (substring word 0 (string-length word) 0)]\n    [(vowel-check\
    \ (substring word 0 (string-length word) 1) word)\n     (vowel-check (substring\
    \ word 0 (string-length word) 2) word)]\n    [(vowel-check (substring word 0 (string-length\
    \ word) 3) word)\n     (vowel-check (substring word 0 (string-length word) 4)\
    \ word)]\n    [(vowel-check (substring word 0 (string-length word) 5) word)\n\
    \     (vowel-check (substring word 0 (string-length word) 6) word)]\n    [(vowel-check\
    \ (substring word 0 (string-length word) 7) word)\n     (vowel-check (substring\
    \ word 0 (string-length word) 8) word)]\n    [(vowel-check (substring word 0 (string-length\
    \ word) 9) word)\n     (vowel-check (substring word 0 (string-length word) 10)\
    \ word)]\n    [else\n     (substring word ", "  (cond [(empty? word) \"\"]\n \
    \       [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n        [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \        [else (first word)]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(equal?\
    \ (char-after (char-before (char-after word)) #\\a) (char-after (char-before (char-after\
    \ word)) #\\e)) (char-after (char-before (char-after word)) #\\u)]\n    [(equal?\
    \ (char-after (char-before (char-after word)) #\\e) (char-after (char-before (char-after\
    \ word)) #\\i)) (char-after (char-before (char-after word)) #\\u)]\n    [(equal?\
    \ (char-after (char-before (char-after word)) #\\i) (char-after (char-before (char-after\
    \ word)) #\\o)) (char-after (char-before (char-after word)) #\\u)]\n    [(equal?\
    \ (char-after (char-before (char-after word)) #\\o) (char-after (char-before (char-after\
    \ word)) #\\u)) (char-after (char-before (char-after word)) #\\u)]\n    [(equal?\
    \ (char-after (char-before (char-after word)) #\\u) (char-after (char-before (char-after\
    \ word)) #\\a)) (char-after (char-before (char-after word)) #\\u)]\n    [else\
    \ \"\"]))\n", "  (define (helper word vowel)\n    (cond ((null? word) \"\")\n\
    \          ((char=? (car word) vowel) vowel)\n          ((char=? (car word) (cdr\
    \ word)) (helper (cdr word) vowel))\n          (else (helper (cdr word) vowel))))\n\
    \  (helper word 'u))\n", "  (define (helper word vowel i j)\n    (cond\n     \
    \ [(empty? word) \"\"]\n      [(equal? vowel (first word)) (first word)]\n   \
    \   [(equal? (first word) vowel) (first word)]\n      [(equal? (first word) (substring\
    \ (second word) i (- i j)))\n       (helper (substring (second word) i (- i j))\
    \ vowel (+ i 1) (+ j 1))]\n      [(equal? (first word) (substring (second word)\
    \ (+ i 1) j))\n       (helper (substring (second word) (+ i 1) j) vowel (+ i 1)\
    \ (+ j 1))]\n      [(equal? (first word) (substring (second word) i (+ j 1)))\n\
    \       (helper (substring (second word) i (+ j 1)) vowel (+ i 1) (+ j 1))]\n\
    \      [(equal? (first word) (substring (second word) (+ i 1) (+ j 1)))\n    \
    \   (helper (substring (second word) (+ i 1) (+ j 1)) vowel (+ i 1) (+ j 1))]\n\
    \      [(equal? (first word) (substring (second word) i (- j 1)))\n       (helper\
    \ (substring (second word) i (- j 1)) vowel (+ i 1) (+ j 1))]\n      [(equal?\
    \ (first word) (substring (second word) (- i 1) j))\n       (helper (substring\
    \ (second word) (- i 1) j) vowel (+ i 1) (+ j 1))]\n      [(equal? (first word)\
    \ (substring (second word) (- i 1) (+ j 1)))\n       (helper (substring (second\
    \ word) (- i 1) (+ j 1)) vowel (+ i 1) (+ j 1))]\n      [(equal? (first word)\
    \ (substring (second word) (- i 1) (- j 1)))\n       (helper (substring (second\
    \ word) (- i 1) (- j 1)) vowel (+ i 1) (+ j 1))]\n      [(equal? (first word)\
    \ (substring (second word) (- i 1) (+ j 1)))\n       (helper (substring (second\
    \ word) (- i 1) (+ j 1)) vowel (+ i 1) (+ j 1))]\n      [(equal? (first word)\
    \ (substring (second word) (- i 1) (- j 1)))\n       (helper (substring (second\
    \ word) (- i 1) (- j 1)) vowel (+ i 1) (+ j 1))]\n      [(equal? (first word)\
    \ (substring (second word) (- i 1) (+ j 1)))\n       (helper (substring (second\
    \ word", "  (define (vowel-check word)\n    (let ((vowels '(a e i o u)))\n   \
    \   (cond ((null? word) \"\")\n            ((char=? (car word) (car vowels)) (car\
    \ vowels))\n            (else (vowel-check (cdr word))))))\n  (vowel-check word))\n",
  "  (let loop ((word word)\n             (vowels '(a e i o u)))\n    (cond ((null?\
    \ word) \"\")\n          ((char=? (car word) 'a) (loop (cdr word) vowels))\n \
    \         ((char=? (car word) 'e) (loop (cdr word) vowels))\n          ((char=?\
    \ (car word) 'i) (loop (cdr word) vowels))\n          ((char=? (car word) 'o)\
    \ (loop (cdr word) vowels))\n          ((char=? (car word) 'u) (loop (cdr word)\
    \ vowels))\n          (else (loop (cdr word) vowels)))))\n", "  (define (vowel-check\
    \ vowel word)\n    (cond\n      [(empty? word) \"\"]\n      [(equal? (first word)\
    \ vowel) (second word)]\n      [else (vowel-check (rest word) vowel)]))\n  (vowel-check\
    \ (first word) word))\n", "  (let loop ((word word) (vowels '(a e i o u)))\n \
    \   (cond ((null? word) \"\")\n          ((char=? (car word) (car vowels)) (car\
    \ vowels))\n          ((char=? (car word) (cadr vowels)) (loop (cdr word) vowels))\n\
    \          ((char=? (car word) (caddr vowels)) (loop (cdr word) vowels))\n   \
    \       ((char=? (car word) (caddr vowels) (loop (cdr word) vowels))\n       \
    \    (loop (cdr word) vowels))\n          (else (loop (cdr word) vowels)))))\n",
  "  (define (vowel-search start end)\n    (cond ((= end start) \"\")\n          ((char=?\
    \ (char-code (substring word start end)) #\\a) \n           (vowel-search (+ start\
    \ 1) end))\n          ((char=? (char-code (substring word start end)) #\\e) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\i) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (char-code (substring word start end)) #\\o) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\u) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (char-code (substring word start end)) #\\y) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\a) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (char-code (substring word start end)) #\\e) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\i) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (char-code (substring word start end)) #\\o) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\u) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (char-code (substring word start end)) #\\y) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\a) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (char-code (substring word start end)) #\\e) \n\
    \           (vowel-search (+ start 1) (+ end 1)))\n          ((char=? (char-code\
    \ (substring word start end)) #\\i) \n           (vowel-search (+ start 1) (+\
    \ end 1)))\n          ((char=? (", "  (cond [(empty? word) \"\"]\n        [(equal?\
    \ (first word) 'a) (get_closest_vowel (rest word))]\n        [(equal? (first word)\
    \ 'e) (get_closest_vowel (rest word))]\n        [(equal? (first word) 'i) (get_closest_vowel\
    \ (rest word))]\n        [(equal? (first word) 'o) (get_closest_vowel (rest word))]\n\
    \        [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n        [else\
    \ (cons (first word) (get_closest_vowel (rest word)))]))\n", "  (cond\n    [(empty?\
    \ word) \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n\
    \    [(equal? (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'o) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel\
    \ (rest word))]\n    [else (cons (first word) (get_closest_vowel (rest word)))]))\n",
  "  (define (helper word vowel)\n    (cond\n      [(empty? word) \"\"]\n      [(equal?\
    \ (first word) vowel) (second word)]\n      [(equal? (first word) (substring (second\
    \ word) 0 1)) (helper (rest word) (substring (second word) 0 1))]\n      [(equal?\
    \ (first word) (substring (second word) 0 2)) (helper (rest word) (substring (second\
    \ word) 0 2))]\n      [(equal? (first word) (substring (second word) 0 3)) (helper\
    \ (rest word) (substring (second word) 0 3))]\n      [(equal? (first word) (substring\
    \ (second word) 0 4)) (helper (rest word) (substring (second word) 0 4))]\n  \
    \    [(equal? (first word) (substring (second word) 0 5)) (helper (rest word)\
    \ (substring (second word) 0 5))]\n      [(equal? (first word) (substring (second\
    \ word) 0 6)) (helper (rest word) (substring (second word) 0 6))]\n      [(equal?\
    \ (first word) (substring (second word) 0 7)) (helper (rest word) (substring (second\
    \ word) 0 7))]))\n  (helper (reverse word) 'u))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(equal? (first word) 'a) (get_closest_vowel (rest word))]\n    [(equal?\
    \ (first word) 'e) (get_closest_vowel (rest word))]\n    [(equal? (first word)\
    \ 'i) (get_closest_vowel (rest word))]\n    [(equal? (first word) 'o) (get_closest_vowel\
    \ (rest word))]\n    [(equal? (first word) 'u) (get_closest_vowel (rest word))]\n\
    \    [else (cons (first word) (get_closest_vowel (rest word)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
