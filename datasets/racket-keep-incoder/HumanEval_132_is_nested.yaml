name: HumanEval_132_is_nested
language: racket
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return True if and only if there\
  \ is a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; is_nested('[[]]') \u279E True\n;; is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n;; is_nested('[][]') \u279E False\n;; is_nested('[]') \u279E False\n;;\
  \ is_nested('[[][]]') \u279E True\n;; is_nested('[[]][[') \u279E True\n(define (is_nested\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? string) #f]\n        [(equal? (first string) '[')\
    \ #t]\n        [(equal? (first string) '(') #f]\n        [else (is_nested (rest\
    \ string))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) #t]\n    [else (or (is_nested (cdr string))\n               (is_nested (substring\
    \ string 0 (- (length string) 1)))\n               (is_nested (substring string\
    \ 1 (- (length string) 1)))\n               (is_nested (substring string 0 (-\
    \ (length string) 2)))\n               (is_nested (substring string 1 (- (length\
    \ string) 2)))\n               (is_nested (substring string 0 (- (length string)\
    \ 3)))\n               (is_nested (substring string 1 (- (length string) 3)))\n\
    \               (is_nested (substring string 0 (- (length string) 4)))\n     \
    \          (is_nested (substring string 1 (- (length string) 4)))\n          \
    \     (is_nested (substring string 0 (- (length string) 5)))\n               (is_nested\
    \ (substring string 1 (- (length string) 5)))\n               (is_nested (substring\
    \ string 0 (- (length string) 6)))\n               (is_nested (substring string\
    \ 1 (- (length string) 6)))\n               (is_nested (substring string 0 (-\
    \ (length string) 7)))\n               (is_nested (substring string 1 (- (length\
    \ string) 7)))\n               (is_nested (substring string 0 (- (length string)\
    \ 8)))\n               (is_nested (substring string 1 (- (length string) 8)))\n\
    \               (is_nested (substring string 0 (- (length string) 9)))\n     \
    \          (is_nested (substring string 1 (- (length string) 9)))\n          \
    \     (is_nested (substring string 0 (- (length string) 10)))\n              \
    \ (is_nested (substring string 1 (- (length string) 10)))\n               (is_nested\
    \ (substring string 0 (- (length string) 11)))\n               (is_nested (substring\
    \ string 1 (- (length string) 11)))\n               (is_nested (substring string\
    \ 0 (- (length string) 12)))\n               (is_nested (substring string 1 (-\
    \ (length string) 12)))\n               (is_nested (substring string 0 (- (length\
    \ string) 13)))\n               (is_nested (substring string 1 (- (length string)\
    \ 13)))\n               (is_nested (substring string 0 (- (length string) 14)))\n\
    \               (is_nested (substring string 1 (- (length string) 14)))\n    \
    \           (is_nested (substring string 0 (- (length string) 15)))\n        \
    \       (is_nested (substring string 1 (- (length string) 15)))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #t]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '[') #t]\n    [else (or (equal? (first string) '[')\n              (equal?\
    \ (first string) '(')\n              (equal? (first string) '{'))\n          (is_nested\
    \ (rest string))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis doesn't\
    \ work for `is_nested
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n  \
    \  [(equal? (first string) '[') (is_nested (rest string))]\n    [else (is_nested\
    \ (rest string))]\n  ))\n", "  (cond [(empty? string) #f]\n        [(equal? (car\
    \ string) '[) #t]\n        [else (or (is_nested (cdr string))\n              \
    \     (is_nested (string-append string '[)))]))) ;; #lang racket\n", "  (cond\
    \ [(empty? string) #t]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (let loop ((i 0))\n    (if (< i string.length)\n \
    \       (if (equal? (char-code (char string i)) '[')\n            (if (equal?\
    \ (char-code (char string (i + 1))) '[')\n                (loop (+ i 2))\n   \
    \             (loop (+ i 1)))\n            (if (equal? (char-code (char string\
    \ (i + 1))) '[')\n                (loop (+ i 1)))\n            (if (equal? (char-code\
    \ (char string (i + 1))) '[')\n                (loop (+ i 2))))\n        false)))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (string-append '[ (car string) '])))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f]\n        [(equal? (car string) '[') #t]\n        [else\
    \ (is_nested (cdr string))]))\n", "  (let loop ((i 0) (s string) (result #f))\n\
    \    (cond ((null? s) result)\n          ((char=? (car s) '[) (loop (add1 i) (sub1\
    \ s) (or (loop (add1 i) (cdr s)) result)))\n          ((char=? (car s) '(') (loop\
    \ (add1 i) (sub1 s) (or (loop (add1 i) (cdr s)) result)))\n          (else (loop\
    \ (add1 i) (sub1 s) result))))))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (first string) '[') #t]\n    [else (and (equal? (first string) '[') (equal?\
    \ (rest string) '['))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '[') (equal? (rest string) '[')\n               (equal? (rest\
    \ string) '[') (equal? (rest string) '['))\n          (is_nested (rest string))]\n\
    \    [else (and (equal? (first string) '[') (equal? (rest string) '[')\n     \
    \          (equal? (rest string) '[')\n               (equal? (rest string) '[')\n\
    \               (equal? (rest string) '[')\n               (equal? (rest string)\
    \ '[')\n               (equal? (rest string) '[')\n               (equal? (rest\
    \ string) '[')\n               (equal? (rest string) '[')\n               (equal?\
    \ (rest string) '[')\n               (equal? (rest string) '[')\n            \
    \   (equal? (rest string) '[')\n               (equal? (rest string) '[')\n  \
    \             (equal? (rest string) '[')\n               (equal? (rest string)\
    \ '[')\n               (equal? (rest string) '[')\n               (equal? (rest\
    \ string) '[')\n               (equal? (rest string) '[')\n               (equal?\
    \ (rest string) '[')\n               (equal? (rest string) '[')\n            \
    \   (equal? (rest string) '[')\n               (equal? (rest string) '[')\n  \
    \             (equal? (rest string) '[')\n               (equal? (rest string)\
    \ '[')\n               (equal? (rest string) '[')\n               (equal? (rest\
    \ string) '[')\n               (equal? (rest string) '[')\n               (equal?\
    \ (rest string) '[')\n               (equal? (rest string) '[')\n            \
    \   (equal? (rest string) '[')\n               (equal? (rest string) '[')\n  \
    \             (equal? (rest string) '[')\n               (equal? (rest string)\
    \ '[')\n               (equal? (rest string) '[')\n               (equal? (rest\
    \ string) '[')\n               (equal? (rest string) '[')\n               (equal?\
    \ (rest string) '[')\n               (", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n \
    \              (is_nested (string-append '[ (car string) '])))]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else #t]))\n", "  (let loop ((i 0) (result #f))\n    (cond\
    \ ((null? string) #f)\n          ((eqv? (char (car string) i) '[)\n          \
    \ (loop (+ i 1) (or (not result) (eqv? (char (car string) i) '[))))\n        \
    \  ((eqv? (char (car string) i) ']')\n           (loop (+ i 1) (or (not result)\
    \ (eqv? (char (car string) i) ']'))))\n          (else\n           (loop (+ i\
    \ 1) (or (not result) (eqv? (char (car string) i) '[')))))))\n", "  (cond\n  \
    \  [(empty? string) #f]\n    [(equal? (first string) '[') #t]\n    [else (or (is_nested\
    \ (rest string))\n               (is_nested (substring (first string) 1 string)))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (and (equal? (car string) '[') (equal? (cdr string) ']'))\n          (is_nested\
    \ (cdr string))]\n    [else #f]\n    [else (and (equal? (car string) '[') (equal?\
    \ (cdr string) '['))\n          (is_nested (cdr string))]\n    [else #f]\n   \
    \ [else (and (equal? (car string) '[') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string))]\n    [else #f]\n    [else (and (equal? (car string) '(') (equal?\
    \ (cdr string) '('))\n          (is_nested (cdr string))]\n    [else #f]\n   \
    \ [else (and (equal? (car string) '(') (equal? (cdr string) '['))\n          (is_nested\
    \ (cdr string))]\n    [else #f]\n    [else (and (equal? (car string) '[') (equal?\
    \ (cdr string) '['))\n          (is_nested (cdr string))]\n    [else #f]\n   \
    \ [else (and (equal? (car string) '[') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string))]\n    [else #f]\n    [else (and (equal? (car string) '(') (equal?\
    \ (cdr string) '('))\n          (is_nested (cdr string))]\n    [else #f]\n   \
    \ [else (and (equal? (car string) '(') (equal? (cdr string) '['))\n          (is_nested\
    \ (cdr string))]\n    [else #f]\n    [else (and (equal? (car string) '(') (equal?\
    \ (cdr string) '('))\n          (is_nested (cdr string))]\n    [else #f]\n   \
    \ [else (and (equal? (car string) '(') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string))]\n    [else #f]\n    [else (and (equal? (car string) '(') (equal?\
    \ (cdr string) '('))\n          (is_nested (cdr string))]\n    [else #f]\n   \
    \ [else (and (equal? (car string) '(') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n        [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else #f]))\n", "  (cond [(empty? string) #f]\n       \
    \ [(equal? (car string) '[) #t]\n        [(equal? (car string) '(') #f]\n    \
    \    [(equal? (car string) '[') #t]\n        [(equal? (car string) '{') #f]\n\
    \        [else (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string)\
    \ #t]\n    [(equal? (first string) '[') #t]\n    [else (and (equal? (first string)\
    \ '[') (equal? (rest string) ']'))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string) '[') (equal? (rest string) '['))\n       \
    \   (is_nested (rest string))]\n    [else (and (equal? (first string) '[') (equal?\
    \ (rest string) '('))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '(') (equal? (rest string) '['))\n          (is_nested (rest\
    \ string))]\n    [else (and (equal? (first string) '(') (equal? (rest string)\
    \ '('))\n          (is_nested (rest string))]\n    [else (and (equal? (first string)\
    \ '(') (equal? (rest string) '('))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string) '[') (equal? (rest string) '['))\n       \
    \   (is_nested (rest string))]\n    [else (and (equal? (first string) '[') (equal?\
    \ (rest string) '('))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '(') (equal? (rest string) '['))\n          (is_nested (rest\
    \ string))]\n    [else (and (equal? (first string) '(') (equal? (rest string)\
    \ '('))\n          (is_nested (rest string))]\n    [else (and (equal? (first string)\
    \ '[') (equal? (rest string) '['))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string) '[') (equal? (rest string) '('))\n       \
    \   (is_nested (rest string))]\n    [else (and (equal? (first string) '(') (equal?\
    \ (rest string) '['))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '(') (equal? (rest string) '('))\n          (is_nested (rest\
    \ string))]\n    [else (and (equal? (first string) '[') (equal? (rest string)\
    \ '['))\n          (is_nested (rest string))]\n    [else (and (equal? (first string)\
    \ '[') (equal? (rest string) '('))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n             \
    \  (is_nested (string-append '[ (car string) ])))]))\n", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #t]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (let loop ((i 0) (string\
    \ string) (result #f))\n    (if (or (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=?\
    \ string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string #\\])\
    \ (char=? string #\\]) (char=? string #\\]) (char=? string #\\]) (char=? string\
    \ #\\]) (char=? string #\\", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (or (equal? (car string) '[) (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '(') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (car string) '[') (is_nested (cdr string))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '[') #t]\n    [else (or\
    \ (equal? (first string) '[') (equal? (first string) '('))]))) ; '(', ')', '['\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [else (is_nested (rest string))]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (and (equal? (car string) '[') (equal? (cdr string) ']'))\n          (is_nested\
    \ (cdr string))]\n    [else (and (equal? (car string) '[') (equal? (cdr string)\
    \ '['))\n          (is_nested (cdr string))]\n    [else (and (equal? (car string)\
    \ '[') (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else\
    \ (and (equal? (car string) '(') (equal? (cdr string) '['))\n          (is_nested\
    \ (cdr string))]\n    [else (and (equal? (car string) '(') (equal? (cdr string)\
    \ '('))\n          (is_nested (cdr string))]\n    [else (and (equal? (car string)\
    \ '[') (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else\
    \ (and (equal? (car string) '(') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string))]\n    [else (and (equal? (car string) '[') (equal? (cdr string)\
    \ '['))\n          (is_nested (cdr string))]\n    [else (and (equal? (car string)\
    \ '(') (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else\
    \ (and (equal? (car string) '(') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string))]\n    [else (and (equal? (car string) '[') (equal? (cdr string)\
    \ '['))\n          (is_nested (cdr string))]\n    [else (and (equal? (car string)\
    \ '(') (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else\
    \ (and (equal? (car string) '(') (equal? (cdr string) '('))\n          (is_nested\
    \ (cdr string))]\n    [else (and (equal? (car string) '[') (equal? (cdr string)\
    \ '['))\n          (is_nested (cdr string))]\n    [else (and (equal? (car string)\
    \ '(') (equal? (cdr string) '('))\n          (", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (first string) '[') #t]\n    [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (or (is_nested (cdr string))\n               (equal? (car string) '['))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #t]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[') (is_nested (cdr string))]\n        [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #f]))\n", "  (let loop\
    \ ((i 0) (string string))\n    (if (null? string)\n        #f\n        (if (char=?\
    \ (char-code string) '[')\n            (loop (+ i 1) (substring string 0 (char-code\
    \ string)))\n            (loop (+ i 1) (substring string i (char-code string)))))))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[) #t]\n    [else\
    \ (or (equal? (first string) '[) (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first ",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (or (is_nested (cdr string))\n               (is_nested (string-append '[#(car\
    \ string)] (cdr string))))]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else #t]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '[') #t]\n    [else (and\
    \ (equal? (first string) '[') (equal? (rest string) '['))\n          (is_nested\
    \ (rest string))]\n    [else (and (equal? (first string) '[') (equal? (rest string)\
    \ '('))\n          (is_nested (rest string))]\n    [else (and (equal? (first string)\
    \ '(') (equal? (rest string) '['))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string) '(') (equal? (rest string) '('))\n       \
    \   (is_nested (rest string))]\n    [else (and (equal? (first string) '[') (equal?\
    \ (rest string) '('))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '(') (equal? (rest string) '('))\n          (is_nested (rest\
    \ string))]\n    [else (and (equal? (first string) '[') (equal? (rest string)\
    \ '['))\n          (is_nested (rest string))]\n    [else (and (equal? (first string)\
    \ '(') (equal? (rest string) '('))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string) '[') (equal? (rest string) '['))\n       \
    \   (is_nested (rest string))]\n    [else (and (equal? (first string) '(') (equal?\
    \ (rest string) '('))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '[') (equal? (rest string) '['))\n          (is_nested (rest\
    \ string))]\n    [else (and (equal? (first string) '(') (equal? (rest string)\
    \ '('))\n          (is_nested (rest string))]\n    [else (and (equal? (first string)\
    \ '[') (equal? (rest string) '('))\n          (is_nested (rest string))]\n   \
    \ [else (and (equal? (first string) '(') (equal? (rest string) '('))\n       \
    \   (is_nested (rest string))]\n    [else (and (equal? (first string) '[') (equal?\
    \ (rest string) '('))\n          (is_nested (rest string))]\n    [else (and (equal?\
    \ (first string) '(') (equal? (rest string) '('))\n          (is_nested (rest\
    \ string))]\n    [else (and (equal? (first ", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[') (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[) (is_nested (rest string))]\n    [else #t]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n        [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr\
    \ string))]\n    [else #t]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (first string) '[') #t]\n        [else (or (equal? (first string) '[')\n   \
    \                (equal? (first string) '(')\n                   (equal? (first\
    \ string) '{'))\n                   (is_nested (substring (next string) 1))]))))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]\n  ))\n", "  (cond\n \
    \   [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest string))]\n\
    \    [else #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first string)\
    \ '[') #t]\n    [else (or (equal? (first string) '[') (equal? (first string) '('))])))\
    \ ;; #lang racket\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[') #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (string-append string '[')))]))\n", "  (let\
    \ loop ((i 0) (s string) (found false))\n    (cond\n      [(empty? s) found]\n\
    \      [(equal? (char-ref s i) '[) (loop (+ i 1) (substring s i (+ i 1)) true)]\n\
    \      [else (loop (+ i 1) (substring s i (+ i 1)) false)]))))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '[') (is_nested (subseq string\
    \ 1))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else (is_nested (rest\
    \ string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '[) #t]\n    [else (and (equal? (car string) '[) (is_nested (cdr string)))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') #t]\n    [else\
    \ (or (equal? (first string) '[') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first ",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [(equal? (first string) '(') #f]\n        [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (or (is_nested (cdr string))\n               (is_nested (substring string 0\
    \ (- (length string) 1)))\n               (is_nested (substring string 1 (- (length\
    \ string) 1)))\n               (is_nested (substring string 0 (- (length string)\
    \ 2)))\n               (is_nested (substring string 1 (- (length string) 2)))\n\
    \               (is_nested (substring string 0 (- (length string) 3)))\n     \
    \          (is_nested (substring string 1 (- (length string) 3)))\n          \
    \     (is_nested (substring string 0 (- (length string) 4)))\n               (is_nested\
    \ (substring string 1 (- (length string) 4)))\n               (is_nested (substring\
    \ string 0 (- (length string) 5)))\n               (is_nested (substring string\
    \ 1 (- (length string) 5)))\n               (is_nested (substring string 0 (-\
    \ (length string) 6)))\n               (is_nested (substring string 1 (- (length\
    \ string) 6)))\n               (is_nested (substring string 0 (- (length string)\
    \ 7)))\n               (is_nested (substring string 1 (- (length string) 7)))\n\
    \               (is_nested (substring string 0 (- (length string) 8)))\n     \
    \          (is_nested (substring string 1 (- (length string) 8)))\n          \
    \     (is_nested (substring string 0 (- (length string) 9)))\n               (is_nested\
    \ (substring string 1 (- (length string) 9)))\n               (is_nested (substring\
    \ string 0 (- (length string) 10)))\n               (is_nested (substring string\
    \ 1 (- (length string) 10)))\n               (is_nested (substring string 0 (-\
    \ (length string) 11)))\n               (is_nested (substring string 1 (- (length\
    \ string) 11)))\n               (is_nested (substring string 0 (- (length string)\
    \ 12)))\n               (is_nested (substring string 1 (- (length string) 12)))\n\
    \               (is_nested (substring string 0 (- (length string) 13)))\n    \
    \           (is_nested (substring string 1 (- (length string) 13)))\n        \
    \       (is_nested (substring string 0 (- (length string) 14)))\n            \
    \   (is_nested (substring string 1 (- (length string) 14)))\n               (is_nested\
    \ (substring string 0 (- (length string) 15)))\n               (is_nested (substring\
    \ string 1 (- (length string) 15)))\n", "  (cond [(empty? string) #f]\n      \
    \  [(equal? (car string) '[') (is_nested (cdr string))]\n        [else (is_nested\
    \ (cdr string))]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first\
    \ string) '[') #t]\n        [(equal? (first string) '(') #f]\n        [else (is_nested\
    \ (rest string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]\n\
    \  ))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n\
    \    [else (or (is_nested (cdr string))\n               (equal? (car string) '['))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[') #t]\n    [(equal?\
    \ (first string) '(') #f]\n    [else (is_nested (rest string))]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \        [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else #t]))\n", "  (let loop ((i\
    \ 0) (s string) (result #f))\n    (cond ((null? s) result)\n          ((eq? (car\
    \ s) '[') (loop (+ i 1) (cdr s) (or (loop (+ i 1) (car s)) result)))\n       \
    \   ((eq? (car s) ']') (loop (+ i 1) (cdr s) (or (result #f) (loop (+ i 1) (cdr\
    \ s) result))))\n          (else (loop (+ i 1) (cdr s) result))))))\n", "  (let\
    \ loop ((i 0) (string string) (result #f))\n    (cond ((null? string) result)\n\
    \          ((equal? (char (car string)) '[)\n           (loop (add1 i) (cdr string)\
    \ (not result)))\n          ((equal? (char (car string)) ']')\n           (loop\
    \ (add1 i) (cdr string) (not result)))\n          (else (loop (add1 i) (cdr string)\
    \ (and result (equal? (char (car string)) '[)))))))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[') (is_nested (rest string))]\n \
    \   [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[') #t]\n    [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[) #t]\n    [else (or (equal? (first\
    \ string) '[') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '(') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first ", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '[') #t]\n        [(equal? (first\
    \ string) '(') #f]\n        [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[) #t]\n        [(equal? (car string)\
    \ '(') #f]\n        [(equal? (car string) '[') #t]\n        [else (is_nested (cdr\
    \ string))]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[)\
    \ #t]\n    [else (is_nested (rest string))]))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((equal? (char (car string))\
    \ '[) (loop (add1 i) (cdr string)))\n          ((equal? (char (car string)) '])\
    \ (loop (add1 i) (cdr string)))\n          (else (loop (add1 i) string))))))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (or (is_nested (cdr string))\n               (is_nested (string-append string\
    \ '[')))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car string)\
    \ '[) #t]\n    [else (and (is_nested (cdr string))\n               (equal? (car\
    \ string) '['))]))) ;; #lang racket\n", "  (cond\n    [(empty? string) #t]\n \
    \   [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n  \
    \             (is_nested (string-append string '['))))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (string-append string '[)))]))) \n", " \
    \ (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') #t]\n    [else\
    \ (or (equal? (first string) '[') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '(') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '(') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '(') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '(') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '(') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '(') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '(') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '(') (equal? (first ",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #t]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') #t]\n        [(equal? (first string) '(') #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [(equal? (first string)\
    \ '(') (is_nested (rest string))]\n        [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[) #t]\n    [else\
    \ (is_nested (cdr string))]))\n", "  (cond [(empty? string) #t]\n        [(equal?\
    \ (car string) '[) #t]\n        [else (or (is_nested (cdr string))\n         \
    \          (equal? (car string) '['))]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr string))\n \
    \              (is_nested (car string)))]))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[') (is_nested (rest string))]\n        [else\
    \ #t]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (car string) '[) (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #t]\n        [(equal? (car string) '[) (is_nested\
    \ (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n    \
    \    [(equal? (car string) '[) #t]\n        [(equal? (car string) '(') #f]\n \
    \       [(equal? (car string) '[') #t]\n        [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f]\n        [else (is_nested (cdr string))]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n\
    \    [else (is_nested (rest string))]\n  ))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (first string) '[') #t]\n        [else (or (is_nested (rest\
    \ string)) (is_nested (string-append '[[]]' (first string))))]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '[') (is_nested (rest string))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[) (is_nested (rest string))]\n    [else #f]))\n", "  (cond\n    [(empty? string)\
    \ #t]\n    [(equal? (first string) '[') #t]\n    [else (or (equal? (first string)\
    \ '[') (equal? (first string) '('))]))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (car string) '[) #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (equal? (car string) ']'))]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n\
    \        [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]\n\
    \  ))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '[') #t]\n    [else (and\
    \ (equal? (car string) '[')\n               (is_nested (cdr string)))]))\n", " \
    \ (cond [(empty? string) #t]\n        [(equal? (car string) '[) #t]\n        [(equal?\
    \ (car string) '(') #f]\n        [(equal? (car string) '[') #f]\n        [else\
    \ (is_nested (cdr string))]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) #t]\n        [else (or (is_nested (cdr string))\n         \
    \          (is_nested (string-append string '[')))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (car string) '[') #t]\n    [else (or (is_nested (cdr\
    \ string))\n               (is_nested (string-append '[#(car string)] string)))]))\n",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n    [else #f]))\n", "  (let loop ((i 0) (s string))\n    (cond\n\
    \      [(empty? s) #t]\n      [(equal? (char-ref s i) '[) (loop (+ i 1) (substring\
    \ s i (+ i 1)))]\n      [else (loop (+ i 1) (substring s i))]))))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \    [else (is_nested (cdr string))]))\n", "  (cond [(empty? string) #f]\n   \
    \     [(equal? (car string) '[) #t]\n        [else (or (is_nested (cdr string))\n\
    \                   (is_nested (car string)))]))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (car string) '[') #t]\n    [else (is_nested (cdr string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (or (is_nested (cdr string))\n               (is_nested (string-append string\
    \ '[')))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '[') #t]\n    [(equal? (car string) '(') #t]\n    [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [(equal? (first string) '(') #f]\n        [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [(equal? (first string) '(') #f]\n        [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal?\
    \ (car string) '[') #t]\n    [else (or (equal? (car string) '[')\n           \
    \    (equal? (car string) '(')\n               (is_nested (cdr string)))]))\n\
    </code>\n<|/ a tags=scheme,racket,functional-programming |>\n<| c |>\nThanks for\
    \ your answer. I'm still trying to understand how this works. I understand that\
    \ `is_nested` checks if the first character is a `'['` or `'('` but I don't understand\
    \ how it checks if there is a valid subsequence of brackets where the brackets\
    \ are nested. Could you please explain how this works?\n<|/ c |>\n<| c |>\nThe\
    \ function `is_nested` checks if the first character is a `'['` or `'('` but I\
    \ don't understand how it checks if there is a valid subsequence of brackets where\
    \ the brackets are nested. Could you please explain how this works?\n<|/ c |>\n\
    <| c |>\nI added a description of how `is_nested` works. Hope that helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your explanation. I'm still trying to understand how\
    \ this works. I understand that `is_nested` checks if the first character is a\
    \ `'['` or `'('` but I don't understand how it checks if there is a valid subsequence\
    \ of brackets where the brackets are nested. Could you please explain how this\
    \ works?\n<|/ c |>\n<| c |>\nI added a description of how `is_nested` works. Hope\
    \ that helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first string) '[) (is_nested (rest string))]\n      \
    \  [else #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '[') #t]\n    [else (or (equal? (car string) '[')\n              (equal? (car\
    \ string) '(')\n              (equal? (car string) '{'))\n           (is_nested\
    \ (cdr string))]))) ; recurse\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\n\
    This doesn't work. Try it with `(is_nested \"[][]\")`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bugs. I tested it with `(is_nested \"[][]\")` and it returned `#t`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bugs. I tested it with `(is_nested \"[][]\")` and\
    \ it returned `#t`.\n<|/ c |>\n<| c |>\nI fixed the bugs. I tested it with `(is_nested\
    \ \"[][]\")` and it returned `#t`.\n<|/ c |>\n<| c |>\nI fixed the bugs. I tested\
    \ it with `(is_nested \"[][]\")` and it returned `#t`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  (let loop ((i 0) (s string) (result #f))\n    (cond ((null?\
    \ s) result)\n          ((char=? (car s) '[) (loop (+ i 1) (cdr s) (or (not result)\
    \ (char=? (car s) '['))))\n          ((char=? (car s) '(') (loop (+ i 1) (cdr\
    \ s) (not result)))\n          (else (loop (+ i 1) (cdr s) result))))))\n", " \
    \ (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[') #t]\n    [(equal?\
    \ (first string) '(') #f]\n    [else (is_nested (rest string))]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested (rest\
    \ string))]\n        [else (is_nested (rest string))]))\n", "  (cond\n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') #t]\n    [else (is_nested (rest\
    \ string))]))\n", "  (let loop ((i 0) (string string) (result #f))\n    (cond\n\
    \      [(empty? string) #f]\n      [(equal? (car string) '[) (loop (add1 i) (sub1\
    \ string) result)]\n      [(equal? (car string) '(') (loop (add1 i) (sub1 string)\
    \ result)]\n      [else (loop (add1 i) (sub1 string) (not result))]))\n  result)\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n    [else (is_nested (rest string))]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') (is_nested (rest string))]\n\
    \        [else #t]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car\
    \ string) '[) #t]\n    [else (and (equal? (car string) '[) (is_nested (cdr string)))]))\n",
  "  (cond [(empty? string) #t]\n        [(equal? (car string) '[') (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (car string) '[) #t]\n    [else (and (equal? (car string) '[) (is_nested (cdr\
    \ string)))]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string)\
    \ '[') #t]\n        [(equal? (first string) '(') #f]\n        [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n        [(equal? (first string) '(')\
    \ (is_nested (rest string))]\n        [else (is_nested (rest string))]))\n", " \
    \ (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [else #t]))\n", "  (cond\n    [(empty? string) #t]\n\
    \    [(equal? (first string) '[') (is_nested (rest string))]\n    [else (is_nested\
    \ (rest string))]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[') (is_nested (cdr string))]\n        [else #t]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[') (is_nested (rest string))]\n \
    \   [else (is_nested (rest string))]\n  ))\n", "  (cond [(empty? string) #f]\n\
    \        [(equal? (car string) '[') (is_nested (cdr string))]\n        [else #f]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[') #t]\n        [else\
    \ (or (is_nested (cdr string))\n                   (is_nested (string-append '[\
    \ (car string) ])))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[') (is_nested (rest string))]\n    [else #t]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '[') #t]\n        [else (or (equal?\
    \ (first string) '[') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '{') (equal? (first string) '(') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '[') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '{') (equal? (first string) '(') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '[') (equal? (first string) '(') (equal? (first string) '{') (equal? (first\
    \ string) '{') (equal? (first string) '(') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '[')\
    \ (equal? (first string) '(') (equal? (first string) '{') (equal? (first string)\
    \ '{') (equal? (first string) '(') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '[') (equal?\
    \ (first string) '(') (equal? (first string) '{') (equal? (first string) '{')\
    \ (equal? (first string) '(') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '[') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '{') (equal?\
    \ (first string) '(') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '[') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '{') (equal? (first\
    \ string) '(') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '[') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '{') (equal? (first string",
  "  (cond\n    [(empty? string) #t]\n    [(equal? (first string) '[') #t]\n    [else\
    \ (or (equal? (first string) '[') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '{') (equal? (first\
    \ string) '[') (equal? (first string) '(') (equal? (first string) '{') (equal?\
    \ (first string) '{') (equal? (first string) '[') (equal? (first string) '(')\
    \ (equal? (first string) '{') (equal? (first string) '{') (equal? (first string)\
    \ '[') (equal? (first string) '(') (equal? (first string) '{') (equal? (first\
    \ string) '{') (equal? (first string) '[') (equal? (first string) '(') (equal?\
    \ (first string) '{') (equal? (first string) '{') (equal? (first string) '[')\
    \ (equal? (first string) '(') (equal? (first string) '{') (equal? (first string)\
    \ '{') (equal? (first string) '[') (equal? (first string) '(') (equal? (first\
    \ string) '{') (equal? (first string) '{') (equal? (first string) '[') (equal?\
    \ (first string) '(') (equal? (first string) '{') (equal? (first string) '{')\
    \ (equal? (first string) '[') (equal? (first string) '(') (equal? (first string)\
    \ '{') (equal? (first string) '{') (equal? (first string) '[') (equal? (first\
    \ string) '(') (equal? (first string) '{') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '{') (equal? (first string) '[') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '{') (equal? (first ",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr\
    \ string))]\n    [else #t]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal?\
    \ (first string) '[') #t]\n    [else (is_nested (rest string))]))\n", "  (cond\
    \ [(empty? string) #f]\n        [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \        [else (is_nested (cdr string))]))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (car string) '[') #t]\n    [else (is_nested (cdr string))]))\n",
  "  (let loop ((i 0) (s string) (result #f))\n    (cond\n      [(empty? s) result]\n\
    \      [(equal? (char-ref s i) '[) (loop (+ i 1) (substring s i (+ i 1)) result)]\n\
    \      [else (loop (+ i 1) (substring s i (+ i 1)) result)])))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (first string) '[') #t]\n    [else (or\
    \ (equal? (first string) '[') (equal? (first string) '('))]))) \n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (first string) '[') (is_nested (rest string))]\n\
    \    [else #t]))\n", "  (cond [(empty? string) #f]\n        [(equal? (car string)\
    \ '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond\n    [(empty?\
    \ string) #t]\n    [(equal? (first string) '[') (is_nested (subseq string 1 2))]\n\
    \    [(equal? (first string) '(') (is_nested (subseq string 1 2))]\n    [else\
    \ (is_nested (subseq string 1 string))]))\n", "  (let loop ((i 0) (s string))\n\
    \    (cond ((null? s) #f)\n          ((eq? (car s) '[) (loop (+ i 1) (cdr s)))\n\
    \          ((eq? (car s) '(') (loop (+ i 1) (cdr s)))\n          (else (loop (+\
    \ i 1) (cdr s))))))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) (is_nested (cdr string))]\n    [else (is_nested (cdr string))]\n\
    \  ))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string) '[) (is_nested\
    \ (rest string))]\n        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (first string) '[') (is_nested (rest string))]\n    [else (is_nested\
    \ (rest string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (first\
    \ string) '[') #t]\n    [else (or (equal? (first string) '[') (equal? (first string)\
    \ '(') (equal? (first string) '{') (equal? (first string) '{') (equal? (first\
    \ string) '(') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '[') (equal? (first string) '(') (equal? (first string) '{')\
    \ (equal? (first string) '{') (equal? (first string) '(') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '{') (equal? (first\
    \ string) '(') (equal? (first string) '[') (equal? (first string) '{') (equal?\
    \ (first string) '{') (equal? (first string) '(') (equal? (first string) '[')\
    \ (equal? (first string) '{') (equal? (first string) '{') (equal? (first string)\
    \ '(') (equal? (first string) '[') (equal? (first string) '{') (equal? (first\
    \ string) '{') (equal? (first string) '(') (equal? (first string) '[') (equal?\
    \ (first string) '{') (equal? (first string) '{') (equal? (first string) '(')\
    \ (equal? (first string) '[') (equal? (first string) '{') (equal? (first string)\
    \ '{') (equal? (first string) '(') (equal? (first string) '[') (equal? (first\
    \ string) '{') (equal? (first string) '{') (equal? (first string) '(') (equal?\
    \ (first string) '[') (equal? (first string) '{') (equal? (first string) '{')\
    \ (equal? (first string) '(') (equal? (first string) '[') (equal? (first string)\
    \ '{') (equal? (first string) '{') (equal? (first string) '(') (equal? (first\
    \ string) '[') (equal? (first string) '{') (equal? (first string) '{') (equal?\
    \ (first string) '(') (equal? (first string) '[') (equal? (first string) '{')\
    \ (equal? (first string) '{') (equal? (first string) '(') (equal? (first string)\
    \ '[') (equal? (first string) '{') (equal? (first string) '{') (equal? (first\
    \ string) '(') (equal? (first ", "  (let loop ((i 0) (string string))\n    (cond\
    \ ((null? string) #f)\n          ((char=? (car string) '[) (loop (add1 i) (sub1\
    \ string)))\n          ((char=? (car string) '[) (loop (add1 i) (sub1 string)))\n\
    \          ((char=? (car string) '(') (loop (add1 i) (sub1 string)))\n       \
    \   ((char=? (car string) '(') (loop (add1 i) (sub1 string)))\n          (else\
    \ (loop (add1 i) (sub1 string)))))\n  (not (null? string)))\n", "  (let loop ((i\
    \ 0) (s string))\n    (cond ((null? s) #f)\n          ((equal? (char-ref s i)\
    \ '[) (loop (+ i 1) (substring s i 1)))\n          ((equal? (char-ref s i) '])\
    \ (loop (+ i 1) (substring s i 1)))\n          (else (loop (+ i 1) s)))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #f]))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else #t]))\n", "  (cond\n\
    \    [(empty? string) #t]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n    [else (is_nested (rest string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [(equal? (first string) '(') #f]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [(equal? (first string) '(') (is_nested (rest string))]\n\
    \        [else (is_nested (rest string))]))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (car string) '[') #t]\n    [else (is_nested (cdr string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [else (or (equal? (first string) '[') (equal? (first string) '('))]))\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I am not allowed to use any\
    \ built-in functions. I should also not use any loops.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nThanks for the answer.\
    \ I am not allowed to use any built-in functions. I should also not use any loops.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any loops.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\n<code>", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '[) (is_nested (cdr string))]\n        [else #t]))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(equal? (car string) '[') #t]\n    [else (is_nested\
    \ (cdr string))]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first\
    \ string) '[') #t]\n    [else (or (equal? (first string) '[')\n              (equal?\
    \ (first string) '(')\n              (is_nested (rest (rest string))))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (or (is_nested (cdr string))\n               (is_nested (string-append string\
    \ '[')))]))\n", "  (cond [(empty? string) #t]\n        [(equal? (car string) '[')\
    \ (is_nested (cdr string))]\n        [else #f]))\n", "  (cond [(empty? string)\
    \ #t]\n        [(equal? (car string) '[') (is_nested (cdr string))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n    [else #t]))\n", "  (cond [(empty? string) #t]\n\
    \        [(equal? (first string) '[) (is_nested (rest string))]\n        [else\
    \ #f]))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n        [else (is_nested (rest string))]))\n", " \
    \ (cond [(empty? string) #f]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [else #t]))\n", "  (cond [(empty? string) #f]\n   \
    \     [(equal? (car string) '[) #t]\n        [else (or (is_nested (cdr string))\n\
    \                   (is_nested (string-append string '[')))]))\n", "  (cond [(empty?\
    \ string) #t]\n        [(equal? (first string) '[) (is_nested (rest string))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? string) #f]\n    [(equal? (car\
    \ string) '[) #t]\n    [else (and (is_nested (cdr string))\n               (equal?\
    \ (car string) '['))]))) ;; #lang racket\n", "  (cond [(empty? string) #f]\n \
    \       [(equal? (first string) '[') (is_nested (rest string))]\n        [else\
    \ #t]))\n", "  (cond [(empty? string) #t]\n        [(equal? (first string) '[')\
    \ (is_nested (rest string))]\n        [else #f]))\n", "  (let loop ((i 0) (string\
    \ string))\n    (cond ((null? string) #f)\n          ((equal? (char (car string))\
    \ '[)\n           (loop (add1 i) (substring string 0 (add1 i))))\n          ((equal?\
    \ (char (car string)) '])) \n          ((equal? (char (car string)) '[)\n    \
    \       (loop (add1 i) (substring string i (add1 i))))\n          ((equal? (char\
    \ (car string)) '])) \n          (else (loop (add1 i) (substring string i (add1\
    \ i)))))))\n", "  (let loop ((i 0) (s string) (found #f))\n    (if (= i 0)\n \
    \       (not found)\n        (loop (add1 i) (substring s i (length s)) (not (=\
    \ (substring s i (length s)) '[]))))))\n", "  (let loop ((i 0) (string string))\n\
    \    (if (< i 0)\n        #f\n        (if (eqv? (char-ref string i) '[')\n   \
    \         (loop (+ i 1) (string-append string '[')\n                   (if (eqv?\
    \ (char-ref string i) '[')\n                       (loop (+ i 1) (string-append\
    \ string '[')\n                             (if (eqv? (char-ref string i) '[')\n\
    \                                 (loop (+ i 1) (string-append string '[')\n \
    \                                      (if (eqv? (char-ref string i) '[')\n  \
    \                                         (loop (+ i 1) (string-append string\
    \ '[')\n                                                 (if (eqv? (char-ref string\
    \ i) '[')\n                                                     (loop (+ i 1)\
    \ (string-append string '[')\n                                               \
    \            (if (eqv? (char-ref string i) '[')\n                            \
    \                                   (loop (+ i 1) (string-append string '[')\n\
    \                                                                     (if (eqv?\
    \ (char-ref string i) '[')\n                                                 \
    \                        (loop (+ i 1) (string-append string '[')\n          \
    \                                                                   (if (eqv?\
    \ (char-ref string i) '[')\n                                                 \
    \                                (loop (+ i 1) (string-append string '[')\n  \
    \                                                                            \
    \         (if (eqv? (char-ref string i) '[')\n                               \
    \                                                            (loop (+ i 1) (string-append\
    \ string '[')\n                                                              \
    \                                   (if (eqv? (char-ref string i) '[')\n     \
    \                                                                            \
    \                    (loop (+ i 1) (string-append string '[')\n              \
    \                                                                            \
    \                 (if (eqv? (char-ref string i) '[')\n                       \
    \                                                                            \
    \            (loop (+ i 1) (string-append string '[')\n                      \
    \                                                                            \
    \                   (if (eqv? (char-ref string i) '[')\n                     \
    \                                                                            \
    \                        (loop (+ i 1) (string-append string '[')\n          \
    \                                                                            \
    \                                         (if (eqv? (char-ref string i) '[')\n\
    \                                                                            \
    \                                                       (loop (+ i 1) (string-append\
    \ string '[')\n                                                              \
    \                                                                           (if\
    \ (eqv? (char-ref string i) '[')\n                                           \
    \                                                                            \
    \                                                     (loop (+ i 1) (string-append\
    \ string '[')\n                                                              \
    \                                                                            \
    \                                         (if (eqv? (char-ref string i) '[')\n\
    \                                                                            \
    \                                                                            \
    \                               (loop (+ i 1) (string-append string '[')\n   \
    \                                                                            \
    \                                                                            \
    \                                  (if (eqv? (char-ref string i) '[')\n      \
    \                                                                            \
    \                                                                            \
    \                                 (loop (", "  (cond\n    [(empty? string) #f]\n\
    \    [(equal? (car string) '[') #t]\n    [else (or (is_nested (cdr string))\n\
    \               (is_nested (string-append '[ (car string) ])))]))\n", "  (let\
    \ loop ((i 0) (s string) (valid #t) (stack '()))\n    (cond ((null? s) valid)\n\
    \          ((equal? (char-ref s i) '[) (loop (+ i 1) (substring (+ s i) i) valid\
    \ (cons (substring (+ s i) i) stack)))\n          ((equal? (char-ref s i) '])\
    \ (loop (+ i 1) (substring (+ s i) i) valid (cons (substring (+ s i) i) stack)))\n\
    \          (else (loop (+ i 1) (+ s i) valid (cons (substring (+ s i) i) stack))))))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[') #t]\n      \
    \  [(equal? (first string) '(') #f]\n        [(equal? (first string) '[') (is_nested\
    \ (rest string))]\n        [(equal? (first string) '(') (is_nested (rest string))]\n\
    \        [else (is_nested (rest string))]))\n", "  (let loop ((i 0) (string string)\
    \ (result #f))\n    (cond ((null? string) #f)\n          ((eqv? (car string) '[)\n\
    \           (loop (+ i 1) (cdr string) (not result)))\n          ((eqv? (car string)\
    \ ']) result)\n          (else (loop (+ i 1) (cdr string) (loop (+ i 1) (cdr string)\
    \ result))))))\n", "  (cond [(empty? string) #f]\n        [(equal? (first string)\
    \ '[') (is_nested (rest string))]\n        [else (is_nested (rest string))]))\n",
  "  (cond\n    [(empty? string) #f]\n    [(equal? (car string) '[') #t]\n    [else\
    \ (or (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '(') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '(') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string)\
    \ '{') (equal? (car string) '[') (equal? (car string) '{') (equal? (car string)\
    \ '[') (equal? (car string) '{') (equal? (car string) '[') (equal? (car string",
  "  (let loop ((i 0) (s string))\n    (cond\n      [(empty? s) (= i 0)]\n      [(equal?\
    \ (char-ref s i) '[) (loop (+ i 1) (substring s 0 (+ i 1)))]\n      [else (loop\
    \ (+ i 1) (substring s i))]))))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '[') (is_nested (rest string))]\n        [else (is_nested (rest\
    \ string))]))\n", "  (cond\n    [(empty? string) #t]\n    [(equal? (car string)\
    \ '[) #t]\n    [else (and (equal? (car string) '[') (equal? (cdr string) ']'))\n\
    \          (is_nested (cdr string))]\n    [else (and (equal? (car string) '[')\
    \ (equal? (cdr string) '['))\n          (is_nested (cdr string))]\n    [else (and\
    \ (equal? (car string) '[') (equal? (cdr string) '('))\n          (is_nested (cdr\
    \ string))]\n    [else (and (equal? (car string) '(') (equal? (cdr string) '['))\n\
    \          (is_nested (cdr string))]\n    [else (and (equal? (car string) '(')\
    \ (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else (and\
    \ (equal? (car string) '[') (equal? (cdr string) '('))\n          (is_nested (cdr\
    \ string))]\n    [else (and (equal? (car string) '(') (equal? (cdr string) '('))\n\
    \          (is_nested (cdr string))]\n    [else (and (equal? (car string) '(')\
    \ (equal? (cdr string) '['))\n          (is_nested (cdr string))]\n    [else (and\
    \ (equal? (car string) '[') (equal? (cdr string) '['))\n          (is_nested (cdr\
    \ string))]\n    [else (and (equal? (car string) '[') (equal? (cdr string) '('))\n\
    \          (is_nested (cdr string))]\n    [else (and (equal? (car string) '(')\
    \ (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else (and\
    \ (equal? (car string) '(') (equal? (cdr string) '('))\n          (is_nested (cdr\
    \ string))]\n    [else (and (equal? (car string) '(') (equal? (cdr string) '['))\n\
    \          (is_nested (cdr string))]\n    [else (and (equal? (car string) '[')\
    \ (equal? (cdr string) '('))\n          (is_nested (cdr string))]\n    [else (and\
    \ (equal? (car string) '(') (equal? (cdr string) '('))\n          (", "  (let\
    \ loop ((i 0) (result #f))\n    (cond ((null? string) #f)\n          ((eqv? (char\
    \ (car string) i) '[)\n           (loop (+ i 1) (or (not result) (loop (+ i 1)\
    \ #f))))\n          ((eqv? (char (car string) i) ']')\n           (loop (+ i 1)\
    \ (and (not result) (loop (+ i 1) #f))))\n          (else (loop (+ i 1) (or (not\
    \ result) (loop (+ i 1) #f)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
