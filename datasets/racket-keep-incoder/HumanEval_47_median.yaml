name: HumanEval_47_median
language: racket
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
  \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
  \ (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (/ (apply min l) (length l)))\n", "  (/ (apply median (rest l)) (length\
    \ l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y))\
    \ l)\n     (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n",
  "  (/ (apply + l) (length l)))\n", "  (/ (apply median (sort l)) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/\
    \ (apply median (rest l)) (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (apply\
    \ + l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min\
    \ l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply median\
    \ (rest l)) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n\
    \     (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply median\
    \ (rest l)) (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply min\
    \ l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (reduce + l)\
    \ 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/\
    \ (apply + l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< y x) x y)) l)\n\
    \     (length l)))\n", "  (/ (apply median (sort l)) 2))\n", "  (/ (apply median\
    \ l) 2))\n", "  (/ (reduce + l) 2))\n", "  (/ (reduce (lambda (x y) (if (< x y)\
    \ x y)) l)\n     (length l)))\n", "  (/ (apply median (rest l)) 2))\n", "  (/\
    \ (apply min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y))\
    \ l) 2))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n",
  "  (/ (apply + l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (reduce + l) (carl\
    \ l)))\n", "  (/ (apply median (rest l)) (length l)))\n", "  (/ (apply median\
    \ l) 2))\n", "  (/ (reduce (lambda (x y) (if (< y x) y x)) l) 2))\n", "  (/ (reduce\
    \ (lambda (x y) (if (< y x) x y)) l)\n     (length l)))\n", "  (/ (reduce + l)\
    \ 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (reduce + l) (carl l)))\n",
  "  (/ (apply median (rest l)) (length l)))\n", "  (/ (apply median (sort l)) 2))\n",
  "  (/ (reduce (lambda (x y) (if (< y x) y x)) l) 2))\n", "  (/ (reduce (lambda (x\
    \ y) (if (< y x) x y)) l) 2))\n", "  (/ (reduce + l) 2))\n", "  (/ (apply median\
    \ (rest l)) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (reduce + l) (carl l)))\n", "  (/ (reduce (lambda\
    \ (x y) (if (< x y) x y)) l)\n     (length l)))\n", "  (/ (apply + l) (length\
    \ l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (reduce (lambda (x y) (if\
    \ (< x y) x y)) l)\n     (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply median l) 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply min\
    \ l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply median\
    \ (rest l)) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n\
    \     (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l)\
    \ (length l)))\n", "  (/ (reduce + l) 2))\n", "  (/ (apply median l) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (apply\
    \ median (sort l)) 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply median\
    \ (rest l)) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n\
    \     (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (reduce + l) (carl\
    \ l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply + l) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/\
    \ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min\
    \ l) (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply median l)\
    \ 2))\n", "  (/ (apply + l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (<\
    \ x y) x y)) l) 2))\n", "  (/ (apply median (rest l)) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< y x) y x)) l)\n \
    \    (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/\
    \ (apply median (rest l)) (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply median l) 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ + l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply median\
    \ (sort l)) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (apply median\
    \ l) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (reduce (lambda (x\
    \ y) (if (< x y) x y)) l) 2))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y))\
    \ l)\n     (length l)))\n", "  (/ (reduce + l) 2))\n", "  (/ (reduce (lambda (x\
    \ y) (if (< y x) y x)) l) 2))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y))\
    \ l) 2))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n", "  (/ (apply\
    \ median l) 2))\n", "  (/ (reduce (lambda (x y) (if (< y x) y x)) l)\n     (length\
    \ l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply median\
    \ (sort l)) 2))\n", "  (/ (apply median (rest l)) 2))\n", "  (/ (apply min l)\
    \ (length l)))\n", "  (/ (reduce + l) (inc (length l))))\n", "  (/ (apply + l)\
    \ (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply median l) (length l)))\n", " \
    \ (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (reduce + l) 2))\n", "  (/ (apply median (rest l)) (length l)))\n", "  (/\
    \ (apply median (rest l)) (length l)))\n", "  (/ (reduce (lambda (x y) (if (<\
    \ x y) x y)) l) 2))\n", "  (/ (apply median l) 2))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< y x) y x))\
    \ l)\n     (length l)))\n", "  (/ (apply + l) (length l)))\n", "  (/ (apply min\
    \ l) (length l)))\n", "  (/ (apply median l) (length l)))\n", "  (/ (apply median\
    \ l) 2))\n", "  (/ (reduce + l) (carl l)))\n", "  (/ (apply min l) (length l)))\n",
  "  (/ (apply + l) (length l)))\n", "  (/ (apply median (map - l)) (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y))\
    \ l)\n     (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (reduce + l) 2))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n",
  "  (/ (apply + l) (length l)))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y))\
    \ l) 2))\n", "  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n",
  "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/\
    \ (apply min l) (length l)))\n", "  (/ (apply median l) 2))\n", "  (/ (reduce\
    \ + l) 2))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply median (rest\
    \ l)) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l)\
    \ (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (reduce + l) (carl l)))\n", "  (/ (apply median l) 2))\n", " \
    \ (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n", "  (/ (apply\
    \ min l) (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (reduce (lambda\
    \ (x y) (if (< x y) x y)) l)\n     (length l)))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (apply median (rest l)) (length l)))\n", "  (/ (apply min l)\
    \ (length l)))\n", "  (/ (apply min l) (length l)))\n", "  (/ (apply min l) (length\
    \ l)))\n", "  (/ (apply median l) 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
