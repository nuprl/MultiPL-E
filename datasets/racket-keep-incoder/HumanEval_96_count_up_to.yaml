name: HumanEval_96_count_up_to
language: racket
prompt: "#lang racket\n\n;; Implement a function that takes an non-negative integer\
  \ and returns an array of the first n\n;; integers that are prime numbers and less\
  \ than n.\n;; for example:\n;; count_up_to(5) => [2,3]\n;; count_up_to(11) => [2,3,5,7]\n\
  ;; count_up_to(0) => []\n;; count_up_to(20) => [2,3,5,7,11,13,17,19]\n;; count_up_to(1)\
  \ => []\n;; count_up_to(18) => [2,3,5,7,11,13,17]\n(define (count_up_to n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_up_to))\n\
  \    (check-equal? (candidate 5) (list 2 3))\n    (check-equal? (candidate 6) (list\
  \ 2 3 5))\n    (check-equal? (candidate 7) (list 2 3 5))\n    (check-equal? (candidate\
  \ 10) (list 2 3 5 7))\n    (check-equal? (candidate 0) (list ))\n    (check-equal?\
  \ (candidate 22) (list 2 3 5 7 11 13 17 19))\n    (check-equal? (candidate 1) (list\
  \ ))\n    (check-equal? (candidate 18) (list 2 3 5 7 11 13 17))\n    (check-equal?\
  \ (candidate 47) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43))\n    (check-equal?\
  \ (candidate 101) (list 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71\
  \ 73 79 83 89 97))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
