name: HumanEval_87_get_row
language: racket
prompt: "#lang racket\n\n;; You are given a 2 dimensional data, as a nested lists,\n\
  ;; which is similar to matrix, however, unlike matrices,\n;; each row may contain\
  \ a different number of columns.\n;; Given lst, and integer x, find integers x in\
  \ the list,\n;; and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
  ;; each tuple is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates\
  \ initially by rows in ascending order.\n;; Also, sort coordinates of the row by\
  \ columns in descending order.\n;; Examples:\n;; get_row([\n;; [1,2,3,4,5,6],\n\
  ;; [1,2,3,4,1,6],\n;; [1,2,3,4,5,1]\n;; ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5),\
  \ (2, 0)]\n;; get_row([], 1) == []\n;; get_row([[], [1], [1, 2, 3]], 3) == [(2,\
  \ 2)]\n(define (get_row lst x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list\
  \ 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list\
  \ 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list\
  \ (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))\n    (check-equal?\
  \ (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list\
  \ 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list\
  \ (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list\
  \ 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))\n    (check-equal? (candidate\
  \ (list ) 1) (list ))\n    (check-equal? (candidate (list (list 1)) 2) (list ))\n\
  \    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list\
  \ 2 2)))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first\
    \ lst) (first lst)]]\n    [else (cons (get_row (rest lst) x) (get_row (rest lst)\
    \ (first lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(= x (first lst))\
    \ (list (first lst) (second lst))]\n    [else (get_row (rest lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (car lst) x) (list (cons (car\
    \ lst) (get_row (cdr lst) x)))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n\
    \    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (cons (first lst)\n             \
    \   (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (car lst) x) (car lst)]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n \
    \   [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row\
    \ (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal?\
    \ (car lst) x) (list (cons (car lst) (get_row (cdr lst) x)))]\n    [else (get_row\
    \ (cdr lst) x)]))\n", "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ (list ())]\n    [(equal? (first lst) x) (list (cons (first lst) (get_row (rest\
    \ lst) x)))]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else (get_row\
    \ (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) (list ())]\n    [(equal? (car lst) x) (list (cons (car lst) (get_row (cdr\
    \ lst) x)))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else (get_row\
    \ (rest lst) (first lst))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest lst) x))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else\
    \ (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) [(first lst)]]\n    [else (cons (get_row (rest lst) x) [(first\
    \ lst)])]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x)\
    \ (rest lst)]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else\
    \ (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n   \
    \ [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest\
    \ lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n\
    \    [else (get_row (rest lst) (first lst))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst) x) lst]\n    [else (get_row\
    \ (rest lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst)\
    \ x) (cdr lst)]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst)\
    \ x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst) x)\
    \ (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x)\
    \ (car lst)]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) (- x\
    \ 1))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst) x) lst]\n\
    \    [else (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) (rest lst)]\n    [else (get_row (rest\
    \ lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst)\
    \ x) (car lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst)\
    \ x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first\
    \ lst) (first lst)]]\n    [else (get_row (rest lst) (first lst))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n\
    \    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (get_row (rest lst) (first lst))]))\n", "  (cond\n    [(empty? lst) (list ())]\n\
    \    [(equal? (car lst) x) (list (cons (car lst) (get_row (cdr lst) x)))]\n  \
    \  [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n   \
    \ [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst) (- x))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst) x) lst]\n    [else (cons\
    \ (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst) '()]\n\
    \    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n   \
    \ [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) [(first lst)]]\n    [else (cons (get_row (rest lst) (first lst)) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car\
    \ lst) x) (cdr lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n\
    \    [else (get_row (rest lst) x)]\n  )\n)\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", " \
    \ (cond\n    [(empty? lst) (list ())]\n    [(equal? (car lst) x) (list 0)]\n \
    \   [else (get_row (cdr lst) (- x))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x)\
    \ (car lst)]\n    [else (cons (get_row (cdr lst) x) (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(= x (car lst)) (cons (car lst) (get_row (cdr\
    \ lst) x))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(= x (car lst))\
    \ (list (car lst) (get_row (cdr lst) x))]\n    [else (get_row (cdr lst) x)]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst) x) lst]\n    [else (cons\
    \ (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst)]]\n\
    \    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n\
    \    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else\
    \ (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) (list '())]\n\
    \    [(equal? (first lst) x) (list '(0 0))]\n    [else (append (get_row (rest\
    \ lst) x) (list (list (- (first lst) x) (first lst)))])]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst)]]\n\
    \    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else (get_row\
    \ (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) (first\
    \ lst))]))\n", "  (cond\n    [(empty? lst) (list '())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) [(first lst)]]\n    [else (get_row (rest lst) (first lst))]))\n", "  (cond\n\
    \    [(empty? lst) (list ())]\n    [(equal? (car lst) x) (list (cons (car lst)\
    \ (get_row (cdr lst) x)))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n\
    \    [(empty? lst) '()]\n    [(equal? (car lst) x) lst]\n    [else (get_row (cdr\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst)\
    \ (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) [(first lst)]]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) (list '())]\n    [(equal?\
    \ (first lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else\
    \ (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) (-\
    \ x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x) (car\
    \ lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal?\
    \ (first lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else\
    \ (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal?\
    \ (first lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else\
    \ (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest lst) x))]))\n",
  "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (car lst) x) (list (cons (car\
    \ lst) (get_row (cdr lst) x)))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (cons\
    \ (get_row (cdr lst) x) \n                (get_row (cdr lst) (- x 1))))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else\
    \ (cons (get_row (cdr lst) x) (cdr lst))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first\
    \ lst)]]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst)]]\n\
    \    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (car lst) x) (car lst)]\n    [else (cons (get_row (cdr lst) x) \n\
    \              (cons (car lst) \n                    (get_row (cdr lst) x))))]))\n",
  "  (cond\n    [(empty? lst) '()]\n    [(equal? (first lst) x) lst]\n    [else (cons\
    \ (first lst)\n                (get_row (rest lst) x))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst)\
    \ (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (cons (get_row (rest lst) x) \n               (get_row (rest\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (cons (first lst) (get_row (rest lst) (- x 1)))]))\n", "  (cond\n    [(empty?\
    \ lst) (list ())]\n    [(equal? (car lst) x) (list (cons (car lst) (get_row (cdr\
    \ lst) x)))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) [(first lst)]]\n    [else (get_row (rest\
    \ lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first\
    \ lst) x) (cons (first lst) (get_row (rest lst) x))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (get_row\
    \ (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car\
    \ lst) x) (car lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n\
    \    [else (get_row (rest lst) (first lst))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else (get_row\
    \ (rest lst) (first lst))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (car lst) x) (car lst)]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n \
    \   [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (get_row\
    \ (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else\
    \ (cons (get_row (cdr lst) x) (cdr lst))]\n  ))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) (- x\
    \ 1))]))\n", "  (cond\n    [(empty? lst) (list '())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) (rest lst)]\n    [else (get_row (rest lst)\
    \ x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first\
    \ lst)]]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) (list '())]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ '()]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else\
    \ (get_row (rest lst) (first lst))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest\
    \ lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(equal? (car lst)\
    \ x) (cdr lst)]\n    [else (get_row (cdr lst) (- x))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) (rest lst)]\n    [else (get_row (rest\
    \ lst) (first lst))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) [(first lst)]]\n    [else (cons (get_row (rest lst) (first lst)) (cons\
    \ (first lst) (get_row (rest lst) (first lst))))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (cons (get_row\
    \ (cdr lst) x) (cdr lst))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (car lst) x) (car lst)]\n    [else (cons (get_row (cdr lst) x) (get_row (cdr\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first\
    \ lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row\
    \ (rest lst) x)]))\n", "  (cond\n    [(empty? lst) '()]\n    [(equal? (car lst)\
    \ x) lst]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ (list ())]\n    [(equal? (first lst) x) (list (cons (first lst) (get_row (rest\
    \ lst) x)))]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst)\
    \ (list ())]\n    [(equal? (first lst) x) (list (cons (first lst) (get_row (rest\
    \ lst) x)))]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ (list ())]\n    [(equal? (car lst) x) (list (cons (car lst) (get_row (cdr lst)\
    \ x)))]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [(equal? (car lst) x) (cdr lst)]\n    [else\
    \ (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest lst) x))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst) (first\
    \ lst)]]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) lst]\n    [else (cons (first lst) (get_row (rest lst) x))]))\n", " \
    \ (cond\n    [(empty? lst) (list ())]\n    [(equal? (first lst) x) (list (cons\
    \ (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst)]]\n\
    \    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else\
    \ (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) [(first lst) (first lst)]]\n    [else (get_row (rest lst) (-\
    \ x 1))]))\n", "  (cond\n    [(empty? lst) (list '())]\n    [(equal? (first lst)\
    \ x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row (rest\
    \ lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(= x 0) (cons (first\
    \ lst) (get_row (rest lst) 0))]\n    [else (cons (first lst) (get_row (rest lst)\
    \ (sub1 x)))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst)\
    \ x) (cdr lst)]\n    [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) (rest lst)]\n  \
    \  [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest\
    \ lst) (- x 1)))]))\n", "  (cond\n    [(empty? lst) '()]\n    [(equal? (first\
    \ lst) x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(= x (first lst)) (cons (first lst) (get_row (rest lst) x))]\n\
    \    [else (get_row (rest lst) x)]\n  ))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) (list ())]\n    [(equal? (first lst) x) (list (cons (first lst) (get_row\
    \ (rest lst) x)))]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) [(first lst) (first lst)]]\n    [else (append (get_row (rest lst) x)\
    \ (list (first lst) (first lst)))]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (car lst) x) (car lst)]\n    [else (get_row (cdr lst) x)]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) (rest lst)]\n  \
    \  [else (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) (rest lst)]\n    [else (get_row (rest\
    \ lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(= x (first lst))\
    \ (list (first lst) (second lst))]\n    [else (get_row (rest lst) (- x 1))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first lst)]]\n\
    \    [else (cons (get_row (rest lst) x) (get_row (rest lst) (first lst)))]))\n",
  "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (car lst) x) (list 0)]\n  \
    \  [else (get_row (cdr lst) (- x))]))\n", "  (cond\n    [(empty? lst) (list '())]\n\
    \    [(equal? (car lst) x) (list '())]\n    [else (append (list (list (car lst)\
    \ (- x 1))) (get_row (cdr lst) x))]))\n", "  (cond\n    [(empty? lst) '()]\n \
    \   [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest lst)\
    \ x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) [(first\
    \ lst) (first lst)]]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row\
    \ (rest lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal?\
    \ (first lst) x) lst]\n    [else (cons (first lst)\n                (get_row (rest\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x)\
    \ (car lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) '()]\n    [(equal? (car lst) x) (cdr lst)]\n    [else (get_row (cdr lst)\
    \ (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (car lst) x)\
    \ (car lst)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst)\
    \ (- x 1))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) lst]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst) (- x\
    \ 1))]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (car lst) x)\
    \ (list 0)]\n    [else (get_row (cdr lst) (- x 1))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (get_row (rest lst)\
    \ x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n\
    \    [else (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [(equal? (first lst) x) (rest lst)]\n    [else (get_row (rest\
    \ lst) (- x 1))]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first\
    \ lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row\
    \ (rest lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n    [(equal? (first\
    \ lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n    [else (get_row\
    \ (rest lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) lst]\n    [else (get_row (rest lst) (first lst))]))\n", "  (cond\n \
    \   [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first\
    \ lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst) (list ())]\n\
    \    [(equal? (first lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n\
    \    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n\
    \    [(equal? (car lst) x) (list (cons (car lst) (get_row (cdr lst) x)))]\n  \
    \  [else (get_row (cdr lst) x)]))\n", "  (cond\n    [(empty? lst) (list ())]\n\
    \    [(equal? (first lst) x) (list (cons (first lst) (get_row (rest lst) x)))]\n\
    \    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row (rest\
    \ lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first lst)\
    \ x) (rest lst)]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n   \
    \ [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (get_row\
    \ (rest lst) (first lst)) (cons (first lst) (get_row (rest lst) x)))]))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [(equal? (first lst) x) lst]\n    [else\
    \ (cons (first lst) (get_row (rest lst) x))]))\n", "  (cond\n    [(empty? lst)\
    \ (list ())]\n    [(equal? (first lst) x) (list (cons (first lst) (get_row (rest\
    \ lst) x)))]\n    [else (get_row (rest lst) x)]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [(equal? (first lst) x) lst]\n    [else (cons (first lst) (get_row\
    \ (rest lst) x))]))\n", "  (cond\n    [(empty? lst) empty]\n    [(equal? (first\
    \ lst) x) (rest lst)]\n    [else (get_row (rest lst) (- x 1))]))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [(equal? (car lst) x) (car lst)]\n    [else (get_row\
    \ (cdr lst) (- x 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
