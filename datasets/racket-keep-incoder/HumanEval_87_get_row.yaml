name: HumanEval_87_get_row
language: racket
prompt: "#lang racket\n\n;; You are given a 2 dimensional data, as a nested lists,\n\
  ;; which is similar to matrix, however, unlike matrices,\n;; each row may contain\
  \ a different number of columns.\n;; Given lst, and integer x, find integers x in\
  \ the list,\n;; and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
  ;; each tuple is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates\
  \ initially by rows in ascending order.\n;; Also, sort coordinates of the row by\
  \ columns in descending order.\n;; Examples:\n;; get_row([\n;; [1,2,3,4,5,6],\n\
  ;; [1,2,3,4,1,6],\n;; [1,2,3,4,5,1]\n;; ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5),\
  \ (2, 0)]\n;; get_row([], 1) == []\n;; get_row([[], [1], [1, 2, 3]], 3) == [(2,\
  \ 2)]\n(define (get_row lst x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list\
  \ 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list\
  \ 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list\
  \ (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))\n    (check-equal?\
  \ (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list\
  \ 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list\
  \ (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list\
  \ 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))\n    (check-equal? (candidate\
  \ (list ) 1) (list ))\n    (check-equal? (candidate (list (list 1)) 2) (list ))\n\
  \    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list\
  \ 2 2)))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
