name: HumanEval_148_bf
language: racket
prompt: "#lang racket\n\n;; There are eight planets in our solar system: the closerst\
  \ to the Sun \n;; is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n;; Uranus, Neptune.\n;; Write a function that takes two planet names\
  \ as strings planet1 and planet2. \n;; The function should return a tuple containing\
  \ all planets whose orbits are \n;; located between the orbit of planet1 and the\
  \ orbit of planet2, sorted by \n;; the proximity to the sun. \n;; The function should\
  \ return an empty tuple if planet1 or planet2\n;; are not correct planet names.\
  \ \n;; Examples\n;; bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
  ;; bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n;; bf(\"Mercury\", \"Uranus\") ==>\
  \ (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n(define (bf planet1\
  \ planet2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bf))\n\
  \    (check-equal? (candidate \"Jupiter\" \"Neptune\") (list \"Saturn\" \"Uranus\"\
  ))\n    (check-equal? (candidate \"Earth\" \"Mercury\") (list \"Venus\"))\n    (check-equal?\
  \ (candidate \"Mercury\" \"Uranus\") (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\"\
  \ \"Saturn\"))\n    (check-equal? (candidate \"Neptune\" \"Venus\") (list \"Earth\"\
  \ \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\"))\n    (check-equal? (candidate \"\
  Earth\" \"Earth\") (list ))\n    (check-equal? (candidate \"Mars\" \"Earth\") (list\
  \ ))\n    (check-equal? (candidate \"Jupiter\" \"Makemake\") (list ))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
