name: HumanEval_158_find_max
language: racket
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n;; find_max([\"name\"\
  , \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"game\"\
  ]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n(define\
  \ (find_max words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (let ([max (first words)])\n            (cond\n  \
    \            [(empty? (rest words)) max]\n              [(equal? (length words)\
    \ (length (rest words))) \"\"]\n              [else (let ([count (count-chars\
    \ words)])\n                      (cond\n                        [(> count max)\
    \ (find_max (rest words))]\n                        [else (find_max (rest words))])))])))])\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) max]\n              [(equal? (length words) (length max)) (find_max\
    \ (rest words))]\n              [else (let ([count (length max)])\n          \
    \            (cond\n                        [(empty? (rest words)) (cons max count)]\n\
    \                        [(equal? (length words) (length max)) (find_max (rest\
    \ words))]\n                        [else (let ([count (length max)])\n      \
    \                         (cond\n                                 [(empty? (rest\
    \ words)) (cons max count)]\n                                 [(equal? (length\
    \ words) (length max)) (find_max (rest words))]\n                            \
    \     [else (let ([count (length max)])\n                                    \
    \     (cond\n                                           [(empty? (rest words))\
    \ (cons max count)]\n                                           [(equal? (length\
    \ words) (length max)) (cons max count)]\n                                   \
    \        [else (let ([count (length max)])\n                                 \
    \                  (cond\n                                                   \
    \  [(empty? (rest words)) (cons max count)]\n                                \
    \                     [(equal? (length words) (length max)) (cons max count)]\n\
    \                                                     [else (let ([count (length\
    \ max)])\n                                                            (cond\n\
    \                                                              [(empty? (rest\
    \ words)) (cons max count)]\n                                                \
    \              [(equal? (length words) (length max)) (cons max count)]\n     \
    \                                                         [else (let ([count (length\
    \ max)])\n                                                                   \
    \ (cond\n                                                                    \
    \ [(empty? (rest words)) (cons max count)]\n                                 \
    \                                    [(equal? (length words) (length max)) (cons\
    \ max count)]\n                                                              \
    \       [else (let ([count (length max)])\n                                  \
    \                                        (cond\n                             \
    \                                               [(empty? (rest words)) (cons max\
    \ count)]\n                                                                  \
    \          [(equal? (length words) (length max)) (cons max count)]\n         \
    \                                                                   [else (let\
    \ ([count (length max)])\n                                                   \
    \                                   (cond\n                                  \
    \                                      [(empty? (rest words)) (cons max count)]\n\
    \                                                                        [(equal?\
    \ (length words) (length max)) (cons max count)]\n                           \
    \                                             [else (let ([count (length max)])\n\
    \                                                                            \
    \      (cond\n                                                               \
    \                     [ (empty? (rest words)) (cons max count)]\n            \
    \                                                                        [ (equal?\
    \ (length words) (length max)) (cons max count)]\n                           \
    \                                                         [else ", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (count (first words))\n             \
    \ (count (find_max (rest words))))\n     (first words)]\n    [else (find_max (rest\
    \ words))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first\
    \ words)) 1) (first words)]\n    [else (find_max (rest words))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [else (let ([max (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) max]\n              [(equal? (count max words) (count (rest words)))\
    \ (find_max (rest words))]\n              [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 0) \"\"\
    ]\n    [else (let ([count (count (first words))])\n            (cond\n       \
    \       [(> count (length (rest words))) \"\"]\n              [else (find_max\
    \ (rest words))]))]))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ Try it with the list `[\"aaaaaaa\", \"bb\" ,\"cc\"]`\n<|/ c |>\n<| c |>\nYes,\
    \ I see that now. Thanks for pointing that out. I've edited my answer to fix it.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've edited my question to make it\
    \ more clear.\n<|/ c |>\n<| c |>\nI've edited my answer to include a solution\
    \ that works with your new requirements.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I've edited my question to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n\
    This solution uses recursion and a helper function to count the characters in\
    \ a string. \n<code>", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (count\
    \ (first words)) 1)\n     (first words)]\n    [else\n     (cond\n       [(equal?\
    \ (count (first words)) 2)\n        (cond\n         [(equal? (count (second words))\
    \ 1)\n          (cond\n            [(equal? (count (third words)) 1)\n       \
    \      (cond\n              [(equal? (count (fourth words)) 1)\n             \
    \  (cond\n                 [(equal? (count (fifth words)) 1)\n               \
    \   (cond\n                   [(equal? (count (sixth words)) 1)\n            \
    \        (cond\n                     [(equal? (count (seventh words)) 1)\n   \
    \                   (cond\n                       [(equal? (count (eighth words))\
    \ 1)\n                        (cond\n                         [(equal? (count\
    \ (ninth words)) 1)\n                          (cond\n                       \
    \    [(equal? (count (tenth words)) 1)\n                            (cond\n  \
    \                           [(equal? (count (eleventh words)) 1)\n           \
    \                   (cond\n                               [(equal? (count (twelfth\
    \ words)) 1)\n                                (cond\n                        \
    \         [(equal? (count (thirteenth words)) 1)\n                           \
    \       (cond\n                                   [(equal? (count (fourteenth\
    \ words)) 1)\n                                    (cond\n                    \
    \                 [(equal? (count (fifteenth words)) 1)\n                    \
    \                  (cond\n                                       [(equal? (count\
    \ (sixteenth words)) 1)\n                                        (cond\n     \
    \                                    [(equal? (count (seventeenth words)) 1)\n\
    \                                          (cond\n                           \
    \                [(equal? (count (eighteenth words)) 1)\n                    \
    \                         (cond\n                                            \
    \  [(equal? (count (nineteenth words)) 1)\n                                  \
    \             (cond\n                                               [(equal? (count\
    \ (twentieth words)) 1)\n                                                (cond\n\
    \                                                 [(equal? (count (twenty-first\
    \ words)) 1)\n                                                  (cond\n      \
    \                                             [(equal? (count (twenty-second words))\
    \ 1)\n                                                    (cond\n            \
    \                                         [(equal? (count (twenty-third words))\
    \ 1)\n                                                      (cond\n          \
    \                                             [(equal? (count (twenty-fourth words))\
    \ 1)\n                                                        (cond\n        \
    \                                                 [(equal? (count (twenty-fifth\
    \ words)) 1)\n                                                          (cond\n\
    \                                                           [(equal? (count (twenty-sixth\
    \ words)) 1)\n                                                             (cond\n\
    \                                                             [(equal? (count\
    \ (twenty-seventh words)) 1)\n                                               \
    \               (cond\n                                                      \
    \         [(equal? (count (twenty-eighth words)) 1)\n                        \
    \                                         (cond\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) (length (rest words))) (reverse (first\
    \ words))]\n    [else (find_max (rest words))]))\n", "  (define (helper word count)\n\
    \    (cond\n      [(empty? words) \"\"]\n      [(equal? count 0) word]\n     \
    \ [(equal? (length word) (length count)) (helper (cdr word) (+ count 1))]\n  \
    \    [else (helper (cdr word) (+ count 1))]))\n  (helper words 0))\n", "  (define\
    \ (helper word count)\n    (cond\n      [(empty? words) \"\"]\n      [(equal?\
    \ count (length (string->list word)))\n       (cons word (helper word (+ count\
    \ 1)))]\n      [else\n       (helper (cdr word) (+ count 1))]))\n  (helper words\
    \ 0))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (let ([max (count-unique (first words))])\n      \
    \      (cond\n              [(> max 0) (find_max (rest words))]\n            \
    \  [(equal? max 0) (first words)]\n              [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) max]\n              [(equal? (length words) (length max)) (find_max\
    \ (rest words))]\n              [else (let ([count (length max)])\n          \
    \            (cond\n                        [(empty? (rest words)) (cons max count)]\n\
    \                        [(equal? (length words) (length max)) (cons (first words)\
    \ count)]\n                        [else (let ([count (length max)])\n       \
    \                        (cond\n                                 [(empty? (rest\
    \ words)) (cons max count)]\n                                 [(equal? (length\
    \ words) (length max)) (cons (first words) count)]\n                         \
    \        [(equal? (length words) (length count)) (find_max (rest words))]\n  \
    \                               [else (let ([count (length max)])\n          \
    \                               (cond\n                                      \
    \     [(empty? (rest words)) (cons max count)]\n                             \
    \              [(equal? (length words) (length max)) (cons (first words) count)]\n\
    \                                           [(equal? (length words) (length count))\
    \ (find_max (rest words))]\n                                           [else (let\
    \ ([count (length max)])\n                                                   (cond\n\
    \                                                     [(empty? (rest words)) (cons\
    \ max count)]\n                                                     [(equal? (length\
    \ words) (length max)) (cons (first words) count)]\n                         \
    \                            [(equal? (length words) (length count)) (find_max\
    \ (rest words))]\n                                                     [else (let\
    \ ([count (length max)])\n                                                   \
    \         (cond\n                                                            \
    \  [(empty? (rest words)) (cons max count)]\n                                \
    \                              [(equal? (length words) (length max)) (cons (first\
    \ words) count)]\n                                                           \
    \   [(equal? (length words) (length count)) (find_max (rest words))]\n       \
    \                                                       [else (let ([count (length\
    \ max)])\n                                                                   \
    \ (cond\n                                                                    \
    \  [(empty? (rest words)) (cons max count)]\n                                \
    \                                      [(equal? (length words) (length max)) (cons\
    \ (first words) count)]\n                                                    \
    \                  [(equal? (length words) (length count)) (find_max (rest words))]\n\
    \                                                                      [else (let\
    \ ([count (length max)])\n                                                   \
    \                           (cond\n                                          \
    \                                      [ (empty? (rest words)) (cons max count)]\n\
    \                                                                            \
    \    [ (equal? (length words) (length max)) (cons (", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (string-length words) 0) \"\"]\n    [else (let ([max (string-length\
    \ words)])\n            (let ([count 0])\n              (for ([i (in-range (length\
    \ words))])\n                (cond\n                  [(equal? (string-length\
    \ words) 0) \"\"]\n                  [(equal? (string-length words) 1) (cons words\
    \ (list i))]\n                  [else (let ([len (string-length words)])\n   \
    \                     (cond\n                          [(equal? len 1) (cons (substring\
    \ words (substring i 1) 1) (list i))]\n                          [(equal? len\
    \ 2) (cons (substring words (substring i 1) 1) (cons (substring words (substring\
    \ i 2) 1) (list i)))]\n                          [(equal? len 3) (cons (substring\
    \ words (substring i 1) 1) (cons (substring words (substring i 2) 1) (cons (substring\
    \ words (substring i 3) 1) (list i)))]\n                          [(equal? len\
    \ 4) (cons (substring words (substring i 1) 1) (cons (substring words (substring\
    \ i 2) 1) (cons (substring words (substring i 3) 1) (cons (substring words (substring\
    \ i 4) 1) (list i)))]\n                          [(equal? len 5) (cons (substring\
    \ words (substring i 1) 1) (cons (substring words (substring i 2) 1) (cons (substring\
    \ words (substring i 3) 1) (cons (substring words (substring i 4) 1) (cons (substring\
    \ words (substring i 5) 1) (list i)))]\n                          [(equal? len\
    \ 6) (cons (substring words (substring i 1) 1) (cons (substring words (substring\
    \ i 2) 1) (cons (substring words (substring i 3) 1) (cons (substring words (substring\
    \ i 4) 1) (cons (substring words (substring i 5) 1) (cons (substring words (substring\
    \ i 6) 1) (list i)))]\n                          [(equal? len 7) (cons (substring\
    \ words (substring i 1) 1) (cons (substring words (substring i 2) 1) (cons (substring\
    \ words (substring i 3) 1) (cons (substring words (substring i 4) 1) (cons (substring\
    \ words (substring i 5) 1) (cons (substring words (substring i 6) 1) (cons (substring\
    \ words (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words))\
    \ (length (last words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) max]\n              [(equal? (length words) (length (rest words)))\
    \ \"\"]\n              [(equal? (length words) (length (rest words))) (find_max\
    \ (rest words))]\n              [else (let ([max (find_max (rest words))])\n \
    \                     (cond\n                        [(empty? max) max]\n    \
    \                    [(equal? (length words) (length (rest words))) max]\n   \
    \                     [(equal? (length words) (length (rest words))) (find_max\
    \ (rest words))]\n                        [else (let ([max (find_max (rest words))])\n\
    \                                (cond\n                                  [(empty?\
    \ max) max]\n                                  [(equal? (length words) (length\
    \ (rest words))) max]\n                                  [else (find_max (rest\
    \ words))])])])])])]))))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (length words) 1) (first words)]\n    [else (let ([max (first words)])\n   \
    \         (cond\n              [(empty? (rest words)) max]\n              [(equal?\
    \ (length words) (length (rest words))) (find_max (rest words))]\n           \
    \   [else (let ([word (find_max (rest words))])\n                      (cond\n\
    \                        [(empty? word) max]\n                        [(equal?\
    \ (length word) (length (rest word))) word]\n                        [else (cons\
    \ word (find_max (rest words))))]\n                      ))]\n            ))]\n\
    \   ))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (let ([max (first words)])\n            (cond\n  \
    \            [(empty? (rest words)) (first words)]\n              [(equal? (length\
    \ words) 1) (first words)]\n              [(equal? (length words) 2) (cons (first\
    \ words) (find_max (rest words)))]\n              [(equal? (length words) 3) (cons\
    \ (first words) (find_max (rest words))\n                                    \
    \          (cons (second words) (find_max (rest words))))]\n              [(equal?\
    \ (length words) 4) (cons (first words) (find_max (rest words))\n            \
    \                                  (cons (second words) (find_max (rest words))\n\
    \                                              (cons (third words) (find_max (rest\
    \ words))))]\n              [(equal? (length words) 5) (cons (first words) (find_max\
    \ (rest words))\n                                              (cons (second words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (third words) (find_max (rest words))\n                                    \
    \          (cons (fourth words) (find_max (rest words)))))]\n              [(equal?\
    \ (length words) 6) (cons (first words) (find_max (rest words))\n            \
    \                                  (cons (second words) (find_max (rest words))\n\
    \                                              (cons (third words) (find_max (rest\
    \ words))\n                                              (cons (fourth words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (fifth words) (find_max (rest words)))))]\n              [(equal? (length words)\
    \ 7) (cons (first words) (find_max (rest words))\n                           \
    \                   (cons (second words) (find_max (rest words))\n           \
    \                                   (cons (third words) (find_max (rest words))\n\
    \                                              (cons (fourth words) (find_max\
    \ (rest words))\n                                              (cons (fifth words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (sixth words) (find_max (rest words)))))]\n              [(equal? (length words)\
    \ 8) (cons (first words) (find_max (rest words))\n                           \
    \                   (cons (second words) (find_max (rest words))\n           \
    \                                   (cons (third words) (find_max (rest words))\n\
    \                                              (cons (fourth words) (find_max\
    \ (rest words))\n                                              (cons (fifth words)\
    \ (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first\
    \ words)]\n    [(equal? (length words) 2) (first words)]\n    [else (let ([max\
    \ (first words)])\n            (cond\n              [(equal? (length words) (length\
    \ max)) max]\n              [(equal? (length words) (length max)) (first words)]\n\
    \              [else (let ([count 0])\n                       (for [word words]\n\
    \                           (cond\n                             [(equal? (length\
    \ word) (length word)) word]\n                             [(equal? (length word)\
    \ (length word)) (first words)]\n                             [else (let ([count\
    \ (+ count 1)])\n                                     (cond\n                \
    \                       [(equal? count max) (cons word max)]\n               \
    \                        [else (cons word (cons count max))]))]))]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count-unique (first words))])\n             (cond\n   \
    \           [(> max 0) (find_max (rest words))]\n              [(equal? max 0)\
    \ \"\"]\n              [else (find_max (rest words))])))]))\n", "  (cond\n   \
    \ [(empty? words) \"\"]\n    [(equal? (string-length words) 1) (first words)]\n\
    \    [else (let ([max (string-length words)])\n            (cond\n           \
    \   [(equal? (string-length words) max) (first words)]\n              [(equal?\
    \ (string-length words) (- max 1)) (first words)]\n              [else (let ([max\
    \ (string-length words)])\n                      (cond\n                     \
    \   [(equal? (string-length words) max) (first words)]\n                     \
    \   [(equal? (string-length words) (- max 1)) (first words)]\n               \
    \         [else (find_max (rest words))])))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n\
    \    [else\n     (let ([max (length (first words))])\n       (cond\n         [(equal?\
    \ (length (first words)) max)\n          (find_max (rest words))]\n         [else\n\
    \          (let ([count (length (filter (lambda (x) (equal? (length x) max)) words))])\n\
    \            (cond\n              [(equal? count 0)\n               (find_max\
    \ (rest words))]\n              [else\n               (cons (first words) (find_max\
    \ (rest words)))])))])))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (string-length words) 0) \"\"]\n    [else (let ([max (string-length words)])\n\
    \            (let ([counts (make-hash (hash-table-size max))])\n             \
    \ (for ([i (in-range (hash-table-size max))])\n                (hash-table-ref\
    \ counts (hash-table-key words i))\n                (hash-table-ref counts (hash-table-key\
    \ words i) (+ 1 1)))\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ counts)\n              (hash-table-count counts)\n              (hash-table-sort\
    \ counts)\n              (hash-table-keys counts)\n              (hash-table-values\
    \ count", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [(equal? (length words) 2) (first words)]\n    [else (let\
    \ ([max (length words)])\n            (let ([chars (count-chars (first words)\
    \ (first words))])\n              (cond\n                [(chars <= max) (first\
    \ words)]\n                [else (find_max (rest words))])))])))\n", "  (define\
    \ (count-unique str)\n    (define (count-unique-helper str count)\n      (cond\
    \ [(empty? str) count]\n            [(equal? (first str) (rest str)) (count-unique-helper\
    \ (rest str) (add1 count))])\n    (count-unique-helper str 0))\n  (define (max-count\
    \ lst)\n    (define (max-count-helper lst count)\n      (cond [(empty? lst) count]\n\
    \            [(> (count-unique (first lst)) (max-count-helper (rest lst) (add1\
    \ count)))\n             (max-count-helper (rest lst) count)]\n            [else\
    \ (max-count-helper (rest lst) count)]))\n  (max-count-helper lst 0))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [(equal? (length words) 2) (first words)]\n    [else (let ([max (first words)])\n\
    \             (cond\n               [(equal? (count-unique (first words)) max)\
    \ (find_max (rest words))]\n               [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (cons (first words) (find_max (rest words)))]\n\
    \    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n    [else\n\
    \     (let ([chars (count-chars (first words) (first words))])\n       (cond\n\
    \         [(> chars 1) \"\"]\n         [(equal? (count-chars (first words) (first\
    \ words)) 0)\n          (find_max (rest words))]\n         [else\n          (cons\
    \ (first words) (find_max (rest words))))]))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) 0) \"\"]\n    [else (let ([chars\
    \ (count-chars (first words) (first words))])\n            (cond\n           \
    \   [(> chars 1) (find_max (rest words))]\n              [(equal? chars 1) (first\
    \ words)]\n              [else (find_max (rest words))])))]))\n", "  (cond\n \
    \   [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n   \
    \ [else (let ([max (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) max]\n              [(equal? (length words) (length (rest words)))\
    \ (find_max (rest words))]\n              [else (let ([count (length words)])\n\
    \                       (cond\n                         [(empty? (rest words))\
    \ max]\n                         [(equal? (length words) (length (rest words)))\
    \ (find_max (rest words))]\n                         [else (let ([max (first words)])\n\
    \                                 (cond\n                                   [(empty?\
    \ (rest words)) max]\n                                   [(equal? (length words)\
    \ (length (rest words))) (find_max (rest words))]\n                          \
    \         [else (let ([count (length words)])\n                              \
    \             (cond\n                                             [(empty? (rest\
    \ words)) max]\n                                             [(equal? (length\
    \ words) (length (rest words))) (find_max (rest words))]\n                   \
    \                          [else (let ([max (first words)])\n                \
    \                                     (cond\n                                \
    \                       [(empty? (rest words)) max]\n                        \
    \                               [(equal? (length words) (length (rest words)))\
    \ (find_max (rest words))]\n                                                 \
    \      [else (let ([count (length words)])\n                                 \
    \                              (cond\n                                       \
    \                        [(empty? (rest words)) max]\n                       \
    \                                        [(equal? (length words) (length (rest\
    \ words))) (find_max (rest words))]\n                                        \
    \                       [else (let ([max (first words)])\n                   \
    \                                                      (cond\n               \
    \                                                            [(empty? (rest words))\
    \ max]\n                                                                     \
    \      [(equal? (length words) (length (rest words))) (find_max (rest words))]\n\
    \                                                                           [else\
    \ (let ([count (length words)])\n                                            \
    \                                       (cond\n                              \
    \                                                       [(empty? (rest words))\
    \ max]\n                                                                     \
    \                [(equal? (length words) (length (rest words))) (find_max (rest\
    \ words))]\n                                                                 \
    \                    [else (let ([max (first words)])\n                      \
    \                                                                       (cond\n\
    \                                                                            \
    \                   [(empty? (rest words)) max]\n                            \
    \                                                                   [(equal? (length\
    \ words) (length (rest words))) (find_max (rest words))]\n                   \
    \                                                                            [else\
    \ (let ([count (length words)])\n                                            \
    \                                                             (cond\n        \
    \                                                                            \
    \                       [(empty? (rest words)) max]\n                        \
    \                                                                            \
    \       [(equal? (length words) (length (rest words))) (find_max", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (string-length words) 0) \"\"]\n    [(equal?\
    \ (string-length words) 1) (first words)]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ (first words) (first words))])\n              (cond\n                [(chars\
    \ > max) (first words)]\n                [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n             (cond\n               [(equal?\
    \ (length words) 1) \"\"]\n               [(equal? (length words) 2) (first words)]\n\
    \               [(equal? (length words) 3) (first words)]\n               [(equal?\
    \ (length words) 4) (first words)]\n               [(equal? (length words) 5)\
    \ (first words)]\n               [(equal? (length words) 6) (first words)]\n \
    \              [(equal? (length words) 7) (first words)]\n               [(equal?\
    \ (length words) 8) (first words)]\n               [(equal? (length words) 9)\
    \ (first words)]\n               [(equal? (length words) 10) (first words)]\n\
    \               [(equal? (length words) 11) (first words)]\n               [(equal?\
    \ (length words) 12) (first words)]\n               [(equal? (length words) 13)\
    \ (first words)]\n               [(equal? (length words) 14) (first words)]\n\
    \               [(equal? (length words) 15) (first words)]\n               [(equal?\
    \ (length words) 16) (first words)]\n               [(equal? (length words) 17)\
    \ (first words)]\n               [(equal? (length words) 18) (first words)]\n\
    \               [(equal? (length words) 19) (first words)]\n               [(equal?\
    \ (length words) 20) (first words)]\n               [(equal? (length words) 21)\
    \ (first words)]\n               [(equal? (length words) 22) (first words)]\n\
    \               [(equal? (length words) 23) (first words)]\n               [(equal?\
    \ (length words) 24) (first words)]\n               [(equal? (length words) 25)\
    \ (first words)]\n               [(equal? (length words) 26) (first words)]\n\
    \               [(equal? (length words) 27) (first words)]\n               [(equal?\
    \ (length words) 28) (first words)]\n               [(equal? (length words) 29)\
    \ (first words)]\n               [(equal? (length words) 30) (first words)]\n\
    \               [(equal? (length words) 31) (first words)]\n               [(equal?\
    \ (length words) 32) (first words)]\n               [(equal? (length words) 33)\
    \ (first words)]\n               [(equal? (length words) 34) (first words)]\n\
    \               [(equal? (length words) 35) (first words)]\n               [(equal?\
    \ (length words) 36) (first words)]\n               [(equal? (length word", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (length words) 1) \"\"]\n              [(equal? (length words) 2) (first words)]\n\
    \              [(equal? (length words) 3) (first words)]\n              [(equal?\
    \ (length words) 4) (first words)]\n              [(equal? (length words) 5) (first\
    \ words)]\n              [(equal? (length words) 6) (first words)]\n         \
    \     [(equal? (length words) 7) (first words)]\n              [(equal? (length\
    \ words) 8) (first words)]\n              [(equal? (length words) 9) (first words)]\n\
    \              [(equal? (length words) 10) (first words)]\n              [(equal?\
    \ (length words) 11) (first words)]\n              [(equal? (length words) 12)\
    \ (first words)]\n              [(equal? (length words) 13) (first words)]\n \
    \             [(equal? (length words) 14) (first words)]\n              [(equal?\
    \ (length words) 15) (first words)]\n              [(equal? (length words) 16)\
    \ (first words)]\n              [(equal? (length words) 17) (first words)]\n \
    \             [(equal? (length words) 18) (first words)]\n              [(equal?\
    \ (length words) 19) (first words)]\n              [(equal? (length words) 20)\
    \ (first words)]\n              [(equal? (length words) 21) (first words)]\n \
    \             [(equal? (length words) 22) (first words)]\n              [(equal?\
    \ (length words) 23) (first words)]\n              [(equal? (length words) 24)\
    \ (first words)]\n              [(equal? (length words) 25) (first words)]\n \
    \             [(equal? (length words) 26) (first words)]\n              [(equal?\
    \ (length words) 27) (first words)]\n              [(equal? (length words) 28)\
    \ (first words)]\n              [(equal? (length words) 29) (first words)]\n \
    \             [(equal? (length words) 30) (first words)]\n              [(equal?\
    \ (length words) 31) (first words)]\n              [(equal? (length words) 32)\
    \ (first words)]\n              [(equal? (length words) 33) (first words)]\n \
    \             [(equal? (length words) 34) (first words)]\n              [(equal?\
    \ (length words) 35) (first words)]\n              [(equal? (length words) 36)\
    \ (first words)]\n              [(equal? (length word", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (string-length words) 0) \"\"]\n    [else (let ([max\
    \ (string-length words)])\n            (let ([chars (string-chars (string-join\
    \ words))])\n              (cond\n                [(char-set? chars) (find_max\
    \ words)]\n                [else (cond [(< max max) (find_max words)]\n      \
    \                     [(> max max) (cons (first chars) (find_max (rest words)))]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([word (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) word]\n              [(equal? (length word) (length words))\n\
    \               (find_max (rest words))]\n              [else (let ([count (length\
    \ word)])\n                       (cond\n                         [(> count (length\
    \ words))\n                           (find_max (rest words))]\n             \
    \            [(equal? (length word) (length words))\n                        \
    \   (word)]\n                         [else (let ([chars (string-chars (first\
    \ word)))\n                                  (unique_chars (remove-duplicates\
    \ chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n                                  (unique_chars (remove-duplicates\
    \ unique_chars))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (count\
    \ (first words)) 1)\n     (first words)]\n    [else\n     (cond\n       [(equal?\
    \ (count (first words)) 2)\n        (cond\n         [(equal? (count (second words))\
    \ 1)\n          (cond\n            [(equal? (count (third words)) 1)\n       \
    \      (cond\n              [(equal? (count (fourth words)) 1)\n             \
    \  (cond\n                 [(equal? (count (fifth words)) 1)\n               \
    \    (cond\n                     [(equal? (count (sixth words)) 1)\n         \
    \              (cond\n                         [(equal? (count (seventh words))\
    \ 1)\n                           (cond\n                             [(equal?\
    \ (count (eigth words)) 1)\n                               (cond\n           \
    \                      [(equal? (count (ninth words)) 1)\n                   \
    \                (cond\n                                     [(equal? (count (tenth\
    \ words)) 1)\n                                       (cond\n                 \
    \                        [(equal? (count (eleventh words)) 1)\n              \
    \                             (cond\n                                        \
    \     [(equal? (count (twelfth words)) 1)\n                                  \
    \             (cond\n                                                 [(equal?\
    \ (count (thirteenth words)) 1)\n                                            \
    \       (cond\n                                                     [(equal? (count\
    \ (fourteenth words)) 1)\n                                                   \
    \   (cond\n                                                        [(equal? (count\
    \ (fifteenth words)) 1)\n                                                    \
    \     (cond\n                                                           [(equal?\
    \ (count (sixteenth words)) 1)\n                                             \
    \               (cond\n                                                      \
    \         [(equal? (count (seventeenth words)) 1)\n                          \
    \                                       (cond\n                              \
    \                                     [(equal? (count (eighteenth words)) 1)\n\
    \                                                                     (cond\n\
    \                                                                     [(equal?\
    \ (count (nineteenth words)) 1)\n                                            \
    \                           (cond\n                                          \
    \                               [(equal? (count (twentieth words)) 1)\n      \
    \                                                                     (cond\n\
    \                                                                            \
    \ [(equal? (count (twenty-first words)) 1)\n                                 \
    \                                              (cond\n                       \
    \                                                          [(equal? (count (twenty-second\
    \ words)) 1)\n                                                               \
    \                    (cond\n                                                 \
    \                                  [(equal? (count (twenty-third words)) 1)\n\
    \                                                                            \
    \        (cond\n                                                             \
    \                         [(equal? (count (twenty-fourth words)) 1)\n        \
    \                                                                            \
    \   (cond\n                                                                  \
    \                       [(equal? (count (twenty-fifth words)) 1)\n           \
    \                                                                            \
    \    (cond\n                                                                 \
    \                            [(equal? (count (twenty-sixth words)) 1)\n      \
    \                                                                            \
    \             (cond\n                                                        \
    \                                         [(equal? (count (twenty-seventh words))\
    \ 1)\n                                                                       \
    \                            (cond", "  (cond\n    [(empty? words) \"\"]\n   \
    \ [(equal? (length (first words)) (length (first words))) \"\"]\n    [else (let\
    \ ([max (first words)])\n            (cond\n              [(empty? (rest words))\
    \ max]\n              [(equal? (length (first words)) (length (first words)))\
    \ (cons max words)]\n              [else (find_max (rest words))])))]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count-unique (first words))])\n            (cond\n    \
    \          [(> max 0) (find_max (rest words))]\n              [else (first words)])]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length\
    \ (last words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count (first words))])\n            (cond\n           \
    \   [(> max 0) (find_max (rest words))]\n              [(= max 0) \"\"]\n    \
    \          [else (find_max (rest words))])))]))\n", "  (define (helper word count)\n\
    \    (cond\n      [(empty? words) \"\"]\n      [(equal? count (length word)) word]\n\
    \      [(equal? (length word) (length words))\n       (helper (rest word) (add1\
    \ count))\n       ]\n      [else (helper (rest word) (add1 count))]))\n  (helper\
    \ words 0))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first\
    \ words)) 0)\n     (find_max (rest words))]\n    [(equal? (length (first words))\
    \ 1)\n     (first words)]\n    [else\n     (let ([max (length (first words))\n\
    \           counts (make-hash (hash-table (hash-table-size max)))])\n       (for\
    \ ([i (in-range (length words))])\n         (hash-set! counts (substring (first\
    \ words) i i) 1))\n       (hash-max counts (lambda (key value)\n             \
    \            (cond\n                          [(< value max) key]\n          \
    \                [else value]))]))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [(equal? (length words) 2)\
    \ (first words)]\n    [else (let ([max (length words)])\n            (let ([counts\
    \ (make-hash)])\n              (for ([i (in-range (length words))])\n        \
    \        (hash-set! counts (substring words (+ i 1) (+ i max)) (+ 1 (hash-ref\
    \ counts (substring words (+ i 1) (+ i max)))))\n              (hash-keys counts)\n\
    \              (hash-max counts))))]))\n", "  (cond\n    [(empty? words) \"\"\
    ]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max (count-unique\
    \ (first words))])\n            (cond\n              [(> max 0)\n            \
    \   (find_max (rest words))]\n              [else (first words)])])]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 1) (first\
    \ words)]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (cond\n    \
    \        [(equal? (count-unique (first words)) (count-unique (second words)))\
    \ (first words)]\n            [else (cond\n                    [(equal? (count-unique\
    \ (first words)) (count-unique (third words))) (second words)]\n             \
    \       [else (cond\n                            [(equal? (count-unique (first\
    \ words)) (count-unique (fourth words))) (third words)]\n                    \
    \        [else (cond\n                                    [(equal? (count-unique\
    \ (first words)) (count-unique (fifth words))) (fourth words)]\n             \
    \                       [else (cond\n                                        \
    \    [(equal? (count-unique (first words)) (count-unique (sixth words))) (fifth\
    \ words)]\n                                            [else (cond\n         \
    \                                           [(equal? (count-unique (first words))\
    \ (count-unique (seventh words))) (sixth words)]\n                           \
    \                         [else (cond\n                                      \
    \                      [(equal? (count-unique (first words)) (count-unique (eigth\
    \ words))) (eigth words)]\n                                                  \
    \          [else (cond\n                                                     \
    \               [(equal? (count-unique (first words)) (count-unique (ninth words)))\
    \ (ninth words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (count-unique (first words)) (count-unique (tenth\
    \ words))) (tenth words)]\n                                                  \
    \                          [else (cond\n                                     \
    \                                               [(equal? (count-unique (first\
    \ words)) (count-unique (eleventh words))) (eleventh words)]\n               \
    \                                                                     [else (cond\n\
    \                                                                            [(equal?\
    \ (count-unique (first words)) (count-unique (twelfth words))) (twelfth words)]\n\
    \                                                                            [else\
    \ (cond\n                                                                    \
    \                [(equal? (count-unique (first words)) (count-unique (thirteenth\
    \ words))) (thirteenth words)]\n                                             \
    \                                       [else (cond\n                        \
    \                                                    [(equal? (count-unique (first\
    \ words)) (count-unique (fourteenth words))) (fourteenth words)]\n           \
    \                                                                 [else (cond\n\
    \                                                                            \
    \        [(equal? (count-unique (first words)) (count-unique (fifteenth words)))\
    \ (fifteenth words)]\n                                                       \
    \                             [else (cond\n                                  \
    \                                          [(equal? (count-unique (first words))\
    \ (count-unique (sixteenth words))) (sixteenth words)]\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (length words)])\n            (let ([chars (count-chars words)])\n   \
    \           (cond\n                [(chars > max) words]\n                [else\
    \ (cons (first words) (find_max (rest words))))]))]))))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) (length (rest words))) (first\
    \ words)]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length words)\
    \ 2) (first words)]\n    [else (let ([max (length words)])\n            (let ([chars\
    \ (count-chars (first words) (first words))])\n              (cond\n         \
    \       [(chars > max) (first words)]\n                [else (find_max (rest words))])))])))\n",
  "  (define (helper word count)\n    (cond\n      [(empty? words) \"\"]\n      [(equal?\
    \ count (length word)) word]\n      [(equal? (length word) (- count (length word)))\
    \ \"\"]\n      [else (cons (car word) (helper (cdr word) (+ count 1)))]))\n  (helper\
    \ words 0))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words)\
    \ 1) (first words)]\n    [else (let ([max (length words)])\n            (let ([unique\
    \ (count-unique (map first words))])\n              (cond\n                [(>\
    \ max unique) \"\"]\n                [else (first words)])))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [(equal? (length words) 2) (first words)]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ words)])\n              (cond\n                [(chars > max) (first words)]\n\
    \                [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (count-unique (first words))])\n            (cond\n              [(> max\
    \ 0)\n               (find_max (rest words))]\n              [else (first words)])]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([count 0])\n       \
    \       (for ([i (in-range (length words))])\n                (if (equal? (count\
    \ (substring words (+ i 1) (length words))) 0)\n                    (set! count\
    \ (+ count 1))\n                    (set! max (max max))\n                   \
    \ (set! count (+ count 1))\n                    (set! i (+ i 1))))\n         \
    \     (cond [(equal? max count) \"\"]\n                    [else (substring words\
    \ (+ i 1) (+ max 1))])))])))\n", "  (define (helper word count)\n    (cond [(empty?\
    \ word) (if (= count 0) \"\" word)]\n          [(char-count (first word)) (helper\
    \ (rest word) (+ count 1))]\n          [else (helper (rest word) count)]\n   \
    \       ))\n  (helper words 0))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (length (first words)) (length (rest words))) (reverse (first words))]\n   \
    \ [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n \
    \   [(equal? (length (first words)) (length (rest words))) (reverse (first words))]\n\
    \    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (string-length words) 1)\n     (first words)]\n    [else\n     (let\
    \ ([max (string-length words)])\n       (cond\n         [(equal? (string-length\
    \ words) 1)\n          (first words)]\n         [(equal? (string-length words)\
    \ max)\n          (first words)]\n         [else\n          (let ([chars (string-set!\
    \ words #(\"\" \"\" \"\") #(\"\" \"\" \"\"))])\n            (cond\n          \
    \    [(empty? chars)\n               (first words)]\n              [(equal? (string-length\
    \ chars) max)\n               (first words)]\n              [else\n          \
    \     (let ([chars (string-set! chars #(\"\" \"\" \"\") #(\"\" \"\" \"\"))])\n\
    \                 (cond\n                   [(empty? chars)\n                \
    \    (first words)]\n                   [(equal? (string-length chars) max)\n\
    \                    (first words)]\n                   [else\n              \
    \      (let ([chars (string-set! chars #(\"\" \"\" \"\") #(\"\" \"\" \"\"))])\n\
    \                      (cond\n                        [(empty? chars)\n      \
    \                   (first words)]\n                        [(equal? (string-length\
    \ chars) max)\n                         (first words)]\n                     \
    \   [else\n                         (let ([chars (string-set! chars #(\"\" \"\"\
    \ \"\") #(\"\" \"\" \"\"))])\n                           (cond\n             \
    \                [(empty? chars)\n                              (first words)]\n\
    \                             [(equal? (string-length chars) max)\n          \
    \                    (first words)]\n                             [else\n    \
    \                          (let ([chars (string-set! chars #(\"\" \"\" \"\") #(\"\
    \" \"\" \"\"))])\n                                (cond\n                    \
    \              [(empty? chars)\n                                   (first words)]\n\
    \                                  [(equal? (string-length chars) max)\n     \
    \                              (first words)]\n                              \
    \    [else\n                                   (let ([chars (string-set! chars\
    \ #(\"\" \"\" \"\") #(\"\" \"\" \"\"))])\n                                   \
    \  (cond\n                                       [(empty? chars)\n           \
    \                             (first words)]\n                               \
    \        [(equal? (string-length chars) max)\n                               \
    \         (first words)]\n                                       [else\n     \
    \                                   (let ([chars (string-set! chars #(\"\" \"\"\
    \ \"\") #(\"\" \"\" \"\"))])\n                                          (cond\n\
    \                                            [(empty? chars)\n               \
    \                             (first words)]\n                               \
    \             [(equal? (string-length chars) max)\n                          \
    \                  (first words)]\n                                          \
    \  [else\n                                             (let ([chars (string-set!\
    \ chars #(\"\" \"\" \"\") #(\"\" \"\" ", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (count-unique\
    \ (first words))])\n            (cond\n              [(> max 0)\n            \
    \   (find_max (rest words))]\n              [(= max 0)\n               (find_max\
    \ (rest words))]\n              [else (find_max (rest words))])))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length (first words)) 1) (first words)]\n\
    \    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (string-length words) 0) \"\"]\n    [else (let ([max (string-length\
    \ words)])\n            (cond\n              [(equal? (string-length words) max)\
    \ (find_max (rest words))]\n              [(equal? (string-length words) (+ max\
    \ 1)) (first words)]\n              [else (find_max (rest words))])))]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(empty?\
    \ (rest words)) (first words)]\n              [(equal? (length words) 1) (first\
    \ words)]\n              [(equal? (length words) 2) (cons (first words) (find_max\
    \ (rest words)))]\n              [(equal? (length words) 3) (cons (first words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (second words) (find_max (rest words))))]\n              [(equal? (length words)\
    \ 4) (cons (first words) (find_max (rest words))\n                           \
    \                   (cons (second words) (find_max (rest words))\n           \
    \                                   (cons (third words) (find_max (rest words))))]\n\
    \              [(equal? (length words) 5) (cons (first words) (find_max (rest\
    \ words))\n                                              (cons (second words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (third words) (find_max (rest words))\n                                    \
    \          (cons (fourth words) (find_max (rest words)))))]\n              [(equal?\
    \ (length words) 6) (cons (first words) (find_max (rest words))\n            \
    \                                  (cons (second words) (find_max (rest words))\n\
    \                                              (cons (third words) (find_max (rest\
    \ words))\n                                              (cons (fourth words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (fifth words) (find_max (rest words)))))]\n              [(equal? (length words)\
    \ 7) (cons (first words) (find_max (rest words))\n                           \
    \                   (cons (second words) (find_max (rest words))\n           \
    \                                   (cons (third words) (find_max (rest words))\n\
    \                                              (cons (fourth words) (find_max\
    \ (rest words))\n                                              (cons (fifth words)\
    \ (find_max (rest words))\n                                              (cons\
    \ (sixth words) (find_max (rest words)))))]\n              [(equal? (length words)\
    \ 8) (cons (first words) (find_max (rest words))\n                           \
    \                   (cons (second words) (find_max (rest words))\n           \
    \                                   (cons (third words) (find_max (rest words))\n\
    \                                              (cons (fourth words) (find_max\
    \ (rest words))\n                                              (cons (fifth words)\
    \ (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first\
    \ words)]\n    [(equal? (length words) 2) (first words)]\n    [else (let ([max\
    \ (length words)])\n            (let ([chars (count-chars (first words) (first\
    \ words))])\n              (cond\n                [(chars > max) (first words)]\n\
    \                [else (find_max (rest words))])))])))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) (length (last words))) (reverse\
    \ (first words))]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length\
    \ words) 2) (first words)]\n    [else (let ([max (length words)])\n          \
    \   (let ([counts (make-hash)])\n               (for [word words]\n          \
    \       (hash-set! counts (string-length word) (incf (hash-ref counts (string-length\
    \ word))))\n                 (when (> max count)\n                   (set! count\
    \ max)\n                   (set! word (first words))\n                   (return-from\
    \ find_max (first words)))))]))))\n", "  (cond\n    [(empty? words) \"\"]\n  \
    \  [(equal? (length (first words)) 0) \"\"]\n    [(equal? (length (first words))\
    \ 1) (first words)]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n\
    \    [(equal? (length (first words)) 1)\n     (first words)]\n    [else\n    \
    \ (let ([max (length (first words))])\n       (cond\n         [(equal? (length\
    \ words) 1)\n          (first words)]\n         [else\n          (let ([chars\
    \ (map #(hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref (hash-ref\
    \ (hash-ref (hash-", "  (define (helper word count)\n    (cond\n      [(empty?\
    \ words) \"\"]\n      [(equal? count (length word)) word]\n      [(equal? (length\
    \ word) (add1 (length words))) (helper (cdr word) count)]\n      [else (helper\
    \ (cons (car word) word) count)]))\n  (helper words 0))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n\
    \    [else\n     (let ([max (length (first words))])\n       (cond\n         [(equal?\
    \ (length (first words)) max)\n          (find_max (rest words))]\n         [else\n\
    \          (let ([count (length (first words))])\n            (cond\n        \
    \      [(equal? (+ count (length (first words))) max)\n               (find_max\
    \ (rest words))]\n              [else\n               (let ([max (+ count (length\
    \ (first words))])\n                     (words (append (list (first words))\n\
    \                                    (list (substring words (+ 0 (length words))\n\
    \                                                (+ 0 (length words))))))\n  \
    \                 (cond\n                     [(equal? (length (first words))\
    \ max)\n                      (find_max (rest words))]\n                     [else\n\
    \                      (find_max (rest words))])))])))])))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length\
    \ words) 2) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (let ([max-count 0])\n              (for ([i (in-range (length words))])\n\
    \                (let ([word (first words)])\n                  (cond\n      \
    \              [(equal? (length word) i) word]\n                    [else (cond\n\
    \                          [(equal? (length word) max) (cons word (list max-count\
    \ i))]\n                          [else (cons word (list max-count i))]))]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (first words)]\n    [else (let ([max (length words)])\n\
    \            (let ([counts (make-hash)])\n              (for ([i (in-range (length\
    \ words))])\n                (hash-set! counts (substring (first words) i i) (in-hash\
    \ counts i)))\n              (let ([words (hash-keys counts)])\n             \
    \   (cond\n                  [(empty? words) \"\"]\n                  [(equal?\
    \ (length words) 1) (first words)]\n                  [(equal? (length words)\
    \ max) (first words)]\n                  [else (let ([max (length words)])\n \
    \                       (let ([counts (make-hash)])\n                        \
    \  (for ([i (in-range (length words))])\n                            (hash-set!\
    \ counts (substring (first words) i i) (in-hash counts i)))\n                \
    \          (let ([words (hash-keys counts)])\n                            (cond\n\
    \                              [(empty? words) \"\"]\n                       \
    \       [(equal? (length words) 1) (first words)]\n                          \
    \    [(equal? (length words) max) (first words)]\n                           \
    \   [else (let ([max (length words)])\n                                      (let\
    \ ([counts (make-hash)])\n                                        (for ([i (in-range\
    \ (length words))])\n                                          (hash-set! counts\
    \ (substring (first words) i i) (in-hash counts i)))\n                       \
    \                 (let ([words (hash-keys counts)])\n                        \
    \                  (cond\n                                            [(empty?\
    \ words) \"\"]\n                                            [(equal? (length words)\
    \ 1) (first words)]\n                                            [(equal? (length\
    \ words) max) (first words)]\n                                            [else\
    \ (let ([max (length words)])\n                                              \
    \      (let ([counts (make-hash)])\n                                         \
    \             (for ([i (in-range (length words))])\n                         \
    \                               (hash-set! counts (substring (first words) i i)\
    \ (in-hash counts i)))\n                                                     \
    \ (let ([words (hash-keys counts)])\n                                        \
    \                (cond\n                                                     \
    \     [(empty? words) \"\"]\n                                                \
    \          [(equal? (length words) 1) (first words)]\n                       \
    \                                   [(equal? (length words) max) (first words)]\n\
    \                                                          [else (let ([max (length\
    \ words)])\n                                                                (let\
    \ ([counts (make-hash)])\n                                                   \
    \               (for ([i (in-range (length words))])\n                       \
    \                                             (hash-set! count", "  (cond\n  \
    \  [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else\
    \ (let ([max (count-unique (first words))])\n            (cond\n             \
    \ [(> max 0) (find_max (rest words))]\n              [(< max 0) (first words)]\n\
    \              [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length\
    \ words) 2) (first words)]\n    [else (find_max (rest words))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (length words) 1) max]\n              [(equal? (length words) 2) (find_max (rest\
    \ words))]\n              [(equal? (length words) 3) (find_max (rest words))]\n\
    \              [(equal? (length words) 4) (find_max (rest words))]\n         \
    \     [(equal? (length words) 5) (find_max (rest words))]\n              [(equal?\
    \ (length words) 6) (find_max (rest words))]\n              [(equal? (length words)\
    \ 7) (find_max (rest words))]\n              [(equal? (length words) 8) (find_max\
    \ (rest words))]\n              [(equal? (length words) 9) (find_max (rest words))]\n\
    \              [(equal? (length words) 10) (find_max (rest words))]\n        \
    \      [(equal? (length words) 11) (find_max (rest words))]\n              [(equal?\
    \ (length words) 12) (find_max (rest words))]\n              [(equal? (length\
    \ words) 13) (find_max (rest words))]\n              [(equal? (length words) 14)\
    \ (find_max (rest words))]\n              [(equal? (length words) 15) (find_max\
    \ (rest words))]\n              [(equal? (length words) 16) (find_max (rest words))]\n\
    \              [(equal? (length words) 17) (find_max (rest words))]\n        \
    \      [(equal? (length words) 18) (find_max (rest words))]\n              [(equal?\
    \ (length words) 19) (find_max (rest words))]\n              [(equal? (length\
    \ words) 20) (find_max (rest words))]\n              [(equal? (length words) 21)\
    \ (find_max (rest words))]\n              [(equal? (length words) 22) (find_max\
    \ (rest words))]\n              [(equal? (length words) 23) (find_max (rest words))]\n\
    \              [(equal? (length words) 24) (find_max (rest words))]\n        \
    \      [(equal? (length words) 25) (find_max (rest words))]\n              [(equal?\
    \ (length words) 26) (find_max (rest words))]\n              [(equal? (length\
    \ words) 27) (find_max (rest words))]\n              [(equal? (length words) 28)\
    \ (find_max (rest words))]\n              [(", "  (cond\n    [(empty? words) \"\
    \"]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max (first\
    \ words)])\n            (cond\n              [(equal? (length words) 1) (first\
    \ words)]\n              [(equal? (length words) 2) (cons (first words) (find_max\
    \ (rest words)))]\n              [else (let ([count (count (first words) words)])\n\
    \                       (cond\n                         [(> count max) (cons (first\
    \ words) (find_max (rest words)))]\n                         [(= count max) (find_max\
    \ (rest words))]\n                         [else (find_max (rest words))])))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (first words)]\n    [else (let ([max (first words)])\n\
    \            (cond\n              [(equal? (length words) (length max)) max]\n\
    \              [(equal? (length words) (length max)) (first words)]\n        \
    \      [else (let ([count 0])\n                       (for [word words]\n    \
    \                       (cond\n                             [(equal? (length word)\
    \ (length word)) word]\n                             [(equal? (length word) (length\
    \ word)) (first words)]\n                             [else (let ([count (+ count\
    \ 1)])\n                                     (cond\n                         \
    \              [(equal? (length word) (length word)) word]\n                 \
    \                      [(equal? (length word) (length word)) (first words)]\n\
    \                                       [else (let ([count (+ count 1)])\n   \
    \                                            (cond\n                         \
    \                        [(equal? (length word) (length word)) word]\n       \
    \                                          [(equal? (length word) (length word))\
    \ (first words)]\n                                                 [else (let\
    \ ([count (+ count 1)])\n                                                    \
    \     (cond\n                                                           [(equal?\
    \ (length word) (length word)) word]\n                                       \
    \                    [(equal? (length word) (length word)) (first words)]\n  \
    \                                                         [else (let ([count (+\
    \ count 1)])\n                                                               \
    \    (cond\n                                                                 \
    \    [(equal? (length word) (length word)) word]\n                           \
    \                                          [(equal? (length word) (length word))\
    \ (first words)]\n                                                           \
    \          [else (let ([count (+ count 1)])\n                                \
    \                                           (cond\n                          \
    \                                                   [(equal? (length word) (length\
    \ word)) word]\n                                                             \
    \                [(equal? (length word) (length word)) (first words)]\n      \
    \                                                                       [else\
    \ (let ([count (+ count 1)])\n                                               \
    \                                        (cond\n                             \
    \                                                            [(equal? (length\
    \ word) (length word)) word]\n                                               \
    \                                          [(equal? (length word) (length word))\
    \ (first words)]\n                                                           \
    \                              [else (let ([count (+ count 1)])\n            \
    \                                                                            \
    \         (cond\n                                                            \
    \                                      [(equal? (length word) (length word)) word]\n\
    \                                                                            \
    \                      [(equal? (length word) (length word)) (first words)]\n\
    \                                                                            \
    \                      [else (let ([count (+ count 1)])\n                    \
    \                                                                            \
    \           (cond\n                                                          \
    \                                                   [(equal? (length word) (length\
    \ word)) word]\n                                                             \
    \                                                [(equal? (length word) (length\
    \ word)) (first words)]\n                                                    \
    \                                                         [", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (length words)])\n            (cond\n              [(equal? (count-unique\
    \ (first words)) max) (first words)]\n              [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ (first words) (first words))])\n              (cond\n                [(chars\
    \ > max) (first words)]\n                [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 0) \"\"\
    ]\n    [else (let ([max (length (first words))])\n            (cond\n        \
    \      [(equal? (count-unique (first words)) max) (first words)]\n           \
    \   [else (find_max (rest words))]))]))\n</code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words)\
    \ 1) (first words)]\n    [else (let ([max (length words)])\n            (let ([chars\
    \ (count-chars words)])\n              (cond\n                [(chars <= max)\
    \ (first words)]\n                [else (find_max (rest words))])))])))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (string-length words) 1) (first\
    \ words)]\n    [else (let ([max (string-length words)])\n            (let ([chars\
    \ (string-chars words)])\n              (cond\n                [(empty? chars)\
    \ \"\"]\n                [(equal? (count-unique chars) max) (first words)]\n \
    \               [else (let ([chars (count-unique chars)])\n                  \
    \     (cond\n                         [(equal? chars max) (first words)]\n   \
    \                      [else (find_max (rest words))])))])))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length (rest\
    \ words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length\
    \ (last words))) \"\"]\n    [else (cond\n            [(equal? (length (first words))\
    \ (length (last words))) (first words)]\n            [else (cond\n           \
    \         [(equal? (length (first words)) (length (last words))) (first words)]\n\
    \                    [else (cond\n                            [(equal? (length\
    \ (first words)) (length (last words))) (first words)]\n                     \
    \       [else (cond\n                                    [(equal? (length (first\
    \ words)) (length (last words))) (first words)]\n                            \
    \        [else (cond\n                                            [(equal? (length\
    \ (first words)) (length (last words))) (first words)]\n                     \
    \                       [else (cond\n                                        \
    \            [(equal? (length (first words)) (length (last words))) (first words)]\n\
    \                                                    [else (cond\n           \
    \                                                 [(equal? (length (first words))\
    \ (length (last words))) (first words)]\n                                    \
    \                        [else (cond\n                                       \
    \                             [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \                 [else (cond\n                                              \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \                 [else (cond\n                                              \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \                 [else (cond\n                                              \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \                 [else (cond\n                                              \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \                 [else (cond\n                                              \
    \                      [(equal? (length (first words)) (length (last words)))\
    \ (first words)]\n                                                           \
    \         [else (cond\n                                                      \
    \                      [(equal? (length (", "  (cond\n    [(empty? words) \"\"\
    ]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length words)\
    \ 2) (first words)]\n    [else (let ([max (length words)])\n             (cond\n\
    \               [(equal? (length words) max) (first words)]\n               [(equal?\
    \ (length words) (- max 1)) (find_max (rest words))]\n               [else (find_max\
    \ (rest words))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ (first words)) 0)\n     (find_max (rest words))]\n    [else\n     (let ([max\
    \ (length (first words))])\n       (cond\n         [(equal? (count-unique (first\
    \ words)) max)\n          (find_max (rest words))]\n         [else\n         \
    \ (cons (first words) (find_max (rest words))\n                (count-unique (first\
    \ words))\n                (max))])))]))\n", "  (cond\n    [(empty? words) \"\"\
    ]\n    [(equal? (length (first words)) 1) (first words)]\n    [else (cond\n  \
    \          [(equal? (length (first words)) (length (second words))) (first words)]\n\
    \            [else (cond\n                    [(equal? (length (first words))\
    \ (length (third words))) (first words)]\n                    [else (cond\n  \
    \                          [(equal? (length (first words)) (length (fourth words)))\
    \ (first words)]\n                            [else (cond\n                  \
    \                  [(equal? (length (first words)) (length (fifth words))) (first\
    \ words)]\n                                    [else (cond\n                 \
    \                           [(equal? (length (first words)) (length (sixth words)))\
    \ (first words)]\n                                            [else (cond\n  \
    \                                                  [(equal? (length (first words))\
    \ (length (seventh words))) (first words)]\n                                 \
    \                   [else (cond\n                                            \
    \                [(equal? (length (first words)) (length (eighth words))) (first\
    \ words)]\n                                                            [else (cond\n\
    \                                                                    [(equal?\
    \ (length (first words)) (length (ninth words))) (first words)]\n            \
    \                                                        [else (cond\n       \
    \                                                                     [(equal?\
    \ (length (first words)) (length (tenth words))) (first words)]\n            \
    \                                                                [else (cond\n\
    \                                                                            \
    \        [(equal? (length (first words)) (length (eleventh words))) (first words)]\n\
    \                                                                            \
    \        [else (cond\n                                                       \
    \                     [(equal? (length (first words)) (length (twelfth words)))\
    \ (first words)]\n                                                           \
    \                 [else (cond\n                                              \
    \                                      [(equal? (length (first words)) (length\
    \ (thirteenth words))) (first words)]\n                                      \
    \                                              [else (cond\n                 \
    \                                                           [(equal? (length (first\
    \ words)) (length (fourteenth words))) (first words)]\n                      \
    \                                                      [else (cond\n         \
    \                                                                           [(equal?\
    \ (length (first words)) (length (fifteenth words))) (first words)]\n        \
    \                                                                            [else\
    \ (cond\n                                                                    \
    \        [(equal? (length (first words)) (length (sixteenth words))) (first words)]\n\
    \                                                                            [else\
    \ (cond\n                                                                    \
    \                [(equal? (length (first words)) (length (seventeenth words)))\
    \ (first words)]\n                                                           \
    \                         [else (cond\n                                      \
    \                                      [(equal? (length (first words)) (length\
    \ (eighteenth words))) (first words)]\n                                      \
    \                                      [else (cond\n                         \
    \                                                           [(equal? (length (first\
    \ words)) (length (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (length words)])\n          \
    \   (let ([count 0])\n               (for [word words]\n                 (cond\n\
    \                   [(empty? word) \"\"]\n                   [(equal? (length\
    \ word) max) (first word)]\n                   [else (set! count (+ count 1))\n\
    \                        (cond\n                         [(> count max) (first\
    \ word)]\n                         [else (cons (first word) (find_max (rest words)))]))]))]))))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 0) \"\"\
    ]\n    [else (cond\n            [(equal? (length (first words)) 1)\n         \
    \    (cond\n               [(equal? (length (second words)) 1)\n             \
    \   (cond\n                 [(equal? (length (third words)) 1)\n             \
    \     (cond\n                   [(equal? (length (fourth words)) 1)\n        \
    \            (cond\n                     [(equal? (length (fifth words)) 1)\n\
    \                      (cond\n                       [(equal? (length (sixth words))\
    \ 1)\n                        (cond\n                         [(equal? (length\
    \ (seventh words)) 1)\n                          (cond\n                     \
    \      [(equal? (length (eighth words)) 1)\n                            (cond\n\
    \                             [(equal? (length (ninth words)) 1)\n           \
    \                   (cond\n                               [(equal? (length (tenth\
    \ words)) 1)\n                                (cond\n                        \
    \         [(equal? (length (eleventh words)) 1)\n                            \
    \      (cond\n                                   [(equal? (length (twelfth words))\
    \ 1)\n                                    (cond\n                            \
    \         [(equal? (length (thirteenth words)) 1)\n                          \
    \            (cond\n                                       [(equal? (length (fourteenth\
    \ words)) 1)\n                                        (cond\n                \
    \                         [(equal? (length (fifteenth words)) 1)\n           \
    \                               (cond\n                                      \
    \     [(equal? (length (sixteenth words)) 1)\n                               \
    \              (cond\n                                               [(equal?\
    \ (length (seventeenth words)) 1)\n                                          \
    \      (cond\n                                                 [(equal? (length\
    \ (eighteenth words)) 1)\n                                                  (cond\n\
    \                                                   [(equal? (length (nineteenth\
    \ words)) 1)\n                                                    (cond\n    \
    \                                                 [(equal? (length (tenth words))\
    \ 1)\n                                                      (cond\n          \
    \                                             [(equal? (length (eleventh words))\
    \ 1)\n                                                        (cond\n        \
    \                                                 [(equal? (length (twelfth words))\
    \ 1)\n                                                          (cond\n      \
    \                                                     [(equal? (length (thirteenth\
    \ words)) 1)\n                                                            (cond\n\
    \                                                             [(equal? (length\
    \ (fourteenth words)) 1)\n                                                   \
    \           (cond\n                                                          \
    \     [(equal? (length (fifteenth words)) 1)\n                               \
    \                                 (cond\n                                    \
    \                             [(equal? (length (sixteenth words)) 1)\n       \
    \                                                           (cond\n          \
    \                                                         [(equal? (length (seventeenth\
    \ words)) 1)\n                                                               \
    \     (cond\n                                                                \
    \     [(equal? (length (eighteenth words)) 1)\n                              \
    \                                        (cond\n                             \
    \                                          [(equal? (length (nine", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length (first words)) 1) (first words)]\n\
    \    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (first words)])\n\
    \            (cond\n              [(empty? (rest words)) (first words)]\n    \
    \          [(equal? (length words) 1) (first words)]\n              [(equal? (length\
    \ words) 2) (cons (first words) (find_max (rest words)))]\n              [(equal?\
    \ (length words) 3) (cons (first words) (find_max (rest words))\n            \
    \                                   (cons (second words) (find_max (rest words))))]\n\
    \              [(equal? (length words) 4) (cons (first words) (find_max (rest\
    \ words))\n                                               (cons (second words)\
    \ (find_max (rest words))\n                                               (cons\
    \ (third words) (find_max (rest words))))]\n              [(equal? (length words)\
    \ 5) (cons (first words) (find_max (rest words))\n                           \
    \                    (cons (second words) (find_max (rest words))\n          \
    \                                     (cons (third words) (find_max (rest words))\n\
    \                                               (cons (fourth words) (find_max\
    \ (rest words)))))]\n              [(equal? (length words) 6) (cons (first words)\
    \ (find_max (rest words))\n                                               (cons\
    \ (second words) (find_max (rest words))\n                                   \
    \            (cons (third words) (find_max (rest words))\n                   \
    \                            (cons (fourth words) (find_max (rest words))\n  \
    \                                             (cons (fifth words) (find_max (rest\
    \ words)))))]\n              [(equal? (length words) 7) (cons (first words) (find_max\
    \ (rest words))\n                                               (cons (second\
    \ words) (find_max (rest words))\n                                           \
    \    (cons (third words) (find_max (rest words))\n                           \
    \                    (cons (fourth words) (find_max (rest words))\n          \
    \                                     (cons (fifth words) (find_max (rest words))\n\
    \                                               (cons (sixth words) (find_max\
    \ (rest words)))))]\n              [(equal? (length words) 8) (cons (first words)\
    \ (find_max (rest words))\n                                               (cons\
    \ (second words) (find_max (rest words))\n                                   \
    \            (cons (third words) (find_max (rest words))\n                   \
    \                            (cons (fourth words) (find_max (rest words))\n  \
    \                                             (cons (fifth words) (", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [else (let ([max (count-unique (first words))])\n            (cond\n      \
    \        [(> max 0)\n               (find_max (rest words))]\n              [(equal?\
    \ max 0)\n               (first words)]\n              [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (count (first words)) 1)\n   \
    \  (first words)]\n    [else\n     (let ([max (first words)])\n       (cond\n\
    \         [(equal? (count (first words) max) 1)\n          (find_max (rest words))]\n\
    \         [else\n          (cond\n            [(equal? (count (first words) max)\
    \ 0)\n             (cond\n              [(equal? (count (first words) (first words))\n\
    \                (find_max (rest words)))]\n              [else\n            \
    \   (cond\n                 [(equal? (count (first words) (first words))\n   \
    \                (find_max (rest words)))]\n                 [else\n         \
    \         (cond\n                   [(equal? (count (first words) (first words))\n\
    \                    (find_max (rest words)))]\n                   [else\n   \
    \                 (cond\n                     [(equal? (count (first words) (first\
    \ words))\n                      (find_max (rest words)))]\n                 \
    \    [else\n                      (cond\n                       [(equal? (count\
    \ (first words) (first words))\n                        (find_max (rest words)))]\n\
    \                       [else\n                        (cond\n               \
    \          [(equal? (count (first words) (first words))\n                    \
    \      (find_max (rest words)))]\n                         [else\n           \
    \               (cond\n                           [(equal? (count (first words)\
    \ (first words))\n                            (find_max (rest words)))]\n    \
    \                       [else\n                            (cond\n           \
    \                  [(equal? (count (first words) (first words))\n            \
    \                  (find_max (rest words)))]\n                             [else\n\
    \                              (cond\n                               [(equal?\
    \ (count (first words) (first words))\n                                (find_max\
    \ (rest words)))]\n                               [else\n                    \
    \            (cond\n                                 [(equal? (count (first words)\
    \ (first words))\n                                  (find_max (rest words)))]\n\
    \                                 [else\n                                  (cond\n\
    \                                   [(equal? (count (first words) (first words))\n\
    \                                    (find_max (rest words)))]\n             \
    \                      [else\n                                    (cond\n    \
    \                                 [(equal? (count (first words) (first words))\n\
    \                                      (find_max (rest words)))]\n           \
    \                          [else\n                                      (cond\n\
    \                                       [(equal? (count (first words) (first words))\n\
    \                                        (find_max (rest words)))]\n         \
    \                              [else\n                                       \
    \ (cond\n                                         [(equal? (count (first words)\
    \ (first ", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (cond\n            [(equal? (length words) 2)\n  \
    \           (cond\n               [(equal? (first words) (second words))\n   \
    \             (cond\n                 [(equal? (length words) 3)\n           \
    \        (cond\n                    [else (cond\n                          [(equal?\
    \ (first words) (third words))\n                           (cond\n           \
    \                 [(equal? (length words) 4)\n                             (cond\n\
    \                              [(equal? (first words) (fourth words))\n      \
    \                         (cond\n                                 [(equal? (length\
    \ words) 5)\n                                   (cond\n                      \
    \             [(equal? (first words) (fifth words))\n                        \
    \            (cond\n                                     [(equal? (length words)\
    \ 6)\n                                       (cond\n                         \
    \              [(equal? (first words) (sixth words))\n                       \
    \                 (cond\n                                         [(equal? (length\
    \ words) 7)\n                                           (cond\n              \
    \                             [(equal? (first words) (seventh words))\n      \
    \                                       (cond\n                              \
    \               [(equal? (length words) 8)\n                                 \
    \              (cond\n                                               [(equal?\
    \ (first words) (eighth words))\n                                            \
    \    (cond\n                                                 [(equal? (length\
    \ words) 9)\n                                                   (cond\n      \
    \                                             [(equal? (first words) (ninth words))\n\
    \                                                    (cond\n                 \
    \                                    [(equal? (length words) 10)\n           \
    \                                            (cond\n                         \
    \                              [(equal? (first words) (tenth words))\n       \
    \                                                 (cond\n                    \
    \                                     [(equal? (length words) 11)\n          \
    \                                                 (cond\n                    \
    \                                       [(equal? (first words) (eleventh words))\n\
    \                                                            (cond\n         \
    \                                                    [(equal? (length words) 12)\n\
    \                                                               (cond\n      \
    \                                                         [(equal? (first words)\
    \ (twelfth words))\n                                                         \
    \       (cond\n                                                              \
    \  [(equal? (length words) 13)\n                                             \
    \                    (cond\n                                                 \
    \                  [(equal? (first words) (thirteenth words))\n              \
    \                                                      (cond\n               \
    \                                                      [(equal? (length words)\
    \ 14)\n                                                                      \
    \ (cond\n                                                                    \
    \   [(equal? (first words) (fourteenth words))\n                             \
    \                                           (cond\n                          \
    \                                               [(equal? (length words) 15)\n\
    \                                                                           (cond\n\
    \                                                                           [(equal?\
    \ (first words) (fifteenth words))\n                                         \
    \                                   (cond\n                                  \
    \                                           [(equal? (length words) 16)\n    \
    \                                                                           (cond\n\
    \                                                                            \
    \   [(equal? (first words) (sixteenth words))\n                              \
    \                                                  (cond\n                   \
    \                                                              [(equal? (first\
    \ words) (seven", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words)\
    \ 1) (first words)]\n    [else (cond\n            [(equal? (count-unique (first\
    \ words)) (count-unique (second words))) (first words)]\n            [else (cond\n\
    \                    [(equal? (count-unique (first words)) (count-unique (third\
    \ words))) (first words)]\n                    [else (cond\n                 \
    \           [(equal? (count-unique (first words)) (count-unique (fourth words)))\
    \ (first words)]\n                            [else (cond\n                  \
    \                  [(equal? (count-unique (first words)) (count-unique (fifth\
    \ words))) (first words)]\n                                    [else (cond\n \
    \                                           [(equal? (count-unique (first words))\
    \ (count-unique (sixth words))) (first words)]\n                             \
    \               [else (cond\n                                                \
    \    [(equal? (count-unique (first words)) (count-unique (seventh words))) (first\
    \ words)]\n                                                    [else (cond\n \
    \                                                           [(equal? (count-unique\
    \ (first words)) (count-unique (eigth words))) (first words)]\n              \
    \                                              [else (cond\n                 \
    \                                                   [(equal? (count-unique (first\
    \ words)) (count-unique (ninth words))) (first words)]\n                     \
    \                                               [else (cond\n                \
    \                                                            [(equal? (count-unique\
    \ (first words)) (count-unique (tenth words))) (first words)]\n              \
    \                                                              [else (cond\n \
    \                                                                       [(equal?\
    \ (count-unique (first words)) (count-unique (eleventh words))) (first words)]\n\
    \                                                                        [else\
    \ (cond\n                                                                    \
    \            [ (equal? (count-unique (first words)) (count-unique (twelfth words)))\
    \ (first words)]\n                                                           \
    \                     [else (cond\n                                          \
    \                              [(equal? (count-unique (first words)) (count-unique\
    \ (thirteenth words))) (first words)]\n                                      \
    \                                  [else (cond\n                             \
    \                                                   [ (equal? (count-unique (first\
    \ words)) (count-unique (fourteenth words))) (first words)]\n                \
    \                                                                [else (cond\n\
    \                                                                        [(equal?\
    \ (count-unique (first words)) (count-unique (fifteenth words))) (first words)]\n\
    \                                                                        [else\
    \ (cond\n                                                                    \
    \            [ (equal? (count-unique (first words)) (count-unique (sixteenth words)))\
    \ (first words)]\n                                                           \
    \                     [else (cond\n                                          \
    \                              [(equal? (count-unique (first words)) (count-unique\
    \ (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first\
    \ words)]\n    [else (let ([max (length words)])\n            (let ([max-chars\
    \ (count-chars words)])\n              (cond\n                [(char-count (first\
    \ words)) max]\n                [else (if (> max-chars max-) max-chars max-)]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (first words)]\n    [else (let ([max (length words)])\n\
    \            (cond\n              [(equal? (length words) max) (first words)]\n\
    \              [(equal? (length words) (- max 1)) (find_max (rest words))]\n \
    \             [else (find_max (rest words))])))]))\n", "  (define (helper word\
    \ count)\n    (cond\n      [(empty? words) \"\"]\n      [(equal? count (length\
    \ word)) word]\n      [else (helper (cdr word) (+ count 1))]))\n  (helper words\
    \ 0))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (let ([max (length words)])\n            (cond\n \
    \             [(equal? (fold-right (lambda (x y) (+ x y)) 0 words) max) \"\"]\n\
    \              [(equal? (fold-right (lambda (x y) (+ x y)) 0 words) max) (first\
    \ words)]\n              [else (let ([max (fold-right (lambda (x y) (+ x y)) 0\
    \ words)])\n                    (cond\n                      [(equal? (fold-right\
    \ (lambda (x y) (+ x y)) 0 words) max) (first words)]\n                      [else\
    \ (find_max (rest words))])))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (length words)])\n\
    \            (let ([chars (count-chars words)])\n              (cond\n       \
    \         [(chars > max) (first words)]\n                [else (find_max (rest\
    \ words))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (count-unique (first words))])\n\
    \            (cond\n              [(> max 0)\n               (find_max (rest words))]\n\
    \              [else (first words)])]\n    )]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([word\
    \ (first words)])\n            (cond\n              [(equal? (length word) 0)\
    \ \"\"]\n              [(equal? (length word) 1) word]\n              [else (let\
    \ ([count (count word)])\n                       (cond\n                     \
    \    [(> count 0) \"\"]\n                         [(equal? (length word) count)\
    \ (cons word words)]\n                         [else (let ([new (find_max (rest\
    \ words))])\n                                 (cond\n                        \
    \           [(empty? new) \"\"]\n                                   [(equal? (length\
    \ new) count) (cons new word)]\n                                   [else (cons\
    \ (first new) (find_max (rest new)))])))])))])))])\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (length words)])\n            (let ([chars (count-chars words)])\n   \
    \           (cond\n                [(chars > max) (first words)]\n           \
    \     [else (find_max (rest words))])))])))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max (length\
    \ words)])\n             (cond\n              [(equal? (fold-right (lambda (x\
    \ y) (+ x y)) 0 words) max) \"\"]\n              [(equal? (fold-right (lambda\
    \ (x y) (+ x y)) 0 words) max) (first words)]\n              [else (let ([count\
    \ (fold-right (lambda (x y) (+ x y)) 0 words)])\n                       (cond\n\
    \                        [(equal? count max) (first words)]\n                \
    \        [(equal? count max) (find_max (rest words))]\n                      \
    \  [else (find_max (rest words))])))])))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length words)\
    \ 2) (first words)]\n    [else (let ([max (length words)])\n             (cond\n\
    \              [(equal? (length words) max) (first words)]\n              [(equal?\
    \ (length words) (+ max 1)) (first words)]\n              [else (let ([max (length\
    \ words)])\n                       (cond\n                        [(equal? (length\
    \ words) max) (first words)]\n                        [(equal? (length words)\
    \ (+ max 1)) (first words)]\n                        [else (find_max (rest words))]))]))]))])\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([word (first words)])\n\
    \              (cond\n                [(equal? (length words) 1) word]\n     \
    \           [else (let ([count 0])\n                        (for ([i (rest words)])\n\
    \                          (cond\n                            [(equal? (length\
    \ i) 1) (+ count 1)]\n                            [else (let ([count 0])\n   \
    \                                 (for ([j (rest i)])\n                      \
    \                (cond\n                                        [(equal? (length\
    \ j) 1) (+ count 1)]\n                                        [else (let ([count\
    \ 0])\n                                                (for ([k (rest j)])\n \
    \                                                 (cond\n                    \
    \                                [(equal? (length k) 1) (+ count 1)]\n       \
    \                                             [else (let ([count 0])\n       \
    \                                                   (for ([l (rest k)])\n    \
    \                                                        (cond\n             \
    \                                                 [(equal? (length l) 1) (+ count\
    \ 1)]\n                                                              [else (let\
    \ ([count 0])\n                                                              \
    \      (for ([m (rest l)])\n                                                 \
    \                 (cond\n                                                    \
    \                [(equal? (length m) 1) (+ count 1)]\n                       \
    \                                             [else (let ([count 0])\n       \
    \                                                                     (for ([n\
    \ (rest m)])\n                                                               \
    \               (cond\n                                                      \
    \                          [((equal? (length n) 1) (+ count 1)]\n            \
    \                                                                    [else (let\
    \ ([count 0])\n                                                              \
    \                        (for ([o (rest n)])\n                               \
    \                                                         (cond\n            \
    \                                                                            \
    \  [(equal? (length o) 1) (+ count 1)]\n                                     \
    \                                                     [else (let ([count 0])\n\
    \                                                                            \
    \                    (for ([p (rest o)])\n                                   \
    \                                                               (cond\n      \
    \                                                                            \
    \                  [(equal? (length p) 1) (+ count 1)]\n                     \
    \                                                                            \
    \   [else (let ([count 0])\n                                                 \
    \                                                         (for ([q (rest p)])\n\
    \                                                                            \
    \                                (cond\n                                     \
    \                                                                         [(equal?\
    \ (length q) 1) (+ count 1)]\n                                               \
    \                                                               [else (let ([count\
    \ 0])\n                                                                      \
    \                                              (for ([r (rest q)])\n         \
    \                                                                            \
    \                             (cond\n                                        \
    \                                                                            [(equal?\
    \ (length r) 1) (+ count 1)]\n                                               \
    \                                                                     [else (let\
    \ ([count 0])\n                                                              \
    \                                                            (for ([s (rest r)])\n\
    \                                                                            \
    \                                                (cond\n                     \
    \                                                                            \
    \                             [(equal? (length s) 1) (+ count 1)]\n          \
    \                                                                            \
    \                                        [else (let ([count 0])\n            \
    \                                                                            \
    \                                            (for ([t (rest s)])\n           \
    \                                                                            \
    \                                           (cond\n                          \
    \                                                                            \
    \                              [(equal? (length t) 1) (+ count ", "  (cond\n \
    \   [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n   \
    \ [(equal? (length words) 2) (first words)]\n    [else (let ([max (length words)])\n\
    \            (let ([chars (count-chars (first words) (first words))])\n      \
    \        (cond\n                [(chars > max) (first words)]\n              \
    \  [else (find_max (rest words))])))])))\n", "  (cond\n    [(empty? words) \"\"\
    ]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max (length\
    \ words)])\n            (cond\n              [(equal? (fold-right (lambda (x y)\
    \ (+ x y)) 0 words) max) \"\"]\n              [(equal? (fold-right (lambda (x\
    \ y) (+ x y)) 0 words) max) (first words)]\n              [else (let ([count (fold-right\
    \ (lambda (x y) (+ x y)) 0 words)])\n                       (cond\n          \
    \              [(> count max) \"\"]\n                        [(< count max) (first\
    \ words)]\n                        [else (find_max (rest words))])))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 0)\n  \
    \   (find_max (rest words))]\n    [else\n     (let ([chars (count-chars (first\
    \ words) (first words))])\n       (cond\n         [(< chars 1) (find_max (rest\
    \ words))]\n         [else (cons (first words) (find_max (rest words)))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (cons (first words) (find_max (rest words)))]\n\
    \    [else (let ([max (length words)])\n            (cond\n              [(equal?\
    \ (length words) max) (first words)]\n              [(equal? (length words) (+\
    \ max 1)) (cons (first words) (find_max (rest words)))]\n              [else (find_max\
    \ (rest words))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [(equal? (length words) 2) (first words)]\n  \
    \  [else (let ([max (length words)])\n            (let ([count 0])\n         \
    \     (for ([word (sort words (< string) (> string))]\n                    [count\
    \ (+ count (length word))])\n                (cond\n                  [(> count\
    \ max) (cons word (list count max))]\n                  [else (cons word (list\
    \ count max))])))))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [(equal? (length words) 2) (first words)]\n  \
    \  [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (length words)])\n\
    \            (let ([chars (count-chars words)])\n              (cond\n       \
    \         [(chars > max) (first words)]\n                [else (find_max (rest\
    \ words))])))])))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [(equal? (length words) 2) (first words)]\n  \
    \  [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (count-unique\
    \ (first words))])\n            (cond\n              [(> max 0)\n            \
    \   (find_max (rest words))]\n              [else (first words)])]))]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 0)\n \
    \    (find_max (rest words))]\n    [else (let ([max (length (first words))])\n\
    \            (cond\n             [(equal? (length (first words)) 0)\n        \
    \       (find_max (rest words))]\n             [else\n               (cond\n \
    \                [(equal? (length (first words)) max)\n                   (find_max\
    \ (rest words))]\n                 [else\n                   (cond\n         \
    \            [(equal? (length (first words)) 1)\n                       ((first\
    \ words))]\n                     [else\n                       (cond\n       \
    \                  [(equal? (length (first words)) 2)\n                      \
    \     ((first words) (second words))]\n                         [else\n      \
    \                     (cond\n                             [(equal? (length (first\
    \ words)) 3)\n                               ((first words) (second words) (third\
    \ words))]\n                             [else\n                             \
    \  (cond\n                                 [(equal? (length (first words)) 4)\n\
    \                                   ((first words) (second words) (third words)\
    \ (fourth words))]\n                                 [else\n                 \
    \                  (cond\n                                     [(equal? (length\
    \ (first words)) 5)\n                                       ((first words) (second\
    \ words) (third words) (fourth words) (fifth words))]\n                      \
    \               [else\n                                       (cond\n        \
    \                                 [(equal? (length (first words)) 6)\n       \
    \                                    ((first words) (second words) (third words)\
    \ (fourth words) (fifth words) (sixth words))]\n                             \
    \            [else\n                                           (cond\n       \
    \                                      [(equal? (length (first words)) 7)\n  \
    \                                             ((first words) (second words) (third\
    \ words) (fourth words) (fifth words) (sixth words) (seventh words))]\n      \
    \                                       [else\n                              \
    \                 (cond\n                                                 [(equal?\
    \ (length (first words)) 8)\n                                                \
    \   ((first words) (second words) (third words) (fourth words) (fifth words) (sixth\
    \ words) (seventh words) (eighth words))]\n                                  \
    \               [else\n                                                   (cond\n\
    \                                                     [(equal? (length (first\
    \ words)) 9)\n                                                       ((first words)\
    \ (second words) (third words) (fourth words) (fifth words) (sixth words) (seventh\
    \ words) (eighth words) (ninth words))]\n                                    \
    \                 [", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ (first words)) 0)\n     (find_max (rest words))]\n    [else\n     (let ([max\
    \ (length (first words))])\n       (cond\n         [(equal? (length (first words))\
    \ max)\n          (find_max (rest words))]\n         [else\n          (let ([count\
    \ (length (filter (lambda (x) (equal? (length x) max)) words))])\n           \
    \ (cond\n              [(equal? count 0)\n               (find_max (rest words))]\n\
    \              [else\n               (first words)])])]))]))\n", "  (cond\n  \
    \  [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else\
    \ (cond\n            [(equal? (find_max (rest words))\n                      (find_max\
    \ (rest words))) \"\"]\n            [else (cond\n                    [(equal?\
    \ (find_max (rest words))\n                            (find_max (rest words)))\
    \ \"\"]\n                    [else (cond\n                            [(equal?\
    \ (find_max (rest words))\n                                    (find_max (rest\
    \ words))) \"\"]\n                            [else (cond\n                  \
    \                  [(equal? (find_max (rest words))\n                        \
    \                    \"\") \"\"]\n                                    [else (cond\n\
    \                                            [(equal? (find_max (rest words))\n\
    \                                                    (find_max (rest words)))\
    \ \"\"]\n                                            [else (cond\n           \
    \                                         [(equal? (find_max (rest words))\n \
    \                                                           (find_max (rest words)))\
    \ \"\"]\n                                                    [else (cond\n   \
    \                                                         [(equal? (find_max (rest\
    \ words))\n                                                                  \
    \  (find_max (rest words))) \"\"]\n                                          \
    \                  [else (cond\n                                             \
    \                       [(equal? (find_max (rest words))\n                   \
    \                                                         (find_max (rest words)))\
    \ \"\"]\n                                                                    [else\
    \ (cond\n                                                                    \
    \        [(equal? (find_max (rest words))\n                                  \
    \                                                  (find_max (rest words))) \"\
    \"]\n                                                                        [else\
    \ (cond\n                                                                    \
    \            [else \"\"])])])])])])])])])])\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) 0) \"\"]\n    [else (let ([max (length\
    \ (first words))])\n            (cond\n              [(equal? (length (first words))\
    \ max) (find_max (rest words))]\n              [(equal? (length (first words))\
    \ 0) (find_max (rest words))]\n              [else (let ([count 0])\n        \
    \               (cond\n                         [(equal? (count-chars (first words))\
    \ max) (find_max (rest words))]\n                         [(equal? (count-chars\
    \ (first words)) 0) (find_max (rest words))]\n                         [else (let\
    \ ([count (count-chars (first words))])\n                                (cond\n\
    \                                  [(equal? (+ count (count-chars (first words)))\
    \ max) (find_max (rest words))]\n                                  [(equal? (+\
    \ count (count-chars (first words))) 0) (find_max (rest words))]\n           \
    \                       [else (find_max (rest words))]))]))]))]))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length (rest\
    \ words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (string-length words) 1) (first\
    \ words)]\n    [else (let ([count (count-chars words)])\n            (cond\n \
    \             [(> count 0) \"\"]\n              [(equal? count 1) (first words)]\n\
    \              [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (length words)])\n             (cond\n               [(equal? (count-unique\
    \ (first words)) max) (first words)]\n               [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count (first words))])\n            (cond\n           \
    \   [(> max 0) (find_max (rest words))]\n              [(< max 0) \"\"]\n    \
    \          [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) (length (last words))) \"\"]\n  \
    \  [else (cons (first words) (find_max (rest words))) ]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (length words)])\n            (let ([chars (map unique-chars words)])\n\
    \              (cond\n                [(chars (empty? chars)) \"\"]\n        \
    \        [else (let ([char (first chars)])\n                        (cond\n  \
    \                        [(equal? (length chars) max) (first chars)]\n       \
    \                   [else (let ([chars (map unique-chars (rest chars))])\n   \
    \                             (cond\n                                  [(chars\
    \ (empty? chars)) \"\"]\n                                  [else (let ([char (first\
    \ chars)])\n                                          (cond\n                \
    \                            [(equal? (length chars) max) (first chars)]\n   \
    \                                         [else (find_max (rest words))])])])])])])]))]))))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 1) (first\
    \ words)]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) 0) \"\"]\n    [else (let ([max (length\
    \ (first words))])\n            (cond\n              [(equal? (length (first words))\
    \ max) (find_max (rest words))]\n              [(equal? (length (first words))\
    \ 0) \"\"]\n              [else (let ([count (length (first words))])\n      \
    \                (cond\n                        [(equal? count max) (find_max\
    \ (rest words))]\n                        [(equal? count 0) \"\"]\n          \
    \              [else (let ([max (length (first words))])\n                   \
    \             (cond\n                                  [(equal? (length (first\
    \ words)) max) (find_max (rest words))]\n                                  [(equal?\
    \ (length (first words)) 0) \"\"]\n                                  [else (let\
    \ ([count (length (first words))])\n                                         \
    \ (cond\n                                            [(equal? count max) (find_max\
    \ (rest words))]\n                                            [(equal? count 0)\
    \ \"\"]\n                                            [else (find_max (rest words))]))]))]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (string-length words) 1) (first\
    \ words)]\n    [(equal? (string-length words) 2) (second words)]\n    [else (let\
    \ ([max (string-length words)])\n            (cond\n              [(equal? (string-length\
    \ words) max) (first words)]\n              [(equal? (string-length words) (-\
    \ max 1)) (second words)]\n              [else (let ([max (string-length words)])\n\
    \                       (cond\n                         [(equal? (string-length\
    \ words) max) (first words)]\n                         [(equal? (string-length\
    \ words) (- max 1)) (second words)]\n                         [else (let ([max\
    \ (string-length words)])\n                                 (cond\n          \
    \                         [(equal? (string-length words) max) (first words)]\n\
    \                                   [(equal? (string-length words) (- max 1))\
    \ (second words)]\n                                   [else (let ([max (string-length\
    \ words)])\n                                           (cond\n               \
    \                              [(equal? (string-length words) max) (first words)]\n\
    \                                             [(equal? (string-length words) (-\
    \ max 1)) (second words)]\n                                             [else\
    \ (let ([max (string-length words)])\n                                       \
    \             (cond\n                                                      [(equal?\
    \ (string-length words) max) (first words)]\n                                \
    \                      [(equal? (string-length words) (- max 1)) (second words)]\n\
    \                                                      [else (let ([max (string-length\
    \ words)])\n                                                            (cond\n\
    \                                                              [(equal? (string-length\
    \ words) max) (first words)]\n                                               \
    \               [(equal? (string-length words) (- max 1)) (second words)]\n  \
    \                                                            [else (let ([max\
    \ (string-length words)])\n                                                  \
    \                  (cond\n                                                   \
    \                   [(equal? (string-length words) max) (first words)]\n     \
    \                                                                 [(equal? (string-length\
    \ words) (- max 1)) (second words)]\n                                        \
    \                              [else (let ([max (string-length words)])\n    \
    \                                                                      (cond\n\
    \                                                                            [(equal?\
    \ (string-length words) max) (first words)]\n                                \
    \                                            [(equal? (string-length words) (-\
    \ max 1)) (second words)]\n                                                  \
    \                          [else (let ([max (string-length words)])\n        \
    \                                                                  (cond\n   \
    \                                                                         [(equal?\
    \ (string-length words) max) (first words)]\n                                \
    \                                            [(equal? (string-length words) (-\
    \ max 1)) (second words)]\n                                                  \
    \                          [else (let ([max (string-length words)])\n        \
    \                                                                            \
    \  (cond\n                                                                   \
    \                     [(equal? (string-length words) max) (first words)]\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length\
    \ (second words))) (first words)]\n    [else (find_max (rest words))]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (cond\n              [(equal?\
    \ (fold-right (lambda (x y) (+ x y)) 0 words) max) \"\"]\n              [(equal?\
    \ (fold-right (lambda (x y) (+ x y)) 0 words) max) (first words)]\n          \
    \    [else (let ([max (fold-right (lambda (x y) (+ x y)) 0 words)])\n        \
    \            (cond\n                      [(equal? max max) \"\"]\n          \
    \            [(equal? max max) (first words)]\n                      [else (find_max\
    \ (rest words))])))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (string-length words) 0) \"\"]\n    [else (let ([word (first words)])\n    \
    \        (cond\n              [(equal? (string-length word) 0) \"\"]\n       \
    \       [(equal? (string-length words) 0) \"\"]\n              [(equal? (string-length\
    \ words) 1) word]\n              [else (let ([count (count word)])\n         \
    \             (cond\n                        [(> count 1) (find_max words)]\n\
    \                        [(equal? (string-length words) 1) word]\n           \
    \             [else (find_max (rest words))]))]))]))])\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (cond\n\
    \            [(equal? (count-unique (first words)) 1)\n             (first words)]\n\
    \            [else (cond\n                    [(equal? (count-unique (first words))\
    \ 2)\n                     (first words)]\n                    [else (cond\n \
    \                           [(equal? (count-unique (first words)) 3)\n       \
    \                      (first words)]\n                            [else (cond\n\
    \                                    [(equal? (count-unique (first words)) 4)\n\
    \                                     (first words)]\n                       \
    \             [else (cond\n                                            [(equal?\
    \ (count-unique (first words)) 5)\n                                          \
    \   (first words)]\n                                            [else (cond\n\
    \                                                    [(equal? (count-unique (first\
    \ words)) 6)\n                                                     (first words)]\n\
    \                                                    [else (cond\n           \
    \                                                 [(equal? (count-unique (first\
    \ words)) 7)\n                                                             (first\
    \ words)]\n                                                            [else (cond\n\
    \                                                                    [(equal?\
    \ (count-unique (first words)) 8)\n                                          \
    \                           (first words)]\n                                 \
    \                                   [else (cond\n                            \
    \                                                [(equal? (count-unique (first\
    \ words)) 9)\n                                                               \
    \              (first words)]\n                                              \
    \                              [else (cond\n                                 \
    \                                                   [(equal? (count-unique (first\
    \ words)) 10)\n                                                              \
    \                       (first words)]\n                                     \
    \                                               [else (cond\n                \
    \                                                                            [(equal?\
    \ (count-unique (first words)) 11)\n                                         \
    \                                                    (first words)]\n        \
    \                                                                            \
    \        [else (cond\n                                                       \
    \                                             [(equal? (count-unique (first words))\
    \ 12)\n                                                                      \
    \                               (first words)]\n                             \
    \                                                                       [else\
    \ (cond\n                                                                    \
    \                                        [(equal? (count-unique (first words))\
    \ 13)\n                                                                      \
    \                                       (first words)]\n                     \
    \                                                                            \
    \           [else (cond\n                                                    \
    \                                                                [(equal? (count-unique\
    \ (first words)) 14)\n                                                       \
    \                                                              (first words)]\n\
    \                                                                            \
    \                                        [else (cond\n                       \
    \                                                                            \
    \                         [(equal? (count-unique (first words)) 15)\n        \
    \                                                                            \
    \                                         (first words)]\n                   \
    \                                                                            \
    \                             [else (cond\n                                  \
    \                                                                            \
    \                      [(equal? (count-unique (first words)) 16)\n           \
    \                                                                            \
    \                                              (first words)]\n              \
    \                                                                            \
    \                                          [else (cond\n                     \
    \                                                                            \
    \                                           [(equal? (count-unique (first words))\
    \ 17)\n                                                                      \
    \                                                                       (first\
    \ words)]\n                                                                  \
    \                                                                          [else\
    \ (cond\n                                                                    \
    \                                                                [(equal? (count-unique\
    \ (first words)) 18)\n                                                       \
    \                                                                            \
    \  (first words)]\n                                                          \
    \                                                                          [else\
    \ (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first\
    \ words)]\n    [else (let ([max (length words)])\n            (let ([counts (make-hash\
    \ (hash-table-size max))])\n              (for ([i (in-range (length words))])\n\
    \                (hash-table-ref counts (car words) (+ i 1))\n               \
    \ (hash-table-ref counts (car words) (- i 1))))\n            (let ([max-count\
    \ (hash-table-count counts)])\n              (cond\n                [(> max-count\
    \ 0) (first words)]\n                [else (find_max (rest words))])))])))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count-unique (first words))])\n            (cond\n    \
    \          [(> max 0) (find_max (rest words))]\n              [(equal? max 0)\
    \ \"\"]\n              [else (find_max (rest words))])))]))\n", "  (cond\n   \
    \ [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else\
    \ (let ([max (count-unique (first words))])\n            (cond\n             \
    \ [(> max 0)\n               (find_max (rest words))]\n              [else (first\
    \ words)])]))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (string-length\
    \ words) 1) (first words)]\n    [else (cond\n            [(string-length words)\
    \ (find_max (rest words))]\n            [else (cond\n                    [(string-length\
    \ words) (find_max (rest words))]\n                    [else (cond\n         \
    \                   [(equal? (string-length words) (length (first words))) (first\
    \ words)]\n                            [else (cond\n                         \
    \           [(equal? (string-length words) (length (first words))) (first words)]\n\
    \                                    [else (cond\n                           \
    \                 [(equal? (string-length words) (length (first words))) (first\
    \ words)]\n                                            [else (cond\n         \
    \                                           [(equal? (string-length words) (length\
    \ (first words))) (first words)]\n                                           \
    \         [else (cond\n                                                      \
    \      [(equal? (string-length words) (length (first words))) (first words)]\n\
    \                                                            [else (cond\n   \
    \                                                                 [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                        [else (cond\n                       \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                                [else (cond\n               \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                        [else (cond\n                       \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                                [else (cond\n               \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                        [else (cond\n                       \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                                [else (cond\n               \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                        [else (cond\n                       \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                                [else (cond\n               \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                        [else (cond\n                       \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                                [else (cond\n               \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]\n                            \
    \                                        [else (cond\n                       \
    \                                                     [(equal? (string-length\
    \ words) (length (first words))) (first words)]", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (count (first words)) 1)\n     (first words)]\n    [else\n\
    \     (let ([max (count (first words))])\n       (cond\n         [(> max 0)\n\
    \          (find_max (rest words))]\n         [else\n          (cons (first words)\
    \ (find_max (rest words)))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n  \
    \  [(equal? (string-length words) 1) (first words)]\n    [else (let ([max (string-length\
    \ words)])\n            (cond\n              [(equal? (string-length words) 1)\
    \ (first words)]\n              [(equal? (string-length words) max) (first words)]\n\
    \              [else (let ([counts (string-counts words)])\n                 \
    \     (cond\n                        [(empty? counts) \"\"]\n                \
    \        [(> (first counts) max) (first words)]\n                        [else\
    \ (find_max (rest words))])))])))])\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (count-unique\
    \ (first words))])\n            (cond\n              [(> max 0)\n            \
    \   (find_max (rest words))]\n              [else (first words)])]))]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (count (first words) max) 0) (cons max words)]\n              [(equal? (count\
    \ (first words) max) 1) (cons (first words) words)]\n              [else (find_max\
    \ (rest words))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ (first words)) 0) \"\"]\n    [(equal? (length (first words)) 1) (first words)]\n\
    \    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (count-unique\
    \ (first words))])\n            (cond\n              [(> max 0)\n            \
    \   (find_max (rest words))]\n              [else (first words)])]\n    )]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count-unique (first words))])\n            (cond\n    \
    \          [(> max 0)\n               (find_max (rest words))]\n             \
    \ [else (first words)])])]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (length words) 1) (first words)]\n    [else (let ([max (first words)])\n   \
    \         (cond\n              [(empty? (rest words)) max]\n              [(equal?\
    \ (length words) (length (rest words))) (find_max (rest words))]\n           \
    \   [else (let ([count (count (first words))])\n                      (cond\n\
    \                        [(> count max) (find_max (rest words))]\n           \
    \             [(< count max) (find_max (rest words))]\n                      \
    \  [else (find_max (rest words))])))])))])\n", "  (cond\n    [(empty? words) \"\
    \"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length words)\
    \ 2) (first words)]\n    [else (let ([max (first words)])\n            (cond\n\
    \              [(equal? (length words) (length max)) (first words)]\n        \
    \      [(equal? (length words) (length max)) \"\"]\n              [else (let ([count\
    \ 0])\n                       (for [word words]\n                           (cond\n\
    \                             [(equal? (length word) (length word)) (cons word\
    \ count)]\n                             [(equal? (length word) (length word))\
    \ (cons word count)]\n                             [else (cons word (+ count 1))]))\n\
    \                       (cons max count)]))]))))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) (length (rest words))) (reverse (first\
    \ words))]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (cond\n    \
    \         [(equal? (length words) 2) (cond\n                                 \
    \         [(equal? (first words) (second words)) (first words)]\n            \
    \                              [else (cond\n                                 \
    \                  [(equal? (first words) \"\") (first words)]\n             \
    \                                      [else (cond\n                         \
    \                                  [(equal? (first words) \"\") (first words)]\n\
    \                                                           [else (cond\n    \
    \                                                                [(equal? (first\
    \ words) \"\") (first words)]\n                                              \
    \                      [else (cond\n                                         \
    \                                  [(equal? (first words) \"\") (first words)]\n\
    \                                                                           [else\
    \ (cond\n                                                                    \
    \               [(equal? (first words) \"\") (first words)]\n                \
    \                                                                   [else (cond\n\
    \                                                                            \
    \                 [(equal? (first words) \"\") (first words)]\n              \
    \                                                                            \
    \   [else (cond\n                                                            \
    \                                         [(equal? (first words) \"\") (first\
    \ words)]\n                                                                  \
    \                                   [else (cond\n                            \
    \                                                                            \
    \     [(equal? (first words) \"\") (first words)]\n                          \
    \                                                                            \
    \       [else (cond\n                                                        \
    \                                                               [(equal? (first\
    \ words) \"\") (first words)]\n                                              \
    \                                                                         [else\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first words)\
    \ \"\") (first words)]\n                                                     \
    \                                                                           [else\
    \ (cond\n                                                                    \
    \                                                                [(equal? (first\
    \ words) \"\") (first words)]\n                                              \
    \                                                                            \
    \          [else (cond\n                                                     \
    \                                                                           [(equal?\
    \ (first words) \"\") (first words)]\n                                       \
    \                                                                            \
    \             [else (cond\n                                                  \
    \                                                                            \
    \      [(equal? (first words) \"\") (first words)]\n                         \
    \                                                                            \
    \                               [else (cond\n                                \
    \                                                                            \
    \                    [(equal? (first words) \"\") (first words)]\n           \
    \                                                                            \
    \                                         [else (cond\n                      \
    \                                                                            \
    \                                  [(equal? (first words) \"\") (first words)]\n\
    \                                                                            \
    \                                                        [else (cond\n       \
    \                                                                            \
    \                                             [(equal? (first words) \"\") (first\
    \ words)]\n                                                                  \
    \                                                              [else (cond\n \
    \                                                                            \
    \                                                       [(equal? (first words)\
    \ \"\") (first words)]\n                                                     \
    \                                                                            \
    \   [else (cond\n                                                            \
    \                                                                    [(equal?\
    \ (first words) \"\") (first words)]\n                                       \
    \                                                                            \
    \             [else (cond\n                                                  \
    \                                                                            \
    \      [(equal? (first words) \"\") (first words)]\n                         \
    \                                                                            \
    \                               [else (cond\n                                \
    \                                                                            \
    \                    [(equal? (first words) \"\") (first words)]\n           \
    \                                                                            \
    \                                         [else (cond\n                      \
    \                                                                            \
    \                                  [(equal? (first words) \"\") (first words)]\n\
    \                                                                            \
    \                                                        [else (cond\n       \
    \                                                         ", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length\
    \ words) 2) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (let ([chars (count-chars (first words) (first words))])\n              (cond\n\
    \                [(chars > max) words]\n                [else (cons (first words)\
    \ (find_max (rest words))))]))]))))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [else (let ([max (count (first\
    \ words))])\n             (cond\n              [(> max 0)\n               (find_max\
    \ (rest words))]\n              [(equal? (count (first words)) max)\n        \
    \       (first words)]\n              [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length\
    \ (rest words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (first words)]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ words)])\n              (cond\n                [(chars <= max) (first words)]\n\
    \                [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) 0) \"\"]\n    [else (cond\n\
    \            [(equal? (length (first words)) 1)\n             (cond\n        \
    \       [(equal? (count-unique (first words)) 1)\n                (first words)]\n\
    \               [else (cond\n                      [(equal? (count-unique (first\
    \ words)) 2)\n                       (cond\n                         [(equal?\
    \ (count-unique (first words)) 3)\n                           (cond\n        \
    \                     [(equal? (count-unique (first words)) 4)\n             \
    \                  (cond\n                                 [(equal? (count-unique\
    \ (first words)) 5)\n                                   (cond\n              \
    \                       [(equal? (count-unique (first words)) 6)\n           \
    \                            (cond\n                                         [(equal?\
    \ (count-unique (first words)) 7)\n                                          \
    \ (cond\n                                             [(equal? (count-unique (first\
    \ words)) 8)\n                                               (cond\n         \
    \                                        [(equal? (count-unique (first words))\
    \ 9)\n                                                   (cond\n             \
    \                                        [(equal? (count-unique (first words))\
    \ 10)\n                                                       (cond\n        \
    \                                                 [(equal? (count-unique (first\
    \ words)) 11)\n                                                           (cond\n\
    \                                                             [(equal? (count-unique\
    \ (first words)) 12)\n                                                       \
    \        (cond\n                                                             \
    \   [(equal? (count-unique (first words)) 13)\n                              \
    \                                   (cond\n                                  \
    \                                 [(equal? (count-unique (first words)) 14)\n\
    \                                                                     (cond\n\
    \                                                                     [(equal?\
    \ (count-unique (first words)) 15)\n                                         \
    \                              (cond\n                                       \
    \                                  [(equal? (count-unique (first words)) 16)\n\
    \                                                                           (cond\n\
    \                                                                            \
    \ [(equal? (count-unique (first words)) 17)\n                                \
    \                                               (cond\n                      \
    \                                                         [(equal? (count-unique\
    \ (first words)) 18)\n                                                       \
    \                         (cond\n                                            \
    \                                      [(equal? (count-unique (first words)) 19)\n\
    \                                                                            \
    \       (cond\n                                                              \
    \                       [(equal? (count-unique (first words)) 20)\n          \
    \                                                                            \
    \ (cond\n                                                                    \
    \                     [(equal? (count-unique (first words)) 21)\n            \
    \                                                                            \
    \   (cond\n                                                                  \
    \                           [(equal? (count-unique (first words)) 22)\n      \
    \                                                                            \
    \             (cond\n                                                        \
    \                                         [(equal? (count-unique (first words))\
    \ 23)\n                                                                      \
    \                             (cond\n                                        \
    \                                                             [(equal? (count-unique\
    \ (first words)) 24)\n                                                       \
    \                                                (cond\n                     \
    \                                                                            \
    \      [(equal? (count-unique (first words)) 25)\n                           \
    \                                                                            \
    \  (cond\n                                                                   \
    \                                        [(equal? (count-unique (first words)",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length\
    \ (rest words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (count (first words) max) 0) (cons max words)]\n              [(equal? (count\
    \ (first words) max) 1) (cons (first words) words)]\n              [else (find_max\
    \ (rest words))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (let ([chars (count-chars words)])\n              (cond\n                [(chars\
    \ <= max) (first words)]\n                [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length (first words)) 0)\n  \
    \   (find_max (rest words))]\n    [else\n     (let ([chars (count-chars (first\
    \ words) (first words))])\n       (cond\n         [(< chars 1) (find_max (rest\
    \ words))]\n         [(equal? chars 1) (first words)]\n         [else (find_max\
    \ (rest words))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [(equal? (length words) 2) (first words)]\n  \
    \  [else (find_max (rest words))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (string-length words) 0) \"\"]\n    [else (let ([max (string-length\
    \ words)])\n            (let ([count 0])\n              (for ([i (in-range (length\
    \ words))])\n                (cond\n                  [(equal? (string-length\
    \ words) 0)\n                   (cond\n                     [(equal? (string-length\
    \ words) 0)\n                       (cond\n                         [(equal? (string-length\
    \ words) 0)\n                           (cond\n                             [(equal?\
    \ (string-length words) 0)\n                               (cond\n           \
    \                      [(equal? (string-length words) 0)\n                   \
    \                (cond\n                                     [(equal? (string-length\
    \ words) 0)\n                                       (cond\n                  \
    \                       [(equal? (string-length words) 0)\n                  \
    \                         (cond\n                                            \
    \ [(equal? (string-length words) 0)\n                                        \
    \       (cond\n                                                 [(equal? (string-length\
    \ words) 0)\n                                                   (cond\n      \
    \                                               [(equal? (string-length words)\
    \ 0)\n                                                       (cond\n         \
    \                                                [(equal? (string-length words)\
    \ 0)\n                                                           (cond\n     \
    \                                                        [(equal? (string-length\
    \ words) 0)\n                                                               (cond\n\
    \                                                                [(equal? (string-length\
    \ words) 0)\n                                                                \
    \ (cond\n                                                                    [(equal?\
    \ (string-length words) 0)\n                                                 \
    \                    (cond\n                                                 \
    \                    [(equal? (string-length words) 0)\n                     \
    \                                                  (cond\n                   \
    \                                                     [(equal? (string-length\
    \ words) 0)\n                                                                \
    \         (cond\n                                                            \
    \               [(equal? (string-length words) 0)\n                          \
    \                                                 (cond\n                    \
    \                                                         [(equal? (string-length\
    \ words) 0)\n                                                                \
    \               (cond\n                                                      \
    \                         [(equal? (string-length words) 0)\n                \
    \                                                                (cond\n     \
    \                                                                            \
    \ [(equal? (string-length words) 0)\n                                        \
    \                                           (cond\n                          \
    \                                                           [(equal? (string-length\
    \ words) 0)\n                                                                \
    \                       (cond\n                                              \
    \                                           [(equal? (string-length words) 0)\n\
    \                                                                            \
    \               (cond\n                                                      \
    \                                       [(equal? (string-length words) 0)\n  \
    \                                                                            \
    \                 (cond\n                                                    \
    \                                             [(equal? (string-length words) 0)\n\
    \                                                                            \
    \                       (cond\n                                              \
    \                                                       [(equal? (string-length\
    \ words) 0)\n                                                                \
    \                                       (cond\n                              \
    \                                                                         [(equal?\
    \ (string-length words) 0)\n                                                 \
    \                                                       (cond\n              \
    \                                                                            \
    \                [(equal? (string-length words) 0)\n                         \
    \                                                                            \
    \      (cond\n                                                               \
    \                                              [(equal? (string-length words)\
    \ 0)\n                                                                       \
    \                                        (cond\n                             \
    \                                                                            \
    \      [(equal? (string-length words) 0)\n                                   \
    \                                                                            \
    \ (cond\n                                                                    \
    \                                              [(equal? (string-length words)\
    \ 0)\n                                                                       \
    \                                            (cond\n                         \
    \                                       ", "  (cond\n    [(empty? words) \"\"\
    ]\n    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n   \
    \ [else\n     (let ([count (count-chars (first words) #\\space)])\n       (cond\n\
    \         [(> count 0)\n          (find_max (rest words))]\n         [else\n \
    \         (cons (first words) (find_max (rest words))))])))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [else (let ([max (length words)])\n            (let ([unique (count-unique\
    \ (map string->string words))])\n              (cond\n                [(> max\
    \ unique) \"\"]\n                [else (first words)]))]))]))\n", "  (cond\n \
    \   [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n   \
    \ [(equal? (length words) 2) (first words)]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (cond\n             [(equal? (length words) 2) (cons (first words)\
    \ (find_max (rest words)))]\n             [(equal? (length words) 3) (cons (first\
    \ words) (find_max (rest words))\n                                           \
    \   (cons (second words) (find_max (rest words))))]\n             [else (find_max\
    \ (rest words))])]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (cond\n              [(equal? (length words) 1) \"\"]\n              [(equal?\
    \ (length words) max) (first words)]\n              [else (let ([i (length words)])\n\
    \                       (cond\n                         [(equal? (length words)\
    \ 1) \"\"]\n                         [(equal? (length words) max) (first words)]\n\
    \                         [else (let ([j (length words)])\n                  \
    \               (cond\n                                   [(equal? (length words)\
    \ 1) \"\"]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length words) max) (first\
    \ words)]\n                                   [(equal? (length word", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [else (let ([max (length words)])\n            (let ([chars (count-chars words)])\n\
    \              (cond\n                [(chars > max) words]\n                [else\
    \ (cons (first words) (find_max (rest words))))]))]))))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (count (first words))\n              (count (find_max\
    \ (rest words))))\n     (first words)]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (count max words) (count (first words))) max]\n              [else (find_max\
    \ (rest words))]))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0 |>\n\
    <code>", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first\
    \ words)]\n    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ words)])\n              (cond\n                [(chars <= max) (first words)]\n\
    \                [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n\
    \    [else\n     (let ([max (length (first words))])\n       (cond\n         [(equal?\
    \ (length (first words)) max)\n          (find_max (rest words))]\n         [else\n\
    \          (let ([count (length words)])\n            (cond\n              [(equal?\
    \ (length words) 1)\n               (first words)]\n              [else\n    \
    \           (let ([max (length (first words))])\n                 (cond\n    \
    \               [(equal? (length (first words)) max)\n                    (find_max\
    \ (rest words))]\n                   [else\n                    (let ([count (length\
    \ words)])\n                      (cond\n                        [(equal? (length\
    \ words) 1)\n                         (first words)]\n                       \
    \ [else\n                         (let ([max (length (first words))])\n      \
    \                     (cond\n                             [(equal? (length (first\
    \ words)) max)\n                              (find_max (rest words))]\n     \
    \                        [else\n                              (let ([count (length\
    \ words)])\n                                (cond\n                          \
    \        [(equal? (length words) 1)\n                                   (first\
    \ words)]\n                                  [else\n                         \
    \          (let ([max (length (first words))])\n                             \
    \       (cond\n                                      [(equal? (length (first words))\
    \ max)\n                                       (find_max (rest words))]\n    \
    \                                  [else\n                                   \
    \    (let ([count (length words)])\n                                        (cond\n\
    \                                          [(equal? (length words) 1)\n      \
    \                                     (first words)]\n                       \
    \                   [else\n                                           (let ([max\
    \ (length (first words))])\n                                             (cond\n\
    \                                               [(equal? (length (first words))\
    \ max)\n                                                (find_max (rest words))]\n\
    \                                               [else\n                      \
    \                          (let ([count (length words)])\n                   \
    \                               (cond\n                                      \
    \              [(equal? (length words) 1)\n                                  \
    \                   (first words)]\n                                         \
    \           [else\n                                                     (let ([max\
    \ (length (first words))])\n                                                 \
    \     (cond\n                                                        [(equal?\
    \ (length (first words)) max)\n                                              \
    \           (find_max (rest words))]\n                                       \
    \                 [else\n                                                    \
    \     (let ([count (length words)])\n                                        \
    \                  (cond\n                                                   \
    \         [(equal? (length words) 1)\n                                       \
    \                      (first words)]\n                                      \
    \                      [else\n                                               \
    \              (let ([max (length (first words))])\n                         \
    \                                     (cond\n                                \
    \                                [(equal? (length (first words)) max)\n      \
    \                                                           (find_max (rest ",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([unique (count-unique\
    \ (map string->char (first words)))])\n              (cond\n                [(>\
    \ max unique) (first words)]\n                [else (find_max (rest words))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (cond\n            [(equal? (count-unique (first words)) (count-unique\
    \ (second words))) (first words)]\n            [else (cond\n                 \
    \   [(equal? (count-unique (first words)) (count-unique (third words))) (second\
    \ words)]\n                    [else (cond\n                            [(equal?\
    \ (count-unique (first words)) (count-unique (fourth words))) (third words)]\n\
    \                            [(equal? (count-unique (first words)) (count-unique\
    \ (fifth words))) (fourth words)]\n                            [(equal? (count-unique\
    \ (first words)) (count-unique (sixth words))) (fifth words)]\n              \
    \              [(equal? (count-unique (first words)) (count-unique (seventh words)))\
    \ (sixth words)]\n                            [(equal? (count-unique (first words))\
    \ (count-unique (eigth words))) (seventh words)]\n                           \
    \ [(equal? (count-unique (first words)) (count-unique (ninth words))) (eigth words)]\n\
    \                            [(equal? (count-unique (first words)) (count-unique\
    \ (tenth words))) (ninth words)]\n                            [(equal? (count-unique\
    \ (first words)) (count-unique (eleventh words))) (tenth words)]\n           \
    \                 [(equal? (count-unique (first words)) (count-unique (twelfth\
    \ words))) (eleventh words)]\n                            [(equal? (count-unique\
    \ (first words)) (count-unique (thirteenth words))) (twelfth words)]\n       \
    \                     [(equal? (count-unique (first words)) (count-unique (fourteenth\
    \ words))) (thirteenth words)]\n                            [(equal? (count-unique\
    \ (first words)) (count-unique (fifteenth words))) (fourteenth words)]\n     \
    \                       [(equal? (count-unique (first words)) (count-unique (sixteenth\
    \ words))) (fifteenth words)]\n                            [(equal? (count-unique\
    \ (first words)) (count-unique (seventeenth words))) (sixteenth words)]\n    \
    \                        [(equal? (count-unique (first words)) (count-unique (eighteenth\
    \ words))) (seventeenth words)]\n                            [(equal? (count-unique\
    \ (first words)) (count-unique (nineteenth words))) (eighteenth words)]\n    \
    \                        ", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (length words) 1) (first words)]\n    [else (let ([max (length words)])\n  \
    \          (let ([count 0])\n              (for ([i (in-range (length words))])\n\
    \                (let ([word (first words)])\n                  (cond\n      \
    \              [(equal? (length word) 0) \"\"]\n                    [else (cond\n\
    \                          [(equal? (char-code (first word)) (char-code (first\
    \ words))) (cons word (+ count 1))]\n                          [else (cons word\
    \ (+ count 1))]))]))\n              (cond\n                [(equal? max count)\
    \ (first words)]\n                [else (cond\n                      [(equal?\
    \ max count) (cons (first words) (cons count (first words)))]\n              \
    \        [else (cons (first words) (cons count (first words))))]))]))]))\n", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (first words)]\n    [else (let ([max (count-unique\
    \ (first words))])\n            (cond\n              [(> max 0)\n            \
    \   (find_max (rest words))]\n              [(= max 0)\n               (find_max\
    \ (rest words))]\n              [else (find_max (rest words))])))]))\n", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [(equal? (length words) 2) (first words)]\n    [else (let ([max (length words)])\n\
    \             (cond\n               [(equal? (length words) max) (first words)]\n\
    \               [(equal? (length words) (- max 1)) (find_max (rest words))]\n\
    \               [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length\
    \ words) 2) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (let ([count 0])\n              (for [word words]\n                (cond\n\
    \                  [(empty? word) \"\"]\n                  [(equal? (length word)\
    \ max) (cons word count)]\n                  [else (cons (first word) (add1 count))]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (cond\n              [(equal?\
    \ (length words) 1) \"\"]\n              [(equal? (length words) max) (first words)]\n\
    \              [else (let ([max (length words)])\n                       (cond\n\
    \                         [(equal? (length words) 1) \"\"]\n                 \
    \        [(equal? (length words) max) (first words)]\n                       \
    \  [else (let ([max (length words)])\n                                (cond\n\
    \                                  [(equal? (length words) 1) \"\"]\n        \
    \                          [(equal? (length words) max) (first words)]\n     \
    \                             [else (let ([max (length words)])\n            \
    \                              (cond\n                                       \
    \     [(equal? (length words) 1) \"\"]\n                                     \
    \       [(equal? (length words) max) (first words)]\n                        \
    \                    [else (let ([max (length words)])\n                     \
    \                               (cond\n                                      \
    \                [(equal? (length words) 1) \"\"]\n                          \
    \                            [(equal? (length words) max) (first words)]\n   \
    \                                                   [else (let ([max (length words)])\n\
    \                                                              (cond\n       \
    \                                                         [(equal? (length words)\
    \ 1) \"\"]\n                                                                [(equal?\
    \ (length words) max) (first words)]\n                                       \
    \                         [else (let ([max (length words)])\n                \
    \                                                        (cond\n             \
    \                                                             [(equal? (length\
    \ words) 1) \"\"]\n                                                          \
    \                [(equal? (length words) max) (first words)]\n               \
    \                                                           [else (let ([max (length\
    \ words)])\n                                                                 \
    \                 (cond\n                                                    \
    \                [(equal? (length words) 1) \"\"]\n                          \
    \                                          [(equal? (length words) max) (first\
    \ words)]\n                                                                  \
    \  [else (let ([max (length words)])\n                                       \
    \                                       (cond\n                              \
    \                                                  [ (equal? (length words) 1)\
    \ \"\"]\n                                                                    \
    \            [ (equal? (length words) max) (first words)]\n                  \
    \                                                              [else (let ([max\
    \ (length words)])\n                                                         \
    \                                (cond\n                                     \
    \                                   [(equal? (length words) 1) \"\"]\n       \
    \                                                                 [(equal? (length\
    \ words) max) (first words)]\n                                               \
    \                         [else (let ([max (length words)])\n                \
    \                                                                       (cond\n\
    \                                                                        [(equal?\
    \ (length words) 1) \"\"]\n                                                  \
    \                      [(equal? (length words) max) (first words)]\n         \
    \                                                               [else (let ([max\
    \ (length words)])\n                                                         \
    \                              (cond\n                                       \
    \                                 [(equal? (length words) 1) \"\"]\n         \
    \                       ", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (let ([counts (make-hash)])\n              (for ([i (in-range (length words))])\n\
    \                (hash-set! counts (substring (first words) i i) (in-hash counts\
    \ i)))\n              (let ([max-count (hash-ref counts max)])\n             \
    \   (cond\n                  [(not (hash-empty? counts)) (first words)]\n    \
    \              [(> max-count (hash-ref counts max)) (first words)]\n         \
    \         [else (find_max (rest words))])))])))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length (first words)) 0)\n     (find_max (rest words))]\n\
    \    [else\n     (let ([chars (count-chars (first words) (first words))])\n  \
    \     (cond\n         [(> chars 1) \"\"]\n         [(equal? (max chars chars)\
    \ chars)\n          (find_max (rest words))]\n         [else\n          (cons\
    \ (first words) (find_max (rest words))))])))])\n", "  (define (count-unique str\
    \ count)\n    (cond\n      [(empty? str) count]\n      [(equal? (first str) (rest\
    \ str)) (count-unique (rest str) (+ count 1))]\n      [else (count-unique (rest\
    \ str) (+ count 1))]))\n  (define (max-count count)\n    (cond\n      [(> count\
    \ 0) (first count)]\n      [else \"\"]))\n  (define (max-count count)\n    (cond\n\
    \      [(> count 0) (first count)]\n      [else \"\"]))\n  (define (max-count\
    \ count)\n    (cond\n      [(> count 0) (first count)]\n      [else \"\"]))\n\
    \  (define (max-count count)\n    (cond\n      [(> count 0) (first count)]\n \
    \     [else \"\"]))\n  (define (max-count count)\n    (cond\n      [(> count 0)\
    \ (first count)]\n      [else \"\"]))\n  (define (max-count count)\n    (cond\n\
    \      [(> count 0) (first count)]\n      [else \"\"]))\n  (define (max-count\
    \ count)\n    (cond\n      [(> count 0) (first count)]\n      [else \"\"]))\n\
    \  (define (max-count count)\n    (cond\n      [(> count 0) (first count)]\n \
    \     [else \"\"]))\n  (define (max-count count)\n    (cond\n      [(> count 0)\
    \ (first count)]\n      [else \"\"]))\n  (define (max-count count)\n    (cond\n\
    \      [(> count 0) (first count)]\n      [else \"\"]))\n  (define (max-count\
    \ count)\n    (cond\n      [(> count 0) (first count)]\n      [else \"\"]))\n\
    \  (define (max-count count)\n    (cond\n      [(> count 0) (first count)]\n \
    \     [else \"\"]))\n  (define (max-count count)\n    (cond\n      [(> count 0)\
    \ (first count)]\n      [else \"\"]))\n  (define (max-count count)\n    (cond\n\
    \      [(> count 0) (first count)]\n      [else \"\"]))\n  (define (max-count\
    \ count)\n    (cond\n      [(> count 0) (first count)]\n      [else \"\"]))\n\
    \  (define (max-count count)\n    (cond\n      [(> count 0) (first count)]\n \
    \     [else \"\"]))\n  (define (max-count count)\n    (cond\n      [(> count 0)\
    \ (first count)]\n      [else \"\"]))\n  (define (max-count count)\n    (cond\n\
    \      [(> count 0) (first count)]\n      [else \"\"]))\n  (define ", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length (first words)) (length (rest\
    \ words))) (reverse (first words))]\n    [else (find_max (rest words))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [(equal? (length words) 2) (first words)]\n    [else (let ([max (length words)])\n\
    \            (let ([chars (count-chars words)])\n              (cond\n       \
    \         [(chars <= max) (first words)]\n                [else (find_max (rest\
    \ words))])))])))\n", "  (define (helper word count)\n    (cond ((null? word)\
    \ \"\")\n          ((equal? (length word) (- count 1))\n           (car word))\n\
    \          (else\n           (helper (cdr word) (+ count 1)))))\n  (helper words\
    \ 0))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (let ([max (first words)])\n             (cond\n \
    \             [(equal? (length words) 1) max]\n              [(equal? (length\
    \ words) 2) (first words)]\n              [(equal? (length words) 3) (first words)]\n\
    \              [(equal? (length words) 4) (first words)]\n              [(equal?\
    \ (length words) 5) (first words)]\n              [(equal? (length words) 6) (first\
    \ words)]\n              [(equal? (length words) 7) (first words)]\n         \
    \     [(equal? (length words) 8) (first words)]\n              [(equal? (length\
    \ words) 9) (first words)]\n              [(equal? (length words) 10) (first words)]\n\
    \              [(equal? (length words) 11) (first words)]\n              [(equal?\
    \ (length words) 12) (first words)]\n              [(equal? (length words) 13)\
    \ (first words)]\n              [(equal? (length words) 14) (first words)]\n \
    \             [(equal? (length words) 15) (first words)]\n              [(equal?\
    \ (length words) 16) (first words)]\n              [(equal? (length words) 17)\
    \ (first words)]\n              [(equal? (length words) 18) (first words)]\n \
    \             [(equal? (length words) 19) (first words)]\n              [(equal?\
    \ (length words) 20) (first words)]\n              [(equal? (length words) 21)\
    \ (first words)]\n              [(equal? (length words) 22) (first words)]\n \
    \             [(equal? (length words) 23) (first words)]\n              [(equal?\
    \ (length words) 24) (first words)]\n              [(equal? (length words) 25)\
    \ (first words)]\n              [(equal? (length words) 26) (first words)]\n \
    \             [(equal? (length words) 27) (first words)]\n              [(equal?\
    \ (length words) 28) (first words)]\n              [(equal? (length words) 29)\
    \ (first words)]\n              [(equal? (length words) 30) (first words)]\n \
    \             [(equal? (length words) 31) (first words)]\n              [(equal?\
    \ (length words) 32) (first words)]\n              [(equal? (length words) 33)\
    \ (first words)]\n              [(equal? (length words) 34) (first words)]\n \
    \             [(equal? (length words) 35) (first words)]\n              [(equal?\
    \ (length words) 36) (first words)]\n              [(equal? (length word", " \
    \ (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ words)])\n              (cond\n                [(chars > max) (first words)]\n\
    \                [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty?\
    \ words) \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let\
    \ ([max (length words)])\n            (cond\n              [(equal? (fold-right\
    \ (lambda (x y) (+ x y)) 0 words) max) \"\"]\n              [(equal? (fold-right\
    \ (lambda (x y) (+ x y)) 0 words) max) (first words)]\n              [else (let\
    \ ([max (fold-right (lambda (x y) (+ x y)) 0 words)])\n                    (cond\n\
    \                      [(equal? (fold-right (lambda (x y) (+ x y)) 0 words) max)\
    \ (first words)]\n                      [else (find_max (rest words))])))])))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (count (first words)) 1)\n   \
    \  (first words)]\n    [else\n     (let ([max (first words)])\n       (cond\n\
    \         [(equal? (count (first words) max) 1)\n          (find_max (rest words))]\n\
    \         [else\n          (let ([count (count (first words) max)])\n        \
    \    (cond\n              [(equal? count 1)\n               (find_max (rest words))]\n\
    \              [else\n               (cons (first words) (find_max (rest words)))]))]))]))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (count-unique (first words))])\n            (cond\n    \
    \          [(< max 1) (first words)]\n              [(= max 1) \"\"]\n       \
    \       [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length words)\
    \ 2) (first words)]\n    [else (let ([max (length words)])\n            (cond\n\
    \              [(equal? (length words) max) (first words)]\n              [(equal?\
    \ (length words) (max - 1)) \"\"]\n              [else (let ([count 0])\n    \
    \                   (for ([i (in-range (length words))])\n                   \
    \      (cond\n                           [(equal? (char-code (first words) i)\
    \ (char-code (first words) (i + 1))) (add1 count)]\n                         \
    \  [(equal? (char-code (first words) i) (char-code (first words) (i + 1))) (sub1\
    \ count)]\n                           [(equal? (char-code (first words) i) (char-code\
    \ (first words) (i + 1))) (sub1 count)]\n                           [(equal? (char-code\
    \ (first words) i) (char-code (first words) (i + 1))) (add1 count)]\n        \
    \                   [(equal? (char-code (first words) i) (char-code (first words)\
    \ (i + 1))) (sub1 count)]\n                           [(equal? (char-code (first\
    \ words) i) (char-code (first words) (i + 1))) (add1 count)]\n               \
    \            [(equal? (char-code (first words) i) (char-code (first words) (i\
    \ + 1))) (sub1 count)]\n                           [(equal? (char-code (first\
    \ words) i) (char-code (first words) (i + 1))) (add1 count)]\n               \
    \            [(equal? (char-code (first words) i) (char-code (first words) (i\
    \ + 1))) (sub1 count)]\n                           [(equal? (char-code (first\
    \ words) i) (char-code (first words) (i + 1))) (add1 count)]\n               \
    \            [(equal? (char-code (first words) i) (char-code (first words) (i\
    \ + 1))) (sub1 count)]\n                           [(equal? (char-code (first\
    \ words) i) (char-code (first words) (i + 1))) (add1 count)]\n               \
    \            [(equal? (char-code (first words) i) (char-code (first words) (i\
    \ + 1))) (sub1 count)]\n                           [(equal? (char-code (first\
    \ words) i) (char-code (first words) (i + 1))) (add1 count)]\n               \
    \            [(equal? (char-code (first words) i) (char-code ", "  (cond\n   \
    \ [(empty? words) \"\"]\n    [(equal? (string-length words) 0) \"\"]\n    [else\
    \ (let ([word (first words)])\n            (cond\n              [(equal? (string-length\
    \ word) 0) \"\"]\n              [(equal? (string-length word) 1) word]\n     \
    \         [(equal? (string-length word) 2) (concat word \"a\")]\n            \
    \  [(equal? (string-length word) 3) (concat word \"aa\")]\n              [(equal?\
    \ (string-length word) 4) (concat word \"aaa\")]\n              [(equal? (string-length\
    \ word) 5) (concat word \"aaaa\")]\n              [(equal? (string-length word)\
    \ 6) (concat word \"aaaaa\")]\n              [(equal? (string-length word) 7)\
    \ (concat word \"aaaaaa\")]\n              [(equal? (string-length word) 8) (concat\
    \ word \"aaaaaaa\")]\n              [(equal? (string-length word) 9) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 10) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 11) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 12) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 13) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 14) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 15) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 16) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 17) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 18) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 19) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 20) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 21) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 22) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 23) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 24) (concat word\
    \ \"aaaaaaa\")]\n              [(equal? (string-length word) 25) (concat word\
    \ \"aaaaaaa\")]\n              [(", "  (cond\n    [(empty? words) \"\"]\n    [(equal?\
    \ (length words) 1) (first words)]\n    [else (let ([max (length words)])\n  \
    \          (let ([count 0])\n              (for ([i (in-range (length words))])\n\
    \                (cond\n                  [(equal? (count (substring words (+\
    \ i 1) (+ max 1))) 0)\n                   (set! count (+ count 1))\n         \
    \          (set! max (max 1))]\n                  [(equal? (count (substring words\
    \ (+ i 1) (+ max 1))) 1)\n                   (set! count (+ count 1))\n      \
    \             (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 2)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 3)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 4)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 5)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 6)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 7)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 8)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 9)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (+ max 1))) 10)\n                   (set! count (+ count 1))\n\
    \                   (set! max (max 1))]\n                  [(equal? (count (substring\
    \ words (+ i 1) (", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([max (length words)])\n          \
    \  (cond\n              [(equal? (foldr (lambda (x y) (if (char-count x y) (+\
    \ x y) y) 0) words) max) \"\"]\n              [(equal? (foldr (lambda (x y) (if\
    \ (char-count x y) (+ x y) y) 0) words) max) (first words)]\n              [else\
    \ (let ([max (foldr (lambda (x y) (if (char-count x y) (+ x y) y) 0) words)])\n\
    \                    (cond\n                      [(equal? max max) \"\"]\n  \
    \                    [(equal? max max) (first words)]\n                      [else\
    \ (find_max (rest words))])))])))]))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length (first words)) 1) (first words)]\n    [else (find_max (rest\
    \ words))]))\n", "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words)\
    \ 1) (first words)]\n    [else (cond\n             [(equal? (count-unique (first\
    \ words)) (count-unique (second words))) (first words)]\n             [(equal?\
    \ (count-unique (first words)) (count-unique (third words))) (second words)]\n\
    \             [(equal? (count-unique (first words)) (count-unique (fourth words)))\
    \ (third words)]\n             [(equal? (count-unique (first words)) (count-unique\
    \ (fifth words))) (fourth words)]\n             [(equal? (count-unique (first\
    \ words)) (count-unique (sixth words))) (fifth words)]\n             [(equal?\
    \ (count-unique (first words)) (count-unique (seventh words))) (sixth words)]\n\
    \             [(equal? (count-unique (first words)) (count-unique (eigth words)))\
    \ (seventh words)]\n             [(equal? (count-unique (first words)) (count-unique\
    \ (ninth words))) (eigth words)]\n             [(equal? (count-unique (first words))\
    \ (count-unique (tenth words))) (ninth words)]\n             [(equal? (count-unique\
    \ (first words)) (count-unique (eleventh words))) (tenth words)]\n           \
    \  [(equal? (count-unique (first words)) (count-unique (twelfth words))) (eleventh\
    \ words)]\n             [(equal? (count-unique (first words)) (count-unique (thirteenth\
    \ words))) (twelfth words)]\n             [(equal? (count-unique (first words))\
    \ (count-unique (fourteenth words))) (thirteenth words)]\n             [(equal?\
    \ (count-unique (first words)) (count-unique (fifteenth words))) (fourteenth words)]\n\
    \             [(equal? (count-unique (first words)) (count-unique (sixteenth words)))\
    \ (fifteenth words)]\n             [(equal? (count-unique (first words)) (count-unique\
    \ (seventeenth words))) (sixteenth words)]\n             [(equal? (count-unique\
    \ (first words)) (count-unique (eighteenth words))) (seventeenth words)]\n   \
    \          [(equal? (count-unique (first words)) (count-unique (nineteenth words)))\
    \ (eighteenth words)]\n             [(equal? (count-unique (first words)) (",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (length words)])\n            (let ([chars (count-chars\
    \ (first words) (first words))])\n              (cond\n                [(> max\
    \ chars) (first words)]\n                [else (find_max (rest words))])))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis solution is very elegant and\
    \ concise. Thank you!\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n\
    \    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n  \
    \  [else (let ([max (length words)])\n            (let ([count 0])\n         \
    \     (for ([i (in-range (length words))])\n                (cond\n          \
    \        [(equal? (char-count (first words) (first words)) count)\n          \
    \         (let ([char (char-count (first words) (first words))])\n           \
    \          (cond\n                      [(< char max)\n                      \
    \ (cons char (cons (first words) (cons count (second words))))]\n            \
    \          [else (cons char (cons (first words) (cons count (second words))))]\n\
    \                      ))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  [else (cons (first words) (cons\
    \ count (second words))))]\n                  ", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [else (let ([max (first\
    \ words)])\n            (cond\n              [(equal? (length words) 1) \"\"]\n\
    \              [(equal? (length words) 2) (first words)]\n              [(equal?\
    \ (length words) 3) (first words)]\n              [(equal? (length words) 4) (first\
    \ words)]\n              [(equal? (length words) 5) (first words)]\n         \
    \     [(equal? (length words) 6) (first words)]\n              [(equal? (length\
    \ words) 7) (first words)]\n              [(equal? (length words) 8) (first words)]\n\
    \              [(equal? (length words) 9) (first words)]\n              [(equal?\
    \ (length words) 10) (first words)]\n              [(equal? (length words) 11)\
    \ (first words)]\n              [(equal? (length words) 12) (first words)]\n \
    \             [(equal? (length words) 13) (first words)]\n              [(equal?\
    \ (length words) 14) (first words)]\n              [(equal? (length words) 15)\
    \ (first words)]\n              [(equal? (length words) 16) (first words)]\n \
    \             [(equal? (length words) 17) (first words)]\n              [(equal?\
    \ (length words) 18) (first words)]\n              [(equal? (length words) 19)\
    \ (first words)]\n              [(equal? (length words) 20) (first words)]\n \
    \             [(equal? (length words) 21) (first words)]\n              [(equal?\
    \ (length words) 22) (first words)]\n              [(equal? (length words) 23)\
    \ (first words)]\n              [(equal? (length words) 24) (first words)]\n \
    \             [(equal? (length words) 25) (first words)]\n              [(equal?\
    \ (length words) 26) (first words)]\n              [(equal? (length words) 27)\
    \ (first words)]\n              [(equal? (length words) 28) (first words)]\n \
    \             [(equal? (length words) 29) (first words)]\n              [(equal?\
    \ (length words) 30) (first words)]\n              [(equal? (length words) 31)\
    \ (first words)]\n              [(equal? (length words) 32) (first words)]\n \
    \             [(equal? (length words) 33) (first words)]\n              [(equal?\
    \ (length words) 34) (first words)]\n              [(equal? (length words) 35)\
    \ (first words)]\n              [(equal? (length words) 36) (first words)]\n \
    \             [(equal? (length word", "  (cond\n    [(empty? words) \"\"]\n  \
    \  [(equal? (length words) 1) (first words)]\n    [else (let ([max (count (first\
    \ words))])\n             (cond\n              [(> max 0)\n               (find_max\
    \ (rest words))]\n              [(= max 0)\n               (first words)]\n  \
    \            [else (find_max (rest words))])))]))\n", "  (cond\n    [(empty? words)\
    \ \"\"]\n    [(equal? (length words) 1) (first words)]\n    [(equal? (length words)\
    \ 2) (first words)]\n    [else (let ([max (length words)])\n            (cond\n\
    \              [(equal? (length words) max) (first words)]\n              [(equal?\
    \ (length words) (max - 1)) \"\"]\n              [else (let ([count 0])\n    \
    \                   (for ([i (in-range (length words))])\n                   \
    \      (cond\n                           [(equal? (char-code (first words) i)\
    \ (char-code (first words) (i + 1))) (add1 count)]\n                         \
    \  [else (add1 count)]))\n                       (cond\n                     \
    \    [(equal? (char-code (first words) max) (char-code (first words) (max - 1)))\
    \ (sub1 count)]\n                         [else (sub1 count)]))\n            \
    \           (cond\n                         [(equal? (char-code (first words)\
    \ (max - 1)) (char-code (first words) max)) (sub1 count)]\n                  \
    \       [else (sub1 count)]))]))]))))\n", "  (cond\n    [(empty? words) \"\"]\n\
    \    [(equal? (length words) 1) (first words)]\n    [(equal? (length words) 2)\
    \ (first words)]\n    [else (let ([max (length words)])\n            (let ([chars\
    \ (count-chars words)])\n              (cond\n                [(chars > max) words]\n\
    \                [else (cons (first words) (find_max (rest words))))]))]))))\n",
  "  (cond\n    [(empty? words) \"\"]\n    [(equal? (length words) 1) (first words)]\n\
    \    [else (let ([max (first words)])\n            (cond\n              [(equal?\
    \ (length words) 1) \"\"]\n              [(equal? (length words) 2) (cons (first\
    \ words) (first words))]\n              [(equal? (length words) 3) (cons (first\
    \ words) (first words) (first words))]\n              [(equal? (length words)\
    \ 4) (cons (first words) (first words) (first words) (first words))]\n       \
    \       [(equal? (length words) 5) (cons (first words) (first words) (first words)\
    \ (first words) (first words))]\n              [(equal? (length words) 6) (cons\
    \ (first words) (first words) (first words) (first words) (first words) (first\
    \ words))]\n              [(equal? (length words) 7) (cons (first words) (first\
    \ words) (first words) (first words) (first words) (first words) (first words))]\n\
    \              [(equal? (length words) 8) (cons (first words) (first words) (first\
    \ words) (first words) (first words) (first words) (first words) (first words))]\n\
    \              [(equal? (length words) 9) (cons (first words) (first words) (first\
    \ words) (first words) (first words) (first words) (first words) (first words)\
    \ (first words))]\n              [(equal? (length words) 10) (cons (first words)\
    \ (first words) (first words) (first words) (first words) (first words) (first\
    \ words) (first words) (first words) (first words))]\n              [(equal? (length\
    \ words) 11) (cons (first words) (first words) (first words) (first words) (first\
    \ words) (first words) (first words) (first words) (first words) (first words)\
    \ (first words))]\n              [(equal? (length words) 12) (cons (first words)\
    \ (first words) (first words) (first words) (first words) (first words) (first\
    \ words) (first words) (first words) (first words) (first words) (first words))]\n\
    \              [(equal? (length words) 13) (cons (first words) (first words) (first\
    \ words) "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
