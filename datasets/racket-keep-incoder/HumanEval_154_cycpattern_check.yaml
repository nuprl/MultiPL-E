name: HumanEval_154_cycpattern_check
language: racket
prompt: "#lang racket\n\n;; You are given 2 words. You need to return True if the\
  \ second word or any of its rotations is a substring in the first word\n;; cycpattern_check(\"\
  abcd\",\"abd\") => False\n;; cycpattern_check(\"hello\",\"ell\") => True\n;; cycpattern_check(\"\
  whassup\",\"psus\") => False\n;; cycpattern_check(\"abab\",\"baa\") => True\n;;\
  \ cycpattern_check(\"efef\",\"eeff\") => False\n;; cycpattern_check(\"himenss\"\
  ,\"simen\") => True\n(define (cycpattern_check a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n\
  \    (check-equal? (candidate \"xyzw\" \"xyw\") #f)\n    (check-equal? (candidate\
  \ \"yello\" \"ell\") #t)\n    (check-equal? (candidate \"whattup\" \"ptut\") #f)\n\
  \    (check-equal? (candidate \"efef\" \"fee\") #t)\n    (check-equal? (candidate\
  \ \"abab\" \"aabb\") #f)\n    (check-equal? (candidate \"winemtt\" \"tinem\") #t)\n\
  ))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
