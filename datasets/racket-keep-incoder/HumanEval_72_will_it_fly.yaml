name: HumanEval_72_will_it_fly
language: racket
prompt: "#lang racket\n\n;; Write a function that returns True if the object q will\
  \ fly, and False otherwise.\n;; The object q will fly if it's balanced (it is a\
  \ palindromic list) and the sum of its elements is less than or equal the maximum\
  \ possible weight w.\n;; Example:\n;; will_it_fly([1, 2], 5) \u279E False \n;; #\
  \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n;; will_it_fly([3,\
  \ 2, 3], 1) \u279E False\n;; # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n;; will_it_fly([3, 2, 3], 9) \u279E True\n;; # 3+2+3 is less\
  \ than the maximum possible weight, and it's balanced.\n;; will_it_fly([3], 5) \u279E\
  \ True\n;; # 3 is less than the maximum possible weight, and it's balanced.\n(define\
  \ (will_it_fly q w)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n\
  \    (check-equal? (candidate (list 3 2 3) 9) #t)\n    (check-equal? (candidate\
  \ (list 1 2) 5) #f)\n    (check-equal? (candidate (list 3) 5) #t)\n    (check-equal?\
  \ (candidate (list 3 2 3) 1) #f)\n    (check-equal? (candidate (list 1 2 3) 6) #f)\n\
  \    (check-equal? (candidate (list 5) 5) #t)\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
