name: HumanEval_78_hex_key
language: racket
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n;; For num = \"AB\" the output should be 1.\n\
  ;; For num = \"1077E\" the output should be 2.\n;; For num = \"ABED1A33\" the output\
  \ should be 4.\n;; For num = \"123456789ABCDEF0\" the output should be 6.\n;; For\
  \ num = \"2020\" the output should be 2.\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(null?\
    \ num) 0]\n        [(= (length num) 1) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 2) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 3) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 4) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 5) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 6) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 7) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 8) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 9) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 10) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 11) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 12) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 13) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 14) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 15) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 16) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 17) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 18) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 19) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 20) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 21) (+ 1 (hex_key(substring num 0 (length num))))]\n\
    \        [(= (length num) 22) (+ 1 (hex_key(substring num 0 (", "  (cond\n   \
    \ [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n             \
    \                (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                  \
    \           (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [else (+ 1 (hex_key\
    \ (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (first num)) (char #\\A)) 0]\n    [(equal? (char-code (first num)) (char #\\\
    B)) 1]\n    [(equal? (char-code (first num)) (char #\\C)) 2]\n    [(equal? (char-code\
    \ (first num)) (char #\\D)) 3]\n    [(equal? (char-code (first num)) (char #\\\
    E)) 4]\n    [(equal? (char-code (first num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\n\
    \                   (substring num 1 (char-code (first num))))))))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key(sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key(sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key(sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key(sub1\
    \ num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key(sub1 num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key(sub1 num)))]\n    [else (+ 1 (hex_key(sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                            (substring (rest num) 1 2)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key\n                               (substring (rest num)\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \         (substring (rest num) 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                               (substring (rest num) 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                               (substring (rest num)\
    \ 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                      \
    \         (substring (rest num) 1 7)))]\n    [else (+ 1 (hex_key (substring (rest\
    \ num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \           (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'F) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(string=? num\
    \ '()) 0]\n        [(string=? (string-ref num 0) 'A) 1]\n        [(string=? (string-ref\
    \ num 0) 'B) 2]\n        [(string=? (string-ref num 0) 'C) 3]\n        [(string=?\
    \ (string-ref num 0) 'D) 4]\n        [(string=? (string-ref num 0) 'E) 5]\n  \
    \      [(string=? (string-ref num 0) 'F) 6]\n        [else (+ 1 (hex_key\n   \
    \                    (substring num 1 1))\n                       (hex_key\n \
    \                      (substring num 2 1))\n                       (hex_key\n\
    \                       (substring num 3 1))\n                       (hex_key\n\
    \                       (substring num 4 1))\n                       (hex_key\n\
    \                       (substring num 5 1))\n                       (hex_key\n\
    \                       (substring num 6 1))\n                       (hex_key\n\
    \                       (substring num 7 1))\n                       (hex_key\n\
    \                       (substring num 8 1))\n                       (hex_key\n\
    \                       (substring num 9 1))\n                       (hex_key\n\
    \                       (substring num 10 1))\n                       (hex_key\n\
    \                       (substring num 11 1))\n                       (hex_key\n\
    \                       (substring num 12 1))\n                       (hex_key\n\
    \                       (substring num 13 1))\n                       (hex_key\n\
    \                       (substring num 14 1))\n                       (hex_key\n\
    \                       (substring num 15 1))\n                       (hex_key\n\
    \                       (substring num 16 1))\n                       (hex_key\n\
    \                       (substring num 17 1))\n                       (hex_key\n\
    \                       (substring num 18 1))\n                       (hex_key\n\
    \                       (substring num 19 1))\n                       (hex_key\n\
    \                       (substring num 20 1))\n                       (hex_key\n\
    \                       (substring num 21 1))\n                       (hex_key\n\
    \                       (substring num 22 1))\n                       (hex_key\n\
    \                       (substring num 23 1))\n                       (hex_key\n\
    \                       (substring num 24 1))\n                       (hex_key\n\
    \                       (substring num 25 1))\n                       (hex_key\n\
    \                       (substring num 26 1))\n                       (hex_key\n\
    \                       (substring num 27 1))\n                       (hex_key\n\
    \                       (substring num 28 1))\n                       (hex_key\n\
    \                       (substring num 29 1))\n                       (hex_key\n\
    \                       (substring num 30 1))\n                       (hex_key\n\
    \                       (substring num 31 1))\n                       (hex_key\n\
    \                       (substring num 32 1))\n                       (hex", " \
    \ (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                                (rest num)))]\n        [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                                   (rest num)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                                   (rest num)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key\n                            \
    \       (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\n      \
    \                             (rest num)))]\n        [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                                   (rest num)))]\n        [else\
    \ (+ 1 (hex_key\n                     (rest num)))]))\n", "  (define (helper num\
    \ key acc)\n    (cond\n      [(empty? num) acc]\n      [(char=? (first num) 'A)\
    \ (helper (rest num) key (+ acc (* key 10 (char->integer \n                  \
    \                                              (first num)))))]\n      [(char=?\
    \ (first num) 'B) (helper (rest num) key (+ acc (* key 10 (char->integer \n  \
    \                                                              (first num)))))]\n\
    \      [(char=? (first num) 'C) (helper (rest num) key (+ acc (* key 10 (char->integer\
    \ \n                                                                (first num)))))]\n\
    \      [(char=? (first num) 'D) (helper (rest num) key (+ acc (* key 10 (char->integer\
    \ \n                                                                (first num)))))]\n\
    \      [(char=? (first num) 'E) (helper (rest num) key (+ acc (* key 10 (char->integer\
    \ \n                                                                (first num)))))]\n\
    \      [(char=? (first num) 'F) (helper (rest num) key (+ acc (* key 10 (char->integer\
    \ \n                                                                (first num)))))]\n\
    \      [(char=? (first num) '0') (helper (rest num) key acc)]\n      [(char=?\
    \ (first num) '1') (helper (rest num) key acc)]\n      [(char=? (first num) '2')\
    \ (helper (rest num) key acc)]\n      [(char=? (first num) '3') (helper (rest\
    \ num) key acc)]\n      [(char=? (first num) '4') (helper (rest num) key acc)]\n\
    \      [(char=? (first num) '5') (helper (rest num) key acc)]\n      [(char=?\
    \ (first num) '6') (helper (rest num) key acc)]\n      [(char=? (first num) '7')\
    \ (helper (rest num) key acc)]\n      [(char=? (first num) '8') (helper (rest\
    \ num) key acc)]\n      [(char=? (first num) '9') (helper (rest num) key acc)]\n\
    \      [(char=? (first num) 'A') (helper (rest num) key acc)]\n      [(char=?\
    \ (first num) 'B') (helper (rest num) key acc)]\n      [(char=? (first num) 'C')\
    \ (helper (rest num) ", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (first num)) (char #\\A)) 0]\n    [(equal? (char-code (first num)) (char #\\\
    B)) 1]\n    [(equal? (char-code (first num)) (char #\\C)) 2]\n    [(equal? (char-code\
    \ (first num)) (char #\\D)) 3]\n    [(equal? (char-code (first num)) (char #\\\
    E)) 4]\n    [(equal? (char-code (first num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\n\
    \                   (substring (first num) 2)\n                   (substring (first\
    \ num) 3)\n                   (substring (first num) 4)\n                   (substring\
    \ (first num) 5)\n                   (substring (first num) 6)\n             \
    \      (substring (first num) 7)\n                   (substring (first num) 8)\n\
    \                   (substring (first num) 9)\n                   (substring (first\
    \ num) 10)\n                   (substring (first num) 11)\n                  \
    \ (substring (first num) 12)\n                   (substring (first num) 13)\n\
    \                   (substring (first num) 14))]))))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \      (substring (rest num) 0 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                            (substring (rest num) 0 1)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                            (substring (rest num) 0\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \    (substring (rest num) 0 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                            (substring (rest num) 0 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                            (substring (rest num) 0\
    \ 1)))]\n    [else (+ 1 (hex_key (substring (rest num) 0 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(string? num) #f]\n        [else (cond [(string? (string-ref num 0)) #t]\n\
    \                  [(string? (string-ref num 1)) #t]\n                  [(string?\
    \ (string-ref num 2)) #t]\n                  [(string? (string-ref num 3)) #t]\n\
    \                  [(string? (string-ref num 4)) #t]\n                  [(string?\
    \ (string-ref num 5)) #t]\n                  [(string? (string-ref num 6)) #t]\n\
    \                  [(string? (string-ref num 7)) #t]\n                  [(string?\
    \ (string-ref num 8)) #t]\n                  [(string? (string-ref num 9)) #t]\n\
    \                  [(string? (string-ref num 10)) #t]\n                  [(string?\
    \ (string-ref num 11)) #t]\n                  [(string? (string-ref num 12)) #t]\n\
    \                  [(string? (string-ref num 13)) #t]\n                  [(string?\
    \ (string-ref num 14)) #t]\n                  [(string? (string-ref num 15)) #t]\n\
    \                  [(string? (string-ref num 16)) #t]\n                  [(string?\
    \ (string-ref num 17)) #t]\n                  [(string? (string-ref num 18)) #t]\n\
    \                  [(string? (string-ref num 19)) #t]\n                  [(string?\
    \ (string-ref num 20)) #t]\n                  [(string? (string-ref num 21)) #t]\n\
    \                  [(string? (string-ref num 22)) #t]\n                  [(string?\
    \ (string-ref num 23)) #t]\n                  [(string? (string-ref num 24)) #t]\n\
    \                  [(string? (string-ref num 25)) #t]\n                  [(string?\
    \ (string-ref num 26)) #t]\n                  [(string? (string-ref num 27)) #t]\n\
    \                  [(string? (string-ref num 28)) #t]\n                  [(string?\
    \ (string-ref num 29)) #t]\n                  [(string? (string-ref num 30)) #t]\n\
    \                  [(string? (string-ref num 31)) #t]\n                  [(string?\
    \ (string-ref num 32)) #t]\n                  [(string? (string-ref num 33)) #t]\n\
    \                  [(string? (string-ref num 34)) #t]\n                  [(string?\
    \ (string-ref num 35)) #t]\n                  [(string? (string-ref num 36)) #t]\n\
    \                  [(string? (string-ref num 37)) #t]\n                  [(string?\
    \ (string-ref ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key\n                             (substring num 1 (- (length num)\
    \ 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                        \
    \     (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key\n                             (substring num 1 (- (length num) 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ num 1 (- (length num) 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n  \
    \                           (substring num 1 (- (length num) 1)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                             (substring num 1\
    \ (- (length num) 1)))]\n    [else (+ 1 (hex_key (substring num 1 (- (length num)\
    \ 1))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key\n                             (substring num 1 2)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (substring num 1\
    \ 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                        \
    \     (substring num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n   \
    \                          (substring num 1 5)))]\n    [(equal? (first num) 'E)\
    \ (+ 1 (hex_key\n                             (substring num 1 6)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                             (substring num 1\
    \ 7)))]\n    [else (+ 1 (hex_key (substring num 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (rest num)))]\n    [else (+\
    \ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                               (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key\n                               (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (substring (rest num) 1 2)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key\n                             (substring (rest num) 1\
    \ 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                        \
    \     (substring (rest num) 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (substring (rest num) 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                             (substring (rest num) 1\
    \ 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                        \
    \     (substring (rest num) 1 7)))]\n    [else (+ 1 (hex_key (substring (rest\
    \ num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                               (substring (second num) 1\
    \ 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                        \
    \       (substring (second num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                               (substring (second num) 1 4)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key\n                               (substring (second\
    \ num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                 \
    \              (substring (second num) 1 6)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key\n                               (substring (second num) 1 7)))]\n\
    \    [else (+ 1 (hex_key (substring (second num) 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \      (substring (rest num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                            (substring (rest num) 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                            (substring (rest num) 1\
    \ 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \    (substring (rest num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                            (substring (rest num) 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                            (substring (rest num) 1\
    \ 7)))]\n    [else (+ 1 (hex_key (substring (rest num) 1 8)))]))\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (char-code (car num)) (char #\\A)) 0]\n \
    \       [(equal? (char-code (car num)) (char #\\B)) 1]\n        [(equal? (char-code\
    \ (car num)) (char #\\C)) 2]\n        [(equal? (char-code (car num)) (char #\\\
    D)) 3]\n        [(equal? (char-code (car num)) (char #\\E)) 4]\n        [(equal?\
    \ (char-code (car num)) (char #\\F)) 5]\n        [else (+ 1 (hex_key\n       \
    \                (substring (number->string (car num)) 1 \n                  \
    \             (- (length (number->string (car num))) 1)))]))) \n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key(sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key(sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key(sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key(sub1\
    \ num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key(sub1 num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key(sub1 num)))]\n    [else (+ 1 (hex_key(sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                   (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key\n                             (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                             (substring num 1\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \     (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n   \
    \                          (substring num 1 1)))]\n    [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                             (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1\
    \ num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [(equal? (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1\
    \ (hex_key (sub1 num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (sub1\
    \ num)))]\n        [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond [(string=?\
    \ (string-ref num 0) \"A\") 1]\n        [(string=? (string-ref num 0) \"B\") 2]\n\
    \        [(string=? (string-ref num 0) \"C\") 3]\n        [(string=? (string-ref\
    \ num 0) \"D\") 4]\n        [(string=? (string-ref num 0) \"E\") 5]\n        [(string=?\
    \ (string-ref num 0) \"F\") 6]\n        [(string=? (string-ref num 0) \"0\") 7]\n\
    \        [(string=? (string-ref num 0) \"1\") 8]\n        [(string=? (string-ref\
    \ num 0) \"2\") 9]\n        [(string=? (string-ref num 0) \"3\") 10]\n       \
    \ [(string=? (string-ref num 0) \"4\") 11]\n        [(string=? (string-ref num\
    \ 0) \"5\") 12]\n        [(string=? (string-ref num 0) \"6\") 13]\n        [(string=?\
    \ (string-ref num 0) \"7\") 14]\n        [(string=? (string-ref num 0) \"8\")\
    \ 15]\n        [(string=? (string-ref num 0) \"9\") 16]\n        [(string=? (string-ref\
    \ num 0) \"a\") 17]\n        [(string=? (string-ref num 0) \"b\") 18]\n      \
    \  [(string=? (string-ref num 0) \"c\") 19]\n        [(string=? (string-ref num\
    \ 0) \"d\") 20]\n        [(string=? (string-ref num 0) \"e\") 21]\n        [(string=?\
    \ (string-ref num 0) \"f\") 22]\n        [(string=? (string-ref num 0) \"A\")\
    \ 23]\n        [(string=? (string-ref num 0) \"B\") 24]\n        [(string=? (string-ref\
    \ num 0) \"C\") 25]\n        [(string=? (string-ref num 0) \"D\") 26]\n      \
    \  [(string=? (string-ref num 0) \"E\") 27]\n        [(string=? (string-ref num\
    \ 0) \"F\") 28]\n        [(string=? (string-ref num 0) \"0\") 29]\n        [(string=?\
    \ (string-ref num 0) \"1\") 30]\n        [(string=? (string-ref num 0) \"2\")\
    \ 31]\n        [(string=? (string-ref num 0) \"3\") 32]\n        [(string=? (string-ref\
    \ num 0) \"4\") 33]\n        [(string=? (string-ref num 0) \"5\") 34]\n      \
    \  [(string=? (string-ref num 0) \"6\") 35]\n        [(string=? (string-ref num\
    \ 0) \"7\") 36]\n        [(string=? (string-ref num 0) \"8\") 37]\n        [",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key(sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key(sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key(sub1 num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key(sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key(sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key(sub1 num)))]\n    [else (+ 1 (hex_key(sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr num)))]\n    [else (+\
    \ 1 (hex_key(cdr num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                            (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \          (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                            (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                            (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                            (substring num 1\
    \ 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \       (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n \
    \                            (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                  \
    \           (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [else (+ 1 (hex_key\
    \ (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                           (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                           (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \         (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                           (substring num 1 1)))]\n    [(equal? (first num) 'E)\
    \ (+ 1 (hex_key\n                           (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                           (substring num 1 1)))]\n\
    \    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond [(empty? num) 0]\n\
    \        [(equal? (first num) 'A) (+ 1 (hex_key\n                            \
    \       (substring (rest num) 1 2)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                                   (substring (rest num) 1 3)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                                   (substring\
    \ (rest num) 1 4)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key\n       \
    \                            (substring (rest num) 1 5)))]\n        [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                                   (substring (rest\
    \ num) 1 6)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key\n             \
    \                      (substring (rest num) 1 7)))]\n        [else (+ 1 (hex_key\
    \ (substring (rest num) 1 8)))]))\n", "  (cond [(empty? num) 0]\n        [(equal?\
    \ (char-code (car num)) (digit-char (char-code (cadr num))) \n               \
    \   (digit-char (char-code (caddr num))) \n                  (digit-char (char-code\
    \ (caddr num))) \n                  (digit-char (char-code (caddr num))) \n  \
    \                (digit-char (char-code (caddr num))) \n                  (digit-char\
    \ (char-code (caddr num))) \n                  (digit-char (char-code (caddr num)))\
    \ \n                  (digit-char (char-code (caddr num))) \n                \
    \  (digit-char (char-code (caddr num))) \n                  (digit-char (char-code\
    \ (caddr num))) \n                  (digit-char (char-code (caddr num))) \n  \
    \                (digit-char (char-code (caddr num))) \n                  (digit-char\
    \ (char-code (caddr num))) \n                  (digit-char (char-code (caddr num)))\
    \ \n                  (digit-char (char-code (caddr num))) \n                \
    \  (digit-char (char-code (caddr num))) \n                  (digit-char (char-code\
    \ (caddr num))) \n                  (digit-char (char-code (caddr num))) \n  \
    \                (digit-char (char-code (caddr num))) \n                  (digit-char\
    \ (char-code (caddr num))) \n                  (digit-char (char-code (caddr num)))\
    \ \n                  (digit-char (char-code (caddr num))) \n                \
    \  (digit-char (char-code (caddr num))) \n                  (digit-char (char-code\
    \ (caddr num))) \n                  (digit-char (char-code (caddr num))) \n  \
    \                (digit-char (char-code (caddr num))) \n                  (digit-char\
    \ (char-code (caddr num))) \n                  (digit-char (char-code (caddr num)))\
    \ \n                  (digit-char (char-code (caddr num))) \n                \
    \  (digit-char (char-code (caddr num))) \n                  (digit-char (char-code\
    \ (caddr ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key\n                             (substring (second num) 1 2)))]\n   \
    \ [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ (second num) 2 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n         \
    \                    (substring (second num) 3 4)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (substring (second num) 4 5)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                             (substring\
    \ (second num) 5 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n         \
    \                    (substring (second num) 6 7)))]\n    [else (+ 1 (hex_key\
    \ (substring (second num) 0 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                              (substring num\
    \ 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \        (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                              (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                              (substring num 1 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key\n                              (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                  \
    \            (substring num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1\
    \ 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num))\
    \ #\\A) (+ 1 (hex_key(cdr num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n  \
    \                           (substring num 1 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                             (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                             (substring num 1\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \     (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n   \
    \                          (substring num 1 1)))]\n    [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                             (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \       (substring (rest num) 1 )))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (substring (rest num) 1 )))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                             (substring (rest num) 1\
    \ )))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                         \
    \    (substring (rest num) 1 )))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (substring (rest num) 1 )))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                             (substring (rest num) 1\
    \ )))]\n    [else (+ 1 (hex_key (substring (rest num) 1 )))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                     (substring (second num) 0 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key\n                               (substring (second num) 0\
    \ 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                        \
    \       (substring (second num) 0 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                               (substring (second num) 0 1)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                               (substring (second\
    \ num) 0 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                 \
    \              (substring (second num) 0 1)))]\n    [else (+ 1 (hex_key (substring\
    \ (second num) 0 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                            (substring num 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \          (substring num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                            (substring num 1 5)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                            (substring num 1 6)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                            (substring num 1\
    \ 7)))]\n    [else (+ 1 (hex_key (substring num 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                            (rest num)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                               (rest\
    \ num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (char-code (car num)) (char #\\A)) 0]\n \
    \       [(equal? (char-code (car num)) (char #\\B)) 1]\n        [(equal? (char-code\
    \ (car num)) (char #\\C)) 2]\n        [(equal? (char-code (car num)) (char #\\\
    D)) 3]\n        [(equal? (char-code (car num)) (char #\\E)) 4]\n        [(equal?\
    \ (char-code (car num)) (char #\\F)) 5]\n        [else (+ 1 (hex_key\n       \
    \              (substring num 0 (- (length num) 1))))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (first num)) (digit-char (char-code (first\
    \ num))))\n     (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                           (substring num 1 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                              (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                              (substring num\
    \ 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \        (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                              (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                              (substring num 1 1)))]\n  \
    \  [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                           \
    \ (substring (rest num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                            (substring (rest num) 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                            (substring (rest num) 1\
    \ 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \    (substring (rest num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                            (substring (rest num) 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                            (substring (rest num) 1\
    \ 7)))]\n    [else (+ 1 (hex_key (substring (rest num) 1 8)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 2)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (subseq num 3)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key (subseq num 4)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (subseq num 5)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 6)))]\n\
    \    [else (+ 1 (hex_key (subseq num 7)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                           (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \     (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n            \
    \               (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n  \
    \                         (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                           (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                           (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                         (substring (rest num) 0 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key\n                            (substring (rest num) 0 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key\n                            (substring\
    \ (rest num) 0 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n           \
    \                 (substring (rest num) 0 1)))]\n    [(equal? (first num) 'E)\
    \ (+ 1 (hex_key\n                            (substring (rest num) 0 1)))]\n \
    \   [(equal? (first num) 'F) (+ 1 (hex_key\n                            (substring\
    \ (rest num) 0 1)))]\n    [else (+ 1 (hex_key (substring (rest num) 0 1)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    \
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n        [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'E) (+ 1\
    \ (hex_key (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (rest\
    \ num)))]\n        [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(= num \"\
    \") 0]\n        [(= (length num) 1) 0]\n        [(= (length num) 2) 0]\n     \
    \   [(= (length num) 3) 0]\n        [(= (length num) 4) 0]\n        [(= (length\
    \ num) 5) 0]\n        [(= (length num) 6) 0]\n        [(= (length num) 7) 0]\n\
    \        [(= (length num) 8) 0]\n        [(= (length num) 9) 0]\n        [(= (length\
    \ num) 10) 0]\n        [(= (length num) 11) 0]\n        [(= (length num) 12) 0]\n\
    \        [(= (length num) 13) 0]\n        [(= (length num) 14) 0]\n        [(=\
    \ (length num) 15) 0]\n        [(= (length num) 16) 0]\n        [(= (length num)\
    \ 17) 0]\n        [(= (length num) 18) 0]\n        [(= (length num) 19) 0]\n \
    \       [(= (length num) 20) 0]\n        [(= (length num) 21) 0]\n        [(=\
    \ (length num) 22) 0]\n        [(= (length num) 23) 0]\n        [(= (length num)\
    \ 24) 0]\n        [(= (length num) 25) 0]\n        [(= (length num) 26) 0]\n \
    \       [(= (length num) 27) 0]\n        [(= (length num) 28) 0]\n        [(=\
    \ (length num) 29) 0]\n        [(= (length num) 30) 0]\n        [(= (length num)\
    \ 31) 0]\n        [(= (length num) 32) 0]\n        [(= (length num) 33) 0]\n \
    \       [(= (length num) 34) 0]\n        [(= (length num) 35) 0]\n        [(=\
    \ (length num) 36) 0]\n        [(= (length num) 37) 0]\n        [(= (length num)\
    \ 38) 0]\n        [(= (length num) 39) 0]\n        [(= (length num) 40) 0]\n \
    \       [(= (length num) 41) 0]\n        [(= (length num) 42) 0]\n        [(=\
    \ (length num) 43) 0]\n        [(= (length num) 44) 0]\n        [(= (length num)\
    \ 45) 0]\n        [(= (length num) 46) 0]\n        [(= (length ", "  (cond\n \
    \   [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n           \
    \                    (substring num 1 2)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key\n                               (substring num 1 3)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                               (substring num\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \         (substring num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                               (substring num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                               (substring num 1 7)))]\n \
    \   [else (+ 1 (hex_key (substring num 1 8)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (substring (second num) 1 2)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key\n                             (substring (second num)\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (substring (second num) 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                             (substring (second num)\
    \ 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 7)))]\n    [else (+ 1 (hex_key (substring (second\
    \ num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car\
    \ num)) (digit-char (char-code (car num))))\n     (+ 1 (hex_key\n            (substring\
    \ (num 2) \n                     (+ 2 (string-length (substring (num 2) 0 -1))))])\n\
    \    [else (+ 1 (hex_key\n                   (substring (num 2) \n           \
    \                (+ 2 (string-length (substring (num 2) 0 -1))))])]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                            (substring (second num) 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ (second num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n         \
    \                   (substring (second num) 1 4)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                            (substring (second num) 1 5)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                            (substring\
    \ (second num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n         \
    \                   (substring (second num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (second num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\n    \
    \                               (rest num)))]\n        [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                                   (rest num)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                                   (rest num)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key\n                            \
    \       (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\n      \
    \                             (rest num)))]\n        [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                                   (rest num)))]\n        [else\
    \ (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                               (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                                 (rest num)))]\n        [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                                 (rest num)))]\n\
    \        [(equal? (first num) 'C) (+ 1 (hex_key\n                            \
    \     (rest num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key\n        \
    \                         (rest num)))]\n        [(equal? (first num) 'E) (+ 1\
    \ (hex_key\n                                 (rest num)))]\n        [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                                 (rest num)))]\n   \
    \     [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (substring (second num) 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (substring (second num) 1 7)))]\n\
    \    [else (+ 1 (hex_key (substring (second num) 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'D) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                           (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \     (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n            \
    \               (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n  \
    \                         (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                           (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                           (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                            (substring (rest num) 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ (rest num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n           \
    \                 (substring (rest num) 1 4)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key\n                            (substring (rest num) 1 5)))]\n \
    \   [(equal? (first num) 'E) (+ 1 (hex_key\n                            (substring\
    \ (rest num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n           \
    \                 (substring (rest num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (rest num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (car num)) (digit-char (char-code (car num))))\n\
    \     (+ 1 (hex_key\n           (substring (num 2) (length num))))]\n    [else\
    \ (+ 1 (hex_key\n                 (substring (num 1) (length num))))]))\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n  \
    \                           (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                               (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                               (rest num)))]\n    [else\
    \ (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                              (substring num 1 (- (length\
    \ num) 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                   \
    \           (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key\n                              (substring num 1 (- (length num)\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \      (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key\n                              (substring num 1 (- (length num) 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                              (substring\
    \ num 1 (- (length num) 1)))]\n    [else (+ 1 (hex_key (substring num 1 (- (length\
    \ num) 1))))]))\n", "  (define (helper num key count)\n    (cond\n      [(empty?\
    \ num) count]\n      [(equal? key 'A) (helper (cdr num) 'B (+ count 1))]\n   \
    \   [(equal? key 'B) (helper (cdr num) 'C (+ count 1))]\n      [(equal? key 'C)\
    \ (helper (cdr num) 'D (+ count 1))]\n      [(equal? key 'D) (helper (cdr num)\
    \ 'E (+ count 1))]\n      [(equal? key 'E) (helper (cdr num) 'F (+ count 1))]\n\
    \      [(equal? key 'F) (helper (cdr num) 'A (+ count 1))]\n      [else (helper\
    \ (cdr num) key (+ count 1))]))\n  (helper num key 0))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key(sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key(sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key(sub1 num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key(sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key(sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key(sub1 num)))]\n    [else (+ 1 (hex_key(sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A)\
    \ (+ 1 (hex_key(cdr num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", "  (cond\
    \ [(= 0 (string-length num)) 0]\n        [(= 1 (string-length num)) 1]\n     \
    \   [(= 2 (string-length num)) 2]\n        [(= 3 (string-length num)) 3]\n   \
    \     [(= 4 (string-length num)) 4]\n        [(= 5 (string-length num)) 5]\n \
    \       [(= 6 (string-length num)) 6]\n        [(= 7 (string-length num)) 7]\n\
    \        [(= 8 (string-length num)) 8]\n        [(= 9 (string-length num)) 9]\n\
    \        [(= 10 (string-length num)) 10]\n        [(= 11 (string-length num))\
    \ 11]\n        [(= 12 (string-length num)) 12]\n        [(= 13 (string-length\
    \ num)) 13]\n        [(= 14 (string-length num)) 14]\n        [(= 15 (string-length\
    \ num)) 15]\n        [(= 16 (string-length num)) 16]\n        [(= 17 (string-length\
    \ num)) 17]\n        [(= 18 (string-length num)) 18]\n        [(= 19 (string-length\
    \ num)) 19]\n        [(= 20 (string-length num)) 20]\n        [(= 21 (string-length\
    \ num)) 21]\n        [(= 22 (string-length num)) 22]\n        [(= 23 (string-length\
    \ num)) 23]\n        [(= 24 (string-length num)) 24]\n        [(= 25 (string-length\
    \ num)) 25]\n        [(= 26 (string-length num)) 26]\n        [(= 27 (string-length\
    \ num)) 27]\n        [(= 28 (string-length num)) 28]\n        [(= 29 (string-length\
    \ num)) 29]\n        [(= 30 (string-length num)) 30]\n        [(= 31 (string-length\
    \ num)) 31]\n        [(= 32 (string-length num)) 32]\n        [(= 33 (string-length\
    \ num)) 33]\n        [(= 34 (string-length num)) 34]\n        [(= 35 (string-length\
    \ num)) 35]\n        [(= 36 (string-length num)) 36]\n        [(= 37 (string-length\
    \ num)) 37]\n        [(= 38 (string-length num)) 38]\n        [(= 39 (string-length\
    \ num)) 39]\n        [(= 40 (string-length num)) 40]\n        [(= 41 (string-length\
    \ num)) 41]\n        [(= 42 (string-length num)) 42]\n        [(= 43 (string-length\
    \ num)) ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                            (rest num)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                               (rest\
    \ num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\
    \ [(= num \"\") 0]\n        [(= (length num) 1) 0]\n        [(= (length num) 2)\
    \ 0]\n        [(= (length num) 3) 0]\n        [(= (length num) 4) 0]\n       \
    \ [(= (length num) 5) 0]\n        [(= (length num) 6) 0]\n        [(= (length\
    \ num) 7) 0]\n        [(= (length num) 8) 0]\n        [(= (length num) 9) 0]\n\
    \        [(= (length num) 10) 0]\n        [(= (length num) 11) 0]\n        [(=\
    \ (length num) 12) 0]\n        [(= (length num) 13) 0]\n        [(= (length num)\
    \ 14) 0]\n        [(= (length num) 15) 0]\n        [(= (length num) 16) 0]\n \
    \       [(= (length num) 17) 0]\n        [(= (length num) 18) 0]\n        [(=\
    \ (length num) 19) 0]\n        [(= (length num) 20) 0]\n        [(= (length num)\
    \ 21) 0]\n        [(= (length num) 22) 0]\n        [(= (length num) 23) 0]\n \
    \       [(= (length num) 24) 0]\n        [(= (length num) 25) 0]\n        [(=\
    \ (length num) 26) 0]\n        [(= (length num) 27) 0]\n        [(= (length num)\
    \ 28) 0]\n        [(= (length num) 29) 0]\n        [(= (length num) 30) 0]\n \
    \       [(= (length num) 31) 0]\n        [(= (length num) 32) 0]\n        [(=\
    \ (length num) 33) 0]\n        [(= (length num) 34) 0]\n        [(= (length num)\
    \ 35) 0]\n        [(= (length num) 36) 0]\n        [(= (length num) 37) 0]\n \
    \       [(= (length num) 38) 0]\n        [(= (length num) 39) 0]\n        [(=\
    \ (length num) 40) 0]\n        [(= (length num) 41) 0]\n        [(= (length num)\
    \ 42) 0]\n        [(= (length num) 43) 0]\n        [(= (length num) 44) 0]\n \
    \       [(= (length num) 45) 0]\n        [(= (length num) 46) 0]\n        [(=\
    \ (length ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key\n                             (substring (rest num) 1 2)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (substring (rest\
    \ num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                 \
    \            (substring (rest num) 1 4)))]\n    [(equal? (first num) 'D) (+ 1\
    \ (hex_key\n                             (substring (rest num) 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (substring (rest\
    \ num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                 \
    \            (substring (rest num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (rest num) 1 8)))]))\n", "  (define (helper num count)\n    (cond\n      [(=\
    \ count 0) count]\n      [(= (length num) 0) count]\n      [(= (length num) 1)\
    \ (helper (substring num 0 1) (+ count 1))]\n      [(= (substring num 0 1) (substring\
    \ num 0 1)) \n       (helper (substring num 1 ) (+ count 1))]\n      [(= (substring\
    \ num 0 1) (substring num 0 2)) \n       (helper (substring num 1 ) (+ count 2))]\n\
    \      [(= (substring num 0 1) (substring num 0 3)) \n       (helper (substring\
    \ num 1 ) (+ count 3))]\n      [(= (substring num 0 1) (substring num 0 4)) \n\
    \       (helper (substring num 1 ) (+ count 4))]\n      [(= (substring num 0 1)\
    \ (substring num 0 5)) \n       (helper (substring num 1 ) (+ count 5))]\n   \
    \   [(= (substring num 0 1) (substring num 0 6)) \n       (helper (substring num\
    \ 1 ) (+ count 6))]\n      [(= (substring num 0 1) (substring num 0 7)) \n   \
    \    (helper (substring num 1 ) (+ count 7))]\n      [(= (substring num 0 1) (substring\
    \ num 0 8)) \n       (helper (substring num 1 ) (+ count 8))]\n      [(= (substring\
    \ num 0 1) (substring num 0 9)) \n       (helper (substring num 1 ) (+ count 9))]\n\
    \      [(= (substring num 0 1) (substring num 0 10)) \n       (helper (substring\
    \ num 1 ) (+ count 10))]\n      [(= (substring num 0 1) (substring num 0 11))\
    \ \n       (helper (substring num 1 ) (+ count 11))]\n      [(= (substring num\
    \ 0 1) (substring num 0 12)) \n       (helper (substring num 1 ) (+ count 12))]\n\
    \      [(= (substring num 0 1) (substring num 0 13)) \n       (helper (substring\
    \ num 1 ) (+ count 13))]\n      [(= (substring num 0 1) (substring num 0 14))\
    \ \n       (helper (substring num 1 ) (+ count 14))]\n      [(= (substring num\
    \ 0 1) (substring num 0 15)) \n       (helper (substring num 1 ) (+ count 15))]\n\
    \      [(= (substring num 0 1) (substring ", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (rest num)))]\n    [else (+\
    \ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num\
    \ 1)))]\n  )\n)\n", "  (cond [(null? num) 0]\n        [(equal? (char-code (first\
    \ num)) (char #\\A)) 0]\n        [(equal? (char-code (first num)) (char #\\B))\
    \ 1]\n        [(equal? (char-code (first num)) (char #\\C)) 2]\n        [(equal?\
    \ (char-code (first num)) (char #\\D)) 3]\n        [(equal? (char-code (first\
    \ num)) (char #\\E)) 4]\n        [(equal? (char-code (first num)) (char #\\F))\
    \ 5]\n        [else (+ 1 (hex_key\n                       (substring num 1 (char-code\
    \ (first num))))))))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                             (substring (rest num) 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ (rest num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n           \
    \                  (substring (rest num) 1 4)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key\n                             (substring (rest num) 1 5)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                             (substring\
    \ (rest num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n           \
    \                  (substring (rest num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (rest num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (substring num 1 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                             (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                             (substring num 1\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \     (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n   \
    \                          (substring num 1 1)))]\n    [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                             (substring num 1 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (char-code (first num)) (char A #\\A)) 1]\n    [(equal? (char-code\
    \ (first num)) (char B #\\B)) 2]\n    [(equal? (char-code (first num)) (char C\
    \ #\\C)) 3]\n    [(equal? (char-code (first num)) (char D #\\D)) 4]\n    [(equal?\
    \ (char-code (first num)) (char E #\\E)) 5]\n    [(equal? (char-code (first num))\
    \ (char F #\\F)) 6]\n    [else (+ 1 (hex_key\n                  (substring num\
    \ 2 (string->length (substring num 0 1)))))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key\n               \
    \                        (substring (num 1) 1)))]\n    [else (+ 1 (hex_key\n \
    \                  (substring (num 1) 1)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                           \
    \  (substring (rest num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (substring (rest num) 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                             (substring (rest num) 1\
    \ 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \     (substring (rest num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (substring (rest num) 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                             (substring (rest num) 1\
    \ 7)))]\n    [else (+ 1 (hex_key (substring (rest num) 1 8)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n  \
    \  [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n            \
    \                  (substring num 1 (string-length num))))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key\n                              (substring num 1 (string-length\
    \ num))))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                     \
    \         (substring num 1 (string-length num))))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key\n                              (substring num 1 (string-length\
    \ num))))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                     \
    \         (substring num 1 (string-length num))))]\n    [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                              (substring num 1 (string-length\
    \ num))))]\n    [else (+ 1 (hex_key (substring num 1 (string-length num))))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) (first 'A))\
    \ (+ 1 (hex_key\n                                           (substring (second\
    \ num) 1)))]\n    [(equal? (char-code (first num)) (first 'B)) (+ 1 (hex_key\n\
    \                                           (substring (second num) 1)))]\n  \
    \  [(equal? (char-code (first num)) (first 'C)) (+ 1 (hex_key\n              \
    \                             (substring (second num) 1)))]\n    [(equal? (char-code\
    \ (first num)) (first 'D)) (+ 1 (hex_key\n                                   \
    \        (substring (second num) 1)))]\n    [(equal? (char-code (first num)) (first\
    \ 'E)) (+ 1 (hex_key\n                                           (substring (second\
    \ num) 1)))]\n    [(equal? (char-code (first num)) (first 'F)) (+ 1 (hex_key\n\
    \                                           (substring (second num) 1)))]\n  \
    \  [else (+ 1 (hex_key (substring (second num) 1)))]))\n", "  (cond [(number?\
    \ num) 0]\n        [(= (length num) 1) 0]\n        [(= (length num) 2) 0]\n  \
    \      [(= (length num) 3) 0]\n        [(= (length num) 4) 0]\n        [(= (length\
    \ num) 5) 0]\n        [(= (length num) 6) 0]\n        [(= (length num) 7) 0]\n\
    \        [(= (length num) 8) 0]\n        [(= (length num) 9) 0]\n        [(= (length\
    \ num) 10) 0]\n        [(= (length num) 11) 0]\n        [(= (length num) 12) 0]\n\
    \        [(= (length num) 13) 0]\n        [(= (length num) 14) 0]\n        [(=\
    \ (length num) 15) 0]\n        [(= (length num) 16) 0]\n        [(= (length num)\
    \ 17) 0]\n        [(= (length num) 18) 0]\n        [(= (length num) 19) 0]\n \
    \       [(= (length num) 20) 0]\n        [(= (length num) 21) 0]\n        [(=\
    \ (length num) 22) 0]\n        [(= (length num) 23) 0]\n        [(= (length num)\
    \ 24) 0]\n        [(= (length num) 25) 0]\n        [(= (length num) 26) 0]\n \
    \       [(= (length num) 27) 0]\n        [(= (length num) 28) 0]\n        [(=\
    \ (length num) 29) 0]\n        [(= (length num) 30) 0]\n        [(= (length num)\
    \ 31) 0]\n        [(= (length num) 32) 0]\n        [(= (length num) 33) 0]\n \
    \       [(= (length num) 34) 0]\n        [(= (length num) 35) 0]\n        [(=\
    \ (length num) 36) 0]\n        [(= (length num) 37) 0]\n        [(= (length num)\
    \ 38) 0]\n        [(= (length num) 39) 0]\n        [(= (length num) 40) 0]\n \
    \       [(= (length num) 41) 0]\n        [(= (length num) 42) 0]\n        [(=\
    \ (length num) 43) 0]\n        [(= (length num) 44) 0]\n        [(= (length num)\
    \ 45) 0]\n        [(= (length num) 46) 0]\n        [(= (length ", "  (cond\n \
    \   [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(string=? num '()) 0]\n        [(string=? (string-ref\
    \ num (string->list (string-length num))) 'A) 1]\n        [(string=? (string-ref\
    \ num (string->list (string-length num))) 'B) 2]\n        [(string=? (string-ref\
    \ num (string->list (string-length num))) 'C) 3]\n        [(string=? (string-ref\
    \ num (string->list (string-length num))) 'D) 4]\n        [(string=? (string-ref\
    \ num (string->list (string-length num))) 'E) 5]\n        [(string=? (string-ref\
    \ num (string->list (string-length num))) 'F) 6]\n        [else (+ 1 (hex_key\n\
    \                       (string-ref num (string->list (string-length num)) \n\
    \                                     (string->list (string-length num)))))))",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                            (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key\n                               (substring num 1 1)))]\n \
    \   [(equal? (first num) 'C) (+ 1 (hex_key\n                               (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                  \
    \             (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                               (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                               (substring num 1 1)))]\n \
    \   [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                           \
    \ (substring (second num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                            (substring (second num) 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                            (substring (second num)\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \      (substring (second num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                            (substring (second num) 1 6)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                            (substring (second num)\
    \ 1 7)))]\n    [else (+ 1 (hex_key (substring (second num) 1 8)))]))\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n\
    \        [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'D)\
    \ (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (sub1 num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n\
    \        [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (substring (second num) 1 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 1)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (substring (second num) 1 1)))]\n\
    \    [else (+ 1 (hex_key (substring (second num) 1 1)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (substring (second num) 1 1)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                             (substring (second num)\
    \ 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (substring (second num) 1 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                             (substring (second num)\
    \ 1 1)))]\n    [else (+ 1 (hex_key (substring (second num) 1 1)))]))\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (char-code (first num)) (char #\\A)) 1]\n\
    \        [(equal? (char-code (first num)) (char #\\B)) 2]\n        [(equal? (char-code\
    \ (first num)) (char #\\C)) 3]\n        [(equal? (char-code (first num)) (char\
    \ #\\D)) 4]\n        [(equal? (char-code (first num)) (char #\\E)) 5]\n      \
    \  [(equal? (char-code (first num)) (char #\\F)) 6]\n        [else (+ 1 (hex_key\n\
    \                       (substring (second num) 1 \n                         \
    \       (length (second num)))))))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/18178742)\n\
    <|/ c |>\n<| c |>\nI edited my answer to make it more clear and to show how it\
    \ works.\n<|/ c |>\n<| c |>\nI edited my answer to make it more clear and to show\
    \ how it works.\n<|/ c |>\n<| c |>\nI edited my answer to make it more clear and\
    \ to show how it works.\n<|/ c |>\n<| c |>\nI edited my answer to make it more\
    \ clear and to show how it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\
    \ [(= 0 (string-length num)) 0]\n        [(= 1 (string-length num)) 1]\n     \
    \   [(= 2 (string-length num)) 2]\n        [(= 3 (string-length num)) 3]\n   \
    \     [(= 4 (string-length num)) 4]\n        [(= 5 (string-length num)) 5]\n \
    \       [(= 6 (string-length num)) 6]\n        [(= 7 (string-length num)) 7]\n\
    \        [(= 8 (string-length num)) 8]\n        [(= 9 (string-length num)) 9]\n\
    \        [(= 10 (string-length num)) 10]\n        [(= 11 (string-length num))\
    \ 11]\n        [(= 12 (string-length num)) 12]\n        [(= 13 (string-length\
    \ num)) 13]\n        [(= 14 (string-length num)) 14]\n        [(= 15 (string-length\
    \ num)) 15]\n        [(= 16 (string-length num)) 16]\n        [(= 17 (string-length\
    \ num)) 17]\n        [(= 18 (string-length num)) 18]\n        [(= 19 (string-length\
    \ num)) 19]\n        [(= 20 (string-length num)) 20]\n        [(= 21 (string-length\
    \ num)) 21]\n        [(= 22 (string-length num)) 22]\n        [(= 23 (string-length\
    \ num)) 23]\n        [(= 24 (string-length num)) 24]\n        [(= 25 (string-length\
    \ num)) 25]\n        [(= 26 (string-length num)) 26]\n        [(= 27 (string-length\
    \ num)) 27]\n        [(= 28 (string-length num)) 28]\n        [(= 29 (string-length\
    \ num)) 29]\n        [(= 30 (string-length num)) 30]\n        [(= 31 (string-length\
    \ num)) 31]\n        [(= 32 (string-length num)) 32]\n        [(= 33 (string-length\
    \ num)) 33]\n        [(= 34 (string-length num)) 34]\n        [(= 35 (string-length\
    \ num)) 35]\n        [(= 36 (string-length num)) 36]\n        [(= 37 (string-length\
    \ num)) 37]\n        [(= 38 (string-length num)) 38]\n        [(= 39 (string-length\
    \ num)) 39]\n        [(= 40 (string-length num)) 40]\n        [(= 41 (string-length\
    \ num)) 41]\n        [(= 42 (string-length num)) 42]\n        [(= 43 (string-length\
    \ num)) ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key(sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key(sub2 num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key(sub3 num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key(sub4 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key(sub5 num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key(sub6 num)))]\n    [else (+ 1 (hex_key(sub7\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key\n                            (substring (second num) 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ (second num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n         \
    \                   (substring (second num) 1 4)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                            (substring (second num) 1 5)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                            (substring\
    \ (second num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n         \
    \                   (substring (second num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (second num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (substring num 1 (string-length num))))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (substring num 1\
    \ (string-length num))))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n      \
    \                       (substring num 1 (string-length num))))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key\n                             (substring num 1\
    \ (string-length num))))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n      \
    \                       (substring num 1 (string-length num))))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                             (substring num 1\
    \ (string-length num))))]\n    [else (+ 1 (hex_key (substring num 1 (string-length\
    \ num))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n    [else (+ 1 (hex_key\
    \ (substring num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (first num)) (char #\\A)) 0]\n    [(equal? (char-code (first num)) (char #\\\
    B)) 1]\n    [(equal? (char-code (first num)) (char #\\C)) 2]\n    [(equal? (char-code\
    \ (first num)) (char #\\D)) 3]\n    [(equal? (char-code (first num)) (char #\\\
    E)) 4]\n    [(equal? (char-code (first num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\n\
    \                   (substring (first num) 2)\n                   (substring (first\
    \ num) 3)\n                   (substring (first num) 4)\n                   (substring\
    \ (first num) 5)\n                   (substring (first num) 6)\n             \
    \      (substring (first num) 7)\n                   (substring (first num) 8)\n\
    \                   (substring (first num) 9)\n                   (substring (first\
    \ num) 10)\n                   (substring (first num) 11)\n                  \
    \ (substring (first num) 12)\n                   (substring (first num) 13)\n\
    \                   (substring (first num) 14))]))))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(empty?\
    \ num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'D) (+ 1\
    \ (hex_key (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (sub1\
    \ num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(equal? (char-code (car\
    \ num)) 'A) (+ 1 (hex_key\n                                           (substring\
    \ num 0 (char-code (car num))))\n                                           (hex_key\n\
    \                                           (substring num (char-code (car num))\
    \ \n                                                   (char-code (cdr num))))]\n\
    \        [(equal? (char-code (car num)) 'B) (+ 1 (hex_key\n                  \
    \                         (substring num 0 (char-code (car num))))\n         \
    \                                  (hex_key\n                                \
    \           (substring num (char-code (car num)) \n                          \
    \                         (char-code (cdr num))))]\n        [(equal? (char-code\
    \ (car num)) 'C) (+ 1 (hex_key\n                                           (substring\
    \ num 0 (char-code (car num))))\n                                           (hex_key\n\
    \                                           (substring num (char-code (car num))\
    \ \n                                                   (char-code (cdr num))))]\n\
    \        [(equal? (char-code (car num)) 'D) (+ 1 (hex_key\n                  \
    \                         (substring num 0 (char-code (car num))))\n         \
    \                                  (hex_key\n                                \
    \           (substring num (char-code (car num)) \n                          \
    \                         (char-code (cdr num))))]\n        [(equal? (char-code\
    \ (car num)) 'E) (+ 1 (hex_key\n                                           (substring\
    \ num 0 (char-code (car num))))\n                                           (hex_key\n\
    \                                           (substring num (char-code (car num))\
    \ \n                                                   (char-code (cdr num))))]\n\
    \        [(equal? (char-code (car num)) 'F) (+ 1 (hex_key\n                  \
    \                         (substring num 0 (char-code (car num))))\n         \
    \                                  (hex_key\n                                \
    \           (substring num (char-code (car num)) \n                          \
    \                         (char-code (cdr num))))]\n        [else (+ 1 (hex_key\
    \ (substring num 0 (char-code (car num))))\n                  (hex_key\n     \
    \             (substring num (char-code (car num)) \n                        \
    \     (char-code (cdr num))))]))\n", "  (cond [(empty? num) 0]\n        [(equal?\
    \ (char-code (car num)) (digit-char (char-code (car num))))\n         (+ 1 (hex_key\
    \ (rest num)))]\n        [else (hex_key (rest num))]))\n", "  (define (helper\
    \ num key)\n    (cond [(= key 0) 0]\n          [(= key 1) 1]\n          [(= key\
    \ 2) (+ 1 (helper (substring num 0 1) (substring num 1 1)))]\n          [(= key\
    \ 3) (+ 1 (helper (substring num 0 2) (substring num 2 1)))]\n          [(= key\
    \ 4) (+ 1 (helper (substring num 0 3) (substring num 3 1)))]\n          [(= key\
    \ 5) (+ 1 (helper (substring num 0 4) (substring num 4 1)))]\n          [(= key\
    \ 6) (+ 1 (helper (substring num 0 5) (substring num 5 1)))]\n          [(= key\
    \ 7) (+ 1 (helper (substring num 0 6) (substring num 6 1)))]\n          [(= key\
    \ 8) (+ 1 (helper (substring num 0 7) (substring num 7 1)))]\n          [(= key\
    \ 9) (+ 1 (helper (substring num 0 8) (substring num 8 1)))]\n          [(= key\
    \ 10) (+ 1 (helper (substring num 0 9) (substring num 9 1)))]\n          [(= key\
    \ 11) (+ 1 (helper (substring num 0 10) (substring num 10 1)))]\n          [(=\
    \ key 12) (+ 1 (helper (substring num 0 11) (substring num 11 1)))]\n        \
    \  [(= key 13) (+ 1 (helper (substring num 0 12) (substring num 12 1)))]\n   \
    \       [(= key 14) (+ 1 (helper (substring num 0 13) (substring num 13 1)))]\n\
    \          [(= key 15) (+ 1 (helper (substring num 0 14) (substring num 14 1)))]\n\
    \          [(= key 16) (+ 1 (helper (substring num 0 15) (substring num 15 1)))]\n\
    \          [(= key 17) (+ 1 (helper (substring num 0 16) (substring num 16 1)))]\n\
    \          [(= key 18) (+ 1 (helper (substring num 0 17) (substring num 17 1)))]\n\
    \          [(= key 19) (+ 1 (helper (substring num 0 18) (substring num 18 1)))]\n\
    \          [(= key 20) (+ 1 (helper (substring num 0 19) (substring num 19 1)))]\n\
    \          [(= key 21) (+ 1 (helper (substring num 0 20) (substring num 20 1)))]\n\
    \          [(= key 22) (+ 1 (helper (substring num 0 21) (substring num 21 1)))]\n\
    \          [(= key ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                            (substring (rest num) 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ (rest num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n           \
    \                 (substring (rest num) 1 4)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key\n                            (substring (rest num) 1 5)))]\n \
    \   [(equal? (first num) 'E) (+ 1 (hex_key\n                            (substring\
    \ (rest num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n           \
    \                 (substring (rest num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (rest num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                            (substring (second num)\
    \ 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \      (substring (second num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                            (substring (second num) 1 4)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key\n                            (substring (second num)\
    \ 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                      \
    \      (substring (second num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                            (substring (second num) 1 7)))]\n    [else (+ 1 (hex_key\
    \ (substring (second num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                          (substring num 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                          (substring\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \        (substring num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                          (substring num 1 5)))]\n    [(equal? (first num) 'E)\
    \ (+ 1 (hex_key\n                          (substring num 1 6)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                          (substring num 1 7)))]\n\
    \    [else (+ 1 (hex_key (substring num 1 8)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (char-code (car num)) 'A) (+ 1 (hex_key\n                 \
    \                  (substring (num 1 1)))]\n    [(equal? (char-code (car num))\
    \ 'B) (+ 1 (hex_key\n                                   (substring (num 2 1)))]\n\
    \    [(equal? (char-code (car num)) 'C) (+ 1 (hex_key\n                      \
    \             (substring (num 3 1)))]\n    [(equal? (char-code (car num)) 'D)\
    \ (+ 1 (hex_key\n                                   (substring (num 4 1)))]\n\
    \    [(equal? (char-code (car num)) 'E) (+ 1 (hex_key\n                      \
    \             (substring (num 5 1)))]\n    [(equal? (char-code (car num)) 'F)\
    \ (+ 1 (hex_key\n                                   (substring (num 6 1)))]\n\
    \    [else (+ 1 (hex_key (car num)))]))\n", "  (cond\n    [(empty? num) 0]\n \
    \   [(equal? (first num) 'A) (+ 1 (hex_key\n                               (substring\
    \ (rest num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n           \
    \                    (substring (rest num) 1 3)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key\n                               (substring (rest num) 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                               (substring\
    \ (rest num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n           \
    \                    (substring (rest num) 1 6)))]\n    [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                               (substring (rest num) 1 7)))]\n\
    \    [else (+ 1 (hex_key (substring (rest num) 1 8)))]))\n", "  (cond [(= 0 (string-length\
    \ num)) 0]\n        [(= 1 (string-length num)) 1]\n        [(= 2 (string-length\
    \ num)) 2]\n        [(= 3 (string-length num)) 3]\n        [(= 4 (string-length\
    \ num)) 4]\n        [(= 5 (string-length num)) 5]\n        [(= 6 (string-length\
    \ num)) 6]\n        [(= 7 (string-length num)) 7]\n        [(= 8 (string-length\
    \ num)) 8]\n        [(= 9 (string-length num)) 9]\n        [(= 10 (string-length\
    \ num)) 10]\n        [(= 11 (string-length num)) 11]\n        [(= 12 (string-length\
    \ num)) 12]\n        [(= 13 (string-length num)) 13]\n        [(= 14 (string-length\
    \ num)) 14]\n        [(= 15 (string-length num)) 15]\n        [(= 16 (string-length\
    \ num)) 16]\n        [(= 17 (string-length num)) 17]\n        [(= 18 (string-length\
    \ num)) 18]\n        [(= 19 (string-length num)) 19]\n        [(= 20 (string-length\
    \ num)) 20]\n        [(= 21 (string-length num)) 21]\n        [(= 22 (string-length\
    \ num)) 22]\n        [(= 23 (string-length num)) 23]\n        [(= 24 (string-length\
    \ num)) 24]\n        [(= 25 (string-length num)) 25]\n        [(= 26 (string-length\
    \ num)) 26]\n        [(= 27 (string-length num)) 27]\n        [(= 28 (string-length\
    \ num)) 28]\n        [(= 29 (string-length num)) 29]\n        [(= 30 (string-length\
    \ num)) 30]\n        [(= 31 (string-length num)) 31]\n        [(= 32 (string-length\
    \ num)) 32]\n        [(= 33 (string-length num)) 33]\n        [(= 34 (string-length\
    \ num)) 34]\n        [(= 35 (string-length num)) 35]\n        [(= 36 (string-length\
    \ num)) 36]\n        [(= 37 (string-length num)) 37]\n        [(= 38 (string-length\
    \ num)) 38]\n        [(= 39 (string-length num)) 39]\n        [(= 40 (string-length\
    \ num)) 40]\n        [(= 41 (string-length num)) 41]\n        [(= 42 (string-length\
    \ num)) 42]\n        [(= 43 (string-length num)) ", "  (define (helper num key\
    \ result)\n    (cond\n      [(empty? num) result]\n      [(char=? (first num)\
    \ 'A) (helper (rest num) key (+ key 1))]\n      [(char=? (first num) 'B) (helper\
    \ (rest num) key (+ key 2))]\n      [(char=? (first num) 'C) (helper (rest num)\
    \ key (+ key 3))]\n      [(char=? (first num) 'D) (helper (rest num) key (+ key\
    \ 4))]\n      [(char=? (first num) 'E) (helper (rest num) key (+ key 5))]\n  \
    \    [(char=? (first num) 'F) (helper (rest num) key (+ key 6))]\n      [else\
    \ (helper (rest num) key (+ key (* key 10)))]))\n  (helper num 0 0))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \        (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                              (substring num 1 (- (length num)\
    \ 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                        \
    \      (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key\n                              (substring num 1 (- (length num) 1)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                              (substring\
    \ num 1 (- (length num) 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n  \
    \                            (substring num 1 (- (length num) 1)))]\n    [else\
    \ (+ 1 (hex_key (substring num 1 (- (length num) 1))))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \         (substring (second num) 0 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                               (substring (second num) 1 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                               (substring (second\
    \ num) 2 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                 \
    \              (substring (second num) 3 1)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key\n                               (substring (second num) 4 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                               (substring\
    \ (second num) 5 1)))]\n    [else (+ 1 (hex_key (substring (second num) 0 1)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (char-code (car num)) (char #\\A)) 0]\n\
    \        [(equal? (char-code (car num)) (char #\\B)) 1]\n        [(equal? (char-code\
    \ (car num)) (char #\\C)) 2]\n        [(equal? (char-code (car num)) (char #\\\
    D)) 3]\n        [(equal? (char-code (car num)) (char #\\E)) 4]\n        [(equal?\
    \ (char-code (car num)) (char #\\F)) 5]\n        [else (+ 1 (hex_key\n       \
    \                (substring num 0 (- (length num) 1))))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \         (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                               (substring num 1 (- (length num)\
    \ 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                        \
    \       (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key\n                               (substring num 1 (- (length num)\
    \ 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                        \
    \       (substring num 1 (- (length num) 1)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key\n                               (substring num 1 (- (length num)\
    \ 1)))]\n    [else (+ 1 (hex_key (substring num 0 (- (length num) 1))))]))\n",
  "  (define (helper num count)\n    (cond\n      [(empty? num) count]\n      [(equal?\
    \ (first num) 'A) (helper (rest num) (+ count 1))]\n      [(equal? (first num)\
    \ 'B) (helper (rest num) (+ count 1))]\n      [(equal? (first num) 'C) (helper\
    \ (rest num) (+ count 1))]\n      [(equal? (first num) 'D) (helper (rest num)\
    \ (+ count 1))]\n      [(equal? (first num) 'E) (helper (rest num) (+ count 1))]\n\
    \      [(equal? (first num) 'F) (helper (rest num) (+ count 1))]\n      [else\
    \ (helper (rest num) (+ count 1))]))\n  (helper num 0))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\n    \
    \                               (substring num 1 1)))]\n        [(equal? (first\
    \ num) 'B) (+ 1 (hex_key\n                                   (substring num 1\
    \ 1)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key\n                    \
    \               (substring num 1 1)))]\n        [(equal? (first num) 'D) (+ 1\
    \ (hex_key\n                                   (substring num 1 1)))]\n      \
    \  [(equal? (first num) 'E) (+ 1 (hex_key\n                                  \
    \ (substring num 1 1)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key\n   \
    \                                (substring num 1 1)))]\n        [else (+ 1 (hex_key\
    \ (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                             (substring (second num)\
    \ 0 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                             (substring (second num) 2 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key\n                             (substring (second num)\
    \ 3 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                      \
    \       (substring (second num) 4 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (substring (second num) 5 1)))]\n    [else (+ 1\
    \ (hex_key (substring (second num) 0 1)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key\
    \ (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                             (substring (second num)\
    \ 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                             (substring (second num) 1 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key\n                             (substring (second num)\
    \ 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n                      \
    \       (substring (second num) 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                             (substring (second num) 1 1)))]\n    [else (+ 1\
    \ (hex_key (substring (second num) 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (substring (second num) 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (substring (second num) 1 7)))]\n\
    \    [else (+ 1 (hex_key (substring (second num) 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \         (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n        \
    \                       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                               (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key\n                               (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key\n                               (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                               (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                             (substring (second num) 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ (second num) 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n         \
    \                    (substring (second num) 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (substring (second num) 1 7)))]\n\
    \    [else (+ 1 (hex_key (substring (second num) 1 8)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\n    \
    \                               (rest num)))]\n        [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                                   (rest num)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                                   (rest num)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key\n                            \
    \       (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\n      \
    \                             (rest num)))]\n        [(equal? (first num) 'F)\
    \ (+ 1 (hex_key\n                                   (rest num)))]\n        [else\
    \ (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (char-code (first num)) (char #\\A)) 0]\n    [(equal? (char-code (first num))\
    \ (char #\\B)) 1]\n    [(equal? (char-code (first num)) (char #\\C)) 2]\n    [(equal?\
    \ (char-code (first num)) (char #\\D)) 3]\n    [(equal? (char-code (first num))\
    \ (char #\\E)) 4]\n    [(equal? (char-code (first num)) (char #\\F)) 5]\n    [else\
    \ (+ 1 (hex_key\n                 (substring num 1 (char-code (first num))))))))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (substring num 1 (substring (length num) 1)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ num 1 (substring (length num) 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                             (substring num 1 (substring (length num) 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key\n                             (substring\
    \ num 1 (substring (length num) 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (substring num 1 (substring (length num) 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (substring\
    \ num 1 (substring (length num) 1)))]\n    [else (+ 1 (hex_key (substring num\
    \ 1 (substring (length num) 1))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                            (substring num 1\
    \ 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                        \
    \    (substring num 1 2)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n    \
    \                        (substring num 1 3)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key\n                            (substring num 1 4)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                            (substring num 1\
    \ 5)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                        \
    \    (substring num 1 6)))]\n    [else (+ 1 (hex_key (substring num 1 6)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                            (substring (second num) 1 1)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key\n                               (substring (second num)\
    \ 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \         (substring (second num) 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                               (substring (second num) 1 1)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                               (substring (second\
    \ num) 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                 \
    \              (substring (second num) 1 1)))]\n    [else (+ 1 (hex_key (substring\
    \ (second num) 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                             (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \           (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'F) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                     (substring (second num) 0 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key\n                               (substring (second num) 1\
    \ 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                        \
    \       (substring (second num) 2 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                               (substring (second num) 3 1)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                               (substring (second\
    \ num) 4 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n                 \
    \              (substring (second num) 5 1)))]\n    [else (+ 1 (hex_key (substring\
    \ (second num) 0 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (define (helper num count)\n    (cond\
    \ [(= count 0) (+ 1 (* count (mod num (expt 2 count))))]\n          [(= (mod num\
    \ (expt 2 count)) 0) (helper (expt 2 count) (+ count 1))]\n          [else (helper\
    \ (expt 2 count) (+ count 1))]))\n  (helper num (length num)))\n", "  (cond [(number?\
    \ num) 0]\n        [else (+ 1 (hex_key (substring num 0 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                     (substring num 1 2)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key\n                               (substring num 1 3)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                               (substring num\
    \ 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                      \
    \         (substring num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                               (substring num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                               (substring num 1 7)))]\n \
    \   [else (+ 1 (hex_key (substring num 1 8)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                           \
    \  (substring (rest num) 0 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (substring (rest num) 0 1)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key\n                             (substring (rest num) 0\
    \ 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n                        \
    \     (substring (rest num) 0 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (substring (rest num) 0 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key\n                             (substring (rest num) 0\
    \ 1)))]\n    [else (+ 1 (hex_key (substring (rest num) 0 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n          \
    \                (substring (second num) 1 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key\n                          (substring (second num) 1 1)))]\n \
    \   [(equal? (first num) 'C) (+ 1 (hex_key\n                          (substring\
    \ (second num) 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n         \
    \                 (substring (second num) 1 1)))]\n    [(equal? (first num) 'E)\
    \ (+ 1 (hex_key\n                          (substring (second num) 1 1)))]\n \
    \   [(equal? (first num) 'F) (+ 1 (hex_key\n                          (substring\
    \ (second num) 1 1)))]\n    [else (+ 1 (hex_key (substring (second num) 1 1)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                            (substring (second num) 1 2)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                            (substring\
    \ (second num) 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n         \
    \                   (substring (second num) 1 4)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                            (substring (second num) 1 5)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                            (substring\
    \ (second num) 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n         \
    \                   (substring (second num) 1 7)))]\n    [else (+ 1 (hex_key (substring\
    \ (second num) 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                              (substring num 1 1)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                              (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \            (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                              (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                              (substring num 1 1)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key\n                              (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr\
    \ num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", "  (cond [(= 0 (string-length\
    \ num)) 0]\n        [(= 1 (string-length num)) 1]\n        [(= 2 (string-length\
    \ num)) 2]\n        [(= 3 (string-length num)) 3]\n        [(= 4 (string-length\
    \ num)) 4]\n        [(= 5 (string-length num)) 5]\n        [(= 6 (string-length\
    \ num)) 6]\n        [(= 7 (string-length num)) 7]\n        [(= 8 (string-length\
    \ num)) 8]\n        [(= 9 (string-length num)) 9]\n        [(= 10 (string-length\
    \ num)) 10]\n        [(= 11 (string-length num)) 11]\n        [(= 12 (string-length\
    \ num)) 12]\n        [(= 13 (string-length num)) 13]\n        [(= 14 (string-length\
    \ num)) 14]\n        [(= 15 (string-length num)) 15]\n        [(= 16 (string-length\
    \ num)) 16]\n        [(= 17 (string-length num)) 17]\n        [(= 18 (string-length\
    \ num)) 18]\n        [(= 19 (string-length num)) 19]\n        [(= 20 (string-length\
    \ num)) 20]\n        [(= 21 (string-length num)) 21]\n        [(= 22 (string-length\
    \ num)) 22]\n        [(= 23 (string-length num)) 23]\n        [(= 24 (string-length\
    \ num)) 24]\n        [(= 25 (string-length num)) 25]\n        [(= 26 (string-length\
    \ num)) 26]\n        [(= 27 (string-length num)) 27]\n        [(= 28 (string-length\
    \ num)) 28]\n        [(= 29 (string-length num)) 29]\n        [(= 30 (string-length\
    \ num)) 30]\n        [(= 31 (string-length num)) 31]\n        [(= 32 (string-length\
    \ num)) 32]\n        [(= 33 (string-length num)) 33]\n        [(= 34 (string-length\
    \ num)) 34]\n        [(= 35 (string-length num)) 35]\n        [(= 36 (string-length\
    \ num)) 36]\n        [(= 37 (string-length num)) 37]\n        [(= 38 (string-length\
    \ num)) 38]\n        [(= 39 (string-length num)) 39]\n        [(= 40 (string-length\
    \ num)) 40]\n        [(= 41 (string-length num)) 41]\n        [(= 42 (string-length\
    \ num)) 42]\n        [(= 43 (string-length num)) ", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(number? num)\
    \ 0]\n        [(equal? (char-code (first num)) (number->char (char->number (char->string\
    \ num))))\n         (+ 1 (hex_key (rest num)))]\n        [else (hex_key (rest\
    \ num))]))\n", "  (define (helper num count)\n    (if (null? num)\n        count\n\
    \        (if (char=? (first num) 'A)\n            (helper (rest num) (+ count\
    \ 1))\n            (helper (rest num) (+ count (+ 1 (char=? (first num) 'B))))))\n\
    \  (helper num 0))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                              (substring num 1 1)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key\n                              (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \            (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                              (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                              (substring num 1 1)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key\n                              (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (define\
    \ (helper num count)\n    (cond [(= count 0) (+ 1 (* count (mod num 16)))]\n \
    \         [(= (mod num 16) 0) (+ 1 (helper (quotient num 16) count))]))\n  (helper\
    \ num 0))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key\n                              (substring\
    \ num 1 (string-length num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n \
    \                             (substring num 1 (string-length num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                              (substring num\
    \ 1 (string-length num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n     \
    \                         (substring num 1 (string-length num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                              (substring num\
    \ 1 (string-length num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n     \
    \                         (substring num 1 (string-length num)))]\n    [else (+\
    \ 1 (hex_key (substring num 1 (string-length num))))]))\n", "  (define (helper\
    \ num key)\n    (cond\n      [(= key 0) (+ 1 (helper (substring num 0 1) (substring\
    \ num 0 1)))]\n      [(= (substring num 0 1) (substring num 0 2)) (+ 1 (helper\
    \ (substring num 0 2) (substring num 0 2)))]\n      [(= (substring num 0 1) (substring\
    \ num 0 3)) (+ 1 (helper (substring num 0 3) (substring num 0 3)))]\n      [(=\
    \ (substring num 0 1) (substring num 0 4)) (+ 1 (helper (substring num 0 4) (substring\
    \ num 0 4)))]\n      [(= (substring num 0 1) (substring num 0 5)) (+ 1 (helper\
    \ (substring num 0 5) (substring num 0 5)))]\n      [(= (substring num 0 1) (substring\
    \ num 0 6)) (+ 1 (helper (substring num 0 6) (substring num 0 6)))]\n      [(=\
    \ (substring num 0 1) (substring num 0 7)) (+ 1 (helper (substring num 0 7) (substring\
    \ num 0 7)))]\n      [(= (substring num 0 1) (substring num 0 8)) (+ 1 (helper\
    \ (substring num 0 8) (substring num 0 8)))]\n      [(= (substring num 0 1) (substring\
    \ num 0 9)) (+ 1 (helper (substring num 0 9) (substring num 0 9)))]\n      [(=\
    \ (substring num 0 2) (substring num 0 2)) (+ 1 (helper (substring num 0 2) (substring\
    \ num 0 2)))]\n      [(= (substring num 0 2) (substring num 0 3)) (+ 1 (helper\
    \ (substring num 0 3) (substring num 0 3)))]\n      [(= (substring num 0 2) (substring\
    \ num 0 4)) (+ 1 (helper (substring num 0 4) (substring num 0 4)))]\n      [(=\
    \ (substring num 0 2) (substring num 0 5)) (+ 1 (helper (substring num 0 5) (substring\
    \ num 0 5)))]\n      [(= (substring num 0 2) (substring num 0 6)) (+ 1 (helper\
    \ (substring num 0 6) (substring num 0 6)))]\n      [(= (substring num 0 2) (substring\
    \ num 0 7)) (+ 1 (helper (substring num 0 7) (substring num ", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'D) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key\n                             (rest num)))]\n    [else (+\
    \ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \           (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'F) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (define\
    \ (helper num count)\n    (if (= count 0)\n        (+ 1 (if (= (modulo num 10)\
    \ 0)\n                (helper (quotient num 10) (inc count))\n               \
    \ (helper (quotient num 16) (inc count))))\n        (helper (quotient num 16)\
    \ (inc count))))\n  (helper num 0))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                      \
    \       (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n          \
    \                   (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(= (length num) 0)\n         0]\n        [(= (length\
    \ num) 1)\n         1]\n        [(= (length num) 2)\n         (if (= (substring\
    \ num 0 1) \"A\")\n             (+ 1 (hex_key (substring num 1 2)))\n        \
    \     (+ 1 (hex_key (substring num 0 1)))]\n        [(= (length num) 3)\n    \
    \     (if (= (substring num 0 1) \"A\")\n             (+ 1 (hex_key (substring\
    \ num 1 2)))\n             (+ 1 (hex_key (substring num 0 1)))]\n        [(= (length\
    \ num) 4)\n         (if (= (substring num 0 1) \"A\")\n             (+ 1 (hex_key\
    \ (substring num 1 2)))\n             (+ 1 (hex_key (substring num 0 1)))]\n \
    \       [(= (length num) 5)\n         (if (= (substring num 0 1) \"A\")\n    \
    \         (+ 1 (hex_key (substring num 1 2)))\n             (+ 1 (hex_key (substring\
    \ num 0 1)))]\n        [(= (length num) 6)\n         (if (= (substring num 0 1)\
    \ \"A\")\n             (+ 1 (hex_key (substring num 1 2)))\n             (+ 1\
    \ (hex_key (substring num 0 1)))]\n        [(= (length num) 7)\n         (if (=\
    \ (substring num 0 1) \"A\")\n             (+ 1 (hex_key (substring num 1 2)))\n\
    \             (+ 1 (hex_key (substring num 0 1)))]\n        [(= (length num) 8)\n\
    \         (if (= (substring num 0 1) \"A\")\n             (+ 1 (hex_key (substring\
    \ num 1 2)))\n             (+ 1 (hex_key (substring num 0 1)))]\n        [(= (length\
    \ num) 9)\n         (if (= (substring num 0 1) \"A\")\n             (+ 1 (hex_key\
    \ (substring num 1 2)))\n             (+ 1 (hex_key (substring num 0 1)))]\n \
    \       [(= (length num) 10)\n         (if (= (substring num 0 1) \"A\")\n   \
    \          (+ 1 (hex_key (substring num 1 2)))\n             (+ 1 (hex_key (substring\
    \ num 0 1)))]\n        [(= (length num) 11)\n         (if (= (substring num 0\
    \ 1) \"A\")\n             (+ 1 (hex_key (substring num 1 2)))\n             (+\
    \ 1 (hex_key (substring num 0 1)))]\n        [(= (length num) 12)\n         (if\
    \ (= (substring num ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'B) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\n                  \
    \           (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                             (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key\n                             (substring num 1 1)))]\n   \
    \ [(equal? (first num) 'F) (+ 1 (hex_key\n                             (substring\
    \ num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]))\n", "  (cond [(empty?\
    \ num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\n                  \
    \                 (rest num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                                   (rest num)))]\n        [(equal? (first num)\
    \ 'C) (+ 1 (hex_key\n                                   (rest num)))]\n      \
    \  [(equal? (first num) 'D) (+ 1 (hex_key\n                                  \
    \ (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\n            \
    \                       (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                                   (rest num)))]\n        [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(string=?\
    \ num '()) 0]\n        [(string=? (string-ref num 0) 'A) 1]\n        [(string=?\
    \ (string-ref num 0) 'B) 2]\n        [(string=? (string-ref num 0) 'C) 3]\n  \
    \      [(string=? (string-ref num 0) 'D) 4]\n        [(string=? (string-ref num\
    \ 0) 'E) 5]\n        [(string=? (string-ref num 0) 'F) 6]\n        [else (+ 1\
    \ (hex_key\n                     (string-ref num 1)\n                     (hex_key\n\
    \                       (string-ref num 2)\n                       (hex_key\n\
    \                        (string-ref num 3)\n                        (string-ref\
    \ num 4)\n                        (string-ref num 5)\n                       \
    \ (string-ref num 6)))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key\n                              (substring num 1 (string->length\
    \ (first num))))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n              \
    \                (substring num 1 (string->length (first num))))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key\n                              (substring num\
    \ 1 (string->length (first num))))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\n\
    \                              (substring num 1 (string->length (first num))))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key\n                              (substring\
    \ num 1 (string->length (first num))))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\n\
    \                              (substring num 1 (string->length (first num))))]\n\
    \    [else (+ 1 (hex_key (substring num 1 (string->length (first num))))))))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\n   \
    \                          (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\n\
    \                             (rest num)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key\n                             (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key\n                             (rest num)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key\n                             (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key\n                             (rest\
    \ num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(string=? num\
    \ '()) 0]\n        [(string=? (string-ref num 0) 'A) 1]\n        [(string=? (string-ref\
    \ num 0) 'B) 2]\n        [(string=? (string-ref num 0) 'C) 3]\n        [(string=?\
    \ (string-ref num 0) 'D) 4]\n        [(string=? (string-ref num 0) 'E) 5]\n  \
    \      [(string=? (string-ref num 0) 'F) 6]\n        [(string=? (string-ref num\
    \ 0) '0) 7]\n        [(string=? (string-ref num 0) '1) 8]\n        [(string=?\
    \ (string-ref num 0) '2) 9]\n        [(string=? (string-ref num 0) '3) 10]\n \
    \       [(string=? (string-ref num 0) '4) 11]\n        [(string=? (string-ref\
    \ num 0) '5) 12]\n        [(string=? (string-ref num 0) '6) 13]\n        [(string=?\
    \ (string-ref num 0) '7) 14]\n        [(string=? (string-ref num 0) '8) 15]\n\
    \        [(string=? (string-ref num 0) '9) 16]\n        [(string=? (string-ref\
    \ num 0) 'A) 17]\n        [(string=? (string-ref num 0) 'B) 18]\n        [(string=?\
    \ (string-ref num 0) 'C) 19]\n        [(string=? (string-ref num 0) 'D) 20]\n\
    \        [(string=? (string-ref num 0) 'E) 21]\n        [(string=? (string-ref\
    \ num 0) 'F) 22]\n        [(string=? (string-ref num 0) '0) 23]\n        [(string=?\
    \ (string-ref num 0) '1) 24]\n        [(string=? (string-ref num 0) '2) 25]\n\
    \        [(string=? (string-ref num 0) '3) 26]\n        [(string=? (string-ref\
    \ num 0) '4) 27]\n        [(string=? (string-ref num 0) '5) 28]\n        [(string=?\
    \ (string-ref num 0) '6) 29]\n        [(string=? (string-ref num 0) '7) 30]\n\
    \        [(string=? (string-ref num 0) '8) 31]\n        [(string=? (string-ref\
    \ num 0) '9) 32]\n        [(string=? (string-ref num 0) 'A) 33]\n        [(string=?\
    \ (string-ref num 0) 'B) 34]\n        [(string=? (string-ref num 0) 'C) 35]\n\
    \        [(string=? (string-ref num 0) 'D) 36]\n        [(string=? (string-ref\
    \ num 0) 'E) 37]\n        [(string=? (string-ref num 0) 'F) 38"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
