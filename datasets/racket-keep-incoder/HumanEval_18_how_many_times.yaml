name: HumanEval_18_how_many_times
language: racket
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
  ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
  ;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((i 0)\n             (count 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (+ i 1)\n              (if (equal? (substring\
    \ string) (string-ref string i))\n                  (+ count 1)\n            \
    \      count))))))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string= (string-ref string i) (string-ref substring j))\n          do (incf\
    \ count)\n          finally (return count))\n  )\n)\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (let\
    \ loop ((count 0) (string string) (substring substring))\n    (cond ((null? string)\
    \ count)\n          ((eq? (car string) substring) (loop (+ count 1) (cdr string)\
    \ substring))\n          (else (loop (+ count 1) (cdr string) substring)))))\n",
  "  (define (helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(equal? (car string) substring) (helper (cdr string) substring (+\
    \ count 1))]\n          [else (helper (cdr string) substring (+ count 1))]))\n\
    \  (helper string substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string)\
    \ (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string)\
    \ (substring string)))]))\n", "  (let ((count 0))\n    (for-each ([c string])\n\
    \              (when (eq? c substring)\n                (set! count (add1 count))))\n\
    \    count))\n", "  (if (empty? string)\n      0\n      (let ((count (+ 1 (count\
    \ (substring string))))\n            (tail (substring string 1)))\n        (if\
    \ (equal? tail substring)\n            count\n            (how_many_times (substring\
    \ string) tail))))))\n", "  (let loop ((i 0) (count 0))\n    (if (= i string-length)\n\
    \        count\n        (loop (+ i 1) (if (equal? (substring string) (string-ref\
    \ string i)) (+ count 1) count))))))\n", "  (let loop ((i 0)\n             (count\
    \ 0))\n    (if (= i 0)\n        count\n        (loop (add1 i)\n              (if\
    \ (string-equal? substring (string-ref string i))\n                  (add1 count)\n\
    \                  (loop (add1 i)\n                        (add1 count))))))\n",
  "  (let ((count 0))\n    (for-each ([c string])\n              (if (string-match\
    \ substring c)\n                  (set! count (add1 count)))))\n  count)\n", " \
    \ (let loop ((count 0) (index 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ count (substring (string index)))\n              (+ index 1)))))\n",
  "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n        count\n\
    \        (loop (+ count (substring-count string index)) (+ index 1)))))\n", " \
    \ (let ((count 0))\n    (for-each ([c string])\n      (when (string=? c substring)\n\
    \        (set! count (add1 count)))))\n  count)\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (if (equal? c substring)\n                    (set!\
    \ count (add1 count))\n                    (set! count 0))))\n    count))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n  \
    \  [else (+ 1 (how_many_times (substring string) (substring string)))]))\n", " \
    \ (let ((count 0))\n    (for-each ([c string])\n      (when (string=? c substring)\n\
    \        (set! count (add1 count)))))\n  count)\n", "  (let loop ((count 0) (index\
    \ 0))\n    (if (= index string-length)\n        count\n        (loop (+ count\
    \ (substring (string (+ index 1) string-length))) (+ index 1)))))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? substring (car string)) (helper (cdr string) substring (+ count\
    \ 1))]\n      [else (helper (cdr string) substring (+ count 1))]))\n  (helper\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(equal? (first string) substring) (helper\
    \ (rest string) substring (incf count))]\n      [else (helper (rest string) substring\
    \ (+ count 1))]))\n  (helper string substring 0))\n", "  (let loop ((i 0)\n  \
    \           (count 0))\n    (if (string-empty? string)\n        count\n      \
    \  (loop (+ i 1) (if (equal? (substring string) (string-ref string i)) (+ count\
    \ 1) count))))))\n", "  (define (helper string substring count)\n    (if (string-empty?\
    \ string)\n        count\n        (helper (substring string) (substring string)\
    \ (+ count 1))))\n  (helper string substring 0))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n    [else (how_many_times (rest string) substring)]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (first string) substring) 1]\n       \
    \ [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (if (string-empty?\
    \ string)\n      0\n      (let ((count (+ 1 (string-count string substring))))\n\
    \        (if (string-equal? string substring)\n            count\n           \
    \ (if (string-equal? (string-ref string 0) substring)\n                count\n\
    \                (if (string-equal? (string-ref string 1) substring)\n       \
    \             count\n                    (if (string-equal? (string-ref string\
    \ 2) substring)\n                        count\n                        (if (string-equal?\
    \ (string-ref string 3) substring)\n                            count\n      \
    \                      (if (string-equal? (string-ref string 4) substring)\n \
    \                               count\n                                (if (string-equal?\
    \ (string-ref string 5) substring)\n                                    count\n\
    \                                    (if (string-equal? (string-ref string 6)\
    \ substring)\n                                        count\n                \
    \                        (if (string-equal? (string-ref string 7) substring)\n\
    \                                            count\n                         \
    \                   (if (string-equal? (string-ref string 8) substring)\n    \
    \                                            count\n                         \
    \                       (if (string-equal? (string-ref string 9) substring)\n\
    \                                                    count\n                 \
    \                                   (if (string-equal? (string-ref string 10)\
    \ substring)\n                                                        count\n\
    \                                                        (if (string-equal? (string-ref\
    \ string 11) substring)\n                                                    \
    \        count\n                                                            (if\
    \ (string-equal? (string-ref string 12) substring)\n                         \
    \                                       count\n                              \
    \                                  (if (string-equal? (string-ref string 13) substring)\n\
    \                                                                    count\n \
    \                                                                   (if (string-equal?\
    \ (string-ref string 14) substring)\n                                        \
    \                                count\n                                     \
    \                                   (if (string-equal? (string-ref string 15)\
    \ substring)\n                                                               \
    \             count\n                                                        \
    \                    (if (string-equal? (string-ref string 16) substring)\n  \
    \                                                                            \
    \  count\n                                                                   \
    \             (if (string-equal? (string-ref string 17) substring)\n         \
    \                                                                           count\n\
    \                                                                            \
    \        (if (string-equal? (string-ref string 18) substring)\n              \
    \                                                                          count\n\
    \                                                                            \
    \            (if (string-equal? (string-ref string 19) substring)\n          \
    \                                                                            \
    \      count\n                                                               \
    \                             (if (string-equal? (string-ref string 20) substring)\n\
    \                                                                            \
    \                    count\n                                                 \
    \                                               (if (string-equal? (string-ref\
    \ string 21) substring)\n                                                    \
    \                                                count\n                     \
    \                                                                            \
    \   (if (string-equal? (string-ref string 22) substring)\n                   \
    \                                                                            \
    \         count\n                                                            \
    \                                            (if (string-equal? (string-ref string\
    \ 23) substring)\n                                                           \
    \                                                 count\n                    \
    \                                                                            \
    \            (if (string-equal? (string-ref string 24) substring)\n          \
    \                                                                            \
    \                          count\n                                           \
    \                                                                     (if (string-equal?\
    \ (string-ref string 25) substring)\n                                        \
    \                                                                            count\n\
    \                                                                            \
    \                                        (if (string-equal? (string-ref string\
    \ 26) substring)\n                                                           \
    \                                                             count\n        \
    \                                                                            \
    \                                    (if (string-equal? (string-ref ", "  (let\
    \ loop ((count 0) (index 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ count (substring (string index)))\n              (+ index 1)))))\n",
  "  (let ((count 0))\n    (for ((i (in-range 0 (string-length string)))\n       \
    \   (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (substring j j)))\n\
    \                     (if (string= (string-ref string (i + j)) substring)\n  \
    \                       (+ 1 (substring i j)))\n                     0))\n   \
    \       (j (in-range 0 (string-length substring)))\n          (count (+ (if (string=\
    \ (string-ref string i) substring)\n                       (+ 1 (", "  (let ((count\
    \ 0))\n    (for-each ([c string])\n              (if (equal? c substring)\n  \
    \                (set! count (add1 count))\n                  (set! count 0))))\n\
    \  count)\n", "  (cond [(empty? string) 0]\n        [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n        [else (+ 1 (how_many_times\
    \ (rest string) (append substring (string))))]))\n", "  (define (helper string\
    \ substring count)\n    (cond ((eq? string \"\") count)\n          ((eq? substring\
    \ \"\") count)\n          ((eq? (string-ref string 0) substring) (helper string\
    \ (string-ref string 1) (+ count 1)))\n          (else (helper (string-tail string)\
    \ substring (+ count 1)))))\n  (helper string substring 0))\n", "  (let ((count\
    \ 0))\n    (for-each ([c string])\n              (if (string-match substring c)\n\
    \                  (set! count (add1 count)))))\n  count)\n", "  (let loop ((count\
    \ 0) (index 0))\n    (if (string-empty? string)\n        count\n        (loop\
    \ (add1 count) (add1 index))\n        (loop (add1 count) (add1 index) (string-ref\
    \ string index)))))\n", "  (let loop ((i 0)\n             (count 0))\n    (if\
    \ (string-empty? string)\n        count\n        (loop (+ i 1)\n             \
    \ (if (equal? (substring string) (string-ref string i))\n                  (+\
    \ count 1)\n                  count))))))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(equal? (substring string) string) 1]\n    [else (+ 1 (how_many_times (substring\
    \ string) (substring string)))]))\n", "  (define (count-overlap start end)\n \
    \   (cond\n      [(or (= start end) (= end start)) 0]\n      [(string=? substring\
    \ (reverse (substring start end))) (+ start (count-overlap (+ start 1) end))]\n\
    \      [else (+ start (count-overlap (+ start 1) end))]\n    ))\n  (count-overlap\
    \ 0 0))\n", "  (define (helper string substring count)\n    (if (empty? string)\n\
    \        count\n        (helper (rest string) (substring string) (+ count 1))))\n\
    \  (helper string substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) (string-ref string 0)) 1])\n  (+ (how_many_times (substring\
    \ string) (substring string)) 1))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (let loop\
    \ ((i 0)\n             (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1)\n              (if (equal? (substring string) (string-ref\
    \ string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n \
    \       count\n        (loop (+ i 1) (if (equal? (substring string) (string-ref\
    \ string i)) (+ count 1) count))))))\n", "  (cond [(empty? string) 0]\n      \
    \  [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (substring string) substring) 1]\n   \
    \     [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n\
    \        [else (+ 1 (how_many_times (string->list string) (substring string)))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (substring string) (string-ref string i)) (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n    [else\
    \ (+ 1 (how_many_times (substring string) (substring string)))]))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (substring string) string) 1]\n    [else\
    \ (+ 1 (how_many_times (substring string) (substring string)))]))\n", "  (if (empty?\
    \ string)\n      0\n      (+ (if (substring (string-ref string 0))\n         \
    \    (string-length substring)\n             (string-length string))\n       \
    \  (how_many_times (string->list string) (substring (string-ref string 0))))))\n",
  "  (define (count-overlapping start end)\n    (cond\n      [(or (= start end) (=\
    \ start 0)) (+ end 1)]\n      [(< start end) (+ start 1)]\n      [else 0]))\n\
    \  (define (count-overlapping-cases start end)\n    (cond\n      [(or (= start\
    \ end) (= start 0)) (+ end 1)]\n      [(< start end) (+ start 1)]\n      [else\
    \ 0]))\n  (define (count-overlapping-case-length start end)\n    (cond\n     \
    \ [(or (= start end) (= start 0)) (+ end 1)]\n      [(< start end) (+ start 1)]\n\
    \      [else 0]))\n  (define (count-overlapping-case-length start end)\n    (cond\n\
    \      [(or (= start end) (= start 0)) (+ end 1)]\n      [(< start end) (+ start\
    \ 1)]\n      [else 0]))\n  (define (count-overlapping-case-length start end)\n\
    \    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n      [(< start\
    \ end) (+ start 1)]\n      [else 0]))\n  (define (count-overlapping-case-length\
    \ start end)\n    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n  \
    \    [(< start end) (+ start 1)]\n      [else 0]))\n  (define (count-overlapping-case-length\
    \ start end)\n    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n  \
    \    [(< start end) (+ start 1)]\n      [else 0]))\n  (define (count-overlapping-case-length\
    \ start end)\n    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n  \
    \    [(< start end) (+ start 1)]\n      [else 0]))\n  (define (count-overlapping-case-length\
    \ start end)\n    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n  \
    \    [(< start end) (+ start 1)]\n      [else 0]))\n  (define (count-overlapping-case-length\
    \ start end)\n    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n  \
    \    [(< start end) (+ start 1)]\n      [else 0]))\n  (define (count-overlapping-case-length\
    \ start end)\n    (cond\n      [(or (= start end) (= start 0)) (+ end 1)]\n  \
    \    [(< start end) (+ start 1)]\n      [else 0]))\n  (", "  (let loop ((count\
    \ 0) (index 0))\n    (if (= index string-length)\n        count\n        (loop\
    \ (+ count (substring-count string index substring)) (+ index 1)))))\n", "  (let\
    \ loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n     \
    \   count\n        (loop (+ i 1)\n              (if (equal? (substring string)\
    \ (string-ref string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ 1 (how_many_times (rest string)\
    \ (first string)))]))\n", "  (let loop ((count 0) (index 0))\n    (if (< index\
    \ string.length)\n        (loop (+ count 1)\n              (+ index 1))\n    \
    \    count)))\n", "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n\
    \        count\n        (loop (+ count (substring (string index) index)) (+ index\
    \ 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond\n  \
    \  [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n  \
    \  [else (+ 1 (how_many_times (substring string) (substring string)))]))\n", " \
    \ (let loop ((count 0) (index 0) (string string) (substring substring))\n    (cond\
    \ ((null? string) count)\n          ((eqv? substring string) (loop (+ count 1)\
    \ index string substring))\n          ((eqv? (substring string) (string-ref string\
    \ index)) (loop (+ count 1) (+ index 1) string substring))\n          (else (loop\
    \ (+ count 1) (+ index 1) (string-ref string index) substring)))))\n", "  (define\
    \ (helper string substring count)\n    (if (empty? string)\n        count\n  \
    \      (helper (rest string) (substring (string-ref string 0)) (incf count))))\n\
    \  (helper string substring 0))\n", "  (define (helper string substring count)\n\
    \    (cond [(empty? string) count]\n          [(equal? (first string) substring)\
    \ (helper (rest string) substring (+ count 1))]\n          [else (helper (rest\
    \ string) substring (+ count 1))]))\n  (helper string substring 0))\n", "  (let\
    \ ((count 0))\n    (for ((i 0 (+ i 1))) (\n      (if (eqv? substring (car string))\n\
    \          (set! count (+ count 1))\n          (set! i (+ i 1))))\n    count))\n\
    )\n", "  (let loop ((count 0) (index 0) (string string))\n    (if (= index 0)\n\
    \        count\n        (loop (+ count (substring (substring (substring string\
    \ 0 index) index)))\n              (+ index 1)\n              (substring string\
    \ index))))\n  count)\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) substring) 1]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n        count\n\
    \        (loop (+ count (substring-count string substring index)) (+ index 1)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) (string-ref string\
    \ 0)) 1])\n  (+ (how_many_times (substring string) (substring string)) (how_many_times\
    \ (substring string) string)))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (how_many_times (rest string) (substring string))]))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (for-each ([c string])\n              (if (equal? c substring)\n\
    \                  (set! count (add1 count))\n                  (set! count 0))))\n\
    \  count)\n", "  (let loop ((i 0)\n             (count 0))\n    (cond ((eq? i\
    \ 0)\n           (if (eq? (string-match substring string)\n                  \
    \ 0)\n               (+ count 1)))\n          ((eq? (string-match substring string)\n\
    \                 0)\n           (loop (+ i 1)\n                 (+ count 1)))\n\
    \          ((eq? (string-match substring string)\n                 1)\n      \
    \     (loop (+ i 1)\n                 (+ count 1)))\n          ((eq? (string-match\
    \ substring string)\n                 2)\n           (loop (+ i 1)\n         \
    \        (+ count 1)))\n          (else\n           (loop (+ i 1)\n          \
    \       (+ count 1)))))\n  count)\n", "  (let loop ((count 0) (index 0))\n   \
    \ (if (= index string-length)\n        count\n        (loop (+ count 1)\n    \
    \          (+ index 1)\n              (if (equal? substring (string-ref string\
    \ index))\n                  (+ count 1)\n                  (loop (+ count 0)\n\
    \                        (+ index 1)\n                        (string-ref string\
    \ index)))))))\n", "  (let loop ((count 0) (index 0) (string string) (substring\
    \ substring))\n    (cond ((null? string) count)\n          ((eq? (car string)\
    \ substring) (loop (+ count 1) (+ index 1) (cdr string) (cdr substring)))\n  \
    \        (else (loop (+ count 1) (+ index 1) (cdr string) (cdr substring)))))\n\
    \  count)\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n    [else (how_many_times\
    \ (rest string) substring)]))\n", "  (define (helper string substring count)\n\
    \    (if (empty? string)\n        count\n        (helper (rest string) (substring\
    \ (string-ref string 0)) (incf count))))\n  (helper string substring 0))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1\
    \ (how_many_times (rest string) substring))]\n    [else (+ 1 (how_many_times (rest\
    \ string) substring))]))\n", "  (define (count-overlapping start end)\n    (cond\n\
    \      [(< start end)\n       (if (equal? (substring string) (string-ref string\
    \ start))\n           (+ start (count-overlapping start end))\n           (+ end\
    \ (count-overlapping start end)))]\n      [(equal? (substring string) (string-ref\
    \ string start))\n       (+ start (count-overlapping start end))]\n      [else\n\
    \       (+ end (count-overlapping start end))]))\n  (count-overlapping 0 (string-length\
    \ string)))\n", "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (+ i 1)\n              (if (equal? (substring\
    \ string) (string-ref string i))\n                  (+ count 1)\n            \
    \      count))))))\n", "  (let ((count 0))\n    (for-each ([c string])\n     \
    \ (when (string=? c substring)\n        (set! count (add1 count)))))\n  count)\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ 1 (how_many_times (rest string)\
    \ (substring string)))]))\n", "  (let ((count 0))\n    (for-each ([c string])\n\
    \              (when (string=? c substring)\n                (set! count (add1\
    \ count)))\n              (when (string=? c substring)\n                (set!\
    \ count (add1 count)))\n              (when (string=? c substring)\n         \
    \       (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))\n              (when (string=? c substring)\n\
    \                (set! ", "  (define (count-overlapping substring string)\n  \
    \  (cond\n      [(empty? string) 0]\n      [(equal? (first string) substring)\
    \ (+ 1 (count-overlapping substring (substring (length string))))]\n      [else\
    \ (count-overlapping substring (substring (length string)))]))\n  (count-overlapping\
    \ substring string))\n", "  (let loop ((count 0) (index 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (add1 count) (add1 index))\n        (if\
    \ (string-equal? substring (string-ref string index))\n            (loop (add1\
    \ count) (add1 index))\n            (loop (add1 count) (add1 index) (add1 index))))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) substring) (+\
    \ 1 (how_many_times (rest string) substring))]\n    [else (how_many_times (rest\
    \ string) (substring string))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (substring string) (string-ref string 0)) 1])\n  (+ (how_many_times\
    \ (substring string) (substring string)) (how_many_times (substring string) string)))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list (string-downcase string))\
    \ substring))]))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string= (string-ref string i) (string-ref substring j))\n          do (incf\
    \ count)\n          finally (return count))\n  )\n)\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (define (helper string substring count)\n\
    \    (cond ((null? string) count)\n          ((eq? (car string) substring) (helper\
    \ (cdr string) substring (incf count)))\n          (else (helper (cdr string)\
    \ substring count))))\n  (helper string substring 0))\n", "  (let loop ((count\
    \ 0) (index 0))\n    (if (string-empty? string)\n        count\n        (loop\
    \ (add1 count) (add1 index))\n        (loop (add1 count) (add1 index) (string-ref\
    \ string index)))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n        count\n\
    \        (loop (+ count 1) (+ index 1))\n        (if (equal? (substring string)\
    \ (string-ref string index))\n            (loop (+ count 1) (+ index 1))\n   \
    \         (loop (+ count 0) (+ index 1))))))\n", "  (define (helper string substring\
    \ count)\n    (cond ((null? string) count)\n          ((eq? (car string) substring)\
    \ (helper (cdr string) substring (1+ count)))\n          (else (helper (cdr string)\
    \ substring (+ count 1)))))\n  (helper string substring 0))\n", "  (let loop ((count\
    \ 0) (index 0))\n    (if (string-empty? string)\n        count\n        (loop\
    \ (add1 count) (add1 index))\n        (loop (add1 count) (add1 index) (substring\
    \ string index))))))\n", "  (define (helper string substring count)\n    (cond\
    \ [(empty? string) count]\n          [(equal? (first string) substring) (helper\
    \ (rest string) substring (+ count 1))]\n          [else (helper (rest string)\
    \ substring (+ count 1))]))\n  (helper string substring 0))\n", "  (define (count-overlapping-cases\
    \ string substring)\n    (cond\n      [(empty? string) 0]\n      [(equal? (first\
    \ string) substring) (+ 1 (count-overlapping-cases (rest string) substring))]\n\
    \      [else (+ 1 (count-overlapping-cases (rest string) substring))]))\n  (count-overlapping-cases\
    \ string substring))\n", "  (let loop ((i 0)\n             (count 0))\n    (if\
    \ (string-empty? string)\n        count\n        (loop (+ i 1) (if (equal? (substring\
    \ string) (string-ref string i)) (+ count 1) count))))))\n", "  (let loop ((i\
    \ 0)\n             (count 0))\n    (cond\n      [(empty? string) count]\n    \
    \  [(equal? string substring) (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) (+ count 1))]\n    )\n  )\n)\n", "  (cond\n    [(empty? string) 0]\n  \
    \  [(equal? (substring string) (string-ref string 0)) 1])\n  (+ (how_many_times\
    \ (substring string) (substring string)) (how_many_times (substring string) string)))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          if (string= (string-ref\
    \ string i) substring)\n          collect (+ 1 (substring string= i j string)))\n\
    \    count))\n", "  (let ((count 0))\n    (for-each ([c string])\n      (when\
    \ (eq? c substring)\n        (set! count (add1 count)))))\n  count)\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (first string) substring) 1]\n       \
    \ [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (substring string) \"\") 0]\n    [else (+ 1 (how_many_times\
    \ (substring string) (substring string)))]))\n", "  (let ((count 0))\n    (for-each\
    \ ([c string])\n              (if (equal? c substring)\n                  (set!\
    \ count (add1 count))\n                  (set! count 0))))\n  count)\n", "  (let\
    \ loop ((count 0) (index 0))\n    (if (= index string-length)\n        count\n\
    \        (loop (+ count 1) (+ index 1)))))\n", "  (let loop ((i 0)\n         \
    \    (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal? (substring\
    \ string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop\
    \ (+ i 1) (+ count 1))])))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) substring) 1]\n        [else (+ 1 (how_many_times (rest string)\
    \ substring))]))\n", "  (define (count-overlapping substring string)\n    (cond\n\
    \      [(empty? string) 0]\n      [(equal? (first string) substring) (+ 1 (count-overlapping\
    \ substring (substring (second string))))]\n      [else (+ 1 (count-overlapping\
    \ substring (substring (first string))))]))\n  (count-overlapping substring string))\n",
  "  (let ((count 0))\n    (for-each ([c string])\n              (if (string-match\
    \ substring c)\n                  (set! count (add1 count))\n                \
    \  (set! count 0))))\n  count)\n", "  (let loop ((i 0)\n             (count 0))\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? string substring) (loop\
    \ (+ i 1) count)]\n      [else (loop (+ i 1) (+ count 1))]))))\n", "  (let ((count\
    \ 0))\n    (for-each ([c string])\n              (when (string=? c substring)\n\
    \                (set! count (add1 count)))))\n  count)\n", "  (define (helper\
    \ string substring count)\n    (if (empty? string)\n        count\n        (helper\
    \ (rest string) substring (+ count 1))))\n  (helper string substring 0))\n", " \
    \ (cond [(empty? string) 0]\n        [(equal? (substring string) substring) (+\
    \ 1 (how_many_times (rest string) substring))]\n        [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times (rest string) substring))]))\n", " \
    \ (cond [(empty? string) 0]\n        [(equal? (substring string) substring) 1]\n\
    \        [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (let ((count\
    \ 0))\n    (for-each ([c string])\n      (when (string=? c substring)\n      \
    \  (set! count (add1 count)))))\n  count)\n", "  (let ((count 0))\n    (for ((i\
    \ (in-range 0 (string-length string)))\n          (j (in-range 0 (string-length\
    \ substring)))\n          (match (substring string i j))\n          (if (equal?\
    \ (substring string i j) substring)\n              (set! count (+ count 1))))\n\
    \    count))\n", "  (let loop ((count 0) (string string) (substring substring))\n\
    \    (cond ((or (empty? string) (empty? substring))\n           (if (empty? string)\
    \ count (+ count 1)))\n          ((equal? (first string) (first substring))\n\
    \           (loop (+ count 1)\n                   (rest string)\n            \
    \       (rest substring)))\n          (else\n           (loop (+ count 1)\n  \
    \                 (rest string)\n                   (rest substring))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) 1]\n  \
    \      [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (if (empty?\
    \ string)\n      0\n      (if (equal? (substring string) substring)\n        \
    \  (+ 1 (how_many_times (substring string) (substring string)))\n          (+\
    \ 1 (how_many_times (substring string) substring)))))\n", "  (define (count-overlapping\
    \ substring string)\n    (if (empty? string)\n        0\n        (if (equal? (first\
    \ string) substring)\n            (+ 1 (count-overlapping substring (substring\
    \ (second string))))\n            (count-overlapping substring (substring (first\
    \ string)))))\n  (count-overlapping substring string))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (let ((count 0))\n    (loop for i from 0\
    \ to (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string= (string-ref string i) (string-ref substring j))\n   \
    \       do (incf count)\n          finally (return count))\n    (if (< count 0)\n\
    \        0\n        (+ 1 (how_many_times (substring string) (substring (string-tail\
    \ string))))))\n", "  (let loop ((count 0) (index 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (+ count (substring (substring (substring\
    \ string index) index) index)) (+ index 1)))))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) substring) 1]\n\
    \        [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? (first string) substring) (helper (rest string) substring (+ count\
    \ 1))]\n      [else (helper (rest string) substring (+ count 1))]))\n  (helper\
    \ string substring 0))\n", "  (let loop ((i 0)\n             (count 0))\n    (if\
    \ (string=? substring string)\n        count\n        (loop (+ i 1) (+ count 1)))))\n",
  "  (let ((count 0))\n    (for-each ([c string])\n              (if (string-match\
    \ substring c)\n                  (set! count (+ count 1))\n                 \
    \ (set! count 0)))))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string=? (substring string j) (string-ref string i))\n          do (set! count\
    \ (incf count))\n          finally (return count))\n  )\n)\n", "  (if (empty?\
    \ string)\n      0\n      (+ (count (substring string) substring)\n         (how_many_times\
    \ (rest string) substring))))\n", "  (let loop ((i 0)\n             (count 0))\n\
    \    (if (string-empty? string)\n        count\n        (loop (+ i 1)\n      \
    \        (if (equal? substring (string-ref string i))\n                  (+ count\
    \ 1)\n                  count))))))\n", "  (cond\n    [(empty? string) 0]\n  \
    \  [(equal? (substring string) substring) 1]\n    [else (+ 1 (how_many_times (rest\
    \ string) substring))]))\n", "  (let loop ((count 0) (index 0) (string string)\
    \ (substring substring))\n    (cond ((null? string) count)\n          ((eq? (car\
    \ string) substring) (loop (+ count 1) (+ index 1) (cdr string) substring))\n\
    \          (else (loop (+ count 1) (+ index 1) (cdr string) substring)))))\n",
  "  (let ((count 0))\n    (for ((i 0 (+ i 1))) (if (equal? string \"\") count (if\
    \ (equal? (substring i) string) (add1 count) count))))\n  count)\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? substring (car string)) (how_many_times-helper (cdr string)\
    \ substring (+ count 1))]\n      [else (how_many_times-helper (cdr string) substring\
    \ (+ count 1))]))\n  (how_many_times-helper string substring 0))\n", "  (let loop\
    \ ((count 0) (index 0))\n    (if (or (= index string) (= count 0))\n        count\n\
    \        (loop (+ count (substring (string (+ index 1))))\n              (+ index\
    \ 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string)\
    \ substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let loop ((i 0) (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1) (if (equal? (substring string) (string-ref string i)) (+\
    \ count 1) count))))))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string=? (substring string i) (string-ref string j))\n          collect (+\
    \ count 1))))\n", "  (define (helper string substring count)\n    (if (string-empty?\
    \ string)\n        count\n        (helper (substring string) (substring string)\
    \ (+ count 1))))\n  (helper string substring 0))\n", "  (let ((count 0))\n   \
    \ (loop for i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ substring)\n          when (string=? (substring string j) (string-ref string\
    \ i))\n          do (set! count (incf count))\n          finally (return count))\n\
    \  )\n)\n", "  (let loop ((count 0) (index 0) (substring substring))\n    (if\
    \ (eq? index 0)\n        count\n        (loop (+ count 1) (- index 1) (substring\
    \ (reverse substring))))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \    [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (let ((count\
    \ 0))\n    (for-each ([c string])\n              (when (string-match substring\
    \ c)\n                (set! count (add1 count)))))\n  count)\n", "  (let loop\
    \ ((count 0) (string string) (substring substring))\n    (cond ((null? string)\
    \ count)\n          ((eq? (car string) substring) (loop (+ count 1) (cdr string)\
    \ substring))\n          (else (loop (+ count 1) (cdr string) substring)))))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string=? (substring\
    \ string i) (string-ref string j))\n          do (set! count (add1 count))\n \
    \         finally (return count))\n  )\n)\n", "  (cond [(empty? string) 0]\n \
    \       [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ 1 (how_many_times (rest string) (substring string)))]))\n",
  "  (let ((count 0))\n    (for-each ([c string])\n              (if (string-match\
    \ substring c)\n                  (set! count (+ count 1))\n                 \
    \ (set! count 0)))))\n", "  (let loop ((count 0) (index 0))\n    (if (zero? index)\n\
    \        count\n        (loop (+ count (substring (substring (substring string\
    \ index) index) index)) (+ index 1)))))\n", "  (let loop ((count 0) (index 0))\n\
    \    (cond ((null? string) count)\n          ((eqv? (substring string) (string-ref\
    \ string index))\n           (loop (add1 count) (add1 index)))\n          (else\
    \ (loop (add1 count) (add1 index))))))\n", "  (cond [(empty? string) 0]\n    \
    \    [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ 1 (how_many_times (rest string) (first string)))]))\n", "  (let\
    \ loop ((i 0)\n             (count 0))\n    (cond ((null? string) count)\n   \
    \       ((eqv? (char-code (car string)) (char-code (substring 0))) (incf count))\n\
    \          ((eqv? (char-code (car string)) (char-code (substring 1))) (loop (+\
    \ i 1) (incf count)))\n          ((eqv? (char-code (car string)) (char-code (substring\
    \ 2))) (loop (+ i 1) (incf count)))\n          (else (loop (+ i 1) (incf count))))))\n",
  "  (let loop ((count 0) (index 0))\n    (if (eq? index string-length) count\n  \
    \    (loop (+ count (substring-count string index substring)) (+ index 1)))))\n",
  "  (if (empty? string)\n      0\n      (let ((count (+ 1 (string-count string substring))))\n\
    \        (if (equal? string substring)\n            count\n            (if (equal?\
    \ (string-ref string 0) substring)\n                count\n                (if\
    \ (equal? (string-ref string 1) substring)\n                    count\n      \
    \              (if (equal? (string-ref string 2) substring)\n                \
    \        count\n                        (if (equal? (string-ref string 3) substring)\n\
    \                            count\n                            (if (equal? (string-ref\
    \ string 4) substring)\n                                count\n              \
    \                  (if (equal? (string-ref string 5) substring)\n            \
    \                        count\n                                    (if (equal?\
    \ (string-ref string 6) substring)\n                                        count\n\
    \                                        (if (equal? (string-ref string 7) substring)\n\
    \                                            count\n                         \
    \                   (if (equal? (string-ref string 8) substring)\n           \
    \                                     count\n                                \
    \                (if (equal? (string-ref string 9) substring)\n              \
    \                                      count\n                               \
    \                     (if (equal? (string-ref string 10) substring)\n        \
    \                                                count\n                     \
    \                                   (if (equal? (string-ref string 11) substring)\n\
    \                                                            count\n         \
    \                                                   (if (equal? (string-ref string\
    \ 12) substring)\n                                                           \
    \     count\n                                                                (if\
    \ (equal? (string-ref string 13) substring)\n                                \
    \                                    count\n                                 \
    \                                   (if (equal? (string-ref string 14) substring)\n\
    \                                                                        count\n\
    \                                                                        (if (equal?\
    \ (string-ref string 15) substring)\n                                        \
    \                                    count\n                                 \
    \                                           (if (equal? (string-ref string 16)\
    \ substring)\n                                                               \
    \                 count\n                                                    \
    \                            (if (equal? (string-ref string 17) substring)\n \
    \                                                                            \
    \       count\n                                                              \
    \                      (if (equal? (string-ref string 18) substring)\n       \
    \                                                                            \
    \     count\n                                                                \
    \                        (if (equal? (string-ref string 19) substring)\n     \
    \                                                                            \
    \           count\n                                                          \
    \                                  (if (equal? (string-ref string 20) substring)\n\
    \                                                                            \
    \                    count\n                                                 \
    \                                               (if (equal? (string-ref string\
    \ 21) substring)\n                                                           \
    \                                         count\n                            \
    \                                                                        (if (equal?\
    \ (string-ref string 22) substring)\n                                        \
    \                                                                count\n     \
    \                                                                            \
    \                       (if (equal? (string-ref string 23) substring)\n      \
    \                                                                            \
    \                          count\n                                           \
    \                                                                 (if (equal?\
    \ (string-ref string 24) substring)\n                                        \
    \                                                                        count\n\
    \                                                                            \
    \                                    (if (equal? (string-ref string 25) substring)\n\
    \                                                                            \
    \                                        count\n                             \
    \                                                                            \
    \           (if (equal? (string-ref string 26) substring)\n                  \
    \                                                                            \
    \                          count\n                                           \
    \                                                                            \
    \ (if (equal? (string-ref string 27) substring)\n                            \
    \                                                                            \
    \                    count\n                                                 \
    \                                                                           (if\
    \ (equal? (string-ref string 28) substring)\n                                \
    \                                                                            \
    \                    count\n                                                 \
    \                                                                            \
    \   ", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) string) 1]\n    [else (+ 1 (how_many_times (substring string)\
    \ (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string)\
    \ (substring string)))]))\n", "  (if (empty? string)\n      0\n      (let ((count\
    \ (+ 1 (count (substring string))))\n            (index (substring string)))\n\
    \        (if (equal? index 0)\n            (if (equal? (substring string) (string-ref\
    \ string 0))\n                count\n                count)))))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(equal? (substring string) (string-ref string 0))\
    \ 1]\n    [else (+ 1 (how_many_times (string->list string) (substring string)))]))\n",
  "  (let loop ((count 0) (index 0) (string string) (substring substring))\n    (cond\
    \ ((null? string) count)\n          ((eq? (car string) substring) (loop (+ count\
    \ 1) (+ index 1) (cdr string) (cdr substring)))\n          (else (loop (+ count\
    \ 1) (+ index 1) (cdr string) (cdr substring))))))\n", "  (let loop ((count 0)\
    \ (index 0))\n    (if (zero? index)\n        count\n        (loop (+ count (substring-count\
    \ string index)) (substring-index string index))))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest\
    \ string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (define (helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(equal? (first string) substring) (helper (rest string) substring\
    \ (+ count 1))]\n          [else (helper (rest string) substring (+ count 1))]))\n\
    \  (helper string substring 0))\n", "  (let loop ((i 0)\n             (count 0))\n\
    \    (if (string-empty? string)\n        count\n        (loop (+ i 1) (if (equal?\
    \ (substring string) (string-ref string i)) (+ count 1) count))))))\n", "  (let\
    \ loop ((count 0) (string string) (substring substring))\n    (if (or (= count\
    \ 0) (equal? string \"\"))\n        count\n        (loop (+ count 1)\n       \
    \        (string-append string substring)\n               (string-append substring\
    \ string)))))\n", "  (define (helper string substring count)\n    (cond\n    \
    \  [(empty? string) count]\n      [(equal? (first string) substring) (helper (rest\
    \ string) substring (+ count 1))]\n      [else (helper (rest string) substring\
    \ (+ count 1))]))\n  (helper string substring 0))\n", "  (define (helper string\
    \ substring count)\n    (if (empty? string)\n        count\n        (helper (rest\
    \ string) (substring (string-ref string 0)) (+ count 1))))\n  (helper string substring\
    \ 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n        [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (define (helper string substring count)\n\
    \    (if (empty? string)\n        count\n        (helper (rest string) (substring\
    \ (string-ref string 0)) (incf count))))\n  (helper string substring 0))\n", " \
    \ (let loop ((count 0) (index 0))\n    (if (= index string-length)\n        count\n\
    \        (loop (+ count (substring (string (+ index 1) string-length))) (+ index\
    \ 1)))))\n", "  (let loop ((i 0)\n             (count 0))\n    (cond\n      [(empty?\
    \ string) count]\n      [(equal? string substring) (loop (+ i 1) count)]\n   \
    \   [else (loop (+ i 1) (+ count 1))])))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times (rest\
    \ string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (for-each ([c string])\n         \
    \     (if (string-match substring c)\n                  (set! count (+ count 1)))))\n\
    \  count)\n", "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n\
    \        count\n        (loop (+ count 1) (+ index 1))\n        (if (equal? string\
    \ substring index)\n            (loop (+ count 1) (+ index 1))\n            (loop\
    \ (+ count 0) (+ index 1))))))\n", "  (define (helper string substring count)\n\
    \    (if (empty? string)\n        count\n        (helper (rest string) (substring\
    \ (string-ref string 0)) (incf count))))\n  (helper string substring 0))\n", " \
    \ (let loop ((count 0) (index 0))\n    (if (zero? index)\n        count\n    \
    \    (loop (+ count (substring (substring (substring string 0 index) index)))\n\
    \              (add1 index))))))\n", "  (let loop ((count 0) (index 0))\n    (if\
    \ (string-empty? string)\n        count\n        (loop (add1 count) (add1 index))\n\
    \        (if (equal? string substring)\n            (add1 count)\n           \
    \ (loop (add1 count) (add1 index)))))\n)\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(equal? (substring string) (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (let loop ((i 0)\n    \
    \         (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (substring string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n    \
    \  [else (loop (+ i 1) (+ count 1))])))\n", "  (let ((count 0))\n    (loop for\
    \ i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ substring)\n          when (string= (string-ref string i) (string-ref substring\
    \ j))\n          do (incf count)\n          finally (return count))\n    count))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n    [else (+ 1 (how_many_times (string-tail string) (substring string)))]))\n",
  "  (let loop ((count 0) (index 0))\n    (if (or (= index string) (= count 0))\n\
    \        count\n        (loop (+ count (substring (string index) index)) (+ index\
    \ 1)))))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n\
    \          for j from 0 to (string-length substring)\n          when (string=\
    \ (string-ref string i) (string-ref substring j))\n          do (incf count)\n\
    \          finally (return count))\n    (if (> count 0)\n        (- count)\n \
    \       0)))\n", "  (let ((count 0))\n    (for ((i (in-range 0 (string-length\
    \ string)))\n          (j (in-range 0 (string-length substring)))\n          (sub\
    \ (substring j i)))\n      (when (string=? (substring i j) sub)\n        (set!\
    \ count (add1 count)))))\n  count)\n", "  (cond\n    [(empty? string) 0]\n   \
    \ [(equal? (substring string) \"\") 0]\n    [else (+ 1 (how_many_times (rest string)\
    \ (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string)\
    \ (substring string)))]))\n", "  (let ((count 0))\n    (for-each ([c string])\n\
    \              (if (string-match substring c)\n                  (set! count (add1\
    \ count)))))\n  count)\n", "  (let loop ((i 0)\n             (count 0))\n    (if\
    \ (string-empty? string)\n        count\n        (if (equal? (substring string)\
    \ (string-ref string i))\n            (loop (+ i 1)\n                   (+ count\
    \ 1))\n            (loop (+ i 1)\n                   (+ count 0))))))\n", "  (let\
    \ ((count 0))\n    (for-each ([c string])\n              (if (string-match substring\
    \ c)\n                  (set! count (add1 count)))))\n  count)\n", "  (let ((count\
    \ 0))\n    (for-each ([c string])\n              (if (string=? c substring)\n\
    \                  (set! count (add1 count))\n                  (set! count 0)))))\n",
  "  (define (helper string substring count)\n    (if (string-empty? string)\n   \
    \     count\n        (helper (substring (string-tail string)) substring (+ count\
    \ 1))))\n  (helper string substring 0))\n", "  (cond [(empty? string) 0]\n   \
    \     [(equal? (substring string) (string-ref string 0)) 1]\n        [else (+\
    \ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (let\
    \ ((count 0))\n    (for-each ([c string])\n      (when (string=? c substring)\n\
    \        (set! count (add1 count)))))\n  count)\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ 1 (how_many_times (rest string)\
    \ (first string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n    [else\
    \ (+ 1 (how_many_times (rest string) substring))]))\n", "  (define (helper string\
    \ substring count)\n    (if (empty? string)\n        count\n        (helper (rest\
    \ string) (substring (string-ref string 0)) (incf count))))\n  (helper string\
    \ substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
