name: HumanEval_91_is_bored
language: racket
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The sun\
  \ is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n   \
    \ [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal?\
    \ (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let ((bored-count 0))\n    (loop for (word . rest) on S\n          when (and\
    \ (equal? (first word) \"I\")\n                   (not (equal? (first rest) \"\
    .\")))\n          do (set! bored-count (add1 bored-count))\n          else do\
    \ (return bored-count))\n    bored-count))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \".\") 0]\n \
    \   [(equal? (first S) \"?\") 0]\n    [(equal? (first S) \"!\") 0]\n    [else\
    \ 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n  \
    \  [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored-count 0))\n    (loop\
    \ for char = (char-code S)\n          while char\n          collect (char-code\
    \ char) into bored-count\n          finally (return bored-count))))\n", "  (cond\
    \ [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n",
  "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n\
    \      [(string-match \"^.\" S) (set! bored 1)]\n      [(string-match \"^!\" S)\
    \ (set! bored 1)]\n      [(string-match \"^?\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 1)]\n      [(string-match \"\\.\\.\" S) (set! bored 1)]\n\
    \      [(string-match \"\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\
    \\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\.\\.\\.\\.\\.\" S)\
    \ (set! bored 1)]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\" S) (set! bored\
    \ 1)]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n   \
    \   [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match \"\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"\
    I\") 1]\n        [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let ((bored-count 0))\n    (loop for char = (char-code S) until (char-code S)\
    \ equals #\\. do\n      (when (char-equal? char #\\?)\n        (set! bored-count\
    \ (add1 bored-count)))))\n  bored-count)\n", "  (cond [(empty? S) 0]\n       \
    \ [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(string=? (substring S 0 1) \"I\") 1]\n        [else 0]))\n", "  (let\
    \ ((boredom 0))\n    (cond\n      [(string-match \"^I\" S) (set! boredom 1)]\n\
    \      [(string-match \"^\\.\" S) (set! boredom 1)]\n      [(string-match \"^!\"\
    \ S) (set! boredom 1)]\n      [(string-match \"^?\" S) (set! boredom 1)]\n   \
    \   [(string-match \"\\.\" S) (set! boredom 1)]\n      [(string-match \"!\" S)\
    \ (set! boredom 1)]\n      [(string-match \"?\" S) (set! boredom 1)]\n      [(string-match\
    \ \"I\" S) (set! boredom 1)]\n      [(string-match \"\\.\" S) (set! boredom 1)]\n\
    \      [(string-match \"!\" S) (set! boredom 1)]\n      [(string-match \"?\" S)\
    \ (set! boredom 1)]\n      [(string-match \"I\" S) (set! boredom 1)]\n      [(string-match\
    \ \"!\" S) (set! boredom 1)]\n      [(string-match \"?\" S) (set! boredom 1)]\n\
    \      [(string-match \"I\" S) (set! boredom 1)]\n      [(string-match \"\\.\"\
    \ S) (set! boredom 1)]\n      [(string-match \"!\" S) (set! boredom 1)]\n    \
    \  [(string-match \"?\" S) (set! boredom 1)]\n      [(string-match \"I\" S) (set!\
    \ boredom 1)]\n      [(string-match \"!\" S) (set! boredom 1)]\n      [(string-match\
    \ \"?\" S) (set! boredom 1)]\n      [(string-match \"I\" S) (set! boredom 1)]\n\
    \      [(string-match \"\\.\" S) (set! boredom 1)]\n      [(string-match \"!\"\
    \ S) (set! boredom 1)]\n      [(string-match \"?\" S) (set! boredom 1)]\n    \
    \  [(string-match \"I\" S) (set! boredom 1)]\n      [(string-match \"!\" S) (set!\
    \ boredom 1)]\n      [(string-match \"?\" S) (set! boredom 1)]\n      [(string-match\
    \ \"I\" S) (set! boredom 1)]\n      [(string-match \"\\.\" S) (set! boredom 1)]\n\
    \      [(string-match \"!\" S) (set! boredom 1)]\n      ", "  (cond [(string-match\
    \ \"^I\" S) 0]\n        [else 1]))\n", "  (let loop ((S S) (count 0))\n    (cond\n\
    \      [(empty? S) count]\n      [(equal? (first S) \"I\") (loop (rest S) (add1\
    \ count))]\n      [else (loop (rest S) count)])))\n", "  (let ((bored 0))\n  \
    \  (cond ((string-match \"^I\" S) (incf bored))\n          ((string-match \"\\\
    .\" S) (incf bored))\n          ((string-match \"!\" S) (incf bored))\n      \
    \    ((string-match \"?\" S) (incf bored))\n          (else bored))))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\"\
    ) 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let loop ((S S) (count 0))\n    (cond\n      [(empty? S) count]\n      [(equal?\
    \ (first S) \"I\") (loop (rest S) (add1 count))]\n      [else (loop (rest S) count)])))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\"\
    \ S) (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 1)]\n     \
    \ [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match \"^?\" S) (set!\
    \ bored 1)]\n      [else (set! bored 0)]\n      )))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    ((empty? S) 0)\n    ((equal? (first S) \"I\") 1)\n    (else (+ 1 (is_bored\
    \ (rest S)))))\n  )\n)\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond [(empty?\
    \ S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored-count\
    \ 0))\n    (loop for i from 0 to (length S)\n          when (and (char=? (substring\
    \ S i i) 'I')\n                   (char=? (substring S i i) '.')\n           \
    \        (char=? (substring S i i) '?')\n                   (char=? (substring\
    \ S i i) '!'))\n          (set! bored-count (add1 bored-count)))))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (let ((bored-count 0))\n    (loop for char = (char-code\
    \ (first S))\n          while char\n          collect (if (char-equal? char #\\\
    I)\n                      (add1 bored-count)\n                      (add1 bored-count)))))\n",
  "  (cond [(empty? S) #f]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored-count 0))\n    (cond\n      [(string-match\
    \ \"^I\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"^.\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"^!\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"^?\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+\
    \ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n    \
    \  [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+\
    \ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.", "  (let loop ((S S) (count 0))\n    (cond ((string-match\
    \ \"^I\" S) count)\n          ((string-match \"[.?!]\" S) (loop (substring S 0\
    \ (string-match \"[.?!]\" S)) (+ count 1)))\n          ((string-match \"[.?!]\"\
    \ S) (loop (substring S 0 (string-match \"[.?!]\" S)) count))\n          (else\
    \ (loop (substring S 0 (string-match \"[.?!]\" S)) count)))))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(equal? (first S) \"I\")\
    \ 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n   \
    \ [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let loop\
    \ ((S S) (count 0))\n    (cond\n      [(empty? S) count]\n      [(equal? (first\
    \ S) \"I\") (loop (rest S) (+ count 1))]\n      [else (loop (rest S) count)])))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored-count\
    \ 0))\n    (loop for (word . rest)\n           in (reverse-split S #\\. #\\? #\\\
    !)\n           when (string=? (first word) \"I\")\n           do (set! bored-count\
    \ (add1 bored-count))\n           finally (return bored-count))))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n \
    \   [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond [(string-match \"^I\" S) 0]\n \
    \       [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"\
    I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n\
    \    [(equal? (first S) \"?\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let ((bored-count 0))\n    (loop for char = (char-code (first S))\n        \
    \  while char\n          collect (if (char-equal? char #\\I)\n               \
    \       (+ 1 (bored-count))\n                      bored-count)\n          into\
    \ bored-count\n          finally (return bored-count))))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [(equal? (first S) \"!\") 0]\n\
    \    [else 1]))\n", "  (let ((boredoms 0))\n    (cond\n      [(string=? (substring\
    \ S 0 3) \"I\") (+ boredoms 1)]\n      [(string=? (substring S 0 4) \"I\") (+\
    \ boredoms 2)]\n      [(string=? (substring S 0 5) \"I\") (+ boredoms 3)]\n  \
    \    [(string=? (substring S 0 6) \"I\") (+ boredoms 4)]\n      [(string=? (substring\
    \ S 0 7) \"I\") (+ boredoms 5)]\n      [(string=? (substring S 0 8) \"I\") (+\
    \ boredoms 6)]\n      [(string=? (substring S 0 9) \"I\") (+ boredoms 7)]\n  \
    \    [(string=? (substring S 0 10) \"I\") (+ boredoms 8)]\n      [(string=? (substring\
    \ S 0 11) \"I\") (+ boredoms 9)]\n      [(string=? (substring S 0 12) \"I\") (+\
    \ boredoms 10)]\n      [(string=? (substring S 0 13) \"I\") (+ boredoms 11)]\n\
    \      [(string=? (substring S 0 14) \"I\") (+ boredoms 12)]\n      [(string=?\
    \ (substring S 0 15) \"I\") (+ boredoms 13)]\n      [(string=? (substring S 0\
    \ 16) \"I\") (+ boredoms 14)]\n      [(string=? (substring S 0 17) \"I\") (+ boredoms\
    \ 15)]\n      [(string=? (substring S 0 18) \"I\") (+ boredoms 16)]\n      [(string=?\
    \ (substring S 0 19) \"I\") (+ boredoms 17)]\n      [(string=? (substring S 0\
    \ 20) \"I\") (+ boredoms 18)]\n      [(string=? (substring S 0 21) \"I\") (+ boredoms\
    \ 19)]\n      [(string=? (substring S 0 22) \"I\") (+ boredoms 20)]\n      [(string=?\
    \ (substring S 0 23) \"I\") (+ boredoms 21)]\n      [(string=? (substring S 0\
    \ 24) \"I\") (+ boredoms 22)]\n      [(string=? (substring S 0 25) \"I\") (+ boredom",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored-count 0))\n    (loop for (word . rest)\n \
    \          in (reverse-split S #\\. #\\? #\\!)\n           when (string=? (first\
    \ word) \"I\")\n           do (set! bored-count (+ bored-count 1))\n         \
    \  finally (return bored-count)\n           )\n    )\n  )\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let ((boredom-count 0))\n    (cond\n      [(string-match \"^I\" S) (set! boredom-count\
    \ (+ boredom-count 1))]\n      [(string-match \"^\\.\" S) (set! boredom-count\
    \ (+ boredom-count 1))]\n      [(string-match \"^!\" S) (set! boredom-count (+\
    \ boredom-count 1))]\n      [(string-match \"^?\" S) (set! boredom-count (+ boredom-count\
    \ 1))]\n      [else (set! boredom-count (+ boredom-count 1))]\n      )))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(equal? (first S)\
    \ \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n\
    \    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    ((string-match \"^I\" S) 0)\n    ((string-match \"^\\.\" S) 0)\n \
    \   ((string-match \"^!\" S) 0)\n    ((string-match \"^?\" S) 0)\n    (else 1)))\n",
  "  (let ((bored-count 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"^\\.\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"^!\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"^?\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.$\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"!$\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"?$\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [else (set! bored-count (+ bored-count\
    \ 1))]\n    )\n    bored-count\n  )\n)\n", "  (cond [(empty? S) 0]\n        [(equal?\
    \ (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\
    \ [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let ((bored-count 0))\n    (loop for c across S\n          for char = (char-code\
    \ c)\n          while (char > 64) do\n            (set! bored-count (+ bored-count\
    \ 1))\n            (set! char (char-code (char-code char)))\n            (set!\
    \ char (char-code (char-code (char-code char))))\n            (set! char (char-code\
    \ (char-code (char-code char))))\n            (set! char (char-code (char-code\
    \ (char-code char))))\n            (set! char (char-code (char-code (char-code\
    \ char))))\n            (set! char (char-code (char-code (char-code char))))\n\
    \            (set! char (char-code (char-code (char-code char))))\n          \
    \  (set! char (char-code (char-code (char-code char))))\n            (set! char\
    \ (char-code (char-code (char-code char))))\n            (set! char (char-code\
    \ (char-code (char-code char))))\n            (set! char (char-code (char-code\
    \ (char-code char))))\n            (set! char (char-code (char-code (char-code\
    \ char))))\n            (set! char (char-code (char-code (char-code char))))\n\
    \            (set! char (char-code (char-code (char-code char))))\n          \
    \  (set! char (char-code (char-code (char-code char))))\n            (set! char\
    \ (char-code (char-code (char-code char))))\n            (set! char (char-code\
    \ (char-code (char-code char))))\n            (set! char (char-code (char-code\
    \ (char-code char))))\n            (set! char (char-code (char-code (char-code\
    \ char))))\n            (set! char (char-code (char-code (char-code char))))\n\
    \            (set! char (char-code (char-code (char-code char))))\n          \
    \  (set! char (char-code (char-code (char-code char))))\n            (set! char\
    \ (char-code (char-code (char-code char))))\n            (set! char (char-code\
    \ (char-code (char-code char))))\n            (set! char (char-code (char-code\
    \ (char-code char))))\n            (set! char (char-code (char-code (char-code\
    \ char))))\n            (set! char (char-code (char-code (char-code char))))\n\
    \            (set! char (char-code ", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", " \
    \ (cond\n    ((null? S) 0)\n    ((equal? (first S) \"I\") 1)\n    (else (+ 1 (is_bored\
    \ (rest S))))))\n", "  (let ((boredom 0))\n    (loop for c across S\n        \
    \  for char = (char-code c)\n          while (char > 64 and char < 91) #:when\
    \ (char-code c) do\n          collect (if (char-code c) collect (+ 1 (char-code\
    \ c)))))\n  boredom)\n", "  (cond [(empty? S) #f]\n        [(equal? (first S)\
    \ \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored-count 0))\n    (loop for (i 0) in S\n    \
    \      for char across i\n          when (char=? char #\\I)\n          do (incf\
    \ bored-count)\n          else (return bored-count)\n          )\n    ))\n", " \
    \ (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [(equal? (first S) \"!\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S)\
    \ \"?\") 0]\n    [else 1]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((boredom 0))\n    (loop for i from 0 to (length S)\
    \ do\n          (if (char=? (substring S i i) 'I)\n              (set! boredom\
    \ (add1 boredom))\n              (set! boredom 0)))))\n", "  (cond\n    ((string-match\
    \ \"^I\" S) 0)\n    ((string-match \"^I\\.\" S) 0)\n    ((string-match \"^I\\\
    ?\" S) 0)\n    ((string-match \"^I\\!\" S) 0)\n    ((string-match \"^I\\.\\?\"\
    \ S) 0)\n    ((string-match \"^I\\.\\!\" S) 0)\n    ((string-match \"^I\\?\\!\"\
    \ S) 0)\n    ((string-match \"^I\\.\\!\\?\" S) 0)\n    ((string-match \"^I\\.\\\
    !\\!\" S) 0)\n    ((string-match \"^I\\!\\?\" S) 0)\n    ((string-match \"^I\\\
    !\\!\" S) 0)\n    ((string-match \"^I\\?\\.\" S) 0)\n    ((string-match \"^I\\\
    ?\\?\" S) 0)\n    ((string-match \"^I\\?\\!\" S) 0)\n    ((string-match \"^I\\\
    !\\.\" S) 0)\n    ((string-match \"^I\\!\\?\" S) 0)\n    ((string-match \"^I\\\
    !\\!\" S) 0)\n    ((string-match \"^I\\.\\?\" S) 0)\n    ((string-match \"^I\\\
    .\\!\" S) 0)\n    ((string-match \"^I\\?\\?\" S) 0)\n    ((string-match \"^I\\\
    ?\\!\" S) 0)\n    ((string-match \"^I\\!\\.\" S) 0)\n    ((string-match \"^I\\\
    !\\?\" S) 0)\n    ((string-match \"^I\\!\\!\" S) 0)\n    ((string-match \"^I\\\
    ?\\.\\?\" S) 0)\n    ((string-match \"^I\\?\\.\\!\" S) 0)\n    ((string-match\
    \ \"^I\\?\\?\\.\" S) 0)\n    ((string-match \"^I\\?\\?\\.\" S) 0)\n    ((string-match\
    \ \"^I\\?\\!\\.\" S) 0)\n    ((string-match \"^I\\!\\.\\?\" S) 0)\n    ((string-match\
    \ \"^I\\!\\.\\!\" S) 0)\n    ((string-match \"^I\\!\\?\\.\" S) 0)\n    ((string-match\
    \ \"^I\\!\\?\\.\" S) 0)\n    ((string-match \"^I\\!\\!\\.\" S) 0)\n    ((string-match\
    \ \"^I\\!\\!\\.\" S", "  (cond [(empty? S) #f]\n        [(equal? (first S) \"\
    I\") 1]\n        [(equal? (first S) \".\") 0]\n        [(equal? (first S) \"?\"\
    ) 0]\n        [(equal? (first S) \"!\") 0]\n        [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    ((string=?\
    \ (first S) \"I\") 1)\n    ((string=? (first S) \"!\") 1)\n    ((string=? (first\
    \ S) \".\") 1)\n    ((string=? (first S) \"?\") 1)\n    (else 0)))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (let ((bored-count 0))\n    (loop for char = (char-code (first\
    \ S))\n          while char\n          collect (if (char-equal? char 'I)\n   \
    \                   (add1 bored-count)\n                      (add1 bored-count)))))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match\
    \ \"^I\" S) (set! bored 1)]\n      [(string-match \"^.\" S) (set! bored 2)]\n\
    \      [(string-match \"^!\" S) (set! bored 3)]\n      [(string-match \"^?\" S)\
    \ (set! bored 4)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n\
    \      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\"\
    \ S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n\
    \      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\"\
    \ S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n\
    \      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\"\
    \ S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n\
    \      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\"\
    \ S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n\
    \      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match \"\\.\"\
    \ S) (set! bored 5)]\n      [(string-match \"\\.\" S) (set! bored 5)]\n      [(string-match\
    \ \"\\.\" S) (set! bored 5)]\n      [(string-match \"", "  (let ((bored 0))\n\
    \    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match\
    \ \"^\\.\" S) (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n\
    \      [(string-match \"^?\" S) (set! bored 1)]\n      [(string-match \"\\.\"\
    \ S) (set! bored 1)]\n      [(string-match \"!\" S) (set! bored 1)]\n      [(string-match\
    \ \"?\" S) (set! bored 1)]\n      [else (set! bored 0)]\n      )))\n", "  (let\
    \ ((boredoms (count-boredoms S)))\n    (if (= boredoms 0)\n        #f\n      \
    \  #t)))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n\
    \    [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest S)))]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S)\
    \ 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \".\") 0]\n \
    \   [(equal? (first S) \"?\") 0]\n    [(equal? (first S) \"!\") 0]\n    [else\
    \ 1]))\n", "  (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else 0]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S)\
    \ \"?\") 0]\n    [else 1]))\n", "  (let ((bored-count 0))\n    (cond\n      [(string-match\
    \ \"^I\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"!\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"?\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [else (set! bored-count (+ bored-count 1))]\n   \
    \ )\n    bored-count))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S)\
    \ \"I\") 1]\n        [else 0]))\n", "  (let ((bored-count 0))\n    (loop for (i\
    \ 0) in S\n          for c in\n          (cond ((char=? (char-code c) ?I) (incf\
    \ bored-count))\n                ((char=? (char-code c) ?.) (incf bored-count))\n\
    \                ((char=? (char-code c) ?!) (incf bored-count))\n            \
    \    (else (error \"Unknown character in input: ~a\" c)))))\n  bored-count)\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored 0))\n\
    \    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.?!]\" S) (set! bored 2)]\n      [else (set! bored 0)]\n      )))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (let ((bored-count 0))\n    (cond\n      [(equal?\
    \ (first S) \"I\") (set! bored-count (+ bored-count 1))]\n      [(equal? (rest\
    \ S) \".\") (set! bored-count (+ bored-count 1))]\n      [(equal? (rest S) \"\
    ?\") (set! bored-count (+ bored-count 1))]\n      [(equal? (rest S) \"!\") (set!\
    \ bored-count (+ bored-count 1))]\n      [else (set! bored-count (+ bored-count\
    \ 1))]\n      )))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"\
    ^I\" S) (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 2)]\n  \
    \    [(string-match \"^!\" S) (set! bored 3)]\n      [(string-match \"^?\" S)\
    \ (set! bored 4)]\n      [else (set! bored 0)]\n      )))\n", "  (let ((boredoms\
    \ (count-boredoms S)))\n    (if (= boredoms 0)\n        0\n        1)))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S)\
    \ 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (let ((boredom 0))\n    (loop for c across S\n          for i\
    \ from 0\n          for j from 0\n          while (char=? c #\\. #\\? #\\!)\n\
    \          for k from 0\n          while (char=? c #\\. #\\? #\\! #\\. #\\? #\\\
    ! #\\? #\\!)\n          for l from 0\n          while (char=? c #\\. #\\? #\\\
    ! #\\. #\\? #\\! #\\? #\\! #\\. #\\? #\\!)\n          for m from 0\n         \
    \ while (char=? c #\\. #\\? #\\! #\\. #\\? #\\! #\\? #\\! #\\. #\\? #\\! #\\.\
    \ #\\? #\\!)\n          for n from 0\n          while (char=? c #\\. #\\? #\\\
    ! #\\. #\\? #\\! #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\!)\n   \
    \       for o from 0\n          while (char=? c #\\. #\\? #\\! #\\. #\\? #\\!\
    \ #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\!)\n   \
    \       for p from 0\n          while (char=? c #\\. #\\? #\\! #\\. #\\? #\\!\
    \ #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\\
    ? #\\!)\n          for q from 0\n          while (char=? c #\\. #\\? #\\! #\\\
    . #\\? #\\! #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\! #\\. #\\? #\\\
    ! #\\. #\\? #\\! #\\. #\\? #\\!)\n          for r from 0\n          while (char=?\
    \ c #", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"\
    !\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n\
    \    [else 1]))\n", "  (let loop ((S S) (count 0))\n    (cond\n      [(empty?\
    \ S) count]\n      [(equal? (first S) \"I\") (loop (rest S) (add1 count))]\n \
    \     [else (loop (rest S) count)])))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored-count 0))\n \
    \   (loop for (i 0) in S\n          for c in\n            (cond\n            \
    \  [(char=? (car S) 'I) (set! bored-count (+ bored-count 1))]\n              [(char=?\
    \ (car S) '?') (set! bored-count (+ bored-count 1))]\n              [(char=? (car\
    \ S) '!') (set! bored-count (+ bored-count 1))]\n              [else (set! bored-count\
    \ (+ bored-count 1))])\n          until (char=? (car S) '.')\n          until\
    \ (char=? (car S) '?') \n          until (char=? (car S) '!'))\n    bored-count))\n",
  "  (let ((bored-count 0))\n    (cond\n      [(string=? (first S) \"I\") (set! bored-count\
    \ (+ bored-count 1))]\n      [else (set! bored-count (+ bored-count 0))]\n   \
    \   )))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n  \
    \      [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored-count 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"^.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"^!\"\
    \ S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"^?\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\" S) (set! bored-count (+\
    \ bored-count 1))]\n      [(string-match \"\\.\\.\\.\" S) (set! bored-count (+\
    \ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\" S) (set!\
    \ bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\\
    .\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"\\.\\.\\.\\.\\.\\.\\.\\.", "  (cond\n    [(equal? (first S) \"I\") 0]\n  \
    \  [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 1]))\n", "  (cond [(string=? (substring S 0 1)\
    \ \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(string=?\
    \ (substring S 0 1) \"I\") 1]\n        [else 0]))\n", "  (let ((boredom 0))\n\
    \    (cond\n      [(string-match \"^I\" S) (set! boredom 1)]\n      [(string-match\
    \ \"\\.\" S) (set! boredom 1)]\n      [(string-match \"!\" S) (set! boredom 1)]\n\
    \      [(string-match \"?\" S) (set! boredom 1)]\n      [else (set! boredom 0)]\n\
    \      )))\n", "  (cond\n    ((empty? S) 0)\n    ((equal? (first S) \"I\") 1)\n\
    \    (else (+ 1 (is_bored (rest S)))))\n  )\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (let loop ((S S) (count 0))\n    (cond\n      [(empty? S) count]\n      [(equal?\
    \ (first S) \"I\") (loop (rest S) (+ count 1))]\n      [else (loop (rest S) count)])))\n",
  "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 1]))\n", "  (cond\n    ((null? S) 0)\n    ((equal? (car S) \"I\") 1)\n    ((equal?\
    \ (car S) \".\") (is_bored (cdr S)))\n    ((equal? (car S) \"?\") (is_bored (cdr\
    \ S)))\n    ((equal? (car S) \"!\") (is_bored (cdr S)))\n    (else (is_bored (cdr\
    \ S)))))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else 1]))\n", "  (let ((boredom\
    \ 0))\n    (loop for (i 0) in S\n         for c in\n           (cond [(char=?\
    \ (char-code i) 'I) (incf boredom)]\n                 [else (incf boredom)]))\n\
    \    boredom))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\"\
    \ S) (set! bored 1)]\n      [(string-match \"\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"!\" S) (set! bored 1)]\n      [(string-match \"?\" S) (set! bored 1)]\n  \
    \    [(string-match \".?\" S) (set! bored 1)]\n      [(string-match \"!?\" S)\
    \ (set! bored 1)]\n      [(string-match \".!\" S) (set! bored 1)]\n      [(string-match\
    \ \"!.\" S) (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n\
    \      [(string-match \"!?\" S) (set! bored 1)]\n      [(string-match \"!.\" S)\
    \ (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n      [(string-match\
    \ \"!.\" S) (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n\
    \      [(string-match \"!?\" S) (set! bored 1)]\n      [(string-match \"!.\" S)\
    \ (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n      [(string-match\
    \ \"!.\" S) (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n\
    \      [(string-match \"!?\" S) (set! bored 1)]\n      [(string-match \"!.\" S)\
    \ (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n      [(string-match\
    \ \"!.\" S) (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n\
    \      [(string-match \"!?\" S) (set! bored 1)]\n      [(string-match \"!.\" S)\
    \ (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n      [(string-match\
    \ \"!.\" S) (set! bored 1)]\n      [(string-match \"?!\" S) (set! bored 1)]\n\
    \      [(string-match \"!?\" S) (set! bored 1)]\n      [(string-match \"!.\" S)\
    \ (set! bored 1)]\n      [(string-match \"?!\" S) (set", "  (cond\n    [(equal?\
    \ (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
