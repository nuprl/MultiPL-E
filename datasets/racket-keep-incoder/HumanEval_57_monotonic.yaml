name: HumanEval_57_monotonic
language: racket
prompt: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
  \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
  \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n       \
    \ [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (car l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n\
    \                  (or (< car l (car l))\n                      (< car l (cadr\
    \ l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n  \
    \      [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                      (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic\
    \ (car l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (let loop ((l l)\
    \ (i 0))\n    (cond\n      [(null? l) true]\n      [(< l (car l)) (loop (cdr l)\
    \ (+ i 1))]\n      [else (loop (cdr l) (+ i 1))]\n      )))\n", "  (cond [(null?\
    \ l) true]\n        [(null? (cdr l)) true]\n        [(< (car l) (car (cdr l)))\
    \ (monotonic (cdr l))]\n        [else (monotonic (cdr l))]\n        ))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and\
    \ (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n", " \
    \ (< (car l) (cadr l)))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n\
    \                   (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) true]\n\
    \        [(< (car l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (or (< car l (car l))\n                       (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car\
    \ l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr\
    \ l))))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) true]\n    [(< (first l) (first l)) false]\n    [else (monotonic\
    \ (rest l))]))\n", "  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                  (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n      \
    \  [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                 \
    \  (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< (car l) (cadr l))\n                     \
    \ (< (cadr l) (car l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                   (or (< (car\
    \ l) (cadr l))\n                       (> (car l) (cadr l))))]))\n", "  (cond\
    \ ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n",
  "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l) (car\
    \ (cdr l)))\n         (and (monotonic (cdr l))\n               (not (monotonic\
    \ (cdr l))))]\n        [else #f]))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (not (< (car l) (cadr l)))\n               \
    \       (and (monotonic (cdr l))\n                          (or (not (< (car l)\
    \ (cadr l))))))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l))\n                  (or (< car l\
    \ (car l))\n                      (< car l (cadr l))))]))\n", "  (cond\n    ((null?\
    \ l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car (cdr l)))\n     (and\
    \ (monotonic (cdr l))\n          (or (null? (cdr l))\n              (and (< (car\
    \ l) (car (cdr l)))\n                  (monotonic (cdr l))))))\n    (else (and\
    \ (monotonic (cdr l))\n              (or (null? (cdr l))\n                  (and\
    \ (< (car l) (car (cdr l)))\n                      (monotonic (cdr l))))))))\n",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (let loop ((l l) (i 0))\n    (if (null? l)\n        #t\n\
    \        (let ((x (car l)))\n          (if (< x i)\n              #f\n       \
    \       (if (> x i)\n                  (loop (cdr l) (+ i 1))\n              \
    \    (loop (cdr l) (+ i 1))))))))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                 \
    \  (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) true]\n        [(< (car\
    \ l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                   (not\
    \ (< (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                  (or (< car\
    \ l (car l))\n                      (< car l (cadr l))))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l)) (monotonic (cdr l)))]))\n", "  (cond ((null? l) #f)\n        ((null? (cdr\
    \ l)) #t)\n        (else (and (< (car l) (car (cdr l)))\n                   (monotonic\
    \ (cdr l))))))\n", "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n   \
    \     [(< (car l) (car (cdr l)))\n         (and (monotonic (cdr l))\n        \
    \       (not (< (car l) (car (cdr l))))))]\n        [else #f]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr\
    \ l))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n    \
    \    [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                  (or (< car l (car l))\n                       (< car\
    \ l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l))\n                  (or (< car l\
    \ (car l))\n                      (< car l (cadr l))))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond ((null? l) #f)\n        ((<\
    \ (car l) (cadr l)) #t)\n        (else (monotonic (cdr l)))))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond\n    [(empty? l) true]\n  \
    \  [(null? (rest l)) false]\n    [(< (car l) (cadr l)) (monotonic (rest l))]\n\
    \    [else (monotonic (rest l))]\n  ))\n", "  (cond [(null? l) #t]\n        [(<\
    \ (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car\
    \ l)))]))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond ((null? l) #f)\n        ((null?\
    \ (cdr l)) #t)\n        (else (and (< (car l) (car (cdr l)))\n               \
    \    (monotonic (cdr l))))))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (car l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (< (car l) (cadr\
    \ l)))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n      \
    \  [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (car l)))]))\n", "  (cond\n    ((null? l) #f)\n    ((null?\
    \ (cdr l)) #t)\n    ((< (car l) (cadr l)) #t)\n    ((> (car l) (cadr l)) #f)\n\
    \    (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                   (< (car l) (cadr l)))]))\n",
  "  (let loop ((l l) (i 0) (j 0))\n    (if (null? l)\n        #t\n        (let ((x\
    \ (car l)))\n          (if (< x j)\n              (loop (cdr l) (+ i 1) j)\n \
    \             (loop (cdr l) i x)))))) ; #lang racket\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic\
    \ (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n", "  (cond ((null?\
    \ l) true)\n        ((< (car l) (cadr l)) (monotonic (cdr l)))\n        (else\
    \ (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                   (not (<\
    \ (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n        [(<\
    \ (car l) (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n\
    \          ((< i (length l)) (not acc))\n          (else (loop (cdr l) (not (<\
    \ i (length l))) (add1 i))))))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond\n    ((null?\
    \ l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car (cdr l)))\n     (and\
    \ (monotonic (cdr l)) (or (not (< (car l) (car (cdr l))))\n                  \
    \            (monotonic (cdr (cdr l))))))\n    (else (and (monotonic (cdr l))\
    \ (or (not (> (car l) (car (cdr l))))\n                                   (monotonic\
    \ (cdr (cdr l))))))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (not (< (car l) (cadr l))))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l) (car (cdr l)))\n \
    \        (and (monotonic (cdr l))\n               (not (monotonic (cdr l))))]\n\
    \        [else #f]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr\
    \ l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n  \
    \      [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null?\
    \ l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic (cdr\
    \ l))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n\
    \        [else (monotonic (cdr l))]))\n", "  (let loop ((l l) (i 0) (j 0))\n \
    \   (if (null? l)\n        #t\n        (let ((x (car l))\n              (y (cadr\
    \ l)))\n          (if (< x y)\n              (loop (cdr l) (+ i 1) j)\n      \
    \        (loop (cdr l) i j)))))\n", "  (cond [(null? l) true]\n        [(< (car\
    \ l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                   (not (< (car l) (cadr l))))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(null? (rest l)) #t]\n    [(< (car l) (cadr l)) #t]\n    [(> (car\
    \ l) (cadr l)) #f]\n    [else (and (monotonic (cdr l)) (monotonic (rest l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (or (< car l (car l))\
    \ (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                  (or (< car\
    \ l (car l))\n                       (< car l (cadr l))))]))\n", "  (cond [(null?\
    \ l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic (cdr\
    \ l))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n    \
    \    [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr (cdr l))))]))\n", "  (let loop ((l l) (i 0) (acc #t)\
    \ (next #t))\n    (if (null? l)\n        acc\n        (loop (cdr l) (+ i 1) (or\
    \ (< i 0) (< i (car l))) (or (> i 0) (> i (car l)))))))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n\
    \                   (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                 (or (< car l (car l))\n                       (< car l (cadr\
    \ l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n  \
    \      [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                      (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n  \
    \                 (not (< (car l) (cadr l))))]))\n", "  (cond ((null? l) #f)\n\
    \        ((null? (cdr l)) #t)\n        ((< (car l) (car (cdr l)))\n         (and\
    \ (monotonic (cdr l))\n               (not (monotonic (cdr (cdr l)))))\n     \
    \   (else (and (monotonic (cdr l))\n                  (monotonic (cdr (cdr l)))))))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (> (car l) (cadr l))\n                     \
    \ (< (car l) (cadr l))))]))\n", "  (cond [(null? l) true]\n        [(< (car l)\
    \ (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                  (or (< car l (car l))\n                      (< car l\
    \ (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                       (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                 (or (< car l (car l))\n                      (< car l (cadr\
    \ l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n  \
    \      [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and\
    \ (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< (car l) (cadr l))\n                     \
    \ (< (cadr l) (car l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car\
    \ l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                       (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond\n    ((null? l) #t)\n    ((< (car l) (cadr l)) #t)\n    ((> (car l) (cadr\
    \ l)) #f)\n    (else (monotonic (cdr l)))))\n", "  (cond [(null? l) true]\n  \
    \      [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (< (car l) (cadr l)))]))\n", "  (< (car l) (cadr\
    \ l)))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n      \
    \  [else (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (or (not (< (car l) (cadr l)))\n                                  \
    \     (not (> (car l) (cadr l)))))))\n", "  (cond [(null? l) #t]\n        [(<\
    \ (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n            \
    \       (not (< (car l) (cadr l))))]))\n", "  (< (car l) (cadr l)))\n", "  (cond\
    \ [(null? l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ [(null? l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first l) (first l))\
    \ #t]\n    [else (and (monotonic (rest l))\n               (not (< (first l) (first\
    \ l))))]))\n", "  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (or\
    \ (not (< (car l) (cadr l)))\n                                       (monotonic\
    \ (cdr l))))]))\n", "  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n  \
    \      (else (and (< (car l) (car (cdr l)))\n                   (monotonic (cdr\
    \ l))))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n   \
    \     [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n", "  (cond ((null?\
    \ l) #f)\n        ((null? (cdr l)) #t)\n        (else (and (< (car l) (car (cdr\
    \ l)))\n                   (monotonic (cdr l))))))\n", "  (< (car l) (cadr l)))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (car l)))]))\n", "  (cond\n    ((null? l) #t)\n    ((null?\
    \ (cdr l)) #f)\n    ((< (car l) (car (cdr l)))\n     (and (monotonic (cdr l))\n\
    \          (or (null? (cdr l)) (< (car l) (car (cdr l))))))\n    (else (and (monotonic\
    \ (cdr l))\n               (or (null? (cdr l)) (> (car l) (car (cdr l))))))))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr (cdr l))))]))\n", "  (cond [(null? l) #t]\n       \
    \ [(< (car l) (cadr l)) #t]\n        [(> (car l) (cadr l)) #f]\n        [else\
    \ (monotonic (cdr l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(null? (rest\
    \ l)) #t]\n    [(< (car l) (cadr l)) #t]\n    [(> (car l) (cadr l)) #f]\n    [else\
    \ (monotonic (rest l))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                   (not (<\
    \ (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                   (or (< car\
    \ l (car l))\n                       (< car l (cadr l))))]))\n", "  (cond ((null?\
    \ l) true)\n        ((< (car l) (cadr l)) (monotonic (cdr l)))\n        (else\
    \ (monotonic (cdr l)))))\n", "  (cond\n    ((null? l) #f)\n    ((null? (cdr l))\
    \ #t)\n    ((< (car l) (cadr l)) #t)\n    (else (monotonic (cdr l)))))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and\
    \ (monotonic (cdr l)) (monotonic (car l)))]))\n", "  (cond [(null? l) #t]\n  \
    \      [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n   \
    \                (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                 (or (< car l (car l))\n                       (< car l (cadr\
    \ l))))]))\n", "  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n  \
    \      (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< (car l) (cadr l))\n                     \
    \  (> (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n",
  "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (car l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\
    \ (monotonic (car l)))]))\n", "  (cond\n    ((null? l) #t)\n    ((null? (cdr l))\
    \ #f)\n    ((< (car l) (car (cdr l)))\n     (and (monotonic (cdr l))\n       \
    \   (or (null? (cdr l))\n              (< (car l) (car (cdr l))))))\n    (else\
    \ (and (monotonic (cdr l))\n              (or (null? (cdr l))\n              \
    \    (< (car l) (car (cdr l))))))))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                 \
    \  (not (< (car l) (cadr l))))]))\n", "  (cond ((null? l) #f)\n        ((null?\
    \ (cdr l)) #t)\n        (else (and (< (car l) (car (cdr l)))\n               \
    \     (monotonic (cdr l))))))\n", "  (cond\n    ((null? l) #t)\n    ((null? (cdr\
    \ l)) #f)\n    ((< (car l) (car (cdr l)))\n     (and (monotonic (cdr l))\n   \
    \       (or (null? (cdr l))\n              (< (car l) (car (cdr l))))))\n    (else\
    \ (and (monotonic (cdr l))\n              (or (null? (cdr l))\n              \
    \    (< (car l) (car (cdr l))))))))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ [(null? l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n    \
    \    [(< (car l) (car (cdr l)))\n         (and (monotonic (cdr l))\n         \
    \      (not (monotonic (cdr l))))]\n        [else #f]))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\
    \ (or (not (< (car l) (cadr l)))\n                                        (monotonic\
    \ (cdr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                  (or (< (car l) (cadr l))\n                      (< (cadr\
    \ l) (car l))))]))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l))\
    \ true)\n        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) true]\n\
    \        [(< (car l) (cadr l)) false]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                   (not (< (car l) (cadr l))))]))\n", "  (cond\n    ((null?\
    \ l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car (cdr l)))\n     (and\
    \ (monotonic (cdr l))\n          (or (null? (cdr l))\n              (and (monotonic\
    \ (cdr l))\n                  (or (null? (cdr l))\n                      (and\
    \ (monotonic (cdr l))\n                          (or (null? (cdr l))\n       \
    \                       (and (monotonic (cdr l))\n                           \
    \       (or (null? (cdr l))\n                                      (and (monotonic\
    \ (cdr l))\n                                          (or (null? (cdr l))\n  \
    \                                            (and (monotonic (cdr l))\n      \
    \                                            (or (null? (cdr l))\n           \
    \                                           (and (monotonic (cdr l))\n       \
    \                                                   (or (null? (cdr l))\n    \
    \                                                          (and (monotonic (cdr\
    \ l))\n                                                                  (or (null?\
    \ (cdr l))\n                                                                 \
    \     (and (monotonic (cdr l))\n                                             \
    \                             (or (null? (cdr l))\n                          \
    \                                                    (and (monotonic (cdr l))\n\
    \                                                                            \
    \      (or (null? (cdr l))\n                                                 \
    \                                     (and (monotonic (cdr l))\n             \
    \                                                                            \
    \ (or (null? (cdr l))\n                                                      \
    \                                        (and (monotonic (cdr l))\n          \
    \                                                                            \
    \            (or (null? (cdr l))\n                                           \
    \                                                           (and (monotonic (cdr\
    \ l))\n                                                                      \
    \                                    (or (null? (cdr l))\n                   \
    \                                                                            \
    \               (and (monotonic (cdr l))\n                                   \
    \                                                                            \
    \   (or (null? (cdr l))\n                                                    \
    \                                                                  (and (monotonic\
    \ (cdr l))\n                                                                 \
    \                                                         (or (null? (cdr l))\n\
    \                                                                            \
    \                                                  (and (monotonic (cdr l))\n\
    \                                                                            \
    \                                                      (or (null? (cdr l))\n \
    \                                                                            \
    \                                                         (and (monotonic (cdr\
    \ l))\n                                                                      \
    \                                                                    (or (null?\
    \ (cdr l))\n                                                                 \
    \                                                                            \
    \                                 (and (monotonic (cdr l))\n                 \
    \                                                                            \
    \                                                                            \
    \         (or (null? (cdr l))\n                                              \
    \                                                                            \
    \                                                            (and (monotonic (cdr\
    \ l))\n                                                                      \
    \                                                                            \
    \                                        (or (null? (cdr l))\n               \
    \                                                                            \
    \                                                                            \
    \                       (and (monotonic (cdr l))\n                           \
    \                                                                            \
    \                                                                            \
    \               (or (null? (cdr l))\n                                        \
    \                                                                            \
    \                                                                            \
    \      (and (monotonic (cdr l))\n                                            \
    \                                                                            \
    \                                                                            \
    \                                      (or (null? (cdr l))\n                 \
    \                                                                            \
    \                                                                            \
    \                       ", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [(> (car l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car l)\
    \ (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l)\
    \ #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\
    \ (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (car l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l)) (or (< car l (car l)) (< car\
    \ l (cadr l))))]))\n", "  (cond\n    ((null? l) #f)\n    ((< (car l) (cadr l))\
    \ #t)\n    ((> (car l) (cadr l)) #f)\n    (else (monotonic (cdr l)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
