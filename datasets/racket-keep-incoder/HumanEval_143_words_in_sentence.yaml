name: HumanEval_143_words_in_sentence
language: racket
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; Input: sentence = \"This is a test\"\
  \n;; Output: \"is\"\n;; Example 2:\n;; Input: sentence = \"lets go for swimming\"\
  \n;; Output: \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper sentence prime-numbers)\n    (cond\n      [(empty?\
    \ sentence) prime-numbers]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) prime-numbers))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) ?i) (helper (rest sentence)\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) ?e)\
    \ (helper (rest sentence) (cons (first sentence) prime-numbers))]\n      [(char=?\
    \ (first sentence) ?s) (helper (rest sentence) (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) ?n) (helper (rest sentence)\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) ?g)\
    \ (helper (rest sentence) (cons (first sentence) prime-numbers))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) ?r) (helper (rest sentence)\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) ?m)\
    \ (helper (rest sentence) (cons (first sentence) prime-numbers))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) ?o) (helper (rest sentence)\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) ?n)\
    \ (helper (rest sentence) (cons (first sentence) prime-numbers))]\n      [(",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?b) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r", "  (let loop ((sentence sentence)\n    \
    \         (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char?\
    \ (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n      [else\
    \ (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence)\n           (reverse result))\n          ((char=? (first sentence)\
    \ \" \")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"\\n\")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"\\r\")\n           (loop (rest sentence)\n              \
    \   (cons (first sentence) result)))\n          ((char=? (first sentence) \"\\\
    t\")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"\\r\")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"\\n\")\n           (loop (rest sentence)\n              \
    \   (cons (first sentence) result)))\n          ((char=? (first sentence) \"\\\
    t\")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \" \")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"\\n\")\n           (loop (rest sentence)\n              \
    \   (cons (first sentence) result)))\n          ((char=? (first sentence) \"\\\
    r\")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"\\t\")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \" \")\n           (loop (rest sentence)\n                \
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"\\n\"\
    )\n           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"\\r\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"\\t\")\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) \" \")\n   \
    \        (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"\\n\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"\\r\")\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence", "  (define\
    \ (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p", "  (define (helper sentence result)\n  \
    \  (if (empty? sentence)\n        result\n        (helper (rest sentence)\n  \
    \              (cons (first sentence)\n                      (helper (rest sentence)\n\
    \                              result))))))\n  (helper sentence '()))\n", "  (define\
    \ (helper sentence result)\n    (cond [(empty? sentence) result]\n          [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \          [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n          [(char=? (first sentence) ?s) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?n) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?m) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?p) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?f) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?w) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?h) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?g) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?r) (helper (rest ", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (re",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) \" \")\n           (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \",\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \",\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \",\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \",\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \",\")\n           (loop (cdr ", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond ((null? sentence)\
    \ result)\n          ((char=? (first sentence) \" \") (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) \".\") (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \"!\") (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"(\") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \")\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \",\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \".\") (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \";\") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \":\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"-\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \"_\") (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"*\") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"/\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"+\") (loop (rest sentence) (cons (first sentence) result)))\n  \
    \        ((char=? (first sentence) \"=\") (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"#lang\") (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"#lang\"\
    ) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"#lang\") (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"#lang\") (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence) result)\n\
    \          ((char=? (car sentence) \" \")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\")\n           (loop (cdr ", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?f) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?m) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?p) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?r) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?h) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper rest (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?", "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\
    \ (loop (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest\
    \ sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n", " \
    \ (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?h) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?w) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?v) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?b) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?", "  (cond\n    [(empty? sentence) \"\"]\n\
    \    [(number? (length sentence)) sentence]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper sentence (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?l) (helper sentence (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper sentence (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?s) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?w) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?b) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper sentence (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?", "  (define (helper sentence result)\n   \
    \ (if (empty? sentence)\n        result\n        (helper (rest sentence) (cons\
    \ (first sentence) result))))\n  (helper sentence '()))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n  \
    \           (cons (first sentence) result))]\n      [else\n       (loop (rest\
    \ sentence)\n             (cons (first sentence)\n                  (loop (rest\
    \ sentence)\n                        result)))]\n      )))\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper rest (cons (first sentence) result))]\n      [else\
    \ (helper (rest sentence) (cons (first sentence) result))]))\n  (helper sentence\
    \ '()))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence))\
    \ sentence]\n    [else (append (words_in_sentence (substring sentence 0 (floor\
    \ (/ 1 (length sentence))))) (words_in_sentence (substring sentence (floor (/\
    \ 1 (length sentence))) (length sentence)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?l) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?n) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?h) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?n) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?h) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?n) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first ", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append\
    \ (words_in_sentence (rest sentence))\n                  (list (first sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (append (words_in_sentence (rest sentence))\n                  (list\
    \ (first sentence)))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty?\
    \ (rest sentence)) sentence]\n    [else (cons (first sentence)\n             \
    \   (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char? (car sentence)) (loop (cdr sentence) (cons (car sentence) result))]\n\
    \      [else (loop (cdr sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence)\n           result)\n          ((char=? (car sentence) \" \")\n  \
    \         (loop (cdr sentence)\n                 (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n \
    \                (cons (car sentence) result)))\n          (else\n           (loop\
    \ (cdr sentence)\n                 (cons (car sentence) result))))))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond ((empty? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?tab)\
    \ result)\n          ((char=? (first sentence) ?return) result)\n          ((char=?\
    \ (first sentence) ?(#\\space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\newline)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\tab)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\return)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\space)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\newline))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\tab)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\return)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\space))\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\newline)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\tab)) (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) ?(#\\return)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\space)) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?(#\\newline)) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?(#\\tab)) (loop\
    \ (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?(#\\return)) (loop", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [else (helper\
    \ (rest sentence) (cons (first sentence) (helper (rest sentence) (cons (first\
    \ sentence) result))))]))\n  (helper sentence '()))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n  \
    \           (cons (first sentence) result))]\n      [else\n       (loop (rest\
    \ sentence)\n             (cons (first sentence) (append result (loop (rest sentence)\
    \ '()))))])))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence)\n           (reverse result))\n          ((char=?\
    \ (car sentence) \" \")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\")\n \
    \          (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) \".\")\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence)\n           (reverse result))\n          ((char=? (car sentence) \"\
    \ \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n      \
    \    ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons (car\
    \ sentence) result)))\n          ((char=? (car sentence) \" \")\n           (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       (else\n           (loop (cdr sentence) (cons (car sentence) result)))))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I understand it better\
    \ now. My only question is, how would I go about doing this without using recursion?\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| c |>\n\
    Thank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nI added a solution\
    \ without recursion.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?m) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?p) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (re", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((empty? sentence) result)\n          ((char-alphabetic?\
    \ (first sentence))\n           (loop (rest sentence)\n                 (cons\
    \ (first sentence) result)))\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          (else\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result))))))\n", "  (define (helper sentence primes)\n    (cond\n\
    \      [(empty? sentence) primes]\n      [(equal? (first sentence) '#\\Space)\
    \ (helper (rest sentence) (cons (first sentence) primes))]\n      [(equal? (first\
    \ sentence) '#\\Newline) (helper (rest sentence) (cons (first sentence) primes))]\n\
    \      [(equal? (first sentence) '#\\Tab) (helper (rest sentence) (cons (first\
    \ sentence) primes))]\n      [(equal? (first sentence) '#\\Newline) (helper (rest\
    \ sentence) (cons (first sentence) primes))]\n      [(equal? (first sentence)\
    \ '#\\Space) (helper (rest sentence) (cons (first sentence) primes))]\n      [(equal?\
    \ (first sentence) '#\\Tab) (helper (rest sentence) (cons (first sentence) primes))]\n\
    \      [(equal? (first sentence) '#\\Newline) (helper (rest sentence) (cons (first\
    \ sentence) primes))]\n      [(equal? (first sentence) '#\\Space) (helper (rest\
    \ sentence) (cons (first sentence) primes))]\n      [(equal? (first sentence)\
    \ '#\\Tab) (helper (rest sentence) (cons (first sentence) primes))]\n      [(equal?\
    \ (first sentence) '#\\Newline) (helper (rest sentence) (cons (first sentence)\
    \ primes))]\n      [(equal? (first sentence) '#\\Space) (helper (rest sentence)\
    \ (cons (first sentence) primes))]\n      [(equal? (first sentence) '#\\Tab) (helper\
    \ (rest sentence) (cons (first sentence) primes))]\n      [(equal? (first sentence)\
    \ '#\\Newline) (helper (rest sentence) (cons (first sentence) primes))]\n    \
    \  [(equal? (first sentence) '#\\Space) (helper (rest sentence) (cons (first sentence)\
    \ primes))]\n      [(equal? (first sentence) '#\\Tab) (helper (rest sentence)\
    \ (cons (first sentence) primes))]\n      [(equal? (first sentence) '#\\Newline)\
    \ (helper (rest sentence) (cons (first sentence) primes))]\n      [(equal? (first\
    \ sentence) '#\\Space) (helper (rest sentence) (cons (first sentence) primes))]\n\
    \      [(equal? (first sentence) '#\\Tab) (helper (rest sentence) (cons (first\
    \ sentence) primes))]\n      [(equal? (first sentence) '#\\Newline) (helper (rest\
    \ sentence) (", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length\
    \ sentence)) sentence]\n    [else (append (words_in_sentence (substring sentence\
    \ 0 (floor (length sentence))))\n                  (words_in_sentence (substring\
    \ sentence (floor (length sentence)) (length sentence))))]))\n", "  (define (helper\
    \ sentence result)\n    (cond [(empty? sentence) result]\n          [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?t) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?m) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?p) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?f) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?n) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?e) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?n) (helper (rest ", "  (let loop ((sentence sentence)\n         \
    \    (result '()))\n    (cond ((empty? sentence) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) space) result)\n          ((char=? (first\
    \ sentence) newline) result)\n          ((char=? (first sentence) space) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) space) result)\n          ((char=? (first\
    \ sentence) newline) result)\n          ((char=? (first sentence) space) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) space) result)\n          ((char=? (first\
    \ sentence) newline) result)\n          ((char=? (first sentence) space) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) space) result)\n          ((char=? (first\
    \ sentence) newline) result)\n          ((char=? (first sentence) space) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) space) result)\n          ((char=? (first\
    \ sentence) newline) result)\n          ((char=? (first sentence) space) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) newline) result)\n\
    \          ((char=? (first sentence) space) result)\n          ((char=? (first\
    \ sentence) newline) result)\n          ((char=? (first sentence) space) result)\n\
    \          ((char=? (first sentence) newline) result)\n          ((char=? (first\
    \ sentence) space) result)\n          ((char=? (first sentence) ", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence)) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [else (loop (rest sentence) (cons (first\
    \ sentence) (loop (rest sentence) result)))])))\n", "  (define (helper sentence\
    \ result)\n    (if (empty? sentence)\n        result\n        (helper (rest sentence)\n\
    \                 (cons (first sentence)\n                      (helper (rest\
    \ sentence)\n                              result))))))\n  (helper sentence '()))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?r) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (", "  (define (helper sentence)\n\
    \    (cond\n      [(empty? sentence) \"\"]\n      [(prime? (length sentence))\
    \ (cons (first sentence) (helper (rest sentence)))]\n      [else (helper (rest\
    \ sentence))]))\n  (helper sentence))\n", "  (cond\n    [(empty? sentence) \"\"\
    ]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n)\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char->integer (first sentence)) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [else (loop (rest sentence) (cons (first\
    \ sentence) (loop (rest sentence) result)))])))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?r) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?f) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?b) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?r) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?p) (helper (re", "  (let loop ((sentence sentence)\n     \
    \        (result '()))\n    (cond ((empty? sentence) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) newline) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) space)\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          (else (loop\
    \ (rest sentence) (cons (first sentence) (cons (first sentence) result)))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first sentence) \"\") sentence]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"\
    ]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence)\
    \ '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=? (first sentence)\
    \ '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=? (first\
    \ sentence) '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"\
    ]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence)\
    \ '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n     \
    \ [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\\
    Space) \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\Space)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else\
    \ (cons (first sentence)\n                (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?f) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?w) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?b) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first ", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?w) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?p) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence))\
    \ sentence]\n    [else (cons (first sentence)\n                (words_in_sentence\
    \ (rest sentence)))]))\n", "  (define (helper sentence result)\n    (cond\n  \
    \    [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char-alphabetic? (first\
    \ sentence)) (helper (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (helper (rest sentence) (cons (first sentence) (helper result (first sentence))))]))\n\
    \  (helper sentence '()))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) '#\\Space)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [else (helper\
    \ (rest sentence) (cons (first sentence) (helper result (first sentence))))]))\n\
    \  (helper sentence '()))\n", "  (define (helper sentence)\n    (cond\n      [(empty?\
    \ sentence) '()]\n      [(char=? (first sentence) '#\\Space) '()]\n      [(char=?\
    \ (first sentence) '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab)\
    \ '()]\n      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=? (first\
    \ sentence) '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline) '()]\n\
    \      [(char=? (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence)\
    \ '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=?\
    \ (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence) '#\\Space) '()]\n\
    \      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=? (first sentence)\
    \ '#\\Tab) '()]\n      [(char=? (first sentence) '#\\Space) '()]\n      [(char=?\
    \ (first sentence) '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab)\
    \ '()]\n      [(char=? (first sentence) '#\\Space) '()]\n      [(char=? (first\
    \ sentence) '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n\
    \      [(char=? (first sentence) '#\\Space) '()]\n      [(char=? (first sentence)\
    \ '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n      [(char=?\
    \ (first sentence) '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline)\
    \ '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence)\
    \ '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=?\
    \ (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence) '#\\Space) '()]\n\
    \      [(char=? (first sentence) '#\\Newline) '()]\n      [(", "  (define (helper\
    \ sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(equal? (first\
    \ sentence) \"\") \"\"]\n      [(prime? (length sentence)) (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [else (helper (rest sentence))]))\n  (helper\
    \ sentence))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (loop (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) ?a) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?u) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?y) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?o) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?n) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?g) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?w) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?o) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?m) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?a) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?e) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?i) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?o) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?u) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?y) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?f) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?w) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?d) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (re", "  (cond\n    [(empty? sentence) '()]\n    [(empty? (rest\
    \ sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence (rest\
    \ sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence)\n           (reverse result))\n          ((char-alphabetic?\
    \ (car sentence))\n           (loop (cdr sentence)\n                 (cons (car\
    \ sentence) result)))\n          ((char-numeric? (car sentence))\n           (loop\
    \ (cdr sentence)\n                 (cons (car sentence) result)))\n          (else\n\
    \           (loop (cdr sentence)\n                 (cons (car sentence) result))))))\n",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [else (cons (first\
    \ sentence) (helper (rest sentence)))]))\n  (helper sentence))\n", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n  \
    \  [else (append (words_in_sentence (rest sentence)) (list (first sentence)))]))\n",
  "  (define (helper sentence primes)\n    (cond\n      [(empty? sentence) primes]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first\
    \ sentence) primes))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ primes))]))\n  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?i) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?A) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?E) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?I) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?O) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?U) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?n) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?t) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?h) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?i) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ", "  (define (helper sentence result)\n    (cond [(empty?\
    \ sentence) result]\n          [(char=? (first sentence) ?a) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n          [(char=? (first sentence) ?l) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?u) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?g) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?f) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?w) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?t) (helper (rest ", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\n\
    \       (loop (rest sentence)\n             (cons (first sentence) (loop (rest\
    \ sentence) result)))]\n      )))\n", "  (cond\n    [(empty? sentence) \"\"]\n\
    \    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence)) (list (first sentence))) (words_in_sentence (rest sentence))]))\n",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"]\n      [(char=?\
    \ (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?h) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p", "  (define (helper sentence prime-numbers)\n\
    \    (cond\n      [(empty? sentence) prime-numbers]\n      [(char=? (first sentence)\
    \ '#\\Space) (helper rest (cons (first sentence) prime-numbers))]\n      [(char=?\
    \ (first sentence) '#\\Newline) (helper rest (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) '#\\Newline) (helper rest\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) '#\\\
    Space) (helper rest (cons (first sentence) prime-numbers))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) '#\\Newline) (helper rest\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) '#\\\
    Space) (helper rest (cons (first sentence) prime-numbers))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) '#\\Newline) (helper rest\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) '#\\\
    Space) (helper rest (cons (first sentence) prime-numbers))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence) prime-numbers))]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ prime-numbers))]\n      [(char=? (first sentence) '#\\Newline) (helper rest\
    \ (cons (first sentence) prime-numbers))]\n      [(char=? (first sentence) '#\\\
    Space) (helper rest (cons (first sentence) prime-numbers))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence", "  (define (helper\
    \ sentence)\n    (cond [(empty? sentence) \"\"]\n          [(char=? (first sentence)\
    \ ?a) (cons (first sentence) (helper (rest sentence)))]\n          [(char=? (first\
    \ sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n          [(char=?\
    \ (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n   \
    \       [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \          [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest\
    \ sentence)))]\n          [(char=? (first sentence) ?s) (cons (first sentence)\
    \ (helper (rest sentence)))]\n          [(char=? (first sentence) ?i) (cons (first\
    \ sentence) (helper (rest sentence)))]\n          [(char=? (first sentence) ?n)\
    \ (cons (first sentence) (helper (rest sentence)))]\n          [(char=? (first\
    \ sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n          [(char=?\
    \ (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n   \
    \       [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \          [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest\
    \ sentence)))]\n          [(char=? (first sentence) ?e) (cons (first sentence)\
    \ (helper (rest sentence)))]\n          [(char=? (first sentence) ?r) (cons (first\
    \ sentence) (helper (rest sentence)))]\n          [(char=? (first sentence) ?m)\
    \ (cons (first sentence) (helper (rest sentence)))]\n          [(char=? (first\
    \ sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n          [(char=?\
    \ (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n   \
    \       [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \          [(char=? (first sentence) ?h) (cons (first sentence) (helper (rest\
    \ sentence)))]\n          [(char=? (first sentence) ?e) (cons (first sentence)\
    \ (helper (rest sentence)))]\n          [(char=? (first sentence) ?s) (cons (first\
    \ sentence) (helper (rest sentence)))]\n          [(char=? (first sentence) ?w)\
    \ (", "  (define (prime-numbers-of-length length primes)\n    (if (= length 0)\n\
    \        primes\n        (prime-numbers-of-length (sub1 length) (cons length primes))))\n\
    \  (prime-numbers-of-length 1 (list)))\n", "  (define (helper sentence result)\n\
    \    (cond ((null? sentence) result)\n          ((char=? (car sentence) \" \"\
    ) (helper (cdr sentence) (cons (car sentence) result)))\n          (else (helper\
    \ (cdr sentence) (cons (car sentence) (helper result '()))))))\n  (helper sentence\
    \ '()))\n", "  (define (helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(char=? (first sentence) '#\\Space) result]\n      [(char=?\
    \ (first sentence) '#\\Newline) result]\n      [(char=? (first sentence) '#\\\
    Tab) result]\n      [(char=? (first sentence) '#\\Newline) result]\n      [(char=?\
    \ (first sentence) '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline)\
    \ result]\n      [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first\
    \ sentence) '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n\
    \      [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(", "  (let loop ((sentence sentence)\n             (result '()))\n   \
    \ (cond ((empty? sentence) result)\n          ((char-alphabetic? (first sentence))\n\
    \           (loop (rest sentence) (cons (first sentence) result)))\n         \
    \ ((char-alphabetic? (first sentence))\n           (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          (else\n           (loop (rest sentence)\
    \ (cons (first sentence) result))))))\n", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (helper (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (helper (rest sentence) (cons (first sentence) (helper (rest sentence) result)))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence)\n                   (loop (rest sentence)\n                      \
    \  result)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI appreciate your\
    \ efforts, but I still don't understand why my code doesn't work. Can you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer, hope it helps.\n<|/ c |>\n<| c |>\nThank you very much for your\
    \ efforts, but I still don't understand why my code doesn't work. Can you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer, hope it helps.\n<|/ c |>\n<| c |>\nThank you very much for your\
    \ efforts, but I still don't understand why my code doesn't work. Can you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (define\
    \ (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?h) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (rest sentence))\n                  (list (first sentence)))]))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\n\
    \       (loop (rest sentence)\n             (cons (first sentence) (append result\
    \ (list (first sentence))))))])))\n", "  (define (helper sentence result)\n  \
    \  (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence) ?a)\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?f) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?w) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?b) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?r) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?d) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (re", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence) result)\n          ((char=? (car sentence) ?a) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?e) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?i) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?o) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?u) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?A) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?E) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?I) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?O) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?U) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?1) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?2) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((char=? (car sentence) ?3) (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ ?4) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) ?5) (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) ?6) (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) ?7) (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) ?8) (loop (cdr sentence)\
    \ (cons (car sentence) result)))\n          ((", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?w) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?y) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char? (car sentence)) (loop\
    \ (cdr sentence) (cons (car sentence) result))]\n      [else (loop (cdr sentence)\
    \ (cons (car sentence) (loop (cdr sentence) result)))])))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?o) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?y) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?a) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?m) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?p) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?t) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first ", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((empty? sentence) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) space) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) space) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) space) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) space) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) space) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) newline) result)\n          ((char=?\
    \ (first sentence) space) result)\n          ((char=? (first sentence) newline)\
    \ result)\n          ((char=? (first sentence) space) result)\n          ((char=?\
    \ (first sentence) newline) result)\n          ((char=? (first sentence) space)\
    \ result)\n          ((char=? (first sentence) ", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?s) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?r) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?m) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?p) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?t) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first ", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence) result)\n          ((char=? (car sentence) \" \"\
    ) (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \".\") (loop (cdr sentence) (cons (car sentence) result)))\n     \
    \     ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \";\") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \";\") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \";\") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?w) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?w) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (re",
  "  (define (helper sentence)\n    (cond\n      [(empty? sentence) '()]\n      [(char=?\
    \ (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e", "  (define (helper sentence result)\n  \
    \  (cond [(empty? sentence) result]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [else (helper (rest\
    \ sentence) (cons (first sentence) (helper result (first sentence))))]))\n  (helper\
    \ sentence '()))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) (list result)]\n      [(char? (car sentence))\
    \ (loop (cdr sentence) (cons (car sentence) result))]\n      [else (loop (cdr\
    \ sentence) (cons (car sentence) (loop (cdr sentence) result)))])))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence)) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [else (loop (rest sentence) (cons (first\
    \ sentence) (loop (rest sentence) result)))])))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?a) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?l) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (", "  (define (helper sentence)\n    (cond\n \
    \     [(empty? sentence) \"\"]\n      [(string=? (first sentence) '#\\Space) \"\
    \"]\n      [(string=? (first sentence) '#\\Newline) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Tab) \"\"]\n      [(string=? (first sentence) '#\\Newline) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(string=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(string=? (first sentence) '#\\Space) \"\"]\n      [(string=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(", "  (define (prime-number-words sentence)\n\
    \    (let loop ((sentence sentence)\n               (result '()))\n      (cond\
    \ ((null? sentence) result)\n            ((prime? (length sentence)) result)\n\
    \            (else (loop (rest sentence)\n                        (cons (first\
    \ sentence)\n                              result))))))\n  (prime-number-words\
    \ sentence))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence)\n                 (cons (first\
    \ sentence)\n                      (loop (rest sentence)\n                   \
    \         (cons (first sentence) result))))])))\n", "  (define (helper sentence)\n\
    \    (cond\n      [(empty? sentence) '()]\n      [(char=? (first sentence) '#\\\
    Space) '()]\n      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=?\
    \ (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence) '#\\Newline)\
    \ '()]\n      [(char=? (first sentence) '#\\Space) '()]\n      [(char=? (first\
    \ sentence) '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n\
    \      [(char=? (first sentence) '#\\Space) '()]\n      [(char=? (first sentence)\
    \ '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n      [(char=?\
    \ (first sentence) '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline)\
    \ '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence)\
    \ '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=?\
    \ (first sentence) '#\\Tab) '()]\n      [(char=? (first sentence) '#\\Space) '()]\n\
    \      [(char=? (first sentence) '#\\Newline) '()]\n      [(char=? (first sentence)\
    \ '#\\Tab) '()]\n      [(char=? (first sentence) '#\\Space) '()]\n      [(char=?\
    \ (first sentence) '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab)\
    \ '()]\n      [(char=? (first sentence) '#\\Space) '()]\n      [(char=? (first\
    \ sentence) '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n\
    \      [(char=? (first sentence) '#\\Space) '()]\n      [(char=? (first sentence)\
    \ '#\\Newline) '()]\n      [(char=? (first sentence) '#\\Tab) '()]\n      [(char=?\
    \ (first sentence) '#\\Space) '()]\n      [(char=? (first sentence) '#\\Newline)\
    \ '()]\n      [(", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?l) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?i) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?r) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?t) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first ", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (cons (first\
    \ sentence) (words_in_sentence (rest sentence)))]))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (append\
    \ (words_in_sentence (rest sentence)) (list (first sentence)))]))\n", "  (let\
    \ loop ((sentence sentence)\n             (result '()))\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence))\n       (loop\
    \ (rest sentence)\n             (cons (first sentence) result))]\n      [else\n\
    \       (loop (rest sentence)\n             (cons (first sentence)\n         \
    \         (loop (rest sentence)\n                        (cons (first sentence)\n\
    \                              result))))]))\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThanks for your answer! I understand that my code is not the most efficient\
    \ way to solve this problem, but I'm just trying to understand how I can solve\
    \ this problem using recursion.\n<|/ c |>\n<| c |>\nI added a recursive solution\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand\
    \ that my code is not the most efficient way to solve this problem, but I'm just\
    \ trying to understand how I can solve this problem using recursion.\n<|/ c |>\n\
    <| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  (define (prime-number? n)\n    (= (modulo n 2) 0))\n\
    \  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))\n  (define (prime-numbers-from-string s)\n    (map prime-number? (string->list\
    \ s)))\n  (define (prime-numbers-from-list l)\n    (map prime-number? (reverse\
    \ l)))", "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\n\
    \       (loop (rest sentence)\n             (cons (first sentence) result))]\n\
    \      [else\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ (append result (loop (rest sentence) '()))))])))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?s) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\
    \ (helper (rest sentence) (cons (first sentence) result))]\n      [else (helper\
    \ (rest sentence) (cons (first sentence) (helper (rest sentence) (cons (first\
    \ sentence) result))))]))\n  (helper sentence '()))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [else (helper (rest sentence) (cons (first sentence) (helper result (first\
    \ sentence))))]))\n  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (car sentence) \" \") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \" \") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \" \") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \".\") (loop (cdr\
    \ sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\") (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \" \") (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \".\") (loop (cdr sentence) (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"?\") (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((", "  (define (helper sentence primes)\n\
    \    (cond\n      [(empty? sentence) primes]\n      [(char=? (first sentence)\
    \ '#\\Space) (helper rest (cons (first sentence) primes))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence) primes))]\n     \
    \ [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence) primes))]\n\
    \      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Space) (helper rest (cons (first\
    \ sentence) primes))]\n      [(char=? (first sentence) '#\\Newline) (helper rest\
    \ (cons (first sentence) primes))]\n      [(char=? (first sentence) '#\\Space)\
    \ (helper rest (cons (first sentence) primes))]\n      [(char=? (first sentence)\
    \ '#\\Newline) (helper rest (cons (first sentence) primes))]\n      [(char=? (first\
    \ sentence) '#\\Space) (helper rest (cons (first sentence) primes))]\n      [(char=?\
    \ (first sentence) '#\\Newline) (helper rest (cons (first sentence) primes))]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first\
    \ sentence) primes))]\n      [(char=? (first sentence) '#\\Space) (helper rest\
    \ (cons (first sentence) primes))]\n      [(char=? (first sentence) '#\\Newline)\
    \ (helper rest (cons (first sentence) primes))]\n      [(char=? (first sentence)\
    \ '#\\Space) (helper rest (cons (first sentence) primes))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence) primes))]\n     \
    \ [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence) primes))]\n\
    \      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Space) (helper rest (cons (first\
    \ sentence) primes))]\n      [(char=? (first sentence) ", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?f) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?f) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper (", "  (let loop ((sentence sentence)\n       \
    \      (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?s) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?t) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?f) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?m) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?p) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?n) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?g) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?f) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first ",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?n) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?f) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?v) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?b) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first ", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char->integer (first sentence)) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence) (cons (first sentence) (loop (rest\
    \ sentence) result)))])))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond ((empty? sentence) result)\n          ((char=? (first\
    \ sentence) ?space) result)\n          ((char=? (first sentence) ?newline) result)\n\
    \          ((char=? (first sentence) ?tab) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence) ?tab) result)\n\
    \          ((char=? (first sentence) ?space) result)\n          ((char=? (first\
    \ sentence) ?newline) result)\n          ((char=? (first sentence", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n  \
    \  [else (append (words_in_sentence (rest sentence))\n                  (list\
    \ (first sentence)))]))\n", "  (cond\n    [(empty? sentence) '()]\n    [(number?\
    \ (length sentence)) sentence]\n    [else (append (words_in_sentence (rest sentence))\n\
    \                  (list (first sentence))\n                  (words_in_sentence\
    \ (first sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((null? sentence)\n           (reverse result))\n         \
    \ ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n       \
    \          (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \".\")\n           (loop (rest sentence)\n                 (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"?\")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) \"!\")\n           (loop (rest sentence)\n                \
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"!\"\
    )\n           (loop (rest sentence)\n                 (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \" \")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"!\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \" \")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \".\")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence)\n                 (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence)\n                 (cons (first sentence) result)))\n \
    \         ((char=? (first sentence) \" \")\n           (loop (rest sentence)\n\
    \                 (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \".\")\n           (", "  (let loop ((sentence sentence)\n       \
    \      (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ (cons (first sentence) result))))])))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((null? sentence) result)\n          ((char=?\
    \ (car sentence) ?space) result)\n          ((char=? (car sentence) ?.) result)\n\
    \          ((char=? (car sentence) ?!) result)\n          ((char=? (car sentence)\
    \ ?-) result)\n          ((char=? (car sentence) ?!.) result)\n          ((char=?\
    \ (car sentence) ?-!) result)\n          ((char=? (car sentence) ?!-) result)\n\
    \          ((char=? (car sentence) ?-!.) result)\n          ((char=? (car sentence)\
    \ ?!-.) result)\n          ((char=? (car sentence) ?-!-) result)\n          ((char=?\
    \ (car sentence) ?!-!) result)\n          ((char=? (car sentence) ?-!-!.) result)\n\
    \          ((char=? (car sentence) ?!-!-) result)\n          ((char=? (car sentence)\
    \ ?-!-!-) result)\n          ((char=? (car sentence) ?!-!-!) result)\n       \
    \   ((char=? (car sentence) ?-!-!-!.) result)\n          ((char=? (car sentence)\
    \ ?!-!-!-) result)\n          ((char=? (car sentence) ?-!-!-!-) result)\n    \
    \      ((char=? (car sentence) ?!-!-!-!) result)\n          ((char=? (car sentence)\
    \ ?-!-!-!-!.) result)\n          ((char=? (car sentence) ?!-!-!-!-) result)\n\
    \          ((char=? (car sentence) ?-!-!-!-!-) result)\n          ((char=? (car\
    \ sentence) ?!-!-!-!-!) result)\n          ((char=? (car sentence) ?-!-!-!-!-!.)\
    \ result)\n          ((char=? (car sentence) ?!-!-!-!-!-) result)\n          ((char=?\
    \ (car sentence) ?-!-!-!-!-!-) result)\n          ((char=? (car sentence) ?!-!-!-",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\n   \
    \    (loop (rest sentence)\n             (cons (first sentence) result))]\n  \
    \    [else\n       (loop (rest sentence)\n             (cons (first sentence)\n\
    \                  (loop (rest sentence)\n                        (cons (first\
    \ sentence)\n                              result))))])))\n", "  (cond\n    [(empty?\
    \ sentence) \"\"]\n    [(equal? (first sentence) empty?) \"\"]\n    [else (cons\
    \ (first sentence) (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (if (empty? sentence)\n        result\n\
    \        (loop (rest sentence)\n              (cons (first sentence)\n       \
    \             (loop (rest sentence)\n                          result))))))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence))\n   \
    \    (loop (rest sentence) (cons (first sentence) result))]\n      [else (loop\
    \ (rest sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char-alphabetic? (first sentence)) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [else (loop (rest sentence)\
    \ (cons (first sentence) (loop (rest sentence) result)))])))\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?p) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper (re", "  (let loop ((sentence sentence)\n     \
    \        (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?s) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?t) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?i) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?m) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?h) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?p) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first ",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?t) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?m) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?p) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((empty? sentence) result)\n          ((char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?i) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?y) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?w) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?r) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?s) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?p) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?m) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?n) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?g) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?o) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ", "  (define (helper sentence)\n    (cond\n      [(empty?\
    \ sentence) \"\"]\n      [(char-alphabetic? (first sentence)) (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [else (helper (rest sentence))]))\n  (helper\
    \ sentence))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence)\n                  (cons (first\
    \ sentence)\n                         (loop (rest sentence)\n                \
    \                result)))])))\n", "  (let loop ((sentence sentence)\n       \
    \      (result '()))\n    (cond ((empty? sentence) result)\n          ((char=?\
    \ (first sentence) ?a) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?i) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?o) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?A) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?E) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?I) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?O) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?U) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?1) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?2) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?3) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?4) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?5) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?6) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?7) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?8) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?9) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?0) (loop (rest sentence) (cons (first sentence) result)))\n          (else\
    \ (loop (rest sentence", "  (define (helper sentence)\n    (cond\n      [(empty?\
    \ sentence) \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(char=? (first\
    \ sentence) '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"\
    ]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence)\
    \ '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n     \
    \ [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\\
    Space) \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\Space)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(char=? (first\
    \ sentence) '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"]\n\
    \      [(char=? (first sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence)\
    \ '#\\Tab) \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab)\
    \ \"\"]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=? (first\
    \ sentence) '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"\
    ]\n      [(char=? (first sentence) '#\\Space) \"\"]\n      [(char=? (first sentence)\
    \ '#\\Newline) \"\"]\n      [(char=? (first sentence) '#\\Tab) \"\"]\n      [(char=?\
    \ (first sentence) '#\\Space) \"\"]\n      [(char=? (first sentence) '#\\Newline)\
    \ \"\"]\n      [(", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char-alphabetic? (first sentence)) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [else (helper (rest sentence)\
    \ (cons (first sentence) (helper (rest sentence) (cons (first sentence) result))))]))\n\
    \  (helper sentence '()))\n", "  (let loop ((sentence sentence)\n            \
    \ (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence)) (loop (rest sentence) (cons (first sentence) result))]\n \
    \     [else (loop (rest sentence) (cons (first sentence) (loop (rest sentence)\
    \ result)))])))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first\
    \ sentence) '#\\Newline) \"\"]\n    [else (append (words_in_sentence (rest sentence))\
    \ (list (first sentence)))]))\n", "  (define (helper sentence result)\n    (cond\
    \ [(empty? sentence) result]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?s) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?t) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?g) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?r) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?h) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?i) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [(char=? (first\
    \ sentence) ?l) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \       [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n          [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n          [(char=? (first sentence) ?e) (helper\
    \ (rest ", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence))\
    \ sentence]\n    [else (cons (first sentence) (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence primes)\n    (cond\n      [(empty? sentence) primes]\n\
    \      [(equal? (first sentence) '#\\Space) (helper sentence (cons (first sentence)\
    \ primes))]\n      [(equal? (first sentence) '#\\Newline) (helper sentence (cons\
    \ (first sentence) primes))]\n      [(equal? (first sentence) '#\\Space) (helper\
    \ sentence (cons (first sentence) primes))]\n      [(equal? (first sentence) '#\\\
    Newline) (helper sentence (cons (first sentence) primes))]\n      [(equal? (first\
    \ sentence) '#\\Space) (helper sentence (cons (first sentence) primes))]\n   \
    \   [(equal? (first sentence) '#\\Newline) (helper sentence (cons (first sentence)\
    \ primes))]\n      [(equal? (first sentence) '#\\Space) (helper sentence (cons\
    \ (first sentence) primes))]\n      [(equal? (first sentence) '#\\Newline) (helper\
    \ sentence (cons (first sentence) primes))]\n      [(equal? (first sentence) '#\\\
    Space) (helper sentence (cons (first sentence) primes))]\n      [(equal? (first\
    \ sentence) '#\\Newline) (helper sentence (cons (first sentence) primes))]\n \
    \     [(equal? (first sentence) '#\\Space) (helper sentence (cons (first sentence)\
    \ primes))]\n      [(equal? (first sentence) '#\\Newline) (helper sentence (cons\
    \ (first sentence) primes))]\n      [(equal? (first sentence) '#\\Space) (helper\
    \ sentence (cons (first sentence) primes))]\n      [(equal? (first sentence) '#\\\
    Newline) (helper sentence (cons (first sentence) primes))]\n      [(equal? (first\
    \ sentence) '#\\Space) (helper sentence (cons (first sentence) primes))]\n   \
    \   [(equal? (first sentence) '#\\Newline) (helper sentence (cons (first sentence)\
    \ primes))]\n      [(equal? (first sentence) '#\\Space) (helper sentence (cons\
    \ (first sentence) primes))]\n      [(equal? (first sentence) '#\\Newline) (helper\
    \ sentence (cons (first sentence) primes))]\n      [(equal? (first sentence) '#\\\
    Space) (helper sentence (cons (first sentence) primes))]\n      [(equal? (first\
    \ sentence) '#\\Newline) (helper sentence (cons (first sentence) primes))]\n \
    \     [(", "  (define (helper sentence result)\n    (cond\n      [(empty? sentence)\
    \ result]\n      [(char-alphabetic? (first sentence)) (helper (rest sentence)\
    \ (cons (first sentence) result))]\n      [else (helper (rest sentence) (cons\
    \ (first sentence) (helper (rest sentence) result)))]))\n  (helper sentence '()))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (if (empty? sentence)\n\
    \        result\n        (loop (rest sentence)\n              (cons (first sentence)\n\
    \                    (loop (rest sentence)\n                          result))))))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((null?\
    \ sentence) result)\n          ((char=? (car sentence) \" \")\n           (loop\
    \ (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ", "  (let loop ((sentence sentence)\n \
    \            (result '()))\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char-alphabetic? (first sentence))\n       (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (loop (rest sentence) (cons (first sentence)\
    \ (loop (rest sentence) (cons (first sentence) result))))])))\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline)\
    \ result]\n      [(char=? (first sentence) '#\\Tab) result]\n      [(char=? (first\
    \ sentence) '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n\
    \      [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Tab) result]\n      [(char=? (first sentence) '#\\Space) result]\n     \
    \ [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Space) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#", "  (define (helper sentence)\n    (cond\n      [(empty? sentence) \"\"\
    ]\n      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?U) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?Y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?y) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?A) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?E) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?I) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?O) (", "  (let loop ((sentence sentence)\n \
    \            (result '()))\n    (cond\n      [(empty? sentence) result]\n    \
    \  [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?o) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?u) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?s) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?m) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?t) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?r) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?g) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?o) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?l) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first ", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char=? (first sentence)\
    \ ?a) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?y) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?o) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?i) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?o) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?y) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first ", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?f) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?r) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (", "  (let loop ((sentence sentence)\n       \
    \      (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else\n       (loop (rest sentence)\n             (cons (first\
    \ sentence) (append result (list (first sentence))))))])))\n", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n  \
    \           (cons (first sentence) result))]\n      [else (loop (rest sentence)\n\
    \                  (cons (first sentence)\n                         (loop (rest\
    \ sentence)\n                                result)))])))\n", "  (define (helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(char=?\
    \ (first sentence) ?a) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?l) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?s) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?p) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?r) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?p) (helper rest (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) '#\\Space) result]\n    \
    \  [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Tab) result]\n      [(char=? (first sentence) '#\\Newline) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Tab) result]\n      [(char=? (first sentence) '#\\Newline) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((null? sentence) result)\n          ((char-alphabetic? (car\
    \ sentence))\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char-numeric? (car sentence))\n           (loop (cdr\
    \ sentence)\n                 (cons (car sentence) result)))\n          (else\n\
    \           (loop (cdr sentence)\n                 (cons (car sentence) result))))))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (cons (first sentence)\n                (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?w) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?m) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?a) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?e) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?r) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?y) (helper (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) (reverse result)]\n\
    \      [(string=? (first sentence) '#\\Space) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (loop (rest sentence) (cons (first sentence)\
    \ result))]))))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(equal? (first\
    \ sentence) '#\\Space) \"\"]\n    [else (append (words_in_sentence (rest sentence))\
    \ (list (first sentence)))]))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?y) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?A) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?E) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?I) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?O) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?U) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?Y) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?u) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?y) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?A) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?E) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?I) (helper (rest ",
  "  (define (helper sentence primes)\n    (cond\n      [(empty? sentence) primes]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first\
    \ sentence) primes))]\n      [(char=? (first sentence) '#\\Space) (helper rest\
    \ (cons (first sentence) primes))]\n      [(char=? (first sentence) '#\\Newline)\
    \ (helper rest (cons (first sentence) primes))]\n      [(char=? (first sentence)\
    \ '#\\Space) (helper rest (cons (first sentence) primes))]\n      [(char=? (first\
    \ sentence) '#\\Newline) (helper rest (cons (first sentence) primes))]\n     \
    \ [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence) primes))]\n\
    \      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Space) (helper rest (cons (first\
    \ sentence) primes))]\n      [(char=? (first sentence) '#\\Newline) (helper rest\
    \ (cons (first sentence) primes))]\n      [(char=? (first sentence) '#\\Space)\
    \ (helper rest (cons (first sentence) primes))]\n      [(char=? (first sentence)\
    \ '#\\Newline) (helper rest (cons (first sentence) primes))]\n      [(char=? (first\
    \ sentence) '#\\Space) (helper rest (cons (first sentence) primes))]\n      [(char=?\
    \ (first sentence) '#\\Newline) (helper rest (cons (first sentence) primes))]\n\
    \      [(char=? (first sentence) '#\\Space) (helper rest (cons (first sentence)\
    \ primes))]\n      [(char=? (first sentence) '#\\Newline) (helper rest (cons (first\
    \ sentence) primes))]\n      [(char=? (first sentence) '#\\Space) (helper rest\
    \ (cons (first sentence) primes))]\n      [(char=? (first sentence) '#\\Newline)\
    \ (helper rest (cons (first sentence) primes))]\n      [(char=? (first sentence)\
    \ '#\\Space) (helper rest (cons (first sentence) primes))]\n      [(char=? (first\
    \ sentence) ", "  (define (helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(char=? (first sentence) '#\\Space) result]\n    \
    \  [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Tab) result]\n      [(char=? (first sentence) '#\\Newline) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Tab) result]\n      [(char=? (first sentence) '#\\Newline) result]\n   \
    \   [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]\n      [(char=? (first sentence) '#\\Newline) result]\n \
    \     [(char=? (first sentence) '#\\Space) result]\n      [(char=? (first sentence)\
    \ '#\\Newline) result]\n      [(char=? (first sentence) '#\\Space) result]\n \
    \     [(char=? (first sentence) '#\\Newline) result]\n      [(char=? (first sentence)\
    \ '#\\Space) result]", "  (let loop ((sentence sentence)\n             (result\
    \ '()))\n    (cond ((empty? sentence) result)\n          ((char=? (first sentence)\
    \ ?a) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?e) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?i) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?o) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?u) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?A) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?E) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?I) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?O) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?U) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?1) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?2) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?3) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?4) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?5) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ ?6) (loop (rest sentence) (cons (first sentence) result)))\n          ((char=?\
    \ (first sentence) ?7) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) ?8) (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) ?9) (loop (rest sentence) (cons\
    \ (first sentence) result)))\n          ((char=? (first sentence) ?0) (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          (else (loop (rest sentence",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond ((empty?\
    \ sentence) result)\n          ((char=? (first sentence) space) result)\n    \
    \      ((char=? (first sentence) newline) result)\n          ((char=? (first sentence)\
    \ return) result)\n          ((char=? (first sentence) tab) result)\n        \
    \  ((char=? (first sentence) backslash) result)\n          ((char=? (first sentence)\
    \ slash) result)\n          ((char=? (first sentence) semicolon) result)\n   \
    \       ((char=? (first sentence) dot) result)\n          ((char=? (first sentence)\
    \ comma) result)\n          ((char=? (first sentence) apostrophe) result)\n  \
    \        ((char=? (first sentence) quotation) result)\n          ((char=? (first\
    \ sentence) asterisk) result)\n          ((char=? (first sentence) exclamation)\
    \ result)\n          ((char=? (first sentence) colon) result)\n          ((char=?\
    \ (first sentence) semicolon) result)\n          ((char=? (first sentence) equal)\
    \ result)\n          ((char=? (first sentence) question) result)\n          ((char=?\
    \ (first sentence) exclamation) result)\n          ((char=? (first sentence) colon)\
    \ result)\n          ((char=? (first sentence) semicolon) result)\n          ((char=?\
    \ (first sentence) equal) result)\n          ((char=? (first sentence) question)\
    \ result)\n          ((char=? (first sentence) exclamation) result)\n        \
    \  ((char=? (first sentence) colon) result)\n          ((char=? (first sentence)\
    \ semicolon) result)\n          ((char=? (first sentence) equal) result)\n   \
    \       ((char=? (first sentence) question) result)\n          ((char=? (first\
    \ sentence) exclamation) result)\n          ((char=? (first sentence) colon) result)\n\
    \          ((char=? (first sentence) semicolon) result)\n          ((char=? (first\
    \ sentence) equal) result)\n          ((char=? (first sentence) question) result)\n\
    \          ((char=? (first sentence) exclamation) result)\n          ((char=?\
    \ (first sentence) colon) result)\n          ((char=? (first sentence) semicolon)\
    \ result)\n          ((char=? (first sentence) equal) result)\n          ((char=?\
    \ (first sentence) question) result)\n          ((char=? (first sentence) exclamation)\
    \ result)\n          ((", "  (define (helper sentence result)\n    (cond\n   \
    \   [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?i) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?n) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?g) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?f) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?m) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?r) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?m) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?f) (helper (",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?o) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?p) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?w) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?r) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?a) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?h) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper rest (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?", "  (define (helper sentence)\n    (cond\n\
    \      [(empty? sentence) '()]\n      [(char=? (first sentence) ?a) (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [(char=? (first sentence) ?l) (cons\
    \ (first sentence) (helper (rest sentence)))]\n      [(char=? (first sentence)\
    \ ?o) (cons (first sentence) (helper (rest sentence)))]\n      [(char=? (first\
    \ sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n      [(char=?\
    \ (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r", "  (let loop ((sentence sentence)\n    \
    \         (result '()))\n    (cond ((empty? sentence) result)\n          ((char=?\
    \ (first sentence) \" \")\n           (loop (rest sentence) (cons (first sentence)\
    \ result)))\n          ((char=? (first sentence) \"\\n\")\n           (loop (rest\
    \ sentence) (cons (first sentence) result)))\n          ((char=? (first sentence)\
    \ \".\")\n           (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"?\")\n           (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"!\"\
    )\n           (loop (rest sentence) (cons (first sentence) result)))\n       \
    \   ((char=? (first sentence) \"-\")\n           (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"(\")\n          \
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \")\")\n           (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \" \")\n           (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \".\"\
    )\n           (loop (rest sentence) (cons (first sentence) result)))\n       \
    \   ((char=? (first sentence) \"?\")\n           (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \"!\")\n          \
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"-\")\n           (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"(\")\n           (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \")\"\
    )\n           (loop (rest sentence) (cons (first sentence) result)))\n       \
    \   ((char=? (first sentence) \" \")\n           (loop (rest sentence) (cons (first\
    \ sentence) result)))\n          ((char=? (first sentence) \".\")\n          \
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) \"?\")\n           (loop (rest sentence) (cons (first sentence) result)))\n\
    \          ((char=? (first sentence) \"!\")\n           (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) \"-\"\
    )\n           (loop (rest sentence) (cons (first sentence) result)))\n       \
    \   ", "  (define (helper sentence result)\n    (if (empty? sentence)\n      \
    \  result\n        (helper (rest sentence) (cons (first sentence) result))\n \
    \     )\n    )\n  (helper sentence '())\n)\n", "  (cond\n    [(empty? sentence)\
    \ '()]\n    [(empty? (rest sentence)) sentence]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (cond\n    [(empty? sentence)\
    \ \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else (cons (first sentence)\
    \ (words_in_sentence (rest sentence)))]))\n", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond\n      [(empty? sentence) result]\n   \
    \   [(char-alphabetic? (first sentence))\n       (loop (rest sentence)\n     \
    \        (cons (first sentence) result))]\n      [else\n       (loop (rest sentence)\n\
    \             (cons (first sentence) (append result (loop (rest sentence)\n  \
    \                                                   '()))))])))\n", "  (cond\n\
    \    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n    [else\
    \ (cons (first sentence) (words_in_sentence (rest sentence)))]))\n", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond ((null? sentence)\n\
    \           (reverse result))\n          ((char=? (car sentence) \" \")\n    \
    \       (loop (cdr sentence)\n                 (cons (car sentence) result)))\n\
    \          (else\n           (loop (cdr sentence)\n                 (cons (car\
    \ sentence) result))))))\n", "  (define (helper sentence)\n    (cond\n      [(empty?\
    \ sentence) \"\"]\n      [(char=? (first sentence) ?a) (cons (first sentence)\
    \ (helper (rest sentence)))]\n      [(char=? (first sentence) ?l) (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [(char=? (first sentence) ?o) (cons\
    \ (first sentence) (helper (rest sentence)))]\n      [(char=? (first sentence)\
    \ ?s) (cons (first sentence) (helper (rest sentence)))]\n      [(char=? (first\
    \ sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n      [(char=?\
    \ (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?r) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?p) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?f) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?h) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?h", "  (define (helper sentence result)\n  \
    \  (cond [(empty? sentence) result]\n          [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n          [else (helper (rest\
    \ sentence) (cons (first sentence) (helper result (first sentence))))]))\n  (helper\
    \ sentence '()))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (loop (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (loop (rest sentence) (cons (first sentence) (loop (rest sentence) result)))])))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (append (words_in_sentence (rest sentence))\n                  (list\
    \ (first sentence)))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(number?\
    \ (length sentence)) sentence]\n    [else (cons (first sentence) (words_in_sentence\
    \ (rest sentence)))]))\n", "  (cond\n    [(empty? sentence) \"\"]\n    [(empty?\
    \ (rest sentence)) sentence]\n    [else (append (words_in_sentence (rest sentence))\n\
    \                  (list (first sentence)))]))\n", "  (define (helper sentence\
    \ result)\n    (cond\n      [(empty? sentence) result]\n      [(char=? (first\
    \ sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n   \
    \   [(char=? (first sentence) ?l) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?s) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?u) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?i) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?e) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?g) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?f) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?w) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?d) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?m) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?n) (helper (", "  (let loop ((sentence sentence)\n       \
    \      (result '()))\n    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic?\
    \ (first sentence))\n       (loop (rest sentence)\n             (cons (first sentence)\
    \ result))]\n      [else (loop (rest sentence)\n                 (cons (first\
    \ sentence)\n                      (loop (rest sentence)\n                   \
    \         (cons (first sentence)\n                                  result))))])))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) result))]\n      [else (helper (rest sentence) (cons (first sentence)\
    \ (helper (rest sentence) result)))]))\n  (helper sentence '()))\n", "  (let loop\
    \ ((sentence sentence)\n             (result '()))\n    (cond ((empty? sentence)\
    \ result)\n          ((char=? (first sentence) ?space) result)\n          ((char=?\
    \ (first sentence) ?newline) result)\n          ((char=? (first sentence) ?end-of-string)\
    \ result)\n          ((char=? (first sentence) ?newline) (loop (rest sentence)\
    \ (cons (first sentence) result)))\n          ((char=? (first sentence) ?space)\
    \ (loop (rest sentence) (cons (first sentence) result)))\n          ((char=? (first\
    \ sentence) ?end-of-string) (loop (rest sentence) (cons (first sentence) result)))\n\
    \          (else (loop (rest sentence) (cons (first sentence) (cons (first sentence)\
    \ result)))))))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char? (car sentence)) (loop\
    \ (cdr sentence) (cons (car sentence) result))]\n      [else (loop (cdr sentence)\
    \ (cons (car sentence) (loop (cdr sentence) result)))])))\n", "  (define (helper\
    \ sentence result)\n    (cond [(empty? sentence) result]\n          [(char-alphabetic?\
    \ (first sentence)) (helper (rest sentence) (cons (first sentence) result))]\n\
    \          [else (helper (rest sentence) (cons (first sentence) (helper (rest\
    \ sentence) (cons (first sentence) result))))]))\n  (helper sentence '()))\n",
  "  (let loop ((sentence sentence)\n             (result '()))\n    (cond\n     \
    \ [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (loop (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?o) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?s) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?t) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?u) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?i) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?e) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?f) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?p) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first sentence) ?e) (loop (rest sentence)\
    \ (cons (first sentence) result))]\n      [(char=? (first sentence) ?t) (loop\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?o) (loop (rest sentence) (cons (first sentence) result))]\n      [(char=? (first\
    \ sentence) ?n) (loop (rest sentence) (cons (first sentence) result))]\n     \
    \ [(char=? (first sentence) ?g) (loop (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (loop (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (loop (rest sentence) (cons (first\
    \ sentence) result))]\n      [(char=? (first ", "  (define (helper sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(char-alphabetic? (first\
    \ sentence)) (helper (rest sentence) (cons (first sentence) result))]\n      [else\
    \ (helper (rest sentence) (cons (first sentence) (helper (rest sentence) result)))]))\n\
    \  (helper sentence '()))\n", "  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(char=? (first sentence) ?a) (helper\
    \ (rest sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?l) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?o) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?s) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?t) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?u) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?n) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?g) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?f) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?m) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?p) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?r) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?t) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?a) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?e) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (cons (first sentence)\n                (words_in_sentence (rest sentence)))]))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(empty? (rest sentence)) sentence]\n\
    \    [else (cons (first sentence)\n                (words_in_sentence (rest sentence)))]))\n",
  "  (define (helper sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(char=? (first sentence) ?a) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?l) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?o) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?s) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?t) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?u) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?i) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?e) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?n) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?g) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?f) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?m) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?p) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?w) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?d) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?g) (helper (rest sentence) (cons (first sentence)\
    \ result))]\n      [(char=? (first sentence) ?o) (helper (rest sentence) (cons\
    \ (first sentence) result))]\n      [(char=? (first sentence) ?n) (helper (rest\
    \ sentence) (cons (first sentence) result))]\n      [(char=? (first sentence)\
    \ ?e) (helper (rest sentence) (cons (first sentence) result))]\n      [(char=?\
    \ (first sentence) ?i) (helper (rest sentence) (cons (first sentence) result))]\n\
    \      [(char=? (first sentence) ?l) (helper (", "  (let loop ((sentence sentence)\n\
    \             (result '()))\n    (cond ((empty? sentence)\n           (reverse\
    \ result))\n          ((char=? (first sentence) \" \")\n           (loop (rest\
    \ sentence)\n                 (cons (first sentence) result)))\n          (else\n\
    \           (loop (rest sentence)\n                 (cons (first sentence) result))))))\n",
  "  (define (helper sentence prime-numbers)\n    (cond\n      [(empty? sentence)\
    \ prime-numbers]\n      [(char=? (first sentence) '#\\Space) prime-numbers]\n\
    \      [(char=? (first sentence) '#\\Newline) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\Tab) prime-numbers]\n      [(char=? (first sentence) '#\\Newline)\
    \ prime-numbers]\n      [(char=? (first sentence) '#\\Space) prime-numbers]\n\
    \      [(char=? (first sentence) '#\\Newline) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\Tab) prime-numbers]\n      [(char=? (first sentence) '#\\Space)\
    \ prime-numbers]\n      [(char=? (first sentence) '#\\Newline) prime-numbers]\n\
    \      [(char=? (first sentence) '#\\Tab) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\Space) prime-numbers]\n      [(char=? (first sentence) '#\\Newline)\
    \ prime-numbers]\n      [(char=? (first sentence) '#\\Tab) prime-numbers]\n  \
    \    [(char=? (first sentence) '#\\Space) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\Newline) prime-numbers]\n      [(char=? (first sentence) '#\\\
    Tab) prime-numbers]\n      [(char=? (first sentence) '#\\Space) prime-numbers]\n\
    \      [(char=? (first sentence) '#\\Newline) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\Tab) prime-numbers]\n      [(char=? (first sentence) '#\\Space)\
    \ prime-numbers]\n      [(char=? (first sentence) '#\\Newline) prime-numbers]\n\
    \      [(char=? (first sentence) '#\\Tab) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\Space) prime-numbers]\n      [(char=? (first sentence) '#\\Newline)\
    \ prime-numbers]\n      [(char=? (first sentence) '#\\Tab) prime-numbers]\n  \
    \    [(char=? (first sentence) '#\\Space) prime-numbers]\n      [(char=? (first\
    \ sentence) '#\\", "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length\
    \ sentence)) \"\"]\n    [else (cons (first sentence) (words_in_sentence (rest\
    \ sentence)))]))\n", "  (let loop ((sentence sentence)\n             (result '()))\n\
    \    (cond ((null? sentence)\n           result)\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence) (cons (car sentence) result)))\n   \
    \       ((char=? (car sentence) \".\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \",\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"?\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result)))\n          ((char=? (car\
    \ sentence) \"!\")\n           (loop (cdr sentence) (cons (car sentence) result)))\n\
    \          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence) (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"!\")\n       \
    \    (loop (cdr sentence) (cons (car sentence) result", "  (let loop ((sentence\
    \ sentence)\n             (result '()))\n    (cond ((null? sentence)\n       \
    \    result)\n          ((char=? (car sentence) \" \")\n           (loop (cdr\
    \ sentence)\n                 (cons (car sentence) result)))\n          ((char=?\
    \ (car sentence) \".\")\n           (loop (cdr sentence)\n                 (cons\
    \ (car sentence) result)))\n          ((char=? (car sentence) \"?\")\n       \
    \    (loop (cdr sentence)\n                 (cons (car sentence) result)))\n \
    \         ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\n  \
    \               (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"?\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \" \")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \".\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"?\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \"!\")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \"!\")\n           (loop (cdr sentence)\n                 (cons (car sentence)\
    \ result)))\n          ((char=? (car sentence) \" \")\n           (loop (cdr sentence)\n\
    \                 (cons (car sentence) result)))\n          ((char=? (car sentence)\
    \ \".\")\n           (loop (cdr sentence)", "  (cond\n    [(empty? sentence) \"\
    \"]\n    [(number? (length sentence)) sentence]\n    [else (append (words_in_sentence\
    \ (substring sentence 0 (floor (/ 1 (length sentence))))) (words_in_sentence (substring\
    \ sentence (floor (/ 1 (length sentence)) (length sentence))))]))\n)\n", "  (define\
    \ (helper sentence prime-numbers)\n    (cond\n      [(empty? sentence) prime-numbers]\n\
    \      [(char-alphabetic? (first sentence)) (helper (rest sentence) (cons (first\
    \ sentence) prime-numbers))]\n      [else (helper (rest sentence) (cons (first\
    \ sentence) (helper (rest sentence) prime-numbers)))]))\n  (helper sentence '()))\n",
  "  (cond\n    [(empty? sentence) \"\"]\n    [(number? (length sentence)) sentence]\n\
    \    [else (append (words_in_sentence (substring sentence 0 (- (length sentence)\
    \ 1)))\n                  (words_in_sentence (substring sentence (+ (length sentence)\
    \ 1) (length sentence))))]))\n", "  (define (helper sentence)\n    (cond\n   \
    \   [(empty? sentence) '()]\n      [(char=? (first sentence) ?a) (cons (first\
    \ sentence) (helper (rest sentence)))]\n      [(char=? (first sentence) ?l) (cons\
    \ (first sentence) (helper (rest sentence)))]\n      [(char=? (first sentence)\
    \ ?o) (cons (first sentence) (helper (rest sentence)))]\n      [(char=? (first\
    \ sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n      [(char=?\
    \ (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n   \
    \   [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?n) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?g) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?m) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?a) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?e) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?i) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?l) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?o) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?s) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?t) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?u) (cons (first sentence) (helper (rest sentence)))]\n\
    \      [(char=? (first sentence) ?w", "  (define (helper sentence result)\n  \
    \  (if (empty? sentence)\n        result\n        (helper (rest sentence) (cons\
    \ (first sentence) result)))))\n  (helper sentence '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
