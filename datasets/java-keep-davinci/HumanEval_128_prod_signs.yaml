name: HumanEval_128_prod_signs
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given an array arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the array, represented by 1, -1 or 0.\n    // Note: return None\
  \ for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2, -4]) == -9\n\
  \    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) == None\n    public\
  \ static Optional<Long> prodSigns(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(prodSigns((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)-4l)))).equals(Optional.of(-9l)));\n\
  \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))).equals(Optional.of(0l)));\n\
  \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l,\
  \ (long)2l, (long)3l, (long)-1l, (long)1l)))).equals(Optional.of(-10l)));\n    assert(prodSigns((new\
  \ ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n    assert(prodSigns((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)2l, (long)-1l,\
  \ (long)-1l, (long)9l)))).equals(Optional.of(20l)));\n    assert(prodSigns((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)-1l, (long)1l)))).equals(Optional.of(4l)));\n\
  \    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l, (long)1l, (long)1l,\
  \ (long)1l)))).equals(Optional.of(-4l)));\n    assert(prodSigns((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)1l, (long)1l, (long)0l)))).equals(Optional.of(0l)));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
