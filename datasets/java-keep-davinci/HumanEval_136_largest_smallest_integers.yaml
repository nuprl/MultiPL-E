name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a tuple (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in a list.\n    // If there is no negative or positive integers,\
  \ return them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4,\
  \ 1, 3, 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n\
  \    // largest_smallest_integers([0]) == (None, None)\n    public static Pair<Optional<Long>,\
  \ Optional<Long>> largestSmallestIntegers(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l)))).equals(Pair.with(Optional.empty(), 1l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l, (long)0l)))).equals(Pair.with(Optional.empty(), 1l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l,\
  \ (long)6l, (long)-2l)))).equals(Pair.with(-2l, 1l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)2l,\
  \ (long)7l, (long)-7l)))).equals(Pair.with(-7l, 2l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)8l, (long)4l, (long)9l,\
  \ (long)2l, (long)5l, (long)-9l)))).equals(Pair.with(-9l, 2l)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.empty(), Optional.empty())));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.empty(),\
  \ Optional.empty())));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(-1l, Optional.empty())));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(-1l, Optional.empty())));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Pair.with(-3l, 1l)));\n \
  \   assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Pair.with(-3l,\
  \ 1l)));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "    }\n\n"
