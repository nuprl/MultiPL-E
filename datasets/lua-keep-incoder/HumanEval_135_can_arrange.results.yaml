name: HumanEval_135_can_arrange
language: lua
results:
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local i = 1\n  while\
    \ i < #arr do\n    if arr[i] <= arr[max] then\n      max = i\n    end\n    i =\
    \ i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g_5r9g8.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4g_5r9g8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5_f5hg_.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpw5_f5hg_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = -1\n  for idx = 1,\
    \ #arr do\n    if arr[idx] > arr[max_idx] then\n      max_idx = idx\n    end\n\
    \  end\n  return max_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvbmav7z.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxvbmav7z.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = -1\n  local max_val\
    \ = arr[1]\n  for idx = 2, #arr do\n    if arr[idx] > max_val then\n      max_idx\
    \ = idx\n      max_val = arr[idx]\n    end\n  end\n  return max_idx\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfjccx80.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmplfjccx80.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkpb3axg.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnkpb3axg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44d3hoof.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp44d3hoof.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43g583er.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp43g583er.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2owh82f.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpz2owh82f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcmth7gl.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwcmth7gl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = -1\n  local max_val\
    \ = arr[1]\n  for idx = 2, #arr do\n    if arr[idx] > max_val then\n      max_idx\
    \ = idx\n      max_val = arr[idx]\n    end\n  end\n  return max_idx\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mpbnorf.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp5mpbnorf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_0cgfnd.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpv_0cgfnd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] <= arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf9tweik.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsf9tweik.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_qrj729.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp5_qrj729.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph86pnzys.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmph86pnzys.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mkrwk5f.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp0mkrwk5f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o_6kh0f.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp0o_6kh0f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c713dsr.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6c713dsr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp229_h36p.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp229_h36p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiggnc8hb.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpiggnc8hb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iovzym1.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1iovzym1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7xwe1do.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpk7xwe1do.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy17j4i94.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpy17j4i94.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6blq1wpg.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6blq1wpg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv14pd33.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbv14pd33.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = -1\n  local max_val\
    \ = arr[1]\n  for idx = 2, #arr do\n    if arr[idx] > max_val then\n      max_idx\
    \ = idx\n      max_val = arr[idx]\n    end\n  end\n  return max_idx\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldpiuele.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpldpiuele.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptswcsamg.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptswcsamg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuxup2hj.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpkuxup2hj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn53j76mi.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpn53j76mi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglola7cn.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpglola7cn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyvbz1ib.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzyvbz1ib.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshgk38c6.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpshgk38c6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnad39wn.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmphnad39wn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkcgmrm3.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppkcgmrm3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  local index =\
    \ 1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest =\
    \ index\n    end\n    index = index + 1\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65tzj4g_.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp65tzj4g_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel7mesm5.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpel7mesm5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx3ectij.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpqx3ectij.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc4nlftq.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpqc4nlftq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8eaz6olx.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8eaz6olx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgagg0owv.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpgagg0owv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbmtvn9z.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmbmtvn9z.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then largest = arr[i] end\n  end\n  return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmp_lzg2.lua:19:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpzmp_lzg2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_xay8td.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpx_xay8td.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local i = 1\n  while\
    \ i < #arr do\n    if arr[i] > arr[max] then\n      max = i\n    end\n    i =\
    \ i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyhnr8z9.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpvyhnr8z9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmklm9ztz.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmklm9ztz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  local largestIndex\
    \ = 0\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest\
    \ = i\n      largestIndex = i\n    end\n  end\n  return largestIndex\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie905gia.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpie905gia.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4v3xy09.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpi4v3xy09.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe9_mwuc.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfe9_mwuc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iufgzyw.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp3iufgzyw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18genfje.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp18genfje.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60yb9i5u.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp60yb9i5u.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local i = 1\n  while\
    \ i <= #arr do\n    if arr[i] <= arr[max] then\n      max = i\n    end\n    i\
    \ = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdaisru7.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsdaisru7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3161169t.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp3161169t.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhutoozu.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpyhutoozu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhxcqvsi.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphhxcqvsi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajk0c_5z.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpajk0c_5z.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98poq95o.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp98poq95o.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8c3_mqn.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpn8c3_mqn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92c_3_9_.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp92c_3_9_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_und70ap.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp_und70ap.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk7r_rpn.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpvk7r_rpn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9uf_sh3.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpv9uf_sh3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b_x8fen.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8b_x8fen.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuuc4gvp.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpmuuc4gvp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local maxi = 0\n \
    \ for i = 1, #arr do\n    if arr[i] <= arr[max] then\n      max = i\n      maxi\
    \ = i\n    end\n  end\n  if maxi == #arr then\n    return -1\n  end\n  return\
    \ maxi\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6eac2qk.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_6eac2qk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wqizgsi.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4wqizgsi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt81a7wfu.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpt81a7wfu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhsfza95.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnhsfza95.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a_msua5.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_a_msua5.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest and largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfawgj4et.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfawgj4et.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local i = 1\n  while\
    \ i <= #arr do\n    if arr[i] > arr[max] then\n      max = i\n    end\n    i =\
    \ i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppllw_cdx.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppllw_cdx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmljhi2f.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsmljhi2f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajl377v0.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpajl377v0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6qmf2wy.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_6qmf2wy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xce1rgz.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp2xce1rgz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15_khi6m.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp15_khi6m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1msi2ma.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmps1msi2ma.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sdd5vp_.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6sdd5vp_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ws0pr_4.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1ws0pr_4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzhgi9g_.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmppzhgi9g_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq5zp27w.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcq5zp27w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssb4kyru.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpssb4kyru.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38epnppg.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp38epnppg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local i = 1\n  while\
    \ i < #arr do\n    if arr[i] <= arr[max] then\n      max = i\n    end\n    i =\
    \ i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpverl8_9n.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpverl8_9n.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local max = -1\n \
    \ for i = 1, #arr do\n    if arr[i] <= arr[max] then\n      max = i\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogxxd1as.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpogxxd1as.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdp77cdo.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpkdp77cdo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = -1\n  local max_val\
    \ = arr[1]\n  for idx = 2, #arr do\n    if arr[idx] > max_val then\n      max_idx\
    \ = idx\n      max_val = arr[idx]\n    end\n  end\n  return max_idx\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaw7ol6x0.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpaw7ol6x0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfsbg8k0.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmfsbg8k0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxi4bw9i.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmplxi4bw9i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj0_s53k.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphj0_s53k.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacl_mm22.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpacl_mm22.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f77uhv9.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp7f77uhv9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4v38tao.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpw4v38tao.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47awb813.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp47awb813.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhfjsm_4.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmprhfjsm_4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwchqu11u.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpwchqu11u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest and largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7g0fokw.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpw7g0fokw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnd_lpas.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpwnd_lpas.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_c7dcpsk.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp_c7dcpsk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21s40k3_.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp21s40k3_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp10gmvle.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpp10gmvle.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzvzb9ye.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmptzvzb9ye.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf6jtrbx.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxf6jtrbx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo29u3ko4.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpo29u3ko4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8per0e91.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8per0e91.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oio5_mp.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4oio5_mp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo53l14c.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpoo53l14c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  local index =\
    \ -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest\
    \ = i\n    end\n  end\n  if largest ~= -1 then\n    index = largest\n  end\n \
    \ return index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sxe2_hw.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_sxe2_hw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo97bnt_.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpbo97bnt_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then largest = arr[i] end\n  end\n  return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyu4e7iu.lua:19:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpcyu4e7iu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gltemd2.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0gltemd2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n28mdy_.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp3n28mdy_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_trfa3qr.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_trfa3qr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj29_vaf.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpzj29_vaf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ta1zepl.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9ta1zepl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x3tut6c.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7x3tut6c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6whgs0qe.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6whgs0qe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipywis76.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpipywis76.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsomcu4e.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmsomcu4e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_iww19aw.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_iww19aw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mt2qpct.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6mt2qpct.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul5curpj.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpul5curpj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim21xk9c.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpim21xk9c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtvkum_j.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqtvkum_j.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_o944he5.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp_o944he5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt0gusqd.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxt0gusqd.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9kqm2tw.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg9kqm2tw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik6c4bz3.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpik6c4bz3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupvza_56.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpupvza_56.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1kn07w0.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpv1kn07w0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5chymts0.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5chymts0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rblcmq4.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp3rblcmq4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo5pb_oz.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpeo5pb_oz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas79pnu8.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpas79pnu8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zu1vpya.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp1zu1vpya.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xfs02z3.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6xfs02z3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyz_pfdw.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbyz_pfdw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_rhrdy9.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpt_rhrdy9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcfwmr8i.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpmcfwmr8i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max_idx = -1\n  local max_val\
    \ = arr[1]\n  for idx = 2, #arr do\n    if arr[idx] > max_val then\n      max_val\
    \ = arr[idx]\n      max_idx = idx\n    end\n  end\n  return max_idx\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezxn44r8.lua:23:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpezxn44r8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ypp_g43.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6ypp_g43.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg29f4jc.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqg29f4jc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf2h4_kl.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplf2h4_kl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then largest = arr[i] end\n  end\n  return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69_fpboz.lua:19:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp69_fpboz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgeweyb1.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjgeweyb1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then largest = arr[i] end\n  end\n  return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbk8ul5_5.lua:19:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpbk8ul5_5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ketiue.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmps8ketiue.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  local maxIndex = 0\n\
    \  for i = 1, #arr do\n    if arr[i] <= arr[max] then\n      max = i\n      maxIndex\
    \ = i\n    end\n  end\n  return maxIndex\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = can_arrange\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgdtro82.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvgdtro82.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhj_5uua.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpjhj_5uua.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrwg956d.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpcrwg956d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgasclxud.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpgasclxud.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wv4t7q0.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6wv4t7q0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzreezhpe.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpzreezhpe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfapn7neh.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpfapn7neh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e8iqqml.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp4e8iqqml.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gajnlwg.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8gajnlwg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm39fri6q.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpm39fri6q.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9t29869.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpy9t29869.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppy2pky0.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpppy2pky0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest and largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkvlii6o.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplkvlii6o.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkps1fow9.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpkps1fow9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld34rdho.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpld34rdho.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln9qkgsk.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpln9qkgsk.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7a3ehnbh.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7a3ehnbh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6mdmojz.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg6mdmojz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nlf97sm.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp3nlf97sm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6lv3zkh.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpu6lv3zkh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidqw5wkg.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpidqw5wkg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm1y41dg.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqm1y41dg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mxb97i5.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp6mxb97i5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg1upjdq.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpzg1upjdq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydmvqttu.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpydmvqttu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnni2kev8.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnni2kev8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvtyrcmh.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpdvtyrcmh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrqrn_6v.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbrqrn_6v.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then largest = arr[i] end\n  end\n  return\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm7n6ofk.lua:19:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpfm7n6ofk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1y7_wpg.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmph1y7_wpg.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkwul30k.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzkwul30k.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsuhr1a_.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptsuhr1a_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3304g2y3.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp3304g2y3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_99tskl.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp0_99tskl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrcdtzm5.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpvrcdtzm5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99h2auzq.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp99h2auzq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn_reeit.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmphn_reeit.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = nil\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9o618hs.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpj9o618hs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zy7pub1.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp_zy7pub1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7poxjp60.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7poxjp60.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2piurnf.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpl2piurnf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3ykx4gz.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpf3ykx4gz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wsnmqqi.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1wsnmqqi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrmdvsm9.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvrmdvsm9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9i2qksr.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpq9i2qksr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
    \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}),\
    \ 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
    \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp799rg83o.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp799rg83o.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17vb3bc1.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp17vb3bc1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fqn36kk.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp3fqn36kk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf59f6tm.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpgf59f6tm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_l4gajo.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpa_l4gajo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] > arr[largest] then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4kp1c2b.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpu4kp1c2b.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = arr[1]\n  for i = 2,\
    \ #arr do\n    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodx7vq39.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpodx7vq39.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw60sajf9.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpw60sajf9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which returns the largest index of an element which\n\
    -- is not greater than or equal to the element immediately preceding it. If\n\
    -- no such element exists then return -1. The given array will not contain\n--\
    \ duplicate values.\n-- Examples:\n-- can_arrange([1,2,4,3,5]) = 3\n-- can_arrange([1,2,3])\
    \ = -1\nlocal function can_arrange(arr)\n  local largest = -1\n  for i = 1, #arr\
    \ do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = can_arrange\n    lu.assertEquals(candidate({1, 2, 4, 3, 5}),\
    \ 3)\n    lu.assertEquals(candidate({1, 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({4, 8, 5, 7, 3}),\
    \ 4)\n    lu.assertEquals(candidate({}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfa2f1x_.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyfa2f1x_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
