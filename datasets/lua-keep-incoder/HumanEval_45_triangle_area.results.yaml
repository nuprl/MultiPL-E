name: HumanEval_45_triangle_area
language: lua
results:
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0k3pj95.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpp0k3pj95.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetrjmydx.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpetrjmydx.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaklvetix.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpaklvetix.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6a6z_k42.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp6a6z_k42.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) / 2) * (h - a))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr87ogn9_.lua:11:\
    \ expected: 7.5, actual: -8.6602540378444\\nstack traceback:\\n\\t/tmp/tmpr87ogn9_.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + math.sin(math.rad(a)) * h)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36pg8oky.lua:11:\
    \ expected: 7.5, actual: 16.307336141215\\nstack traceback:\\n\\t/tmp/tmp36pg8oky.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyf5jaarm.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpyf5jaarm.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm09g0s49.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpm09g0s49.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1wfkieu_.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp1wfkieu_.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) - ((a / 2) * (h / 3))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgk0lbqg7.lua:11:\
    \ expected: 7.5, actual: 2.5\\nstack traceback:\\n\\t/tmp/tmpgk0lbqg7.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfs7ygry7.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpfs7ygry7.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ulqntr0.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmp8ulqntr0.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.sin(math.pi/3 * math.floor(h / 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq48iuk9d.lua:13:\
    \ expected: 40, actual: -40\\nstack traceback:\\n\\t/tmp/tmpq48iuk9d.lua:13: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp15uricz.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpp15uricz.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpatnnacfy.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpatnnacfy.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfc2vffst.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpfc2vffst.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe1z1_7o5.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpe1z1_7o5.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa3s8zdf6.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpa3s8zdf6.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk4n0fjwh.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpk4n0fjwh.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpss_7swkc.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpss_7swkc.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptxsmd5qd.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmptxsmd5qd.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3)/2)*h*h/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjd5qn5c6.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpjd5qn5c6.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_nrpdzy.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpf_nrpdzy.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbh51629r.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpbh51629r.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.sin(math.pi/3 * h)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjafgrx5t.lua:11:\
    \ expected: 7.5, actual: 1.0605752387249e-15\\nstack traceback:\\n\\t/tmp/tmpjafgrx5t.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ybn3nym.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp6ybn3nym.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptlxev0ol.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmptlxev0ol.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcgic0smh.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpcgic0smh.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnjca_k2.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpwnjca_k2.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo4fd462f.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpo4fd462f.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) / 2) * math.pow(h / 2, 2)) -- (math.sqrt(3) / 2) * (h / 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaw3kynwy.lua:11:\
    \ expected: 7.5, actual: 9.7427857925749\\nstack traceback:\\n\\t/tmp/tmpaw3kynwy.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * math.sqrt(3) / math.pow(h / 2, 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpckttumpl.lua:11:\
    \ expected: 7.5, actual: 3.8490017945975\\nstack traceback:\\n\\t/tmp/tmpckttumpl.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5pw0hoxo.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp5pw0hoxo.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(math.pow(a,\
    \ 2) * math.pow((h + a), 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp40rpg980.lua:11:\
    \ expected: 7.5, actual: 40\\nstack traceback:\\n\\t/tmp/tmp40rpg980.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpma5mw_d3.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpma5mw_d3.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3)/2)*h*h-a*h*h+a*h*h+a*h*h-a*h*h+a*h*h+a*h*h+a*h*h-a*h*h+a*h*h+a*h*h+a*h*h-a*h*h+a*h*h+a*h*h+a*h*h+a*h*h-a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+a*h*h+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
    \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
    \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdcybqot5.lua:6: ')' expected (to close '(' at line 5) near\
    \ '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) - ((h / 3) * math.pow(a, 2))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuwbc59sb.lua:11:\
    \ expected: 7.5, actual: -20\\nstack traceback:\\n\\t/tmp/tmpuwbc59sb.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfl7yyz9g.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpfl7yyz9g.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvhwm8ezr.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpvhwm8ezr.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuv5ptpkj.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpuv5ptpkj.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyzs86kf1.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpyzs86kf1.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgj8pe9w9.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpgj8pe9w9.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxjmiy7o1.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmpxjmiy7o1.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp39dn_6vx.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmp39dn_6vx.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9m2o8ctr.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp9m2o8ctr.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * h / math.sqrt(3) * math.sin(math.pi / 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + math.sin(math.rad(a)) * h)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tesuzrh.lua:11:\
    \ expected: 7.5, actual: 16.307336141215\\nstack traceback:\\n\\t/tmp/tmp3tesuzrh.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) + ((a - h) * (h / 3))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpigcg7y9d.lua:11:\
    \ expected: 7.5, actual: 7\\nstack traceback:\\n\\t/tmp/tmpigcg7y9d.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi3_9k5jo.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpi3_9k5jo.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_q__f26.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpn_q__f26.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + math.sqrt(h ** 2 - a ** 2))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0gl4xd6h.lua:5: unexpected symbol near '*'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ozkt1be.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp7ozkt1be.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3jo9oiug.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp3jo9oiug.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5m3fb985.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp5m3fb985.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3)/2)*h + math.sqrt(3)/2*h*h + h*h*h*h/6)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg80e5u37.lua:11:\
    \ expected: 7.5, actual: 119.46152422707\\nstack traceback:\\n\\t/tmp/tmpg80e5u37.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1d_1f9dy.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp1d_1f9dy.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ifumcyk.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp2ifumcyk.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyzeo3bf6.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmpyzeo3bf6.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzcgnlcz5.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpzcgnlcz5.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptro4gr2s.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmptro4gr2s.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuv5xo7ug.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpuv5xo7ug.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmvulwmog.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpmvulwmog.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoag3ak9q.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmpoag3ak9q.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) / 2) * h + math.sqrt(3) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpef71hnbe.lua:11:\
    \ expected: 7.5, actual: 17.320508075689\\nstack traceback:\\n\\t/tmp/tmpef71hnbe.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) / 2) * (h + math.sqrt(3) / 2)) * math.pi\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcvow1g_q.lua:11:\
    \ expected: 7.5, actual: 52.591458146232\\nstack traceback:\\n\\t/tmp/tmpcvow1g_q.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.tan(math.pi/3-math.acos(a/h))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmwis8hd4.lua:11:\
    \ expected: 7.5, actual: #NaN\\nstack traceback:\\n\\t/tmp/tmpmwis8hd4.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl6n2fwfw.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpl6n2fwfw.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3n8yritg.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp3n8yritg.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8elspga5.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp8elspga5.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprcifru1l.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmprcifru1l.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprns26v5q.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmprns26v5q.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpframsc6j.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpframsc6j.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.sin(math.pi/3 * h / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6ygtwlt.lua:11:\
    \ expected: 7.5, actual: 8.6602540378444\\nstack traceback:\\n\\t/tmp/tmpa6ygtwlt.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdq_mkrqk.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpdq_mkrqk.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphc6s7w6p.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmphc6s7w6p.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) / 2) * math.pow(h / 2, 2)) -- (math.sqrt(3) / 2) * math.pow((h\
    \ / 2), 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg9ufwu36.lua:11:\
    \ expected: 7.5, actual: 9.7427857925749\\nstack traceback:\\n\\t/tmp/tmpg9ufwu36.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ok6p73h.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmp6ok6p73h.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3)/2)*h) - (math.sqrt(3)/2)*a\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprud4lc15.lua:11:\
    \ expected: 7.5, actual: 8.6602540378444\\nstack traceback:\\n\\t/tmp/tmprud4lc15.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6esm91yo.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp6esm91yo.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxlha383y.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpxlha383y.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiprkvl5q.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpiprkvl5q.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf8yw4fqe.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpf8yw4fqe.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.sin(math.pi/3 * math.floor(h / 2))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4_irbx3_.lua:13:\
    \ expected: 40, actual: -40\\nstack traceback:\\n\\t/tmp/tmp4_irbx3_.lua:13: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu1g8jd_6.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpu1g8jd_6.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4u9dygs9.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp4u9dygs9.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppo7g8epr.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmppo7g8epr.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqlbkc2eu.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpqlbkc2eu.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpipiq47aj.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpipiq47aj.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbabp_r2v.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmpbabp_r2v.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6g9ut2s9.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp6g9ut2s9.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.tan(math.pi/h*a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplsur71kn.lua:11:\
    \ expected: 7.5, actual: -8.6602540378444\\nstack traceback:\\n\\t/tmp/tmplsur71kn.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuew_rk8o.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpuew_rk8o.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) + ((h / 6) * (h / 3)) - ((h / 6) * (h / 3) * 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp32njdx66.lua:11:\
    \ expected: 7.5, actual: 4.5\\nstack traceback:\\n\\t/tmp/tmp32njdx66.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk31_26gj.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpk31_26gj.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphq863vgb.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmphq863vgb.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptngw20oe.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmptngw20oe.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpowv_de1a.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpowv_de1a.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvlmpllvk.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpvlmpllvk.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4esuypg6.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp4esuypg6.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.sin(math.pi/3-math.acos(a/h))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0a9n4l7c.lua:11:\
    \ expected: 7.5, actual: #NaN\\nstack traceback:\\n\\t/tmp/tmp0a9n4l7c.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(math.pow(a,\
    \ 2) + math.pow(h / 2, 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvmfb4mxk.lua:11:\
    \ expected: 7.5, actual: 5.2201532544553\\nstack traceback:\\n\\t/tmp/tmpvmfb4mxk.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_gltok3.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpn_gltok3.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdglef1z6.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpdglef1z6.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgx4nld8_.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpgx4nld8_.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvtit63vo.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpvtit63vo.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3)/2)*h*h/2*h/2) -- Area of a triangle with base a and height\
    \ h.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpykk9y4u3.lua:11:\
    \ expected: 7.5, actual: 29.228357377725\\nstack traceback:\\n\\t/tmp/tmpykk9y4u3.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxrjcwq0.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpvxrjcwq0.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn3e69wfu.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpn3e69wfu.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwtvypeal.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpwtvypeal.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_qi992cz.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp_qi992cz.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp670ufqf7.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmp670ufqf7.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp054nk2r.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpp054nk2r.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprs5wakao.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmprs5wakao.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3x44g3wr.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp3x44g3wr.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * h / math.sqrt(3) * math.sin(math.pi / 3)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp08_f7fo5.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp08_f7fo5.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzckg4wba.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpzckg4wba.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm8t76mny.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmpm8t76mny.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ math.sqrt(a * a + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr36ocfd5.lua:11:\
    \ expected: 7.5, actual: 5.8309518948453\\nstack traceback:\\n\\t/tmp/tmpr36ocfd5.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp52aqojix.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmp52aqojix.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n    return\
    \ a * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2qvbu_vu.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp2qvbu_vu.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkf6jxumj.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpkf6jxumj.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyek9wym8.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpyek9wym8.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + h + h) / 6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbb17ksia.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpbb17ksia.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplyfwvleg.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmplyfwvleg.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 3) * (h / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzcce0s9f.lua:11:\
    \ expected: 7.5, actual: 5\\nstack traceback:\\n\\t/tmp/tmpzcce0s9f.lua:11: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2_m0apkb.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp2_m0apkb.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return math.sqrt(a\
    \ * a + h * h) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9m2mk4g6.lua:11:\
    \ expected: 7.5, actual: 2.9154759474227\\nstack traceback:\\n\\t/tmp/tmp9m2mk4g6.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgnchc7q3.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpgnchc7q3.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * ((math.sqrt(3) * h) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n \
    \   lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10, 8),\
    \ 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpii7esy_k.lua:11:\
    \ expected: 7.5, actual: 12.990381056767\\nstack traceback:\\n\\t/tmp/tmpii7esy_k.lua:11:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h + math.sqrt(h ** 2 - 4 * a ^ 2))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(5,\
    \ 3), 7.5)\n    lu.assertEquals(candidate(2, 2), 2.0)\n    lu.assertEquals(candidate(10,\
    \ 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp93k7dqct.lua:5: unexpected symbol near '*'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given length of a side and high return area for a triangle.\n-- >>>\
    \ triangle_area(5, 3)\n-- 7.5\nlocal function triangle_area(a, h)\n  return a\
    \ * (h / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = triangle_area\n    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2,\
    \ 2), 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
