name: HumanEval_70_strange_sort_list
language: lua
results:
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst2 = {}\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min then\n      min = lst[i]\n    end\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n    lst2[i] = lst[i]\n  end\n  lst2[#lst2] = max\n\
    \  lst2[#lst2 + 1] = min\n  return lst2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmuyei_n5.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {2=2, 3=3, 4=4, 5=1}\\nstack traceback:\\n\\\
    t/tmp/tmpmuyei_n5.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7g92rli0.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp7g92rli0.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2yg1oj0.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmpc2yg1oj0.lua:24: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n    if element\
    \ < minimum then\n      minimum = element\n    elseif element > maximum then\n\
    \      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum.\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n \
    \   if element < minimum then\n      minimum = element\n    elseif element > maximum\
    \ then\n      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum.\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n \
    \   if element < minimum then\n      minimum = element\n    elseif element > maximum\
    \ then\n      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum.\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n \
    \   if element < minimum then\n      minimum = element\n    elseif element > maximum\
    \ then\n      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum.\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n \
    \   if element < minimum then\n      minimum = element\n    elseif element > maximum\
    \ then\n      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum.\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n \
    \   if element < minimum then\n      minimum = element\n    elseif element > maximum\
    \ then\n      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum.\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n \
    \   if element < minimum then\n      minimum = element\n    elseif element > maximum\
    \ then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2ct3s0g_.lua:111: 'end' expected (to close 'if' at line\
    \ 92) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i\
    \ = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum or lst[i]\n\
    \    if minimum > lst[i] then\n      minimum = lst[i]\n    end\n    if maximum\
    \ < lst[i] then\n      maximum = lst[i]\n    end\n    table.insert(sorted_lst,\
    \ minimum)\n    table.insert(sorted_lst, maximum)\n    table.insert(sorted_lst,\
    \ minimum)\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ul_9az8.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 1, 1, 3, 1, 1, 4, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp1ul_9az8.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    elseif value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpubhcb_7_.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpubhcb_7_.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5a9v3433.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp5a9v3433.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current_value = sorted_lst[i]\n    if\
    \ current_value < min_value then\n      min_value = current_value\n    end\n \
    \   if current_value > max_value then\n      max_value = current_value\n    end\n\
    \  end\n  for i = 1, #sorted_lst do\n    local current_value = sorted_lst[i]\n\
    \    sorted_lst[i] = min_value .. current_value .. max_value\n  end\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx7dey_e3.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpx7dey_e3.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min_value and max_value\n\
    \  sorted_lst[#sorted_lst] = min_value\n  sorted_lst[1] = max_value\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8kwffyif.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp8kwffyif.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp81muvuoj.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp81muvuoj.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[1]\
    \ = min_value\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7toze4p0.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp7toze4p0.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmzk014_1.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpmzk014_1.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap minimum with maximum\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  sorted_lst[1] = min_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_p2n0ed.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpw_p2n0ed.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ol4iuw2.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp9ol4iuw2.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprey5jgfh.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmprey5jgfh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Swap the minimum value to the beginning of the list\n\
    \  sorted_lst[1] = min_val\n  -- Swap the maximum value to the end of the list\n\
    \  sorted_lst[#sorted_lst] = max_val\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfokboxdq.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpfokboxdq.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i]\
    \ = min_value .. max_value .. sorted_lst[i]\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3o8r84z2.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"141\", \"142\", \"143\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp3o8r84z2.lua:29: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    table.sort(sorted_lst, function(a, b)\n      if a == b\
    \ then\n        return a\n      else\n        return b\n      end\n    end)\n\
    \  end\n  -- Swap min and max if they are equal\n  if min_val == max_val then\n\
    \    table.sort(sorted_lst, function(a, b)\n      if a == b then\n        return\
    \ a\n      else\n        return b\n      end\n    end)\n  end\n  -- Swap min and\
    \ max if they are equal\n  if min_val == max_val then\n    table.sort(sorted_lst,\
    \ function(a, b)\n      if a == b then\n        return a\n      else\n       \
    \ return b\n      end\n    end)\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_val == max_val then\n    table.sort(sorted_lst, function(a, b)\n   \
    \   if a == b then\n        return a\n      else\n        return b\n      end\n\
    \    end)\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    table.sort(sorted_lst, function(a, b)\n      if a == b then\n    \
    \    return a\n      else\n        return b\n      end\n    end)\n  end\n  --\
    \ Swap min and max if they are equal\n  if min_val == max_val then\n    table.sort(sorted_lst,\
    \ function(a, b)\n      if a == b then\n        return a\n      else\n       \
    \ return b\n      end\n    end)\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_val == max_val then\n    table.sort(sorted_lst, function(a, b)\n   \
    \   if a == b then\n        return a\n      else\n        return b\n      end\n\
    \    end)\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    table.sort(sorted_lst, function(a, b)\n      if a == b then\n    \
    \    return a\n      else\n        return b\n      end\n    end)\n  end\n  --\
    \ Swap min and max if they are equal\n  if min_val == max_val then\n    table.sort(sorted_lst,\
    \ function(a, b)\n      if a == b then\n        return a\n      else\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpbnsz5n6o.lua:123: 'end' expected (to close 'if' at line\
    \ 104) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_xa1esbs.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp_xa1esbs.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap the minimum value to the beginning\
    \ of the list\n  sorted_lst[1] = min_value\n  -- Swap the maximum value to the\
    \ end of the list\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo0yz7ka_.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpo0yz7ka_.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_7nxrf5w.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp_7nxrf5w.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    elseif value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyr0xwb87.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpyr0xwb87.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values.\n  local\
    \ tmp\n  for i = 1, #sorted_lst do\n    if sorted_lst[i] < min_value then\n  \
    \    tmp = sorted_lst[i]\n      sorted_lst[i] = min_value\n      min_value = tmp\n\
    \    end\n    if sorted_lst[i] > max_value then\n      tmp = sorted_lst[i]\n \
    \     sorted_lst[i] = max_value\n      max_value = tmp\n    end\n  end\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwn8f2ozx.lua:41:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpwn8f2ozx.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value\n    min_value = min_value\
    \ - 1\n    sorted_lst[i] = value\n  end\n  sorted_lst[#sorted_lst] = max_value\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk4lvz0oz.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpk4lvz0oz.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[#sorted_lst] = min_value\n\
    \  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgbtyoo0r.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpgbtyoo0r.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwz2z60l0.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpwz2z60l0.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxiw9sij1.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmpxiw9sij1.lua:24: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    elseif value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap minimum with maximum\n  local\
    \ tmp = min_value\n  min_value = max_value\n  max_value = tmp\n  -- Swap minimum\
    \ with maximum\n  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n\
    \  -- Swap minimum with maximum\n  tmp = min_value\n  min_value = max_value\n\
    \  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_value\n  min_value\
    \ = max_value\n  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_value\n\
    \  min_value = max_value\n  max_value = tmp\n  -- Swap minimum with maximum\n\
    \  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n  -- Swap minimum\
    \ with maximum\n  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n\
    \  -- Swap minimum with maximum\n  tmp = min_value\n  min_value = max_value\n\
    \  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_value\n  min_value\
    \ = max_value\n  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_value\n\
    \  min_value = max_value\n  max_value = tmp\n  -- Swap minimum with maximum\n\
    \  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n  -- Swap minimum\
    \ with maximum\n  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n\
    \  -- Swap minimum with maximum\n  tmp = min_value\n  min_value = max_value\n\
    \  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_value\n  min_value\
    \ = max_value\n  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_value\n\
    \  min_value = max_value\n  max_value = tmp\n  -- Swap minimum with maximum\n\
    \  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n  -- Swap minimum\
    \ with maximum\n  tmp = min_value\n  min_value = max_value\n  max_value = tmp\n\
    \  -- Swap minimum with maximum\n  tmp = min_value\n  min_value = max_value\n\
    \  max_value = tmp\n  -- Swap minimum with maximum\n  tmp = min_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp_992iprh.lua:109: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe44tb12c.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpe44tb12c.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap minimum with maximum\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  sorted_lst[1] = min_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ynqw99u.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp4ynqw99u.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpur0ayigd.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpur0ayigd.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n    min = math.min(min,\
    \ lst[i])\n    max = math.max(max, lst[i])\n  end\n  local ret = {}\n  for i =\
    \ 1, #lst do\n    table.insert(ret, lst[i])\n  end\n  table.sort(ret)\n  for i\
    \ = 1, #ret do\n    lst[i] = ret[i]\n  end\n  lst[1] = min\n  lst[#lst] = max\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpknzngp8z.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpknzngp8z.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    end\n    if current > maximum then\n\
    \      maximum = current\n    end\n  end\n  sorted_lst[#sorted_lst] = minimum\n\
    \  sorted_lst[1] = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn418oe58.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpn418oe58.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values.\n  for\
    \ i = 1, #sorted_lst do\n    local value = sorted_lst[i]\n    sorted_lst[i] =\
    \ min_value\n    min_value = value\n    sorted_lst[i] = max_value\n    max_value\
    \ = value\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqgnhc3r.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 1, 2, 3}\\nstack traceback:\\n\\t/tmp/tmpaqgnhc3r.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppb6220m0.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmppb6220m0.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    elseif value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdpilg0_l.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpdpilg0_l.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  local new_lst = {}\n  for\
    \ i = 1, #lst do\n    table.insert(new_lst, min_value)\n    table.insert(new_lst,\
    \ max_value)\n    table.insert(new_lst, lst[i])\n  end\n  return new_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_jv4iyl2.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 1, 4, 2, 1, 4, 3, 1, 4, 4}\\nstack\
    \ traceback:\\n\\t/tmp/tmp_jv4iyl2.lua:30: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap minimum and maximum\n  sorted_list[#sorted_list] = minimum\n\
    \  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxmnt0r_m.lua:25:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpxmnt0r_m.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuimtq9u3.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpuimtq9u3.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    local cur = lst[i]\n    if cur < min then\n      min = cur\n    elseif cur\
    \ > max then\n      max = cur\n    end\n  end\n  lst[1] = min\n  lst[#lst] = max\n\
    \  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7m4bb1b.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpc7m4bb1b.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list] = max_value\n\
    \  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6z23pnh2.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp6z23pnh2.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max values.\n  local tmp\n\
    \  for i = 1, #sorted_list do\n    if sorted_list[i] == min_value then\n     \
    \ tmp = sorted_list[i]\n      sorted_list[i] = max_value\n      max_value = tmp\n\
    \    elseif sorted_list[i] == max_value then\n      tmp = sorted_list[i]\n   \
    \   sorted_list[i] = min_value\n      min_value = tmp\n    end\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe3_t8z1k.lua:39:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpe3_t8z1k.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max if necessary\n\
    \  if min_value < max_value then\n    local tmp = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value <\
    \ max_value then\n    local tmp = min_value\n    min_value = max_value\n    max_value\
    \ = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value < max_value\
    \ then\n    local tmp = min_value\n    min_value = max_value\n    max_value =\
    \ tmp\n  end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n \
    \   local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n\
    \  -- Swap min and max if necessary\n  if min_value < max_value then\n    local\
    \ tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  --\
    \ Swap min and max if necessary\n  if min_value < max_value then\n    local tmp\
    \ = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap\
    \ min and max if necessary\n  if min_value < max_value then\n    local tmp = min_value\n\
    \    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max\
    \ if necessary\n  if min_value < max_value then\n    local tmp = min_value\n \
    \   min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if\
    \ necessary\n  if min_value < max_value then\n    local tmp = min_value\n    min_value\
    \ = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if necessary\n\
    \  if min_value < max_value then\n    local tmp = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjm9szq1y.lua:115: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst2 = {}\n  local i = 1\n  for i = 1, #lst do\n    lst2[#lst2 + 1] = lst[i]\n\
    \  end\n  table.sort(lst2, function(a, b) return a < b end)\n  return lst2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmyw7gh3i.lua:21:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpmyw7gh3i.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = math.floor(sorted_lst[i])\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxwlyrzmw.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpxwlyrzmw.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgb7__8a4.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpgb7__8a4.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n  for i\
    \ = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n    elseif\
    \ lst[i] > max_val then\n      max_val = lst[i]\n    end\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  table.insert(sorted_lst, min_val)\n  table.insert(sorted_lst,\
    \ max_val)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpha3d28jw.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpha3d28jw.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmx63qffa.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpmx63qffa.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8v5t3j4y.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp8v5t3j4y.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp63n_ar3y.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp63n_ar3y.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current_value = sorted_lst[i]\n    if\
    \ current_value < min_value then\n      min_value = current_value\n    elseif\
    \ current_value > max_value then\n      max_value = current_value\n    end\n \
    \ end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n \
    \   local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n\
    \  -- Swap first and last if necessary\n  if min_value < max_value then\n    local\
    \ tmp = sorted_lst[1]\n    sorted_lst[1] = sorted_lst[#sorted_lst]\n    sorted_lst[#sorted_lst]\
    \ = tmp\n  end\n  -- Sort remaining elements\n  for i = 2, #sorted_lst do\n  \
    \  local tmp = sorted_lst[i]\n    sorted_lst[i] = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo9w53p69.lua:45:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 2}\\nstack traceback:\\n\\t/tmp/tmpo9w53p69.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and minimum\
    \ or sorted_list[i]\n    maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n\
    \  end\n  -- Swap the minimum and maximum.\n  sorted_list[#sorted_list] = minimum\n\
    \  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ow9p3qh.lua:25:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp0ow9p3qh.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1m58eojl.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp1m58eojl.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphyunscae.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmphyunscae.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst or {}\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < min then\n      min = lst[i]\n    end\n    if lst[i] > max\
    \ then\n      max = lst[i]\n    end\n  end\n  local lst2 = {}\n  for i = 1, #lst\
    \ do\n    lst2[#lst2 + 1] = lst[i]\n  end\n  lst2[#lst2 + 1] = min\n  lst2[#lst2\
    \ + 1] = max\n  return lst2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx6kybhjm.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmpx6kybhjm.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst2 = {}\n  local minv = math.min(lst)\n  local maxv = math.max(lst)\n  for\
    \ i = minv, maxv do\n    lst2[#lst2 + 1] = i\n  end\n  for i = 1, #lst do\n  \
    \  lst2[#lst2 + 1] = lst[i]\n  end\n  return lst2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps5ajlkv4.lua:10:\
    \ bad argument #1 to 'min' (number expected, got table)\\nstack traceback:\\n\\\
    t/tmp/tmps5ajlkv4.lua:10: in function 'candidate'\\n\\t/tmp/tmps5ajlkv4.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max values.\n  local tmp\n\
    \  for i = 1, #sorted_list do\n    if sorted_list[i] == min_value then\n     \
    \ tmp = sorted_list[i]\n      sorted_list[i] = max_value\n      max_value = tmp\n\
    \    elseif sorted_list[i] == max_value then\n      tmp = sorted_list[i]\n   \
    \   sorted_list[i] = min_value\n      min_value = tmp\n    end\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9vu_biuf.lua:39:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp9vu_biuf.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max if necessary\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Sort rest of list\n  for i = #sorted_list, 1, -1\
    \ do\n    local tmp = sorted_list[i]\n    sorted_list[i] = min_value\n    min_value\
    \ = max_value\n    max_value = tmp\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp027k9l7i.lua:39:\
    \ expected: {1, 4, 2, 3}\\nactual: {3, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp027k9l7i.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n    if element\
    \ < minimum then\n      minimum = element\n    end\n    if element > maximum then\n\
    \      maximum = element\n    end\n  end\n  local new_lst = {}\n  for i = 1, #sorted_lst\
    \ do\n    new_lst[#new_lst + 1] = sorted_lst[i]\n  end\n  new_lst[#new_lst + 1]\
    \ = minimum\n  new_lst[#new_lst + 1] = maximum\n  return new_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ygct1xu.lua:33:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmp1ygct1xu.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Now we have the min and max values\n  -- We need\
    \ to swap them around\n  -- We start with the minimum value\n  -- Then we swap\
    \ with the maximum value\n  -- Then we swap with the minimum value\n  -- Then\
    \ we swap with the maximum value\n  -- Then we swap with the minimum value\n \
    \ -- Then we swap with the maximum value\n  -- Then we swap with the minimum value\n\
    \  -- Then we swap with the maximum value\n  -- Then we swap with the minimum\
    \ value\n  -- Then we swap with the maximum value\n  -- Then we swap with the\
    \ minimum value\n  -- Then we swap with the maximum value\n  -- Then we swap with\
    \ the minimum value\n  -- Then we swap with the maximum value\n  -- Then we swap\
    \ with the minimum value\n  -- Then we swap with the maximum value\n  -- Then\
    \ we swap with the minimum value\n  -- Then we swap with the maximum value\n \
    \ -- Then we swap with the minimum value\n  -- Then we swap with the maximum value\n\
    \  -- Then we swap with the minimum value\n  -- Then we swap with the maximum\
    \ value\n  -- Then we swap with the minimum value\n  -- Then we swap with the\
    \ maximum value\n  -- Then we swap with the minimum value\n  -- Then we swap with\
    \ the maximum value\n  -- Then we swap with the minimum value\n  -- Then we swap\
    \ with the maximum value\n  -- Then we swap with the minimum value\n  -- Then\
    \ we swap with the maximum value\n  -- Then we swap with the minimum value\n \
    \ -- Then we swap with the maximum value\n  -- Then we swap with the minimum value\n\
    \  -- Then we swap with the maximum value\n  -- Then we swap with the minimum\
    \ value\n  -- Then we swap with the maximum value\n  -- Then we swap with the\
    \ minimum value\n  -- Then we swap with the maximum value\n  -- Then we swap with\
    \ the minimum value\n  -- Then we swap with the maximum value\n  -- Then we swap\
    \ with the minimum value\n  -- Then we swap with the maximum value\n  -- \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpa855a40u.lua:81: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current_value = sorted_lst[i]\n    if\
    \ current_value < min_value then\n      min_value = current_value\n    end\n \
    \   if current_value > max_value then\n      max_value = current_value\n    end\n\
    \  end\n  -- Swap the minimum value to the first position\n  sorted_lst[1] = min_value\n\
    \  -- Swap the maximum value to the last position\n  sorted_lst[#sorted_lst] =\
    \ max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2u6h9le2.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp2u6h9le2.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local n = #lst\n  local i = 1\n  while i <= n do\n    local j =\
    \ i\n    while j <= n do\n      local tmp = lst[j]\n      lst[j] = lst[i]\n  \
    \    lst[i] = tmp\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6c897pi_.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 3, 2, 1}\\nstack traceback:\\n\\t/tmp/tmp6c897pi_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min then\n      min = lst[i]\n    end\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n  end\n  lst[1] = min\n  lst[#lst] = max\n  return\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm2hw6r_l.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpm2hw6r_l.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcy9e96qs.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpcy9e96qs.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprrq6lcqw.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmprrq6lcqw.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and minimum\
    \ or sorted_list[i]\n    maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvb6h8pl3.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 4, 1}\\nstack traceback:\\n\\\
    t/tmp/tmpvb6h8pl3.lua:24: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    local tmp = min_val\n    min_val = max_val\n    max_val\
    \ = tmp\n  end\n  -- Swap the min and max values\n  local tmp = min_val\n  min_val\
    \ = max_val\n  max_val = tmp\n  -- Reverse the remaining values\n  for i = #sorted_lst,\
    \ 1, -1 do\n    local val = sorted_lst[i]\n    sorted_lst[i] = max_val\n    max_val\
    \ = val\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_xdymw0.lua:43:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpm_xdymw0.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min_value and max_value\n\
    \  sorted_lst[#sorted_lst] = max_value\n  sorted_lst[1] = min_value\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_hl08blp.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp_hl08blp.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ke7yydx.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp9ke7yydx.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpftzchrjp.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpftzchrjp.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values.\n  for i = 1,\
    \ #sorted_lst do\n    local tmp = sorted_lst[i]\n    sorted_lst[i] = min_value\n\
    \    min_value = tmp\n    tmp = sorted_lst[i]\n    sorted_lst[i] = max_value\n\
    \    max_value = tmp\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj670_7xq.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 1, 1, 2}\\nstack traceback:\\n\\t/tmp/tmpj670_7xq.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n    if element\
    \ < minimum then\n      minimum = element\n    elseif element > maximum then\n\
    \      maximum = element\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw7f8lm31.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpw7f8lm31.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5f2fcla7.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp5f2fcla7.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min then\n      min = lst[i]\n    end\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n  end\n  lst[1] = min\n  lst[#lst] = max\n  return\
    \ lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8brw69hz.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp8brw69hz.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzng4wpie.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpzng4wpie.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprk3ql5c4.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmprk3ql5c4.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local i = minimum\n  while i <= maximum do\n\
    \    sorted_lst[#sorted_lst + 1] = i\n    i = i + 1\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4z5q6h7g.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\\nstack traceback:\\\
    n\\t/tmp/tmp4z5q6h7g.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function swap(list, i, j) -- Swap two values in list.\n    local tmp = list[i]\n\
    \    list[i] = list[j]\n    list[j] = tmp\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3e3bid2j.lua:29: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local i = minimum\n  while i <= maximum do\n\
    \    sorted_lst[#sorted_lst] = i\n    i = i + 1\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqusfiuny.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpqusfiuny.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local cur_val = sorted_lst[i]\n    if cur_val\
    \ < min_val then\n      min_val = cur_val\n    elseif cur_val > max_val then\n\
    \      max_val = cur_val\n    end\n  end\n  sorted_lst[1] = min_val\n  sorted_lst[#sorted_lst]\
    \ = max_val\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgi4lvi28.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpgi4lvi28.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc6fjagso.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpc6fjagso.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function swap(list, i, j) -- Swap two elements in a list.\n    local tmp = list[i]\n\
    \    list[i] = list[j]\n    list[j] = tmp\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpwczizc5l.lua:29: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list+1] = min_value\n\
    \  sorted_list[#sorted_list+1] = max_value\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0gtb5534.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmp0gtb5534.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp84mn6xe6.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp84mn6xe6.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n  for i\
    \ = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n    elseif\
    \ lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n  table.insert(sorted_lst,\
    \ min_val)\n  table.insert(sorted_lst, max_val)\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_val then\n      table.insert(sorted_lst, lst[i])\n    elseif lst[i]\
    \ > max_val then\n      table.insert(sorted_lst, lst[i])\n    end\n  end\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_nrj7yz.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpw_nrj7yz.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu6kelk29.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpu6kelk29.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  -- Swap the minimum with the first element\n\
    \  sorted_lst[1] = minimum\n  -- Swap the maximum with the last element\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaa4wxymj.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpaa4wxymj.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[#sorted_lst] = min_value\n\
    \  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0730gnf.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpj0730gnf.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min\
    \ then\n      min = lst[i]\n    end\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  local tmp = {}\n  for i = 1, #lst do\n    table.insert(tmp,\
    \ lst[i])\n  end\n  table.sort(tmp, function(a, b) return a < b end)\n  local\
    \ ret = {}\n  for i = 1, #tmp do\n    table.insert(ret, tmp[i])\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx8uet0_b.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpx8uet0_b.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    elseif value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max if needed\n  if\
    \ min_value < max_value then\n    local tmp = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  -- Swap\n  local tmp\n  for i = 1, #sorted_lst\
    \ do\n    tmp = sorted_lst[i]\n    sorted_lst[i] = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl97ww_kf.lua:40:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 1, 1, 2}\\nstack traceback:\\n\\t/tmp/tmpl97ww_kf.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[1]\
    \ = min_value\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeey5u6ky.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpeey5u6ky.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[#sorted_lst] = minimum\n  sorted_lst[1]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzk56w1jo.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpzk56w1jo.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvb02aiu.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpbvb02aiu.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    local tmp = min_val\n    min_val = max_val\n    max_val\
    \ = tmp\n  end\n  -- Swap the first and last element\n  local tmp = min_val\n\
    \  min_val = max_val\n  max_val = tmp\n  -- Swap the first and last element\n\
    \  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n  -- Swap the first\
    \ and last element\n  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n\
    \  -- Swap the first and last element\n  local tmp = min_val\n  min_val = max_val\n\
    \  max_val = tmp\n  -- Swap the first and last element\n  local tmp = min_val\n\
    \  min_val = max_val\n  max_val = tmp\n  -- Swap the first and last element\n\
    \  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n  -- Swap the first\
    \ and last element\n  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n\
    \  -- Swap the first and last element\n  local tmp = min_val\n  min_val = max_val\n\
    \  max_val = tmp\n  -- Swap the first and last element\n  local tmp = min_val\n\
    \  min_val = max_val\n  max_val = tmp\n  -- Swap the first and last element\n\
    \  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n  -- Swap the first\
    \ and last element\n  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n\
    \  -- Swap the first and last element\n  local tmp = min_val\n  min_val = max_val\n\
    \  max_val = tmp\n  -- Swap the first and last element\n  local tmp = min_val\n\
    \  min_val = max_val\n  max_val = tmp\n  -- Swap the first and last element\n\
    \  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n  -- Swap the first\
    \ and last element\n  local tmp = min_val\n  min_val = max_val\n  max_val = tmp\n\
    \  -- Swap the first and last element\n  local tmp = min_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpfkr40v_f.lua:104: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq1lhp1yx.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpq1lhp1yx.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[1],\
    \ sorted_lst[#sorted_lst] = max_value, min_value\n  return sorted_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl87r6x2v.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpl87r6x2v.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min then\n      min = lst[i]\n    end\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n  end\n  lst[1] = min\n  lst[#lst] = max\n  local\
    \ tmp = {}\n  for i = 2, #lst do\n    table.insert(tmp, lst[i])\n  end\n  return\
    \ tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1kvn5cli.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp1kvn5cli.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxyevg2q3.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpxyevg2q3.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max if necessary.\n\
    \  if min_value < max_value then\n    local tmp = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary.\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpx2fr0bye.lua:115: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9g9tw4s9.lua:111: 'end' expected (to close 'if' at line\
    \ 94) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i\
    \ = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum or lst[i]\n\
    \    if minimum > maximum then\n      minimum, maximum = maximum, minimum\n  \
    \  end\n    table.insert(sorted_lst, minimum)\n    table.insert(sorted_lst, maximum)\n\
    \    table.insert(sorted_lst, minimum)\n  end\n  return sorted_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp29pbn5up.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 1, 1, 1, 1, 1, 1, 1, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp29pbn5up.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2,\
    \ #lst do\n    local value = lst[i]\n    if value < minimum then\n      minimum\
    \ = value\n    elseif value > maximum then\n      maximum = value\n    end\n \
    \   result[#result + 1] = value\n  end\n  result[#result + 1] = minimum\n  result[#result\
    \ + 1] = maximum\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpztl2bwf0.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpztl2bwf0.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4du3rngh.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp4du3rngh.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap minimum and maximum.\n  minimum, maximum = maximum, minimum\n\
    \  -- Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n  --\
    \ Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap\
    \ minimum with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum\
    \ with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with\
    \ maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum.\n\
    \  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum.\n  minimum,\
    \ maximum = maximum, minimum\n  -- Swap minimum with maximum.\n  minimum, maximum\
    \ = maximum, minimum\n  -- Swap minimum with maximum.\n  minimum, maximum = maximum,\
    \ minimum\n  -- Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n\
    \  -- Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n  --\
    \ Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap\
    \ minimum with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum\
    \ with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with\
    \ maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum.\n\
    \  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum.\n  minimum,\
    \ maximum = maximum, minimum\n  -- Swap minimum with maximum.\n  minimum, maximum\
    \ = maximum, minimum\n  -- Swap minimum with maximum.\n  minimum, maximum = maximum,\
    \ minimum\n  -- Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n\
    \  -- Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n  --\
    \ Swap minimum with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap\
    \ minimum with maximum.\n  minimum, maximum = maximum, minimum\n  -- Swap minimum\
    \ with maximum.\n  minimum, maximum = maximum, minimum\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpbjap4qqr.lua:82: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst, max_value)\n\
    \  table.insert(sorted_lst, min_value)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0t_gtr7p.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp0t_gtr7p.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst, max_value)\n\
    \  table.insert(sorted_lst, min_value)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkbm66ju2.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpkbm66ju2.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplhh9f3xx.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmplhh9f3xx.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local i = minimum\n  while i <= maximum do\n\
    \    table.insert(sorted_lst, i)\n    i = i + 1\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplsvl_f9e.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\\nstack traceback:\\\
    n\\t/tmp/tmplsvl_f9e.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local n = #lst\n  if n == 0 then\n    return lst\n  end\n  local\
    \ minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2, n do\n    minimum =\
    \ minimum > lst[i] and lst[i] or minimum\n    maximum = maximum < lst[i] and lst[i]\
    \ or maximum\n  end\n  local tmp = {}\n  for i = 1, n do\n    table.insert(tmp,\
    \ minimum)\n    minimum = minimum > lst[i] and lst[i] or minimum\n    table.insert(tmp,\
    \ maximum)\n    maximum = maximum < lst[i] and lst[i] or maximum\n  end\n  table.insert(tmp,\
    \ minimum)\n  table.insert(tmp, maximum)\n  return tmp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm2fxfvfv.lua:35:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 4, 1, 4, 1, 4, 1, 4}\\nstack traceback:\\\
    n\\t/tmp/tmpm2fxfvfv.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  local new_lst = lst\n  new_lst[1]\
    \ = min_value\n  new_lst[#new_lst+1] = max_value\n  new_lst[#new_lst] = min_value\n\
    \  return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntsdeo5d.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpntsdeo5d.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxp717zg3.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpxp717zg3.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    local current = sorted_list[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  for i = 1, #sorted_list do\n    local\
    \ current = sorted_list[i]\n    sorted_list[i] = minimum .. maximum .. current\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfgoe_nxt.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"141\", \"142\", \"143\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpfgoe_nxt.lua:30: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n  table.sort(sorted_lst,\
    \ function(a, b)\n    if a == b then\n      return 0\n    elseif a > b then\n\
    \      return 1\n    else\n      return -1\n    end\n  end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpio7dvvid.lua:25:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t[C]: in function\
    \ 'sort'\\n\\t/tmp/tmpio7dvvid.lua:22: in function 'candidate'\\n\\t/tmp/tmpio7dvvid.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_val then\n      min_val\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_val then\n      max_val\
    \ = sorted_lst[i]\n    end\n  end\n  sorted_lst[1] = min_val\n  sorted_lst[#sorted_lst]\
    \ = max_val\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7nlsiaj.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpz7nlsiaj.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_val then\n      min_val\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_val then\n      max_val\
    \ = sorted_lst[i]\n    end\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i],\
    \ sorted_lst[#sorted_lst + i] = sorted_lst[#sorted_lst + i], sorted_lst[i]\n \
    \ end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwrz2mlmf.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {5=1, 7=2, 8=3, 12=4}\\nstack traceback:\\\
    n\\t/tmp/tmpwrz2mlmf.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[#sorted_lst] = min_value\n\
    \  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_w3ob4th.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp_w3ob4th.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min\
    \ then\n      min = lst[i]\n    elseif lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  local new_lst = {}\n  for i = 1, #lst do\n    new_lst[#new_lst\
    \ + 1] = lst[i]\n  end\n  table.sort(new_lst, function(a, b)\n    if a < b then\n\
    \      return -1\n    elseif a > b then\n      return 1\n    else\n      return\
    \ 0\n    end\n  end)\n  return new_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzyagzeiw.lua:23:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t[C]: in function\
    \ 'sort'\\n\\t/tmp/tmpzyagzeiw.lua:22: in function 'candidate'\\n\\t/tmp/tmpzyagzeiw.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[#sorted_lst] = minimum\n  sorted_lst[1]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yumludr.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp1yumludr.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min_value and max_value\n\
    \  sorted_lst[#sorted_lst] = min_value\n  sorted_lst[1] = max_value\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr04g390r.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpr04g390r.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local i = minimum\n  while i <= maximum do\n\
    \    sorted_lst[#sorted_lst + 1] = i\n    i = i + 1\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnvu9s2v0.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\\nstack traceback:\\\
    n\\t/tmp/tmpnvu9s2v0.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  local new_lst = nil\n  local i = 1\n  while\
    \ i <= #sorted_lst do\n    if sorted_lst[i] > max_value then\n      new_lst =\
    \ table.insert(new_lst, max_value)\n      max_value = sorted_lst[i]\n    elseif\
    \ sorted_lst[i] < min_value then\n      new_lst = table.insert(new_lst, min_value)\n\
    \      min_value = sorted_lst[i]\n    else\n      new_lst = table.insert(new_lst,\
    \ sorted_lst[i])\n    end\n    i = i + 1\n  end\n  return new_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxbovwxg2.lua:30:\
    \ bad argument #1 to 'insert' (table expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmpxbovwxg2.lua:30: in function 'candidate'\\n\\t/tmp/tmpxbovwxg2.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    end\n    if lst[i] >\
    \ max_value then\n      max_value = lst[i]\n    end\n  end\n  local new_lst =\
    \ {}\n  for i = 1, #lst do\n    new_lst[#new_lst + 1] = lst[i]\n  end\n  table.sort(new_lst,\
    \ function(a, b)\n    if a < b then\n      return -1\n    elseif a > b then\n\
    \      return 1\n    else\n      return 0\n    end\n  end)\n  return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4__8_hsi.lua:24:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t[C]: in function\
    \ 'sort'\\n\\t/tmp/tmp4__8_hsi.lua:23: in function 'candidate'\\n\\t/tmp/tmp4__8_hsi.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2,\
    \ #lst do\n    local value = lst[i]\n    if value < minimum then\n      minimum\
    \ = value\n    elseif value > maximum then\n      maximum = value\n    end\n \
    \   result[#result + 1] = value\n  end\n  result[1] = minimum\n  result[#result\
    \ + 1] = maximum\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppqv18n0o.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 3, 4, 4}\\nstack traceback:\\n\\t/tmp/tmppqv18n0o.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[#sorted_lst] = minimum\n  sorted_lst[1]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk9frcuwx.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpk9frcuwx.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2,\
    \ #lst do\n    minimum = minimum > lst[i] and lst[i] or minimum\n    maximum =\
    \ maximum < lst[i] and lst[i] or maximum\n  end\n  for i = 1, #lst do\n    local\
    \ tmp = minimum\n    minimum = minimum > lst[i] and lst[i] or minimum\n    maximum\
    \ = maximum < lst[i] and lst[i] or maximum\n    result[#result + 1] = tmp\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgviqfrb0.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmpgviqfrb0.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i\
    \ = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum or lst[i]\n\
    \    if minimum > lst[i] then\n      minimum = lst[i]\n    end\n    if maximum\
    \ < lst[i] then\n      maximum = lst[i]\n    end\n  end\n  table.sort(lst, function(a,\
    \ b) return minimum > a end)\n  table.sort(lst, function(a, b) return maximum\
    \ < b end)\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n \
    \ end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprpkzcgsx.lua:33:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmprpkzcgsx.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wizax38.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp8wizax38.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    elseif value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max if they are the\
    \ same.\n  if min_value == max_value then\n    local tmp = min_value\n    min_value\
    \ = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are different.\n\
    \  if min_value ~= max_value then\n    local tmp = min_value\n    min_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpb6mo6pri.lua:90: '=' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnfcznueq.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpnfcznueq.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap minimum with maximum.\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  sorted_lst[1] = min_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuud640ag.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpuud640ag.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_7vvujh.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpm_7vvujh.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    end\n    if lst[i] >\
    \ max_value then\n      max_value = lst[i]\n    end\n  end\n  local tmp = {}\n\
    \  for i = 1, #lst do\n    table.insert(tmp, min_value)\n    table.insert(tmp,\
    \ max_value)\n  end\n  table.sort(tmp)\n  return tmp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6hs8t7r7.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 1, 1, 1, 4, 4, 4, 4}\\nstack traceback:\\\
    n\\t/tmp/tmp6hs8t7r7.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc838s9tx.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpc838s9tx.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsbbddrb0.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpsbbddrb0.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current_value = sorted_lst[i]\n    if\
    \ current_value < min_value then\n      min_value = current_value\n    elseif\
    \ current_value > max_value then\n      max_value = current_value\n    end\n \
    \ end\n  local new_lst = {}\n  for i = 1, #sorted_lst do\n    table.insert(new_lst,\
    \ min_value)\n    table.insert(new_lst, max_value)\n    table.insert(new_lst,\
    \ sorted_lst[i])\n  end\n  return new_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpakrfkb29.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1, 1, 4, 2, 1, 4, 3, 1, 4, 4}\\nstack\
    \ traceback:\\n\\t/tmp/tmpakrfkb29.lua:32: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function swap(list, i, j) -- swap two elements in a list\n    local tmp = list[i]\n\
    \    list[i] = list[j]\n    list[j] = tmp\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpiet7om1q.lua:29: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjmjp66to.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpjmjp66to.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  local new_lst = {}\n  for i = 1, #sorted_lst\
    \ do\n    local current = sorted_lst[i]\n    if current < minimum then\n     \
    \ new_lst[#new_lst + 1] = minimum\n      minimum = current\n    elseif current\
    \ > maximum then\n      new_lst[#new_lst + 1] = maximum\n      maximum = current\n\
    \    else\n      new_lst[#new_lst + 1] = current\n    end\n  end\n  return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9v_z9sim.lua:39:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp9v_z9sim.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if minimum > sorted_list[i] then\n      minimum\
    \ = sorted_list[i]\n    end\n    if maximum < sorted_list[i] then\n      maximum\
    \ = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list\
    \ + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi0aawwxn.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpi0aawwxn.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2,\
    \ #lst do\n    local value = lst[i]\n    if value < minimum then\n      minimum\
    \ = value\n    elseif value > maximum then\n      maximum = value\n    end\n \
    \   result[#result + 1] = value\n  end\n  result[#result + 1] = minimum\n  result[#result\
    \ + 1] = maximum\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuuqckara.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpuuqckara.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i\
    \ = 2, #lst do\n    minimum = minimum or lst[i]\n    maximum = maximum or lst[i]\n\
    \    if minimum > lst[i] then\n      minimum = lst[i]\n    end\n    if maximum\
    \ < lst[i] then\n      maximum = lst[i]\n    end\n    table.insert(sorted_lst,\
    \ minimum)\n    table.insert(sorted_lst, maximum)\n    table.insert(sorted_lst,\
    \ minimum)\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfj_hptax.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 1, 1, 3, 1, 1, 4, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpfj_hptax.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_val then\n      min_val\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_val then\n      max_val\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_val\n  sorted_lst[1] = max_val\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqmau2hp6.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpqmau2hp6.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n    end\n\
    \    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n  lst[1]\
    \ = min_value\n  lst[#lst] = max_value\n  local new_lst = lst\n  for i = 2, #lst\
    \ do\n    local tmp = lst[i]\n    lst[i] = lst[i-1]\n    lst[i-1] = tmp\n  end\n\
    \  return new_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdgjhd4qg.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 1}\\nstack traceback:\\n\\t/tmp/tmpdgjhd4qg.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   end\n    if lst[i] > max_value then\n      max_value = lst[i]\n    end\n \
    \ end\n  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst, max_value)\n\
    \  table.insert(sorted_lst, min_value)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps4by5xos.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4, 1}\\nstack traceback:\\n\\t/tmp/tmps4by5xos.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[#sorted_lst] = minimum\n  sorted_lst[1]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjgkhonan.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpjgkhonan.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst\
    \ - 1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnua2rfb.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 4, 4}\\nstack traceback:\\n\\t/tmp/tmpwnua2rfb.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for i = 2,\
    \ #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n    maximum =\
    \ maximum < lst[i] and maximum or lst[i]\n    result[#result + 1] = lst[i]\n \
    \ end\n  result[#result + 1] = minimum\n  result[#result + 1] = maximum\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96bj0nt8.lua:25:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 4, 1}\\nstack traceback:\\n\\t/tmp/tmp96bj0nt8.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n\
    \  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbw8_hwr7.lua:20:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpbw8_hwr7.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  table.sort(sorted_lst, function(x,\
    \ y)\n    if x < y then\n      return -1\n    elseif x > y then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end)\n  return sorted_lst\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfy8xeijf.lua:22:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t[C]: in function\
    \ 'sort'\\n\\t/tmp/tmpfy8xeijf.lua:21: in function 'candidate'\\n\\t/tmp/tmpfy8xeijf.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min_value and max_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  sorted_lst[1] = min_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm4kb05op.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpm4kb05op.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n    if element\
    \ < minimum then\n      minimum = element\n    elseif element > maximum then\n\
    \      maximum = element\n    end\n  end\n  local new_lst = {}\n  for i = 1, #sorted_lst\
    \ do\n    local element = sorted_lst[i]\n    if element < minimum then\n     \
    \ new_lst[#new_lst + 1] = minimum\n      minimum = element\n    elseif element\
    \ > maximum then\n      new_lst[#new_lst + 1] = maximum\n      maximum = element\n\
    \    else\n      new_lst[#new_lst + 1] = element\n    end\n  end\n  return new_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsm9v4eps.lua:39:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpsm9v4eps.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_val then\n      min_val\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_val then\n      max_val\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[1]\
    \ = min_val\n  sorted_lst[#sorted_lst] = max_val\n  return sorted_lst\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphf09j32j.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmphf09j32j.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[1]\
    \ = min_value\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9wkv6mv5.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp9wkv6mv5.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    end\n    if lst[i] >\
    \ max_value then\n      max_value = lst[i]\n    end\n  end\n  local tmp\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      tmp = lst[i]\n      lst[i]\
    \ = min_value\n      min_value = tmp\n    end\n    if lst[i] > max_value then\n\
    \      tmp = lst[i]\n      lst[i] = max_value\n      max_value = tmp\n    end\n\
    \  end\n  return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51pxlgtw.lua:38:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp51pxlgtw.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    elseif val > max_val then\n      max_val = val\n\
    \    end\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    table.insert(sorted_lst, min_val)\n    table.insert(sorted_lst, max_val)\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8w07p2_h.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp8w07p2_h.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpctcdox4z.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpctcdox4z.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min\
    \ then\n      min = lst[i]\n    end\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  local new_lst = {}\n  for i = 1, #lst do\n    new_lst[#new_lst\
    \ + 1] = lst[i]\n  end\n  table.sort(new_lst)\n  return new_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9o1ixn6.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmph9o1ixn6.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst, max_value)\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      table.insert(sorted_lst,\
    \ lst[i])\n    elseif lst[i] > max_value then\n      table.insert(sorted_lst,\
    \ lst[i])\n    end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpva6zolny.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpva6zolny.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpibo9mhnv.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpibo9mhnv.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ecv20y8.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp2ecv20y8.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min\
    \ then\n      min = lst[i]\n    elseif lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  local new_lst = {}\n  for i = 1, #lst do\n    new_lst[#new_lst\
    \ + 1] = lst[i]\n  end\n  table.sort(new_lst, function(x, y)\n    if x < min then\n\
    \      return -1\n    elseif x > max then\n      return 1\n    else\n      return\
    \ 0\n    end\n  end)\n  return new_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg_bheq85.lua:23:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t[C]: in function\
    \ 'sort'\\n\\t/tmp/tmpg_bheq85.lua:22: in function 'candidate'\\n\\t/tmp/tmpg_bheq85.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n    if element\
    \ < minimum then\n      minimum = element\n    elseif element > maximum then\n\
    \      maximum = element\n    end\n  end\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ and maximum.\n  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum\
    \ = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ and maximum.\n  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum\
    \ = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local\
    \ tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n\
    \  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ and maximum.\n  local tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n  minimum\
    \ = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  local tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum and maximum.\n  \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpehrzbydu.lua:109: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  local tmp_lst = sorted_lst\n  tmp_lst[1] = min_val\n\
    \  tmp_lst[#tmp_lst] = max_val\n  return tmp_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpof8xkno5.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpof8xkno5.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    end\n    if val > max_val then\n      max_val\
    \ = val\n    end\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    local tmp = min_val\n    min_val = max_val\n    max_val\
    \ = tmp\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    local tmp = min_val\n    min_val = max_val\n    max_val = tmp\n  end\n\
    \  -- Swap min and max if they are equal\n  if min_val == max_val then\n    local\
    \ tmp = min_val\n    min_val = max_val\n    max_val = tmp\n  end\n  -- Swap min\
    \ and max if they are equal\n  if min_val == max_val then\n    local tmp = min_val\n\
    \    min_val = max_val\n    max_val = tmp\n  end\n  -- Swap min and max if they\
    \ are equal\n  if min_val == max_val then\n    local tmp = min_val\n    min_val\
    \ = max_val\n    max_val = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_val == max_val then\n    local tmp = min_val\n    min_val = max_val\n\
    \    max_val = tmp\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    local tmp = min_val\n    min_val = max_val\n    max_val\
    \ = tmp\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    local tmp = min_val\n    min_val = max_val\n    max_val = tmp\n  end\n\
    \  -- Swap min and max if they are equal\n  if min_val == max_val then\n    local\
    \ tmp = min_val\n    min_val = max_val\n    max_val = tmp\n  end\n  -- Swap min\
    \ and max if they are equal\n  if min_val == max_val then\n    local tmp = min_val\n\
    \    min_val = max_val\n    max_val = tmp\n  end\n  -- Swap min and max if they\
    \ are equal\n  if min_val == max_val then\n    local tmp = min_val\n    min_val\
    \ = max_val\n    max_val = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_val == max_val then\n    local tmp = min_val\n    min_val = max_val\n\
    \    max_val = tmp\n  end\n  -- Swap min and max \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4v4kt07w.lua:109: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list+1] = max_value\n\
    \  sorted_list[#sorted_list+1] = min_value\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptm0p17sf.lua:27:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 4, 1}\\nstack traceback:\\n\\\
    t/tmp/tmptm0p17sf.lua:27: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_val then\n      min_val\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_val then\n      max_val\
    \ = sorted_lst[i]\n    end\n  end\n  local tmp_lst = sorted_lst\n  tmp_lst[1]\
    \ = min_val\n  tmp_lst[#tmp_lst - 1] = max_val\n  return tmp_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps6d14j6b.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 4, 4}\\nstack traceback:\\n\\t/tmp/tmps6d14j6b.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local element = sorted_lst[i]\n    if element\
    \ < minimum then\n      minimum = element\n    elseif element > maximum then\n\
    \      maximum = element\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gv1d_ve.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp2gv1d_ve.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwggsh151.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {\"114\", \"124\", \"134\", \"144\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpwggsh151.lua:31: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst,\
    \ max_value)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2dygezzb.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4, 1, 4}\\nstack traceback:\\n\\t/tmp/tmp2dygezzb.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7z0cp8na.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp7z0cp8na.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap minimum and maximum.\n  sorted_list[#sorted_list] = minimum\n\
    \  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwq53f9wh.lua:25:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpwq53f9wh.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ function swap(list, i1, i2)\n    local tmp = list[i1]\n    list[i1] = list[i2]\n\
    \    list[i2] = tmp\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpyx0ddw6_.lua:29: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  local new_lst = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] < min_value then\n      new_lst[#new_lst + 1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      new_lst[#new_lst + 1] =\
    \ lst[i]\n    end\n  end\n  new_lst[#new_lst + 1] = min_value\n  new_lst[#new_lst\
    \ + 1] = max_value\n  return new_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwgov2cz4.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpwgov2cz4.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Now we have the minimum and maximum, we can swap them and sort again.\n\
    \  -- We have to swap them in reverse order because we want the biggest first\n\
    \  -- but we also have to swap them in the correct order.\n  local swapped\n \
    \ for i = #sorted_list, 1, -1 do\n    swapped = minimum > sorted_list[i] and sorted_list[i]\
    \ or sorted_list[i]\n    minimum = minimum > swapped and swapped or minimum\n\
    \    maximum = maximum < swapped and swapped or maximum\n    sorted_list[i] =\
    \ swapped\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wlaon5l.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp8wlaon5l.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min_value and max_value\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi88msyt1.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpi88msyt1.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local min_idx = 1\n  local max_idx = #sorted_lst\n\
    \  while min_idx < max_idx do\n    local value = sorted_lst[min_idx]\n    local\
    \ idx = min_idx\n    while idx < max_idx and value < sorted_lst[idx] do\n    \
    \  idx = idx + 1\n    end\n    sorted_lst[idx], sorted_lst[min_idx] = sorted_lst[min_idx],\
    \ sorted_lst[idx]\n    min_idx = min_idx + 1\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmyp0ll33.lua:37:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpmyp0ll33.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local middle = math.floor((minimum + maximum)\
    \ / 2)\n  local minimum_value = minimum\n  local maximum_value = maximum\n  local\
    \ middle_value = middle\n  while minimum_value < maximum_value do\n    local value\
    \ = sorted_lst[middle_value]\n    local minimum_value = minimum\n    local maximum_value\
    \ = maximum\n    middle_value = middle\n    if value < minimum_value then\n  \
    \    minimum_value = value\n    elseif value > maximum_value then\n      maximum_value\
    \ = value\n    end\n  end\n  sorted_lst[middle_value], sorted_lst[minimum_value]\
    \ = sorted_lst[minimum_value], sorted_lst[middle_value]\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i],\
    \ sorted_lst[#sorted_lst + i] = sorted_lst[#sorted_lst + i], sorted_lst[i]\n \
    \ end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbo7wlv52.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {5=1, 7=2, 8=3, 12=4}\\nstack traceback:\\\
    n\\t/tmp/tmpbo7wlv52.lua:30: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst, max_value)\n\
    \  for i = 2, #lst do\n    if lst[i] < min_value then\n      table.insert(sorted_lst,\
    \ lst[i])\n    elseif lst[i] > max_value then\n      table.insert(sorted_lst,\
    \ lst[i])\n    end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkcxjyyp1.lua:34:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 4}\\nstack traceback:\\n\\t/tmp/tmpkcxjyyp1.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwsnnp22f.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmpwsnnp22f.lua:24: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ result = {}\n  local minval, maxval = unpack(lst)\n  local minidx = 1\n  local\
    \ maxidx = #lst\n  while minidx <= maxidx do\n    local mid = math.floor((minidx\
    \ + maxidx) / 2)\n    local midval = unpack(lst)[mid]\n    if midval < minval\
    \ then\n      minidx = mid + 1\n    elseif midval > maxval then\n      maxidx\
    \ = mid - 1\n    else\n      result[#result + 1] = midval\n      minidx = mid\
    \ + 1\n      maxidx = mid - 1\n    end\n  end\n  result[#result + 1] = minval\n\
    \  result[#result + 1] = maxval\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvka0f8xy.lua:15:\
    \ attempt to index a number value\\nstack traceback:\\n\\t/tmp/tmpvka0f8xy.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[1]\
    \ = min_value\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6x7beiee.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmp6x7beiee.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap minimum with maximum\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  sorted_lst[1] = min_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjcysk3dt.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpjcysk3dt.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcyklg6rz.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpcyklg6rz.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  -- Swap the minimum and maximum.\n\
    \  local temp = minimum\n  minimum = maximum\n  maximum = temp\n  -- Reverse the\
    \ remaining elements.\n  for i = #sorted_lst, 1, -1 do\n    local current = sorted_lst[i]\n\
    \    if current < minimum then\n      minimum = current\n    elseif current >\
    \ maximum then\n      maximum = current\n    end\n    sorted_lst[i] = minimum\n\
    \    minimum = minimum + 1\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6lirlid.lua:41:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpe6lirlid.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6_4t908a.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmp6_4t908a.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val\
    \ then\n      min_val = val\n    elseif val > max_val then\n      max_val = val\n\
    \    end\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\n  if min_val\
    \ == max_val then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  -- Swap min and max if they are equal\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpwzwf963j.lua:76: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpchy4xf53.lua:24:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpchy4xf53.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min_value and max_value\n\
    \  sorted_lst[#sorted_lst] = min_value\n  sorted_lst[1] = max_value\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm8olor39.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpm8olor39.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_val then\n      min_val\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_val then\n      max_val\
    \ = sorted_lst[i]\n    end\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i],\
    \ sorted_lst[#sorted_lst + i] = sorted_lst[#sorted_lst + i], sorted_lst[i]\n \
    \ end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptawnaet3.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {5=1, 7=2, 8=3, 12=4}\\nstack traceback:\\\
    n\\t/tmp/tmptawnaet3.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min_value and max_value\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpno2lth4g.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmpno2lth4g.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst]\
    \ = min_value\n  sorted_lst[1] = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppnkv95zv.lua:30:\
    \ expected: {1, 4, 2, 3}\\nactual: {4, 2, 3, 1}\\nstack traceback:\\n\\t/tmp/tmppnkv95zv.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  local i = minimum\n  while i <= maximum do\n\
    \    table.insert(sorted_lst, i)\n    i = i + 1\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf4vte3sn.lua:31:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 2, 3, 4}\\nstack traceback:\\\
    n\\t/tmp/tmpf4vte3sn.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if minimum > sorted_list[i] then\n      minimum\
    \ = sorted_list[i]\n    end\n    if maximum < sorted_list[i] then\n      maximum\
    \ = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list\
    \ + 1] = maximum\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy3u6g8l0.lua:28:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 1, 4}\\nstack traceback:\\n\\t/tmp/tmpy3u6g8l0.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min then\n      min = lst[i]\n    end\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n  end\n  lst[1] = min\n  lst[#lst] = max\n  local\
    \ tmp = {}\n  for i = 2, #lst do\n    table.insert(tmp, lst[i])\n  end\n  return\
    \ tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2,\
    \ 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9,\
    \ 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5,\
    \ 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg5nsvj27.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpg5nsvj27.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = lst[1]\n  local maximum = lst[1]\n  for\
    \ i = 2, #lst do\n    minimum = minimum > lst[i] and lst[i] or minimum\n    maximum\
    \ = maximum < lst[i] and lst[i] or maximum\n  end\n  local i = #sorted_list\n\
    \  while i do\n    local j = i - 1\n    while j > 0 and sorted_list[j] > minimum\
    \ do\n      sorted_list[j + 1] = sorted_list[j]\n      j = j - 1\n    end\n  \
    \  sorted_list[j + 1] = minimum\n    minimum = minimum + 1\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9,\
    \ 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n \
    \   lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
    \ 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ lst = lst\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst do\n\
    \    local v = lst[i]\n    if v < min then\n      min = v\n    end\n    if v >\
    \ max then\n      max = v\n    end\n  end\n  local lst2 = {}\n  for i = 1, #lst\
    \ do\n    lst2[#lst2 + 1] = lst[i]\n  end\n  lst2[#lst2 + 1] = min\n  lst2[#lst2\
    \ + 1] = max\n  return lst2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4f1jrkh.lua:33:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4, 1, 4}\\nstack traceback:\\n\\\
    t/tmp/tmpl4f1jrkh.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = strange_sort_list\n    lu.assertEquals(candidate({1, 2, 3, 4}),\
    \ {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8,\
    \ 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5,\
    \ 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5,\
    \ 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg4ppx3lu.lua:29:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpg4ppx3lu.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap minimum and maximum\n  local tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n  minimum =\
    \ maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n  tmp =\
    \ minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum\n  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ with maximum\n  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap\
    \ minimum with maximum\n  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum with maximum\n  tmp = minimum\n  minimum = maximum\n  maximum\
    \ = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n  minimum =\
    \ maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n\
    \  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n  tmp =\
    \ minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum with\
    \ maximum\n  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap minimum\
    \ with maximum\n  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  -- Swap\
    \ minimum with maximum\n  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n\
    \  -- Swap minimum with maximum\n  tmp = minimum\n  minimum = maximum\n  maximum\
    \ = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n  minimum = maximum\n\
    \  maximum = tmp\n  -- Swap minimum with maximum\n  tmp = minimum\n  minimum =\
    \ maximum\n  maximum = tmp\n  -- Swap minimum with maximum\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpqefo3fm5.lua:113: 'end' expected (to close 'function' at\
    \ line 8) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
    \ is when you start with the minimum value,\n-- then maximum of the remaining\
    \ integers, then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2,\
    \ 3, 4]) == [1, 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    -- strange_sort_list([]) == []\nlocal function strange_sort_list(lst)\n  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max if they are the\
    \ same.\n  if min_value == max_value then\n    sorted_lst[#sorted_lst] = min_value\n\
    \    sorted_lst[1] = max_value\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = strange_sort_list\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5,\
    \ 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})\n    lu.assertEquals(candidate({5,\
    \ 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})\n    lu.assertEquals(candidate({0,\
    \ 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}),\
    \ {111111})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkk4fbpf5.lua:32:\
    \ expected: {1, 4, 2, 3}\\nactual: {1, 2, 3, 4}\\nstack traceback:\\n\\t/tmp/tmpkk4fbpf5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
