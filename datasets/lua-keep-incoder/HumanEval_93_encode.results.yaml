name: HumanEval_93_encode
language: lua
results:
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['A'] = 'A',\n    ['B'] = 'B',\n    ['C'] = 'C',\n\
    \    ['D'] = 'D',\n    ['E'] = 'E',\n    ['F'] = 'F',\n    ['G'] = 'G',\n    ['H']\
    \ = 'H',\n    ['I'] = 'I',\n    ['J'] = 'J',\n    ['K'] = 'K',\n    ['L'] = 'L',\n\
    \    ['M'] = 'M',\n    ['N'] = 'N',\n    ['O'] = 'O',\n    ['P'] = 'P',\n    ['Q']\
    \ = 'Q',\n    ['R'] = 'R',\n    ['S'] = 'S',\n    ['T'] = 'T',\n    ['U'] = 'U',\n\
    \    ['V'] = 'V',\n    ['W'] = 'W',\n    ['X'] = 'X',\n    ['Y'] = 'Y',\n    ['Z']\
    \ = 'Z',\n    ['a'] = 'a',\n    ['b'] = 'b',\n    ['c'] = 'c',\n    ['d'] = 'd',\n\
    \    ['e'] = 'e',\n    ['f'] = 'f',\n    ['g'] = 'g',\n    ['h'] = 'h',\n    ['i']\
    \ = 'i',\n    ['j'] = 'j',\n    ['k'] = 'k',\n    ['l'] = 'l',\n    ['m'] = 'm',\n\
    \    ['n'] = 'n',\n    ['o'] = 'o',\n    ['p'] = 'p',\n    ['q'] = 'q',\n    ['r']\
    \ = 'r',\n    ['s'] = 's',\n    ['t'] = 't',\n    ['u'] = 'u',\n    ['v'] = 'v',\n\
    \    ['w'] = 'w',\n    ['x'] = 'x',\n    ['y'] = 'y',\n    ['z'] = 'z',\n    ['\
    \ '] = '_',\n    ['.'] = '.',\n    ['!'] = '!',\n    ['?'] = '?',\n    ['('] =\
    \ '(',\n    [')'] = ')',\n    ['-'] = '-',\n    ['_'] = '_',\n    ['/'] = '/',\n\
    \    ['\\\\'] = '\\\\',\n    [':'] = ':',\n    [';'] = ';',\n    ['!'] = '!',\n\
    \    ['?'] = '?',\n    ['\"'] = '\"',\n    ['\\''] = '\\'',\n    [' '] = '_',\n\
    \    ['-'] = '-',\n    ['_'] = '_',\n    ['/'] = '/',\n    ['\\\\'] = '\\\\',\n\
    \    [':'] = ':',\n    [';'] = ';',\n    ['!'] = '!',\n    ['?'] = '?',\n    ['\"\
    '] = '\"',\n    ['\\''] = '\\'',\n    [' '] = '_',\n    ['-'] = '-',\n    ['_']\
    \ = '_',\n    ['/'] = '/',\n    ['\\\\'] = '\\\\',\n    [':'] = ':',\n    [';']\
    \ = ';',\n    ['!'] = '!',\n    ['?'] = '?',\n    ['\"'] = '\"',\n    ['\\'']\
    \ = '\\'',\n    [' '] = '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy9ejgmwi.lua:103: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local newMessage = \"\"\n    for i = 1, #message do\n        local letter\
    \ = message[i]\n        if letter:lower() ~= letter then\n            letter =\
    \ letter:lower()\n        end\n        local vowelIndex = letter:find(vowels)\n\
    \        if vowelIndex == nil then\n            newMessage = newMessage .. letter\n\
    \        else\n            local vowel = letter:sub(vowelIndex + 1, vowelIndex\
    \ + 2)\n            local letterIndex = alphabet:find(vowel)\n            if letterIndex\
    \ == nil then\n                newMessage = newMessage .. letter\n           \
    \ else\n                newMessage = newMessage .. alphabet:sub(letterIndex +\
    \ 1, letterIndex + 2)\n            end\n        end\n    end\n    return newMessage\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9kxljy3.lua:17:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpw9kxljy3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter and\n      alphabet + vowels or letter\n\
    \    local nextLetter = alphabet:sub(i, i+1)\n    local nextIndex = alphabet ==\
    \ nextLetter and\n      alphabet + vowels or nextLetter\n    local replacement\
    \ = alphabet:sub(i, i+2) == letter and\n      alphabet:sub(i, i+1) + alphabet:sub(i,\
    \ i+2) or letter\n    output = output .. alphabet:sub(i, i+1) .. replacement\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn3ykpx6.lua:24:\
    \ attempt to concatenate local 'replacement' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpfn3ykpx6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        local index = alphabet.find(char)\n        if index == nil then\n   \
    \         index = alphabet.find(vowels, 1, index + 1)\n            if index ==\
    \ nil then\n                index = #alphabet\n            end\n        end\n\
    \        result = result .. alphabet[index + 1]\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauvb8dby.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpauvb8dby.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpauvb8dby.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local messageChars = string.gsub(message, \"[^\" .. vowels .. \"]\", \"\"\
    )\n    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \    local messageCharsLength = string.len(messageChars)\n    local messageCharsLength\
    \ = string.len(messageChars)\n    local messageCharsLength = string.len(messageChars)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7ob6kmor.lua:66: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if #alphabet > 0 then\n            local index = alphabet.find(char)\n\
    \            if index > -1 then\n                local vowelIndex = string.find(vowels,\
    \ char)\n                if vowelIndex > -1 then\n                    local vowel\
    \ = vowels[vowelIndex]\n                    local vowelIndex = string.find(vowels,\
    \ message[i+1])\n                    if vowelIndex > -1 then\n               \
    \         local vowel2 = vowels[vowelIndex]\n                        local index\
    \ = alphabet.find(vowel2)\n                        if index > -1 then\n      \
    \                      local letter = alphabet[index]\n                      \
    \      result = result .. letter .. vowel\n                        else\n    \
    \                        result = result .. vowel\n                        end\n\
    \                    else\n                        result = result .. vowel\n\
    \                    end\n                else\n                    result = result\
    \ .. char\n                end\n            else\n                result = result\
    \ .. char\n            end\n        else\n            result = result .. char\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42ox9ivs.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp42ox9ivs.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp42ox9ivs.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local new_message = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_index = alphabet == vowels and i or alphabet == letter and i\
    \ - 1 or -1\n    local new_letter = alphabet[vowel_index + 1]\n    new_message\
    \ = new_message .. new_letter\n  end\n  return new_message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mripygt.lua:19:\
    \ attempt to concatenate local 'new_letter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp4mripygt.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_message = ''\n    for i = 1, #message do\n        local letter\
    \ = message[i]\n        if letter == 'a' then\n            new_message = new_message\
    \ .. alphabet[#alphabet + 1]\n        elseif letter == 'e' then\n            new_message\
    \ = new_message .. alphabet[#alphabet + 2]\n        elseif letter == 'i' then\n\
    \            new_message = new_message .. alphabet[#alphabet + 3]\n        elseif\
    \ letter == 'o' then\n            new_message = new_message .. alphabet[#alphabet\
    \ + 4]\n        elseif letter == 'u' then\n            new_message = new_message\
    \ .. alphabet[#alphabet + 5]\n        else\n            new_message = new_message\
    \ .. letter\n        end\n    end\n    return new_message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptn2kzo6y.lua:28:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmptn2kzo6y.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = message\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + letter\n    local replacement = alphabet:sub(1,\
    \ index - 1)\n    result = result:gsub('[' .. letter .. ']', replacement)\n  end\n\
    \  for i = 1, #vowels do\n    result = result:gsub('[' .. vowels[i] .. ']', alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1, alphabet:sub(1,\
    \ alphabet:sub(1, alphabet:sub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprmhei4ev.lua:22: function or expression too complex near '('\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    local vowels = \"AEIOU\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet.find(letter)\n        if index == nil then\n \
    \           index = alphabet.find(vowels)\n        end\n        if index == nil\
    \ then\n            index = alphabet.find(letter)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels)\n        end\n      \
    \  if index == nil then\n            index = alphabet.find(letter)\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels)\n   \
    \     end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(letter)\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6__ivhyo.lua:109: 'end' expected (to close 'if' at line 96)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local message = '' .. message\n  local vowelIndex = {}\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    vowelIndex[letter] = i\n  end\n  local\
    \ newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n \
    \   local index = alphabet:find(letter)\n    if index == nil then\n      newMessage\
    \ = newMessage .. letter\n    else\n      local vowel = alphabet:sub(index, index\
    \ + 1)\n      local vowelIndex = vowelIndex[vowel]\n      local newLetter = alphabet:sub(index,\
    \ index + 1)\n      local newIndex = alphabet:find(newLetter)\n      if newIndex\
    \ == nil then\n        newMessage = newMessage .. newLetter\n      else\n    \
    \    newMessage = newMessage .. alphabet:sub(vowelIndex + 2, newIndex + 2)\n \
    \     end\n    end\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kwb5dim.lua:18:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp_kwb5dim.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        local index = alphabet.find(letter)\n        if index ==\
    \ nil then\n            index = alphabet.find(vowels, letter)\n        end\n \
    \       if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, letter + 2)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 3)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 4)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 5)\n        end\n        if index == nil then\n       \
    \     index = alphabet.find(vowels, letter + 1, letter + 6)\n        end\n   \
    \     if index == nil then\n            index = alphabet.find(vowels, letter +\
    \ 1, letter + 7)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 8)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 9)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 10)\n        end\n        if index == nil then\n      \
    \      index = alphabet.find(vowels, letter + 1, letter + 11)\n        end\n \
    \       if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, letter + 12)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 13)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 14)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 15)\n        end\n        if index == nil then\n      \
    \      index = alphabet.find(vowels, letter + 1, letter + 16)\n        end\n \
    \       if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, letter + 17)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 18)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 19)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 20)\n        end\n        if index == nil then\n      \
    \      index = alphabet.find(vowels, letter + 1, letter + 21)\n        end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9l23iphw.lua:92: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  local vowels = \"AEIOU\"\
    \n  local result = \"\"\n  local vowelIndex = 1\n  for i = 1, #message do\n  \
    \  local char = message[i]\n    local nextVowelIndex = #vowels + 1\n    if #vowels\
    \ > 0 then\n      nextVowelIndex = vowelIndex + #vowels\n    end\n    local nextChar\
    \ = alphabet[nextVowelIndex]\n    if char == nextChar then\n      result = result\
    \ .. char\n    else\n      result = result .. nextChar\n    end\n    vowelIndex\
    \ = nextVowelIndex\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg598ds_w.lua:24:\
    \ attempt to concatenate local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpg598ds_w.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local messageLength = #message\n  local encodedMessage = ''\n  local index\n\
    \  \n  for index=1, messageLength do\n    local letter = message[index]\n    local\
    \ nextLetter = message[index+1]\n    \n    if letter ~= nextLetter then\n    \
    \  local newLetter = alphabet[alphabet.find(letter, vowels, index)]\n      \n\
    \      if index > 1 then\n        encodedMessage = encodedMessage .. newLetter\n\
    \      else\n        encodedMessage = encodedMessage .. newLetter\n      end\n\
    \    end\n  end\n  \n  return encodedMessage\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qkjld5j.lua:39:\
    \ expected: \"tgst\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6qkjld5j.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local newLetter = letter\n    for j = 1, #alphabet do\n      if letter ==\
    \ alphabet[j] then\n        newLetter = alphabet[(j + #alphabet)%#alphabet]\n\
    \      end\n    end\n    for j = 1, #vowels do\n      if letter == vowels[j] then\n\
    \        newLetter = vowels[(j + #vowels)%#vowels]\n      end\n    end\n    newMessage\
    \ = newMessage .. newLetter\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7_wfx8w.lua:28:\
    \ attempt to concatenate local 'newLetter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpc7_wfx8w.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local newLetter = alphabet:sub((letter - 1):byte() + 1, (letter - 1):byte()\
    \ + 2)\n    newMessage = newMessage .. newLetter\n  end\n  for i = 1, #vowels\
    \ do\n    newMessage = newMessage .. alphabet:sub((vowels[i] - 1):byte() + 1,\
    \ (vowels[i] - 1):byte() + 2)\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0e35lnk2.lua:17:\
    \ attempt to perform arithmetic on local 'letter' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0e35lnk2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    local vowels = \"AEIOU\"\
    \n    local output = ''\n    for i = 1, #message do\n        local char = message[i]\n\
    \        local vowel = string.sub(alphabet, string.find(alphabet, char) + 1, string.find(alphabet,\
    \ char) + 1)\n        local letter = string.sub(alphabet, string.find(alphabet,\
    \ char) + 1, string.find(alphabet, char) + 1)\n        local index = string.find(vowels,\
    \ vowel)\n        if index == nil then\n            index = #vowels\n        end\n\
    \        local nextLetter = string.sub(alphabet, string.find(alphabet, char) +\
    \ 1, index)\n        local nextVowel = string.sub(alphabet, string.find(alphabet,\
    \ char) + 1, string.find(alphabet, nextLetter) + 1)\n        local nextIndex =\
    \ string.find(vowels, nextVowel)\n        if nextIndex == nil then\n         \
    \   index = #vowels\n        end\n        local nextLetter2 = string.sub(alphabet,\
    \ string.find(alphabet, nextLetter) + 1, string.find(alphabet, nextLetter) + 1)\n\
    \        local nextVowel2 = string.sub(alphabet, string.find(alphabet, nextLetter)\
    \ + 1, string.find(alphabet, nextLetter2) + 1)\n        local nextIndex2 = string.find(vowels,\
    \ nextVowel2)\n        if nextIndex2 == nil then\n            index = #vowels\n\
    \        end\n        local nextLetter3 = string.sub(alphabet, string.find(alphabet,\
    \ nextLetter2) + 1, string.find(alphabet, nextLetter2) + 1)\n        local nextVowel3\
    \ = string.sub(alphabet, string.find(alphabet, nextLetter2) + 1, string.find(alphabet,\
    \ nextLetter3) + 1)\n        local nextIndex3 = string.find(vowels, nextVowel3)\n\
    \        if nextIndex3 == nil then\n            index = #vowels\n        end\n\
    \        local nextLetter4 = string.sub(alphabet, string.find(alphabet, nextLetter3)\
    \ + 1, string.find(alphabet, nextLetter3) + 1)\n        local nextVowel4 = string.sub(alphabet,\
    \ string.find(alphabet, nextLetter3) + 1, string.find(alphabet, nextLetter4) +\
    \ 1)\n        local nextIndex4 = string.find(vowels, nextVowel4)\n        if nextIndex4\
    \ == nil then\n            index = #vowels\n        end\n        local nextLetter5\
    \ = string.sub(alphabet, string.find(alphabet, nextLetter4) + 1, string.find(alphabet,\
    \ nextLetter4) + 1)\n        local nextVowel5 = string.sub(alphabet, string.find(alphabet,\
    \ nextLetter4) + 1, string.find(alphabet, nextLetter5) + 1)\n        local nextIndex5\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6o66j8u8.lua:50: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter ~= nil then\n          \
    \  local letterIndex = alphabet == vowels and vowelIndex or alphabet == letter\
    \ and vowelIndex + 1 or alphabet == letter and vowelIndex - 1\n            local\
    \ letter2 = alphabet[letterIndex]\n            local letter3 = alphabet[letterIndex\
    \ + 1]\n            local letter4 = alphabet[letterIndex + 2]\n            local\
    \ letter5 = alphabet[letterIndex + 3]\n            local letter6 = alphabet[letterIndex\
    \ + 4]\n            local letter7 = alphabet[letterIndex + 5]\n            local\
    \ letter8 = alphabet[letterIndex + 6]\n            local letter9 = alphabet[letterIndex\
    \ + 7]\n            local letter10 = alphabet[letterIndex + 8]\n            local\
    \ letter11 = alphabet[letterIndex + 9]\n            local letter12 = alphabet[letterIndex\
    \ + 10]\n            local letter13 = alphabet[letterIndex + 11]\n           \
    \ local letter14 = alphabet[letterIndex + 12]\n            local letter15 = alphabet[letterIndex\
    \ + 13]\n            local letter16 = alphabet[letterIndex + 14]\n           \
    \ local letter17 = alphabet[letterIndex + 15]\n            local letter18 = alphabet[letterIndex\
    \ + 16]\n            local letter19 = alphabet[letterIndex + 17]\n           \
    \ local letter20 = alphabet[letterIndex + 18]\n            local letter21 = alphabet[letterIndex\
    \ + 19]\n            local letter22 = alphabet[letterIndex + 20]\n           \
    \ local letter23 = alphabet[letterIndex + 21]\n            local letter24 = alphabet[letterIndex\
    \ + 22]\n            local letter25 = alphabet[letterIndex + 23]\n           \
    \ local letter26 = alphabet[letterIndex + 24]\n            local letter27 = alphabet[letterIndex\
    \ + 25]\n            local letter28 = alphabet[letterIndex + 26]\n           \
    \ local letter29 = alphabet[letterIndex + 27]\n            local letter30 = alphabet[letterIndex\
    \ + 28]\n            local letter31 = alphabet[letterIndex + 29]\n           \
    \ local letter32 = alphabet[letterIndex + 30]\n            local letter33 = alphabet[letterIndex\
    \ + 31]\n            local letter34 = alphabet[letterIndex + 32]\n           \
    \ local letter35 = alphabet[letterIndex + 33]\n            local letter36 = alphabet[\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpta5p6mye.lua:55: ']' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = ''\n  local index = 1\n  local vowelIndex = 1\n  local letterIndex\
    \ = 1\n  local letter = message[1]\n  local vowel = message[vowelIndex]\n  local\
    \ letterCount = 1\n  while letter ~= nil do\n    if letter == vowel then\n   \
    \   letter = alphabet[letterIndex + letterCount]\n      letterCount = letterCount\
    \ + 1\n    else\n      letter = alphabet[letterIndex]\n      letterIndex = letterIndex\
    \ + 1\n    end\n    index = index + 1\n    letter = message[index]\n  end\n  while\
    \ vowelIndex ~= #vowels do\n    vowel = alphabet[vowelIndex]\n    vowelIndex =\
    \ vowelIndex + 1\n    letter = message[index]\n    index = index + 1\n    letter\
    \ = message[index]\n  end\n  result = result .. letter .. vowel\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1jz7sj4.lua:39:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpg1jz7sj4.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if char in alphabet:gmatch('%a') then\n            local index = alphabet:find(char)\n\
    \            local vowelIndex = alphabet:find(vowels, index)\n            local\
    \ nextVowelIndex = alphabet:find(vowels, index + 1)\n            local nextVowel\
    \ = alphabet:sub(vowelIndex + 1, nextVowelIndex)\n            local nextChar =\
    \ alphabet:sub(index + 1, index)\n            local nextCharIndex = alphabet:find(nextChar)\n\
    \            local nextCharVowelIndex = alphabet:find(vowels, nextCharIndex)\n\
    \            local nextCharVowel = alphabet:sub(nextCharVowelIndex + 1, nextCharVowelIndex)\n\
    \            local nextCharNextCharIndex = alphabet:find(nextChar, nextCharIndex\
    \ + 1)\n            local nextCharNextCharVowelIndex = alphabet:find(vowels, nextCharNextCharIndex)\n\
    \            local nextCharNextCharVowel = alphabet:sub(nextCharNextCharVowelIndex\
    \ + 1, nextCharNextCharVowelIndex)\n            local nextCharNextCharNextCharIndex\
    \ = alphabet:find(nextChar, nextCharNextCharIndex + 1)\n            local nextCharNextCharNextCharVowelIndex\
    \ = alphabet:find(vowels, nextCharNextCharNextCharIndex)\n            local nextCharNextCharNextCharVowel\
    \ = alphabet:sub(nextCharNextCharNextCharVowelIndex + 1, nextCharNextCharNextCharVowelIndex)\n\
    \            local nextCharNextCharNextCharNextCharIndex = alphabet:find(nextChar,\
    \ nextCharNextCharNextCharIndex + 1)\n            local nextCharNextCharNextCharNextCharVowelIndex\
    \ = alphabet:find(vowels, nextCharNextCharNextCharNextCharIndex)\n           \
    \ local nextCharNextCharNextCharNextCharVowel = alphabet:sub(nextCharNextCharNextCharNextCharVowelIndex\
    \ + 1, nextCharNextCharNextCharNextCharVowelIndex)\n            local nextCharNextCharNextCharNextCharNextCharIndex\
    \ = alphabet:find(nextChar, nextCharNextCharNextCharNextCharIndex + 1)\n     \
    \       local nextCharNextCharNextCharNextCharNextCharVowelIndex = alphabet:find(vowels,\
    \ nextCharNextCharNextCharNextCharNextCharIndex)\n            local nextCharNextCharNextCharNextCharNextCharVowel\
    \ = alphabet:sub(nextCharNextChar\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph3wo5hph.lua:17: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = ''\n  for i = 1, #message do\n    local char = message[i]\n \
    \   if #alphabet > #vowels then\n      result = result .. alphabet[#alphabet -\
    \ #vowels]\n    else\n      local index = alphabet + vowels\n      local letter\
    \ = alphabet[#index]\n      result = result .. alphabet[#index - #letter]\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vcr8k2x.lua:18:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp0vcr8k2x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local vowel_positions = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_position = alphabet and alphabet:find(letter)\n    if vowel_position\
    \ then\n      vowel_positions[letter] = vowel_position\n    end\n  end\n  local\
    \ new_message = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_position = alphabet and alphabet:find(letter)\n    if vowel_position\
    \ then\n      local vowel_position_2 = alphabet:find(vowels[vowel_position])\n\
    \      if vowel_position_2 then\n        new_message = new_message .. alphabet:sub(vowel_position,\
    \ vowel_position_2)\n      else\n        new_message = new_message .. alphabet:sub(vowel_position)\n\
    \      end\n    else\n      new_message = new_message .. letter\n    end\n  end\n\
    \  return new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopm4yd9l.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpopm4yd9l.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpopm4yd9l.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet .. letter\n    local vowelIndex = index .. vowels\n\
    \    local vowel = alphabet:sub(vowelIndex, 1)\n    local letterIndex = index\
    \ .. letter\n    local letter = alphabet:sub(letterIndex, 1)\n    output = output\
    \ .. letter .. vowel\n  end\n  return output\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn342vkmg.lua:17:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpn342vkmg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = message\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet.find(letter)\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n    end\n    if index == \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp14bwu4ne.lua:91: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local position = alphabet:find(vowel)\n\
    \    local nextLetter = alphabet:sub(position + 1, position + 2)\n    local nextVowel\
    \ = alphabet:find(nextLetter)\n    local newLetter = alphabet:sub(position + 1,\
    \ position + 2)\n    local newVowel = alphabet:find(newLetter)\n    local newLetter\
    \ = alphabet:sub(position + 1, position + 2)\n    local newVowel = alphabet:find(newLetter)\n\
    \    local newLetter = alphabet:sub(position + 1, position + 2)\n    local newVowel\
    \ = alphabet:find(newLetter)\n    local newLetter = alphabet:sub(position + 1,\
    \ position + 2)\n    local newVowel = alphabet:find(newLetter)\n    local newLetter\
    \ = alphabet:sub(position + 1, position + 2)\n    local newVowel = alphabet:find(newLetter)\n\
    \    local newLetter = alphabet:sub(position + 1, position + 2)\n    local newVowel\
    \ = alphabet:find(newLetter)\n    local newLetter = alphabet:sub(position + 1,\
    \ position + 2)\n    local newVowel = alphabet:find(newLetter)\n    local newLetter\
    \ = alphabet:sub(position + 1, position + 2)\n    local newVowel = alphabet:find(newLetter)\n\
    \    local newLetter = alphabet:sub(position + 1, position + 2)\n    local newVowel\
    \ = alphabet:find(newLetter)\n    local newLetter = alphabet:sub(position + 1,\
    \ position + 2)\n    local newVowel = alphabet:find(newLetter)\n    local newLetter\
    \ = alphabet:sub(position + 1, position + 2)\n    local newVowel = alphabet:find(newLetter)\n\
    \    local newLetter = alphabet:sub(position + 1, position + 2)\n    local newVowel\
    \ = alphabet:find(newLetter)\n    local newLetter = alphabet:sub(position + 1,\
    \ position + 2)\n    local newVowel = alphabet:find(newLetter)\n    local newLetter\
    \ = alphabet:sub(position + 1, position + 2)\n    local newVowel = alphabet:find(newLetter)\n\
    \    local newLetter = alphabet:sub(position + 1, position + 2)\n    local newVowel\
    \ = alphabet:find(newLetter)\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeqr4i0h7.lua:63: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local alphabet = {\n    ['a'] = 'A',\n    ['b']\
    \ = 'B',\n    ['c'] = 'C',\n    ['d'] = 'D',\n    ['e'] = 'E',\n    ['f'] = 'F',\n\
    \    ['g'] = 'G',\n    ['h'] = 'H',\n    ['i'] = 'I',\n    ['j'] = 'J',\n    ['k']\
    \ = 'K',\n    ['l'] = 'L',\n    ['m'] = 'M',\n    ['n'] = 'N',\n    ['o'] = 'O',\n\
    \    ['p'] = 'P',\n    ['q'] = 'Q',\n    ['r'] = 'R',\n    ['s'] = 'S',\n    ['t']\
    \ = 'T',\n    ['u'] = 'U',\n    ['v'] = 'V',\n    ['w'] = 'W',\n    ['x'] = 'X',\n\
    \    ['y'] = 'Y',\n    ['z'] = 'Z',\n    ['A'] = 'a',\n    ['B'] = 'b',\n    ['C']\
    \ = 'c',\n    ['D'] = 'd',\n    ['E'] = 'e',\n    ['F'] = 'f',\n    ['G'] = 'g',\n\
    \    ['H'] = 'h',\n    ['I'] = 'i',\n    ['J'] = 'j',\n    ['K'] = 'k',\n    ['L']\
    \ = 'l',\n    ['M'] = 'm',\n    ['N'] = 'n',\n    ['O'] = 'o',\n    ['P'] = 'p',\n\
    \    ['Q'] = 'q',\n    ['R'] = 'r',\n    ['S'] = 's',\n    ['T'] = 't',\n    ['U']\
    \ = 'u',\n    ['V'] = 'v',\n    ['W'] = 'w',\n    ['X'] = 'x',\n    ['Y'] = 'y',\n\
    \    ['Z'] = 'z',\n  }\n  local vowels = {\n    ['a'] = 'a',\n    ['e'] = 'e',\n\
    \    ['i'] = 'i',\n    ['o'] = 'o',\n    ['u'] = 'u',\n  }\n  local new_message\
    \ = ''\n  for i = 1, #message do\n    local letter = message[i]\n    if letter\
    \ == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u' then\n\
    \      new_message = new_message .. alphabet[letter]\n    else\n      local vowel_position\
    \ = #vowels[letter]\n      new_message = new_message .. alphabet[letter] .. alphabet[letter\
    \ + 1]\n    end\n  end\n  return new_message\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5jix3z5.lua:80:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpf5jix3z5.lua:90:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local vowel_map\
    \ = {}\n  for i = 1, #vowels do\n    vowel_map[vowels[i]] = alphabet[i]\n  end\n\
    \  local message_map = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local position = letter:sub(2, 2)\n \
    \   local new_letter = vowel_map[vowel]\n    if position == nil then\n      message_map[letter]\
    \ = new_letter\n    else\n      message_map[letter] = new_letter + alphabet[position]\n\
    \    end\n  end\n  return table.concat(message_map, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ptr9kpn.lua:22:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp8ptr9kpn.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local output = ''\n  for i = 1, #message do\n    local char = message[i]\n\
    \    local index = alphabet.find(char)\n    if index == nil then\n      output\
    \ = output .. char\n    else\n      local vowel = vowels[index]\n      local vowelIndex\
    \ = alphabet.find(vowel)\n      local vowel2 = alphabet[vowelIndex + 1]\n    \
    \  output = output .. vowel\n      output = output .. vowel2\n    end\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzvtd4f1.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpjzvtd4f1.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpjzvtd4f1.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter ~= ' ' then\n          \
    \  local index = alphabet + alphabet:sub(1, vowelIndex) + alphabet:sub(2, vowelIndex\
    \ + 1) + letter\n            local nextVowelIndex = index + alphabet:sub(1, vowelIndex\
    \ + 1) + alphabet:sub(2, vowelIndex + 2) + letter\n            if nextVowelIndex\
    \ > #vowels then\n                nextVowelIndex = #vowels\n            end\n\
    \            local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex + 1)\
    \ + letter\n            local nextVowelIndex = index + alphabet:sub(1, vowelIndex\
    \ + 1) + alphabet:sub(2, vowelIndex + 2) + letter\n            if nextVowelIndex\
    \ > #vowels then\n                nextVowelIndex = #vowels\n            end\n\
    \            local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex + 1)\
    \ + letter\n            local nextVowelIndex = index + alphabet:sub(1, vowelIndex\
    \ + 1) + alphabet:sub(2, vowelIndex + 2) + letter\n            if nextVowelIndex\
    \ > #vowels then\n                nextVowelIndex = #vowels\n            end\n\
    \            local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex + 1)\
    \ + letter\n            local nextVowelIndex = index + alphabet:sub(1, vowelIndex\
    \ + 1) + alphabet:sub(2, vowelIndex + 2) + letter\n            if nextVowelIndex\
    \ > #vowels then\n                nextVowelIndex = #vowels\n            end\n\
    \            local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex + 1)\
    \ + letter\n            local nextVowelIndex = index + alphabet:sub(1, vowelIndex\
    \ + 1) + alphabet:sub(2, vowelIndex + 2) + letter\n            if nextVowelIndex\
    \ > #vowels then\n                nextVowelIndex = #vowels\n            end\n\
    \            local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex + 1)\
    \ + letter\n            local nextVowelIndex = index + alphabet:sub(1, vowelIndex\
    \ + 1) + alphabet:sub(2, vowelIndex + 2) + letter\n            if nextVowelIndex\
    \ > #vowels then\n                nextVowelIndex = #vowels\n            end\n\
    \            local nextVow\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovoaa6q5.lua:61: 'end' expected (to close 'if' at line 18)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ message = '' .. message\n  local newMessage = ''\n  for i = 1, #message do\n\
    \    local letter = message[i]\n    if letter == 'a' or letter == 'e' or letter\
    \ == 'i' or letter == 'o' or letter == 'u' or letter == 'y' then\n      newMessage\
    \ = newMessage .. letter\n    else\n      local vowel = letter\n      local vowelIndex\
    \ = #vowels\n      while vowelIndex > 0 do\n        if vowels[vowelIndex] == letter\
    \ then\n          newMessage = newMessage .. alphabet[vowelIndex + 1]\n      \
    \    vowelIndex = vowelIndex - 1\n        else\n          vowelIndex = vowelIndex\
    \ - 1\n        end\n      end\n      newMessage = newMessage .. letter\n    end\n\
    \  end\n  return newMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgyh7il4.lua:32:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpfgyh7il4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowels = 'aeiou'\n  local messageLength = #message\n  local encodedMessage\
    \ = ''\n  for i = 1, messageLength do\n    local currentChar = message[i]\n  \
    \  local currentCharIndex = alphabet.find(currentChar)\n    local currentCharIndex\
    \ = currentCharIndex + 1\n    local currentCharIndex = math.min(currentCharIndex,\
    \ #alphabet)\n    local currentChar = alphabet[currentCharIndex]\n    local currentCharIndex\
    \ = currentCharIndex - 1\n    local currentCharIndex = math.max(currentCharIndex,\
    \ 0)\n    local currentChar = alphabet[currentCharIndex]\n    local currentCharIndex\
    \ = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = alphabet[currentCharIndex]\n\
    \    local currentCharIndex = currentCharIndex - 1\n    local currentChar = \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy_7v2qfr.lua:62: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ new_message = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_index = string.find(vowels, letter)\n    if vowel_index ~= nil\
    \ then\n      local vowel_letter = alphabet[vowel_index + 1]\n      new_message\
    \ = new_message .. vowel_letter\n    else\n      new_message = new_message ..\
    \ letter\n    end\n  end\n  return new_message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44xrekk0.lua:18:\
    \ bad argument #1 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp44xrekk0.lua:18: in function 'candidate'\n\t/tmp/tmp44xrekk0.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local alphabet = {'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local result = \"\"\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local vowel = letter:sub(1, 1)\n    local\
    \ index = alphabet:find(vowel)\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + 1)\n    end\n    if index == nil then\n      index = alphabet:find(vowel +\
    \ 2)\n    end\n    if index == nil then\n      index = alphabet:find(vowel + 3)\n\
    \    end\n    if index == nil then\n      index = alphabet:find(vowel + 4)\n \
    \   end\n    if index == nil then\n      index = alphabet:find(vowel + 5)\n  \
    \  end\n    if index == nil then\n      index = alphabet:find(vowel + 6)\n   \
    \ end\n    if index == nil then\n      index = alphabet:find(vowel + 7)\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel + 8)\n    end\n \
    \   if index == nil then\n      index = alphabet:find(vowel + 9)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 10)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 11)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 12)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 13)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 14)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 15)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 16)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 17)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 18)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 19)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 20)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 21)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 22)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + 23)\n    end\n  \
    \  if index == nil then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkeea4h_z.lua:101: 'end' expected (to close 'if' at line 88)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local output = ''\n  local vowelIndex = 0\n  for i = 1, #message do\n    local\
    \ char = message[i]\n    local index = alphabet.find(char)\n    if index == nil\
    \ then\n      output = (output .. char)\n    else\n      local nextVowelIndex\
    \ = alphabet.find(vowels[vowelIndex])\n      local nextVowel = alphabet[nextVowelIndex]\n\
    \      output = (output .. alphabet[index + (nextVowelIndex - index)])\n     \
    \ vowelIndex = nextVowelIndex\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy87xue5.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpmy87xue5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpmy87xue5.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = \"\"\n    local vowelIndex = 0\n    local letterIndex = 0\n\
    \    for i = 1, #message do\n        local letter = message[i]\n        if letter\
    \ ~= nil then\n            local letterIndex = alphabet == vowels and vowelIndex\
    \ + 1 or letterIndex + 1\n            local vowel = vowels[letterIndex]\n    \
    \        if vowel ~= nil then\n                local nextLetter = alphabet[letterIndex\
    \ + 1]\n                local nextVowel = alphabet[letterIndex + 2]\n        \
    \        local nextVowelIndex = alphabet == vowels and vowelIndex + 2 or letterIndex\
    \ + 2\n                local nextVowelIndex = alphabet == vowels and vowelIndex\
    \ + 2 or letterIndex + 2\n                local nextVowelIndex = alphabet == vowels\
    \ and vowelIndex + 2 or letterIndex + 2\n                local nextVowelIndex\
    \ = alphabet == vowels and vowelIndex + 2 or letterIndex + 2\n               \
    \ local nextVowelIndex = alphabet == vowels and vowelIndex + 2 or letterIndex\
    \ + 2\n                local nextVowelIndex = alphabet == vowels and vowelIndex\
    \ + 2 or letterIndex + 2\n                local nextVowelIndex = alphabet == vowels\
    \ and vowelIndex + 2 or letterIndex + 2\n                local nextVowelIndex\
    \ = alphabet == vowels and vowelIndex + 2 or letterIndex + 2\n               \
    \ local nextVowelIndex = alphabet == vowels and vowelIndex + 2 or letterIndex\
    \ + 2\n                local nextVowelIndex = alphabet == vowels and vowelIndex\
    \ + 2 or letterIndex + 2\n                local nextVowelIndex = alphabet == vowels\
    \ and vowelIndex + 2 or letterIndex + 2\n                local nextVowelIndex\
    \ = alphabet == vowels and vowelIndex + 2 or letterIndex + 2\n               \
    \ local nextVowelIndex = alphabet == vowels and vowelIndex + 2 or letterIndex\
    \ + 2\n                local nextVowelIndex = alphabet == vowels and vowelIndex\
    \ + 2 or letterIndex + 2\n                local nextVowelIndex = alphabet == vowels\
    \ and vowelIndex + 2 or letterIndex + 2\n                local nextVowelIndex\
    \ = alphabet == vowels and vowelIndex + 2 or letterIndex + 2\n               \
    \ local nextVowelIndex = alphabet == vowels and vowelIndex + 2 or letterIndex\
    \ + 2\n                local nextVowelIndex = alphabet == vowels and vowelIndex\
    \ + 2 or letterIndex + 2\n                local nextVowelIndex = alphabet == \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdg9ggf80.lua:44: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet.find(letter)\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, letter)\n      if index == nil then\n        index =\
    \ alphabet.find(letter, letter)\n      end\n    end\n    local next = alphabet[index\
    \ + 1]\n    if next ~= nil then\n      result = result .. letter\n      result\
    \ = result .. next\n    else\n      result = result .. letter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mg6pod9.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp6mg6pod9.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp6mg6pod9.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local index = 1\n    for i = 1, #message do\n    \
    \    local char = message[i]\n        if char in alphabet then\n            local\
    \ letter = alphabet:sub(i, i)\n            local vowel = vowels:sub(i, i)\n  \
    \          local letter2 = alphabet:sub(i + 1, i + 1)\n            local vowel2\
    \ = vowels:sub(i + 1, i + 1)\n            local letter3 = alphabet:sub(i + 2,\
    \ i + 2)\n            local vowel3 = vowels:sub(i + 2, i + 2)\n            if\
    \ letter == vowel then\n                output = output .. letter2\n         \
    \   elseif letter == vowel2 then\n                output = output .. letter3\n\
    \            elseif letter == vowel3 then\n                output = output ..\
    \ letter2\n            else\n                output = output .. letter\n     \
    \       end\n        else\n            output = output .. char\n        end\n\
    \        index = index + 1\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvd3nso0q.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowel_positions = {}\n    for i = 1, #message\
    \ do\n        local char = message[i]\n        if char in vowels then\n      \
    \      local vowel_position = #vowels + 1\n            table.insert(vowel_positions,\
    \ vowel_position)\n        end\n    end\n    for i = 1, #message do\n        local\
    \ char = message[i]\n        if char in vowels then\n            local vowel_position\
    \ = #vowels + 1\n            local vowel_position_2 = vowel_positions[vowel_position]\n\
    \            local vowel_position_3 = vowel_positions[vowel_position_2]\n    \
    \        local vowel_position_4 = vowel_positions[vowel_position_3]\n        \
    \    local vowel_position_5 = vowel_positions[vowel_position_4]\n            local\
    \ vowel_position_6 = vowel_positions[vowel_position_5]\n            local vowel_position_7\
    \ = vowel_positions[vowel_position_6]\n            local vowel_position_8 = vowel_positions[vowel_position_7]\n\
    \            local vowel_position_9 = vowel_positions[vowel_position_8]\n    \
    \        local vowel_position_10 = vowel_positions[vowel_position_9]\n       \
    \     local vowel_position_11 = vowel_positions[vowel_position_10]\n         \
    \   local vowel_position_12 = vowel_positions[vowel_position_11]\n           \
    \ local vowel_position_13 = vowel_positions[vowel_position_12]\n            local\
    \ vowel_position_14 = vowel_positions[vowel_position_13]\n            local vowel_position_15\
    \ = vowel_positions[vowel_position_14]\n            local vowel_position_16 =\
    \ vowel_positions[vowel_position_15]\n            local vowel_position_17 = vowel_positions[vowel_position_16]\n\
    \            local vowel_position_18 = vowel_positions[vowel_position_17]\n  \
    \          local vowel_position_19 = vowel_positions[vowel_position_18]\n    \
    \        local vowel_position_20 = vowel_positions[vowel_position_19]\n      \
    \      local vowel_position_21 = vowel_positions[vowel_position_20]\n        \
    \    local vowel_position_22 = vowel_positions[vowel_position_21]\n          \
    \  local vowel_position_23 = vowel_positions[vowel_position_22]\n            local\
    \ vowel_position_24 = vowel_positions[vowel_position_23]\n            local vowel_position_25\
    \ = vowel_positions[vowel_position_24]\n            local vowel_position_26 =\
    \ vowel_positions[vowel_position_25\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpljjo955s.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local alphabet = {\n    'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n    'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  }\n  local alphabet2 = {\n\
    \    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n    'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n  }\n  local alphabet3\
    \ = {\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n\
    \    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  }\n  local\
    \ alphabet4 = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', \n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n\
    \  }\n  local alphabet5 = {\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', \n    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'\n  }\n  local alphabet6 = {\n    'A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n    'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z'\n  }\n  local alphabet7 = {\n    'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n    'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  }\n  local alphabet8 = {\n  \
    \  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n    'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n  }\n  local alphabet9\
    \ = {\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n\
    \    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  }\n  local\
    \ alphabet10 = {\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', \n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n\
    \  }\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgf5rz1n7.lua:65: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local index = alphabet:find(vowel)\n\
    \    local nextLetter = alphabet:sub(1, index+1)\n    local nextVowel = alphabet:sub(index+1,\
    \ index+2)\n    local nextIndex = alphabet:find(nextLetter)\n    local nextNextLetter\
    \ = alphabet:sub(1, nextIndex+1)\n    local nextNextVowel = alphabet:sub(nextIndex+1,\
    \ nextIndex+2)\n    local nextNextIndex = alphabet:find(nextNextLetter)\n    local\
    \ nextNextNextLetter = alphabet:sub(1, nextNextIndex+1)\n    local nextNextNextVowel\
    \ = alphabet:sub(nextNextIndex+1, nextNextIndex+2)\n    local nextNextNextIndex\
    \ = alphabet:find(nextNextNextLetter)\n    local nextNextNextNextLetter = alphabet:sub(1,\
    \ nextNextNextIndex+1)\n    local nextNextNextNextVowel = alphabet:sub(nextNextNextIndex+1,\
    \ nextNextNextIndex+2)\n    local nextNextNextNextIndex = alphabet:find(nextNextNextNextLetter)\n\
    \    local nextNextNextNextNextLetter = alphabet:sub(1, nextNextNextNextIndex+1)\n\
    \    local nextNextNextNextNextVowel = alphabet:sub(nextNextNextNextIndex+1, nextNextNextNextIndex+2)\n\
    \    local nextNextNextNextNextIndex = alphabet:find(nextNextNextNextNextLetter)\n\
    \    local nextNextNextNextNextNextLetter = alphabet:sub(1, nextNextNextNextNextIndex+1)\n\
    \    local nextNextNextNextNextNextVowel = alphabet:sub(nextNextNextNextNextIndex+1,\
    \ nextNextNextNextNextIndex+2)\n    local nextNextNextNextNextNextIndex = alphabet:find(nextNextNextNextNextNextLetter)\n\
    \    local nextNextNextNextNextNextNextLetter = alphabet:sub(1, nextNextNextNextNextNextIndex+1)\n\
    \    local nextNextNextNextNextNextNextVowel = alphabet:sub(nextNextNextNextNextNextIndex+1,\
    \ nextNextNextNextNextNextIndex+2)\n    local nextNextNextNextNextNextNextIndex\
    \ = alphabet:find(nextNextNextNextNextNextNextLetter)\n    local nextNextNextNextNextNextNextNextLetter\
    \ = alphabet:sub(1, nextNextNextNextNextNextNextIndex+1)\n    local next\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqt6vipfq.lua:53: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local char = message[i]\n        if char in alphabet:gmatch('%a') then\n\
    \            local index = alphabet == vowels and vowelIndex or alphabet == char\
    \ and vowelIndex + 1 or alphabet == char and vowelIndex - 1\n            local\
    \ nextVowel = alphabet:sub((index + 1), (index + 2))\n            local nextChar\
    \ = alphabet:sub((index + 2), (index + 3))\n            local nextIndex = alphabet\
    \ == vowels and vowelIndex + 2 or alphabet == char and vowelIndex - 1\n      \
    \      local nextNextVowel = alphabet:sub((nextIndex + 1), (nextIndex + 2))\n\
    \            local nextNextChar = alphabet:sub((nextIndex + 2), (nextIndex + 3))\n\
    \            local nextNextIndex = alphabet == vowels and vowelIndex + 3 or alphabet\
    \ == char and vowelIndex - 2\n            local nextNextNextVowel = alphabet:sub((nextNextIndex\
    \ + 1), (nextNextIndex + 2))\n            local nextNextNextChar = alphabet:sub((nextNextIndex\
    \ + 2), (nextNextIndex + 3))\n            local nextNextNextIndex = alphabet ==\
    \ vowels and vowelIndex + 4 or alphabet == char and vowelIndex - 3\n         \
    \   local nextNextNextNextVowel = alphabet:sub((nextNextNextIndex + 1), (nextNextNextIndex\
    \ + 2))\n            local nextNextNextNextChar = alphabet:sub((nextNextNextIndex\
    \ + 2), (nextNextNextIndex + 3))\n            local nextNextNextNextIndex = alphabet\
    \ == vowels and vowelIndex + 5 or alphabet == char and vowelIndex - 4\n      \
    \      local nextNextNextNextNextVowel = alphabet:sub((nextNextNextNextIndex +\
    \ 1), (nextNextNextNextIndex + 2))\n            local nextNextNextNextNextChar\
    \ = alphabet:sub((nextNextNextNextIndex + 2), (nextNextNextNextIndex + 3))\n \
    \           local nextNextNextNextNextIndex = alphabet == vowels and vowelIndex\
    \ + 6 or alphabet == char and vowelIndex - 5\n            local nextNextNextNextNextVowel\
    \ = alphabet:sub((nextNextNextNextIndex + 1), (nextNextNextNextIndex + 2))\n \
    \           local nextNextNextNextNextChar = alphabet:sub((nextNextNextNextIndex\
    \ + 2), (nextNextNextNextIndex + 3))\n            local nextNext\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmwulmnlx.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet.find(letter)\n    if index == nil then\n      output\
    \ = '' -- Not a letter\n      break\n    end\n    local vowelIndex = alphabet.find(vowels,\
    \ index + 1)\n    if vowelIndex == nil then\n      output = '' -- Not a vowel\n\
    \      break\n    end\n    local nextLetter = alphabet[vowelIndex + 1]\n    output\
    \ = output .. alphabet[vowelIndex] .. nextLetter\n  end\n  return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbspg1vp7.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpbspg1vp7.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpbspg1vp7.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLength = #message\n    local encodedMessage = ''\n    local\
    \ currentLetter = ''\n    local previousLetter = ''\n    local index = 0\n   \
    \ while index < messageLength do\n        local currentLetter = message[index]\n\
    \        if currentLetter == previousLetter then\n            index = index +\
    \ 1\n        else\n            previousLetter = currentLetter\n            index\
    \ = index + 1\n        end\n        local currentVowel = string.sub(alphabet,\
    \ string.find(alphabet, currentLetter, 1) + 1, string.find(alphabet, currentLetter,\
    \ 2) - 1)\n        local previousVowel = string.sub(alphabet, string.find(alphabet,\
    \ previousLetter, 1) + 1, string.find(alphabet, previousLetter, 2) - 1)\n    \
    \    if currentVowel == previousVowel then\n            index = index + 1\n  \
    \      else\n            encodedMessage = encodedMessage .. currentLetter\n  \
    \      end\n    end\n    return encodedMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjet5kb3n.lua:27:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpjet5kb3n.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmpjet5kb3n.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local new_message = ''\n \
    \ for i = 1, #message do\n    local letter = message[i]\n    local position =\
    \ alphabet.find(letter)\n    local next_letter = alphabet[position + 1]\n    local\
    \ new_letter = letter\n    if letter == 'a' then\n      new_letter = alphabet[position\
    \ + 1]\n    end\n    if letter == 'e' then\n      new_letter = alphabet[position\
    \ + 2]\n    end\n    if letter == 'i' then\n      new_letter = alphabet[position\
    \ + 3]\n    end\n    if letter == 'o' then\n      new_letter = alphabet[position\
    \ + 4]\n    end\n    if letter == 'u' then\n      new_letter = alphabet[position\
    \ + 5]\n    end\n    if letter == 'y' then\n      new_letter = alphabet[position\
    \ + 6]\n    end\n    new_message = new_message .. new_letter\n  end\n  return\
    \ new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1qzmtxh.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpg1qzmtxh.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpg1qzmtxh.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowels = 'aeiou'\n  local new_message = ''\n  for i = 1, #message do\n\
    \    local letter = message[i]\n    local new_letter = letter\n    for j = 1,\
    \ #alphabet do\n      if letter == alphabet[j] then\n        new_letter = alphabet[(j\
    \ - 1) + #alphabet]\n      end\n    end\n    for j = 1, #vowels do\n      if letter\
    \ == vowels[j] then\n        new_letter = alphabet[(j - 1) + #alphabet]\n    \
    \  end\n    end\n    new_message = new_message .. new_letter\n  end\n  return\
    \ new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uy67_21.lua:29:\
    \ attempt to concatenate local 'new_letter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp9uy67_21.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet and alphabet:find(letter)\n        if index then\n\
    \            local vowel = alphabet:sub(index, index + 1)\n            local letter2\
    \ = alphabet:sub(index + 2, index + 3)\n            local letter3 = alphabet:sub(index\
    \ + 3, index + 4)\n            local letter4 = alphabet:sub(index + 4, index +\
    \ 5)\n            local letter5 = alphabet:sub(index + 5, index + 6)\n       \
    \     local letter6 = alphabet:sub(index + 6, index + 7)\n            local letter7\
    \ = alphabet:sub(index + 7, index + 8)\n            local letter8 = alphabet:sub(index\
    \ + 8, index + 9)\n            local letter9 = alphabet:sub(index + 9, index +\
    \ 10)\n            local letter10 = alphabet:sub(index + 10, index + 11)\n   \
    \         local letter11 = alphabet:sub(index + 11, index + 12)\n            local\
    \ letter12 = alphabet:sub(index + 12, index + 13)\n            local letter13\
    \ = alphabet:sub(index + 13, index + 14)\n            local letter14 = alphabet:sub(index\
    \ + 14, index + 15)\n            local letter15 = alphabet:sub(index + 15, index\
    \ + 16)\n            local letter16 = alphabet:sub(index + 16, index + 17)\n \
    \           local letter17 = alphabet:sub(index + 17, index + 18)\n          \
    \  local letter18 = alphabet:sub(index + 18, index + 19)\n            local letter19\
    \ = alphabet:sub(index + 19, index + 20)\n            local letter20 = alphabet:sub(index\
    \ + 20, index + 21)\n            local letter21 = alphabet:sub(index + 21, index\
    \ + 22)\n            local letter22 = alphabet:sub(index + 22, index + 23)\n \
    \           local letter23 = alphabet:sub(index + 23, index + 24)\n          \
    \  local letter24 = alphabet:sub(index + 24, index + 25)\n            local letter25\
    \ = alphabet:sub(index + 25, index + 26)\n            local letter26 = alphabet:sub(index\
    \ + 26, index + 27)\n            local letter27 = alphabet:sub(index + 27, index\
    \ + 28)\n            local letter28 = alphabet:sub(index + 28, index + 29)\n \
    \           local letter29 = alphabet:sub(index + 29, index + 30)\n          \
    \  local letter30 = alphabet:sub(index + 30, index + 31)\n            local letter31\
    \ = alphabet:sub(index + 31, index + 32)\n            local letter32 = alphabet:sub(index\
    \ + 32, index + 33)\n            local letter33 = alphabet:sub(index + 33, index\
    \ + 34)\n            local letter34 = alphabet:sub(index + 34, index + 35)\n \
    \           local letter35 = alphabet:sub(index + 35, index + 36)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu_zbmt1d.lua:65: 'end' expected (to close 'if' at line 18)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet + vowels\n        local letterIndex = alphabet:find(letter)\n\
    \        local vowelIndex = letterIndex + 2\n        if letterIndex > #alphabet\
    \ then\n            letterIndex = letterIndex - #alphabet\n        end\n     \
    \   local nextLetter = alphabet:sub(letterIndex, letterIndex + 2)\n        local\
    \ nextVowel = alphabet:sub(vowelIndex, vowelIndex + 2)\n        local nextIndex\
    \ = alphabet + nextLetter + nextVowel\n        local nextLetterIndex = alphabet:find(nextLetter)\n\
    \        local nextVowelIndex = nextLetterIndex + 2\n        if nextLetterIndex\
    \ > #alphabet then\n            nextLetterIndex = nextLetterIndex - #alphabet\n\
    \        end\n        local nextLetter = alphabet:sub(nextLetterIndex, nextLetterIndex\
    \ + 2)\n        local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex\
    \ + 2)\n        local nextIndex = alphabet + nextLetter + nextVowel\n        local\
    \ nextLetterIndex = alphabet:find(nextLetter)\n        local nextVowelIndex =\
    \ nextLetterIndex + 2\n        if nextLetterIndex > #alphabet then\n         \
    \   nextLetterIndex = nextLetterIndex - #alphabet\n        end\n        local\
    \ nextLetter = alphabet:sub(nextLetterIndex, nextLetterIndex + 2)\n        local\
    \ nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex + 2)\n        local\
    \ nextIndex = alphabet + nextLetter + nextVowel\n        local nextLetterIndex\
    \ = alphabet:find(nextLetter)\n        local nextVowelIndex = nextLetterIndex\
    \ + 2\n        if nextLetterIndex > #alphabet then\n            nextLetterIndex\
    \ = nextLetterIndex - #alphabet\n        end\n        local nextLetter = alphabet:sub(nextLetterIndex,\
    \ nextLetterIndex + 2)\n        local nextVowel = alphabet:sub(nextVowelIndex,\
    \ nextVowelIndex + 2)\n        local nextIndex = alphabet + nextLetter + nextVowel\n\
    \        local nextLetterIndex = alphabet:find(nextLetter)\n        local nextVowelIndex\
    \ = nextLetterIndex + 2\n        if nextLetterIndex > #alphabet then\n       \
    \     nextLetterIndex = nextLetterIndex - #alphabet\n        end\n        local\
    \ nextLetter = alphabet:sub(nextLetterIndex, nextLetterIndex + 2)\n        local\
    \ next\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppw9x3fz_.lua:68: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        local index = alphabet + letter\n        local nextLetter\
    \ = alphabet:sub(index, index + 1)\n        local vowelIndex = vowels + letter\n\
    \        local nextVowel = vowels:sub(vowelIndex, vowelIndex + 1)\n        if\
    \ letter == nextLetter then\n            result = result .. letter\n        elseif\
    \ letter == nextVowel then\n            result = result .. letter\n        else\n\
    \            result = result .. nextLetter\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wja9ids.lua:17:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmp6wja9ids.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['A'] = 'A',\n    ['B'] = 'B',\n    ['C'] = 'C',\n\
    \    ['D'] = 'D',\n    ['E'] = 'E',\n    ['F'] = 'F',\n    ['G'] = 'G',\n    ['H']\
    \ = 'H',\n    ['I'] = 'I',\n    ['J'] = 'J',\n    ['K'] = 'K',\n    ['L'] = 'L',\n\
    \    ['M'] = 'M',\n    ['N'] = 'N',\n    ['O'] = 'O',\n    ['P'] = 'P',\n    ['Q']\
    \ = 'Q',\n    ['R'] = 'R',\n    ['S'] = 'S',\n    ['T'] = 'T',\n    ['U'] = 'U',\n\
    \    ['V'] = 'V',\n    ['W'] = 'W',\n    ['X'] = 'X',\n    ['Y'] = 'Y',\n    ['Z']\
    \ = 'Z',\n    ['a'] = 'a',\n    ['b'] = 'b',\n    ['c'] = 'c',\n    ['d'] = 'd',\n\
    \    ['e'] = 'e',\n    ['f'] = 'f',\n    ['g'] = 'g',\n    ['h'] = 'h',\n    ['i']\
    \ = 'i',\n    ['j'] = 'j',\n    ['k'] = 'k',\n    ['l'] = 'l',\n    ['m'] = 'm',\n\
    \    ['n'] = 'n',\n    ['o'] = 'o',\n    ['p'] = 'p',\n    ['q'] = 'q',\n    ['r']\
    \ = 'r',\n    ['s'] = 's',\n    ['t'] = 't',\n    ['u'] = 'u',\n    ['v'] = 'v',\n\
    \    ['w'] = 'w',\n    ['x'] = 'x',\n    ['y'] = 'y',\n    ['z'] = 'z',\n    ['A']\
    \ = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n    ['D'] = 'd',\n    ['E'] = 'e',\n\
    \    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H'] = 'h',\n    ['I'] = 'i',\n    ['J']\
    \ = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n    ['M'] = 'm',\n    ['N'] = 'n',\n\
    \    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q'] = 'q',\n    ['R'] = 'r',\n    ['S']\
    \ = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n    ['V'] = 'v',\n    ['W'] = 'w',\n\
    \    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z'] = 'z',\n    ['a'] = 'A',\n    ['b']\
    \ = 'B',\n    ['c'] = 'C',\n    ['d'] = 'D',\n    ['e'] = 'E',\n    ['f'] = 'F',\n\
    \    ['g'] = 'G',\n    ['h'] = 'H',\n    ['i'] = 'I',\n    ['j'] = 'J',\n    ['k']\
    \ = 'K',\n    ['l'] = 'L',\n    ['m'] = 'M',\n    ['\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbs3_5up_.lua:104: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowelIndex = alphabet == vowels and i or alphabet == vowels and i -\
    \ 1 or alphabet == vowels and i - 2 or nil\n    if letter then\n      local nextLetter\
    \ = alphabet[vowelIndex + 1]\n      newMessage = newMessage .. alphabet[alphabet\
    \ == vowels and i or alphabet == vowels and i - 1 or alphabet == vowels and i\
    \ - 2]\n      newMessage = newMessage .. nextLetter\n    end\n  end\n  return\
    \ newMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7psdjd6y.lua:30:\
    \ expected: \"tgst\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7psdjd6y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i + 1, #alphabet)\n\
    \    local replacement = alphabet:sub(i + 1, #alphabet)\n    local count = letter:upper():find(vowels)\n\
    \    if count ~= nil then\n      replacement = alphabet:sub(count + 1, #alphabet)\n\
    \    end\n    output = output .. alphabet:sub(1, index) .. replacement\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmesv5x7g.lua:17:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmpmesv5x7g.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter)\n    if index then\n   \
    \   local vowel = vowels:sub(index, index + 1)\n      local letter2 = alphabet:sub(index\
    \ + 1, index + 2)\n      output = output .. letter:lower()\n      output = output\
    \ .. letter2:upper()\n      output = output .. vowel:lower()\n    end\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_pn74kb.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpz_pn74kb.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpz_pn74kb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local messageLength = #message\n  local encodedMessage = ''\n  local index =\
    \ 0\n  while index < messageLength do\n    local currentChar = message[index]\n\
    \    local currentCharIndex = alphabet.indexOf(currentChar)\n    local nextCharIndex\
    \ = currentCharIndex + 1\n    local nextChar = alphabet[nextCharIndex]\n    local\
    \ nextCharIndex = alphabet.indexOf(nextChar)\n    local newChar = alphabet[nextCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphabet.indexOf(newChar)\n    local newChar = alphabet[newCharIndex]\n\
    \    local newCharIndex = alphab\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa1cnbdub.lua:70: 'end' expected (to close 'while' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a','e','i','o','u','y'}\n \
    \ local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local vowel_map = {}\n  for i = 1, #vowels do\n    vowel_map[vowels[i]] = alphabet[i]\n\
    \  end\n  local new_message = ''\n  for i = 1, #message do\n    local letter =\
    \ message[i]\n    local new_letter = letter\n    for j = 1, #vowels do\n     \
    \ if letter == vowels[j] then\n        new_letter = vowel_map[vowels[j]]\n   \
    \   end\n    end\n    new_message = new_message .. new_letter\n  end\n  return\
    \ new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqn2_ush.lua:28:\
    \ attempt to concatenate local 'new_letter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsqn2_ush.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z',\n    }\n    local vowels = {\n        'a', 'e', 'i',\
    \ 'o', 'u',\n    }\n    local result = \"\"\n    for i = 1, #message do\n    \
    \    local letter = message[i]\n        if letter:lower() ~= letter then\n   \
    \         letter = letter:lower()\n        end\n        local vowel = letter:sub(1,\
    \ 1)\n        if vowel:lower() ~= vowel then\n            letter = alphabet[alphabet:find(letter,\
    \ vowels, 1) + 1]\n        end\n        result = result .. letter\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox5jd6qk.lua:24:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpox5jd6qk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  local vowels = \"AEIOU\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local position = alphabet + vowel\n \
    \   local letter2 = letter:sub(2, 2)\n    if letter2 ~= letter then\n      position\
    \ = position:sub(1, 1)\n    end\n    position = position:sub(1, 1)\n    position\
    \ = position:sub(2, 2)\n    position = position:sub(3, 3)\n    position = position:sub(4,\
    \ 4)\n    position = position:sub(5, 5)\n    position = position:sub(6, 6)\n \
    \   position = position:sub(7, 7)\n    position = position:sub(8, 8)\n    position\
    \ = position:sub(9, 9)\n    position = position:sub(10, 10)\n    position = position:sub(11,\
    \ 11)\n    position = position:sub(12, 12)\n    position = position:sub(13, 13)\n\
    \    position = position:sub(14, 14)\n    position = position:sub(15, 15)\n  \
    \  position = position:sub(16, 16)\n    position = position:sub(17, 17)\n    position\
    \ = position:sub(18, 18)\n    position = position:sub(19, 19)\n    position =\
    \ position:sub(20, 20)\n    position = position:sub(21, 21)\n    position = position:sub(22,\
    \ 22)\n    position = position:sub(23, 23)\n    position = position:sub(24, 24)\n\
    \    position = position:sub(25, 25)\n    position = position:sub(26, 26)\n  \
    \  position = position:sub(27, 27)\n    position = position:sub(28, 28)\n    position\
    \ = position:sub(29, 29)\n    position = position:sub(30, 30)\n    position =\
    \ position:sub(31, 31)\n    position = position:sub(32, 32)\n    position = position:sub(33,\
    \ 33)\n    position = position:sub(34, 34)\n    position = position:sub(35, 35)\n\
    \    position = position:sub(36, 36)\n    position = position:sub(37, 37)\n  \
    \  position = position:sub(38, 38)\n    position = position:sub(39, 39)\n    position\
    \ = position:sub(40, 40)\n    position = position:sub(41, 41)\n    position =\
    \ position:sub(42, 42)\n    position = position:sub(43, 43)\n    position = position:sub(44,\
    \ 44)\n    position = position:sub(45, 45)\n    position = position:sub(46, 46)\n\
    \    position = position:sub(47, 47)\n    position = position:sub(48, 48)\n  \
    \  position = position:sub(49, 49)\n    \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmjadtrsr.lua:84: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i + 1, #alphabet)\n\
    \    local replacement = alphabet:sub(i + 1, #alphabet)\n    local vowelIndex\
    \ = alphabet + vowels:sub(1, i) + vowels:sub(i + 1, #vowels)\n    local vowelReplacement\
    \ = alphabet:sub(i + 1, #alphabet)\n    if letter:lower() == letter then\n   \
    \   letter = letter:upper()\n    end\n    if letter:find(vowels) then\n      letter\
    \ = letter:sub(1, letter:find(vowels) + 1)\n    end\n    if letter:find(vowelIndex)\
    \ then\n      letter = vowelReplacement\n    end\n    output = output .. letter\
    \ .. index\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k0gk9oi.lua:17:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmp5k0gk9oi.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i + 1, #alphabet)\n\
    \    local replacement = alphabet:sub(i + 1, #alphabet)\n    if letter:lower()\
    \ ~= letter then\n      letter = letter:lower()\n    end\n    letter = letter:gsub('a',\
    \ 'z')\n    letter = letter:gsub('e', 'z')\n    letter = letter:gsub('i', 'z')\n\
    \    letter = letter:gsub('o', 'z')\n    letter = letter:gsub('u', 'z')\n    letter\
    \ = letter:gsub('y', 'z')\n    letter = letter:gsub('a', 'a')\n    letter = letter:gsub('e',\
    \ 'e')\n    letter = letter:gsub('i', 'i')\n    letter = letter:gsub('o', 'o')\n\
    \    letter = letter:gsub('u', 'u')\n    letter = letter:gsub('y', 'y')\n    letter\
    \ = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h',\
    \ 'a')\n    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n\
    \    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n    letter\
    \ = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h',\
    \ 'a')\n    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n\
    \    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n    letter\
    \ = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h',\
    \ 'a')\n    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n\
    \    letter = letter:gsub('h', 'a')\n    letter = letter:gsub('h', 'a')\n    letter\
    \ = letter:gsub('h', 'a')\n    letter = letter:g\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpecw0j6dq.lua:57: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local char = message[i]\n        if char == ' ' then\n            --\
    \ Ignore spaces.\n        elseif char in alphabet then\n            -- Swap case\
    \ for all letters.\n            char = alphabet[string.lower(char)]\n        elseif\
    \ char in vowels then\n            -- Replace vowels with vowel 2 places ahead.\n\
    \            char = alphabet[string.lower(alphabet[string.find(alphabet, char)\
    \ + 1])] \n        end\n        output = output .. char\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0bp0c4kh.lua:20: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter) or letter\n    local nextLetter\
    \ = alphabet:sub(index, index + 1)\n    local vowelIndex = vowels:find(letter)\n\
    \    if vowelIndex then\n      local nextVowel = alphabet:sub(vowelIndex + 1,\
    \ vowelIndex + 2)\n      output = output .. alphabet:sub(vowelIndex + 1, vowelIndex\
    \ + 2) .. nextVowel\n    else\n      output = output .. alphabet:sub(index, index\
    \ + 1) .. nextLetter\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2xoi2dj.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpn2xoi2dj.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpn2xoi2dj.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local message = '' -- Initialize message with empty string\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local index = alphabet -- Initialize\
    \ index to alphabet\n    for j = 1, #letter do\n      index = index[letter[j]]\n\
    \      if index == nil then -- If letter is not in alphabet, index is nil\n  \
    \      index = alphabet[#alphabet] -- If letter is not in alphabet, index is last\
    \ letter in alphabet\n      end\n    end\n    index = index[vowels] -- Swap the\
    \ case of all letters in the message\n    index = alphabet[#alphabet] -- Swap\
    \ the case of all letters in the message\n    message = message .. index -- Append\
    \ the index to the message\n  end\n  return message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyf3j4vz.lua:34:\
    \ expected: \"tgst\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphyf3j4vz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local vowel = letter:sub(1, 1)\n        local index = alphabet:find(vowel)\n\
    \        if index == nil then\n            index = alphabet:find(vowel:sub(2))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(3))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(4))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(5))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(6))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(7))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(8))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(9))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(10))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(11))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(12))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(13))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(14))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(15))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(16))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(17))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(18))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(19))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(20))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(1))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(2))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(3))\n\
    \        end\n        if index == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphzuholue.lua:89: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local newMessage = \"\"\n    for i = 1, #message do\n        local letter\
    \ = message[i]\n        if letter:lower() == letter then\n            newMessage\
    \ = newMessage .. letter\n        else\n            local index = alphabet:find(letter)\n\
    \            if index == nil then\n                newMessage = newMessage ..\
    \ letter\n            else\n                local vowelIndex = alphabet:find(vowels,\
    \ index + 1)\n                if vowelIndex == nil then\n                    newMessage\
    \ = newMessage .. letter\n                else\n                    local newLetter\
    \ = alphabet:sub(vowelIndex + 1, index)\n                    newMessage = newMessage\
    \ .. newLetter\n                end\n            end\n        end\n    end\n \
    \   return newMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7vgon3y.lua:17:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpt7vgon3y.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    local i = 1\n    while i <= #message do\n       \
    \ local letter = message[i]\n        if letter:lower() == letter then\n      \
    \      letter = alphabet[alphabet + alphabet + letter]\n        end\n        local\
    \ vowel = vowels:sub(1, i)\n        local vowel2 = alphabet[alphabet + alphabet\
    \ + vowel]\n        local letter2 = alphabet[alphabet + alphabet + letter]\n \
    \       local letter3 = alphabet[alphabet + alphabet + letter2]\n        local\
    \ letter4 = alphabet[alphabet + alphabet + letter3]\n        local letter5 = alphabet[alphabet\
    \ + alphabet + letter4]\n        local letter6 = alphabet[alphabet + alphabet\
    \ + letter5]\n        local letter7 = alphabet[alphabet + alphabet + letter6]\n\
    \        local letter8 = alphabet[alphabet + alphabet + letter7]\n        local\
    \ letter9 = alphabet[alphabet + alphabet + letter8]\n        local letter10 =\
    \ alphabet[alphabet + alphabet + letter9]\n        local letter11 = alphabet[alphabet\
    \ + alphabet + letter10]\n        local letter12 = alphabet[alphabet + alphabet\
    \ + letter11]\n        local letter13 = alphabet[alphabet + alphabet + letter12]\n\
    \        local letter14 = alphabet[alphabet + alphabet + letter13]\n        local\
    \ letter15 = alphabet[alphabet + alphabet + letter14]\n        local letter16\
    \ = alphabet[alphabet + alphabet + letter15]\n        local letter17 = alphabet[alphabet\
    \ + alphabet + letter16]\n        local letter18 = alphabet[alphabet + alphabet\
    \ + letter17]\n        local letter19 = alphabet[alphabet + alphabet + letter18]\n\
    \        local letter20 = alphabet[alphabet + alphabet + letter19]\n        local\
    \ letter21 = alphabet[alphabet + alphabet + letter20]\n        local letter22\
    \ = alphabet[alphabet + alphabet + letter21]\n        local letter23 = alphabet[alphabet\
    \ + alphabet + letter22]\n        local letter24 = alphabet[alphabet + alphabet\
    \ + letter23]\n        local letter25 = alphabet[alphabet + alphabet + letter24]\n\
    \        local letter26 = alphabet[alphabet + alphabet + letter25]\n        local\
    \ letter27 = alphabet[alphabet + alphab\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp84bfemh8.lua:49: ']' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', \n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \n        '0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', \n        '!', '\"', '#', '$',\
    \ '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=',\
    \ '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', \n        'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \n        '0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9', \n        '!', '\"', '#', '$', '%', '&', \"'\", '(', ')',\
    \ '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^',\
    \ '_', '`', '{', '|', '}', '~', \n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z', \n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n   \
    \     '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.',\
    \ '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}',\
    \ '~', \n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \n        '0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', \n        '!', '\"', '#', '$',\
    \ '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=',\
    \ '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', \n        'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4p747bf7.lua:26: unfinished string near ''K'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local message = '' -- Initialize message to be empty\n  -- Iterate through each\
    \ letter in the message\n  for letter in message:gmatch'[%a]' do\n    -- If the\
    \ letter is a vowel, swap case with the letter that \n    -- appears 2 places\
    \ ahead of it\n    if letter:sub(1, 1) in vowels then\n      letter = alphabet[alphabet:find(letter,\
    \ letter) + 1]\n    end\n    -- Append the letter to the message\n    message\
    \ = message .. letter\n  end\n  return message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzk1wja0v.lua:19: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter or alphabet == letter:lower() \n      and\
    \ alphabet == letter:upper()\n      and vowels:find(letter)\n    local nextLetter\
    \ = alphabet:sub(1, index or 1)\n    local nextVowel = alphabet:sub(index + 1,\
    \ #alphabet)\n    output = output .. nextLetter\n    output = output .. nextVowel\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3aakm5pp.lua:17:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp3aakm5pp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  local vowelIndex = 1\n  for i = 1, #message do\n    local\
    \ char = message[i]\n    if char == 'a' then\n      char = alphabet[vowelIndex]\n\
    \      vowelIndex = vowelIndex + 1\n    end\n    local vowelIndex = string.find(vowels,\
    \ char)\n    if vowelIndex ~= nil then\n      char = alphabet[vowelIndex + 1]\n\
    \    end\n    output = output .. char\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxu7c5zm.lua:22:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpuxu7c5zm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpuxu7c5zm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = message\n  for i = 1, #message do\n    local char = message[i]\n\
    \    local index = alphabet.find(char)\n    if index == nil then\n      index\
    \ = alphabet.find(vowels, i)\n      if index == nil then\n        index = #alphabet\n\
    \      end\n    end\n    local nextIndex = alphabet.find(vowels, index + 1)\n\
    \    if nextIndex == nil then\n      nextIndex = #alphabet\n    end\n    local\
    \ newChar = alphabet[nextIndex + 1]\n    local newIndex = alphabet.find(newChar,\
    \ index)\n    if newIndex == nil then\n      newIndex = #alphabet\n    end\n \
    \   result = result:sub(i, i + 1)\n    result = result:sub(newIndex, newIndex\
    \ + 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmqjj3sh.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpqmqjj3sh.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpqmqjj3sh.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i + 1, #alphabet)\n\
    \        local replacement = alphabet:sub(i + 1, #alphabet)\n        local count\
    \ = 0\n        for j = 1, #vowels do\n            local vowel = vowels[j]\n  \
    \          if letter == vowel then\n                count = count + 1\n      \
    \          if count == 2 then\n                    replacement = alphabet:sub(i\
    \ + 1, #alphabet)\n                end\n            end\n        end\n       \
    \ output = output .. alphabet:sub(i + 1, #alphabet) .. replacement\n    end\n\
    \    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72zecbmn.lua:17:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmp72zecbmn.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ new_message = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter\
    \ == 'u' or letter == 'y' then\n      new_message = new_message .. alphabet[#alphabet\
    \ + 1]\n    elseif letter == 'b' or letter == 'f' or letter == 'h' or letter ==\
    \ 'k' or letter == 'l' or letter == 'm' or letter == 'n' or letter == 'p' or letter\
    \ == 'q' or letter == 'r' or letter == 's' or letter == 't' or letter == 'v' or\
    \ letter == 'w' or letter == 'x' or letter == 'z' then\n      new_message = new_message\
    \ .. alphabet[#alphabet + 2]\n    else\n      new_message = new_message .. letter\n\
    \    end\n  end\n  return new_message\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdp9u6ns1.lua:23:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpdp9u6ns1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter)\n    if index then\n   \
    \   local vowel = vowels:sub(index, index + 1)\n      local next = alphabet:sub(index\
    \ + 1, index + 2)\n      result = result .. letter .. vowel .. next\n    else\n\
    \      result = result .. letter\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuan45ge.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmptuan45ge.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmptuan45ge.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter:lower() ~= letter then\n            letter = letter:lower()\n\
    \        end\n        local index = alphabet:find(letter)\n        if index ==\
    \ nil then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            letter = letter:upper()\n            index = alphabet:find(letter)\n\
    \        end\n        if index == nil then\n            letter = letter:lower()\n\
    \            index = alphabet:find(letter)\n        end\n        if index == nil\
    \ then\n            \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfwknven0.lua:106: 'end' expected (to close 'if' at line 93)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local new_message = \"\"\n    for i = 1, #message do\n        local letter\
    \ = message[i]\n        if letter:lower() ~= letter then\n            letter =\
    \ letter:lower()\n        end\n        local index = alphabet:find(letter)\n \
    \       if index == nil then\n            index = alphabet:find(letter:lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():upper():lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():upper():upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(letter:upper():upper():upper():upper():upper():upper():upper():upper())\n\
    \        end\n        if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj4udbfsm.lua:73: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter or letter:sub(1, 1) == 'a' and 1 or #alphabet\n\
    \    local nextLetter = alphabet:sub(index + 1, index + 2)\n    local nextVowel\
    \ = vowels:sub(index + 1, index + 2)\n    local nextLetterIndex = alphabet ==\
    \ nextLetter or nextLetter:sub(1, 1) == 'a' and 1 or #alphabet\n    local nextVowelIndex\
    \ = vowels:sub(nextLetterIndex + 1, nextLetterIndex + 2)\n    local nextVowelIndex\
    \ = alphabet == nextVowel or nextVowel:sub(1, 1) == 'a' and 1 or #alphabet\n \
    \   local nextLetterLetter = alphabet:sub(nextLetterIndex + 1, nextLetterIndex\
    \ + 2)\n    local nextVowelLetter = alphabet:sub(nextVowelIndex + 1, nextVowelIndex\
    \ + 2)\n    local nextLetterVowel = alphabet:sub(nextLetterIndex + 1, nextLetterIndex\
    \ + 2)\n    local nextVowelVowel = alphabet:sub(nextVowelIndex + 1, nextVowelIndex\
    \ + 2)\n    local nextLetterLetterVowel = alphabet:sub(nextLetterIndex + 1, nextLetterIndex\
    \ + 2)\n    local nextVowelLetterVowel = alphabet:sub(nextVowelIndex + 1, nextVowelIndex\
    \ + 2)\n    local nextLetterVowelVowel = alphabet:sub(nextLetterIndex + 1, nextLetterIndex\
    \ + 2)\n    local nextVowelVowelVowel = alphabet:sub(nextVowelIndex + 1, nextVowelIndex\
    \ + 2)\n    local nextLetterLetterLetter = alphabet:sub(nextLetterIndex + 1, nextLetterIndex\
    \ + 2)\n    local nextVowelLetterLetter = alphabet:sub(nextVowelIndex + 1, nextVowelIndex\
    \ + 2)\n    local nextLetterVowelLetter = alphabet:sub(nextLetterIndex + 1, nextLetterIndex\
    \ + 2)\n    local nextVowelVowelLetter = alphabet:sub(nextVowelIndex + 1, nextVowelIndex\
    \ + 2)\n    local nextLetterLetterVowelLetter = alphabet:sub(nextLetterIndex +\
    \ 1, nextLetterIndex + 2)\n    local nextVowelVowelLetter = alphabet:sub(nextVowelIndex\
    \ + 1, nextVowelIndex + 2)\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphfd1xduh.lua:49: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = \"\"\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter ~= nil then\n            local index = alphabet + alphabet:sub(1,\
    \ letter:len()) + alphabet:sub(letter:len()+1)\n            for j = 1, #index\
    \ do\n                if index[j] == letter then\n                    result =\
    \ result .. alphabet:sub(j,j+1)\n                end\n            end\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd434cpkk.lua:32:\
    \ expected: \"tgst\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd434cpkk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n  -- Hint: Use string.gsub\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp46x6ulg2.lua:81: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local char = message[i]\n\
    \        local index = alphabet.find(char)\n        if index == nil then\n   \
    \         index = alphabet.find(vowels, 1, index + 1)\n            if index ==\
    \ nil then\n                index = alphabet.find(vowels, 1, index + 1)\n    \
    \            if index == nil then\n                    index = alphabet.find(vowels,\
    \ 1, index + 1)\n                    if index == nil then\n                  \
    \      index = alphabet.find(vowels, 1, index + 1)\n                        if\
    \ index == nil then\n                            index = alphabet.find(vowels,\
    \ 1, index + 1)\n                            if index == nil then\n          \
    \                      index = alphabet.find(vowels, 1, index + 1)\n         \
    \                       if index == nil then\n                               \
    \     index = alphabet.find(vowels, 1, index + 1)\n                          \
    \          if index == nil then\n                                        index\
    \ = alphabet.find(vowels, 1, index + 1)\n                                    \
    \    if index == nil then\n                                            index =\
    \ alphabet.find(vowels, 1, index + 1)\n                                      \
    \      if index == nil then\n                                                index\
    \ = alphabet.find(vowels, 1, index + 1)\n                                    \
    \            if index == nil then\n                                          \
    \          index = alphabet.find(vowels, 1, index + 1)\n                     \
    \                               if index == nil then\n                       \
    \                                 index = alphabet.find(vowels, 1, index + 1)\n\
    \                                                        if index == nil then\n\
    \                                                            index = alphabet.find(vowels,\
    \ 1, index + 1)\n                                                            if\
    \ index == nil then\n                                                        \
    \        index = alphabet.find(vowels, 1, index + 1)\n                       \
    \                                         if index == nil then\n             \
    \                                                       index = alphabet.find(vowels,\
    \ 1, index + 1)\n                                                            \
    \        if index == nil then\n                                              \
    \                          index = alphabet.find(vowels, 1, index + 1)\n     \
    \                                                               end\n        \
    \                                                        end\n               \
    \                                             end\n                          \
    \                              end\n                                         \
    \           end\n                                                end\n       \
    \                                     end\n                                  \
    \      end\n                                    end\n                        \
    \        end\n                            end\n                        end\n \
    \                   end\n                end\n            end\n        end\n \
    \       output = output .. alphabet[index + 1]\n    end\n    return output\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfut7e3i8.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpfut7e3i8.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpfut7e3i8.lua:74: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = message\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + letter\n    for j = 1, #vowels do\n      index =\
    \ index:sub(1, index:find(vowels, 1, j))\n    end\n    result = result:sub(1,\
    \ #result) + index:sub(1, index:find(vowels, 1, #index) + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpastyy916.lua:17:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmpastyy916.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local new_message = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet.find(letter)\n    local vowel_index = vowels.find(letter)\n\
    \    local new_letter = alphabet:sub(index, index + 1)\n    local new_vowel =\
    \ alphabet:sub(vowel_index, vowel_index + 1)\n    new_message = new_message ..\
    \ new_letter .. new_vowel\n  end\n  return new_message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx311qg4.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpnx311qg4.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpnx311qg4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local newMessage = \"\"\n    for i = 1, #message do\n        local letter\
    \ = message[i]\n        local newLetter = letter\n        for j = 1, #alphabet\
    \ do\n            if alphabet:sub(i, j) == letter then\n                newLetter\
    \ = alphabet:sub(i, j + 2)\n            end\n        end\n        for j = 1, #vowels\
    \ do\n            if vowels:sub(i, j) == letter then\n                newLetter\
    \ = vowels:sub(i, j)\n            end\n        end\n        newMessage = newMessage\
    \ .. newLetter\n    end\n    return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaop436y_.lua:28:\
    \ attempt to concatenate local 'newLetter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpaop436y_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local newMessage = ''\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        local newLetter = letter\n        for j = 1, #alphabet do\n\
    \            if alphabet[j] == letter then\n                newLetter = alphabet[(j\
    \ + 2)%#alphabet]\n            end\n        end\n        newMessage = newMessage\
    \ .. newLetter\n    end\n    for i = 1, #vowels do\n        newMessage = newMessage\
    \ .. alphabet[(alphabet + i)%#alphabet]\n    end\n    return newMessage\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb_v31oy.lua:23:\
    \ attempt to concatenate local 'newLetter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmppb_v31oy.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        if letter ~= nil then\n            local index = alphabet.find(letter)\n\
    \            local vowelIndex = alphabet.find(vowels, index + 1)\n           \
    \ if vowelIndex == nil then\n                index = alphabet.find(letter, index\
    \ + 1)\n            end\n            if index == nil then\n                index\
    \ = alphabet.find(letter, index + 1)\n            end\n            if index ==\
    \ nil then\n                index = alphabet.find(letter, index + 1)\n       \
    \     end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            end\n            if index == nil then\n            \
    \    index = alphabet.find(letter, index + 1)\n            end\n            if\
    \ index == nil then\n                index = alphabet.find(letter, index + 1)\n\
    \            end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            end\n            if index == nil then\n            \
    \    index = alphabet.find(letter, index + 1)\n            end\n            if\
    \ index == nil then\n                index = alphabet.find(letter, index + 1)\n\
    \            end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            end\n            if index == nil then\n            \
    \    index = alphabet.find(letter, index + 1)\n            end\n            if\
    \ index == nil then\n                index = alphabet.find(letter, index + 1)\n\
    \            end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            end\n            if index == nil then\n            \
    \    index = alphabet.find(letter, index + 1)\n            end\n            if\
    \ index == nil then\n                index = alphabet.find(letter, index + 1)\n\
    \            end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            end\n            if index == nil then\n            \
    \    index = alphabet.find(letter, index + 1)\n            end\n            if\
    \ index == nil then\n                index = alphabet.find(letter, index + 1)\n\
    \            end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            end\n            if index == nil then\n            \
    \    index = alphabet.find(letter, index + 1)\n            end\n            if\
    \ index == nil then\n                index = alphabet.find(letter, index + 1)\n\
    \            end\n            if index == nil then\n                index = alphabet.find(letter,\
    \ index + 1)\n            \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5nsh5984.lua:97: 'end' expected (to close 'if' at line 83)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter) or letter\n    local vowelIndex\
    \ = vowels and vowels:find(letter) or letter\n    local nextLetter = alphabet:sub(index,\
    \ index + 1)\n    local nextVowel = vowels:sub(vowelIndex, vowelIndex + 1)\n \
    \   local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(letter) or letter\n  \
    \  local nextVowelIndex = alphabet and alphabet:find(nextVowel) or nextVowel\n\
    \    local nextLetterIndex = alphabet and alphabet:find(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfjk34ms3.lua:43: ')' expected (to close '(' at line 42) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local letterIndex = alphabet + vowel\n\
    \    local letterIndex = letterIndex:sub(1, 1)\n    local letterIndex = letterIndex:sub(2,\
    \ 2)\n    local letterIndex = letterIndex:sub(3, 3)\n    local letterIndex = letterIndex:sub(4,\
    \ 4)\n    local letterIndex = letterIndex:sub(5, 5)\n    local letterIndex = letterIndex:sub(6,\
    \ 6)\n    local letterIndex = letterIndex:sub(7, 7)\n    local letterIndex = letterIndex:sub(8,\
    \ 8)\n    local letterIndex = letterIndex:sub(9, 9)\n    local letterIndex = letterIndex:sub(10,\
    \ 10)\n    local letterIndex = letterIndex:sub(11, 11)\n    local letterIndex\
    \ = letterIndex:sub(12, 12)\n    local letterIndex = letterIndex:sub(13, 13)\n\
    \    local letterIndex = letterIndex:sub(14, 14)\n    local letterIndex = letterIndex:sub(15,\
    \ 15)\n    local letterIndex = letterIndex:sub(16, 16)\n    local letterIndex\
    \ = letterIndex:sub(17, 17)\n    local letterIndex = letterIndex:sub(18, 18)\n\
    \    local letterIndex = letterIndex:sub(19, 19)\n    local letterIndex = letterIndex:sub(20,\
    \ 20)\n    local letterIndex = letterIndex:sub(21, 21)\n    local letterIndex\
    \ = letterIndex:sub(22, 22)\n    local letterIndex = letterIndex:sub(23, 23)\n\
    \    local letterIndex = letterIndex:sub(24, 24)\n    local letterIndex = letterIndex:sub(25,\
    \ 25)\n    local letterIndex = letterIndex:sub(26, 26)\n    local letterIndex\
    \ = letterIndex:sub(27, 27)\n    local letterIndex = letterIndex:sub(28, 28)\n\
    \    local letterIndex = letterIndex:sub(29, 29)\n    local letterIndex = letterIndex:sub(30,\
    \ 30)\n    local letterIndex = letterIndex:sub(31, 31)\n    local letterIndex\
    \ = letterIndex:sub(32, 32)\n    local letterIndex = letterIndex:sub(33, 33)\n\
    \    local letterIndex = letterIndex:sub(34, 34)\n    local letterIndex = letterIndex:sub(35,\
    \ 35)\n    local letterIndex = letterIndex:sub(36, 36)\n    local letterIndex\
    \ = letterIndex:sub(37, 37)\n    local letterIndex = letterIndex:sub(38, 38)\n\
    \    local letterIndex = letterIndex:sub(39, 39)\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6h5qfcx0.lua:70: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  -- Hint: Use a dictionary to store letters and\
    \ their position\n  -- Hint: Use a for loop to iterate over the message\n  --\
    \ Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace\
    \ letters\n  -- Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub\
    \ to replace letters\n  -- Hint: Use string.gsub to replace vowels\n  -- Hint:\
    \ Use string.gsub to replace letters\n  -- Hint: Use string.gsub to replace vowels\n\
    \  -- Hint: Use string.gsub to replace letters\n  -- Hint: Use string.gsub to\
    \ replace vowels\n  -- Hint: Use string.gsub to replace letters\n  -- Hint: Use\
    \ string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace letters\n\
    \  -- Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace\
    \ letters\n  -- Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub\
    \ to replace letters\n  -- Hint: Use string.gsub to replace vowels\n  -- Hint:\
    \ Use string.gsub to replace letters\n  -- Hint: Use string.gsub to replace vowels\n\
    \  -- Hint: Use string.gsub to replace letters\n  -- Hint: Use string.gsub to\
    \ replace vowels\n  -- Hint: Use string.gsub to replace letters\n  -- Hint: Use\
    \ string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace letters\n\
    \  -- Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace\
    \ letters\n  -- Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub\
    \ to replace letters\n  -- Hint: Use string.gsub to replace vowels\n  -- Hint:\
    \ Use string.gsub to replace letters\n  -- Hint: Use string.gsub to replace vowels\n\
    \  -- Hint: Use string.gsub to replace letters\n  -- Hint: Use string.gsub to\
    \ replace vowels\n  -- Hint: Use string.gsub to replace letters\n  -- Hint: Use\
    \ string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace letters\n\
    \  -- Hint: Use string.gsub to replace vowels\n  -- Hint: Use string.gsub to replace\
    \ letters\n  -- Hint: \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3xd2qcdk.lua:65: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter:lower() ~= letter then\n            letter = letter:lower()\n\
    \        end\n        local vowel = letter:sub(1, 1)\n        local index = alphabet:find(vowel)\n\
    \        if index == nil then\n            index = alphabet:find(vowel:lower())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:upper())\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(1,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(2,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(3,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(4,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(5,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(6,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(7,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(8,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(9,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(10,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(11,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(12,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(13,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(14,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(15,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(16,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(17,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(18,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(19,\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet:find(vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphafra4a9.lua:87: ')' expected (to close '(' at line 86) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = \"\"\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i+1, #alphabet)\n\
    \        local replacement = alphabet:sub(i+1, #alphabet)\n        if letter ~=\
    \ nil and letter ~= ' ' then\n            local index = alphabet + alphabet:sub(1,\
    \ i) + alphabet:sub(i+1, #alphabet)\n            local replacement = alphabet:sub(i+1,\
    \ #alphabet)\n            if replacement:find(vowels) then\n                replacement\
    \ = replacement:sub(1, #replacement)\n            end\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement = replacement:sub(1,\
    \ #replacement)\n            replacement = replacement:sub(1, #replacement)\n\
    \            replacement = replacement:sub(1, #replacement)\n            replacement\
    \ = replacement:sub(1, #replacement)\n            replacement\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3o_d9cze.lua:59: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        A = 65,\n        B = 66,\n        C = 67,\n \
    \       D = 68,\n        E = 69,\n        F = 70,\n        G = 71,\n        H\
    \ = 72,\n        I = 73,\n        J = 74,\n        K = 75,\n        L = 76,\n\
    \        M = 77,\n        N = 78,\n        O = 79,\n        P = 80,\n        Q\
    \ = 81,\n        R = 82,\n        S = 83,\n        T = 84,\n        U = 85,\n\
    \        V = 86,\n        W = 87,\n        X = 88,\n        Y = 89,\n        Z\
    \ = 90,\n    }\n    local vowels = {\n        a,\n        e,\n        i\n    }\n\
    \    local result = \"\"\n    for i = 1, #message do\n        local letter = string.sub(message,\
    \ i, i)\n        if letter then\n            local letterIndex = alphabet[letter]\n\
    \            local vowelIndex = letterIndex - 1\n            if vowelIndex >=\
    \ 0 then\n                local vowel = string.sub(vowels, vowelIndex, vowelIndex)\n\
    \                local vowelIndex = alphabet[vowel]\n                if vowelIndex\
    \ >= 0 then\n                    local letter = string.sub(vowels, vowelIndex\
    \ + 1, vowelIndex + 1)\n                    result = result .. letter\n      \
    \          else\n                    result = result .. letter\n             \
    \   end\n            else\n                result = result .. letter\n       \
    \     end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7riq6rv.lua:52:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpx7riq6rv.lua:52: in function 'candidate'\n\t/tmp/tmpx7riq6rv.lua:71: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLetters = string.gsub(message, '%c', function(letter)\n    \
    \    if letter == 'a' then\n            return alphabet[alphabet.index(letter)\
    \ + 1]\n        end\n        if letter == 'e' then\n            return alphabet[alphabet.index(letter)\
    \ + 1]\n        end\n        if letter == 'i' then\n            return alphabet[alphabet.index(letter)\
    \ + 1]\n        end\n        if letter == 'o' then\n            return alphabet[alphabet.index(letter)\
    \ + 1]\n        end\n        if letter == 'u' then\n            return alphabet[alphabet.index(letter)\
    \ + 1]\n        end\n        if letter == 'y' then\n            return alphabet[alphabet.index(letter)\
    \ + 1]\n        end\n        return letter\n    end)\n    local messageVowels\
    \ = string.gsub(messageLetters, '[aeiou]', \n        function(vowel)\n       \
    \     return alphabet[alphabet.index(vowel) + 1]\n        end)\n    return messageVowels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0st934xx.lua:45:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp0st934xx.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local message2\
    \ = message\n  local alphabet2 = alphabet\n  local vowels2 = vowels\n  local alphabet3\
    \ = alphabet\n  local vowels3 = vowels\n  local alphabet4 = alphabet\n  local\
    \ vowels4 = vowels\n  local alphabet5 = alphabet\n  local vowels5 = vowels\n \
    \ local alphabet6 = alphabet\n  local vowels6 = vowels\n  local alphabet7 = alphabet\n\
    \  local vowels7 = vowels\n  local alphabet8 = alphabet\n  local vowels8 = vowels\n\
    \  local alphabet9 = alphabet\n  local vowels9 = vowels\n  local alphabet10 =\
    \ alphabet\n  local vowels10 = vowels\n  local alphabet11 = alphabet\n  local\
    \ vowels11 = vowels\n  local alphabet12 = alphabet\n  local vowels12 = vowels\n\
    \  local alphabet13 = alphabet\n  local vowels13 = vowels\n  local alphabet14\
    \ = alphabet\n  local vowels14 = vowels\n  local alphabet15 = alphabet\n  local\
    \ vowels15 = vowels\n  local alphabet16 = alphabet\n  local vowels16 = vowels\n\
    \  local alphabet17 = alphabet\n  local vowels17 = vowels\n  local alphabet18\
    \ = alphabet\n  local vowels18 = vowels\n  local alphabet19 = alphabet\n  local\
    \ vowels19 = vowels\n  local alphabet20 = alphabet\n  local vowels20 = vowels\n\
    \  local alphabet21 = alphabet\n  local vowels21 = vowels\n  local alphabet22\
    \ = alphabet\n  local vowels22 = vowels\n  local alphabet23 = alphabet\n  local\
    \ vowels23 = vowels\n  local alphabet24 = alphabet\n  local vowels24 = vowels\n\
    \  local alphabet25 = alphabet\n  local vowels25 = vowels\n  local alphabet26\
    \ = alphabet\n  local vowels26 = vowels\n  local alphabet27 = alphabet\n  local\
    \ vowels27 = vowels\n  local alphabet28 = alphabet\n  local vowels28 = vowels\n\
    \  local alphabet29 = alphabet\n  local vowels29 = vowels\n  local alphabet30\
    \ = alphabet\n  local vowels30 = vowels\n  local alphabet31 = alphabet\n  \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoa1740kp.lua:87: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', \n        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z', \n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', \n        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', \n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n        'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n        'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', \n        'A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n        'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n        'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z', \n        '0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', \n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', \n        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', \n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ \n        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \n\
    \        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n \
    \       'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', \n  \
    \      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n        'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n        'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', \n        'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \n        'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', \n        'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', \n        'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z', \n        '0', '1', '2', '3', '4', '5', '6', '\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaeilj7sc.lua:38: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet .. vowels .. alphabet\n        local letterIndex\
    \ = index:find(letter)\n        if letterIndex then\n            local vowelIndex\
    \ = letterIndex + 2\n            local vowel = vowels:sub(vowelIndex, 1)\n   \
    \         local letter = alphabet:sub(vowelIndex, 1)\n            output = output\
    \ .. letter .. vowel\n        else\n            output = output .. letter\n  \
    \      end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4rd6uxu.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpc4rd6uxu.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpc4rd6uxu.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local messageLength = #message\n    local encodedMessage = \"\"\n    local\
    \ index = 0\n    local currentLetter = \"\"\n    local currentVowel = \"\"\n \
    \   local currentVowelIndex = 0\n    local currentVowelPosition = 0\n    local\
    \ currentVowelPositionIndex = 0\n    local currentVowelPositionIndex2 = 0\n  \
    \  local currentVowelPositionIndex3 = 0\n    local currentVowelPositionIndex4\
    \ = 0\n    local currentVowelPositionIndex5 = 0\n    local currentVowelPositionIndex6\
    \ = 0\n    local currentVowelPositionIndex7 = 0\n    local currentVowelPositionIndex8\
    \ = 0\n    local currentVowelPositionIndex9 = 0\n    local currentVowelPositionIndex10\
    \ = 0\n    local currentVowelPositionIndex11 = 0\n    local currentVowelPositionIndex12\
    \ = 0\n    local currentVowelPositionIndex13 = 0\n    local currentVowelPositionIndex14\
    \ = 0\n    local currentVowelPositionIndex15 = 0\n    local currentVowelPositionIndex16\
    \ = 0\n    local currentVowelPositionIndex17 = 0\n    local currentVowelPositionIndex18\
    \ = 0\n    local currentVowelPositionIndex19 = 0\n    local currentVowelPositionIndex20\
    \ = 0\n    local currentVowelPositionIndex21 = 0\n    local currentVowelPositionIndex22\
    \ = 0\n    local currentVowelPositionIndex23 = 0\n    local currentVowelPositionIndex24\
    \ = 0\n    local currentVowelPositionIndex25 = 0\n    local currentVowelPositionIndex26\
    \ = 0\n    local currentVowelPositionIndex27 = 0\n    local currentVowelPositionIndex28\
    \ = 0\n    local currentVowelPositionIndex29 = 0\n    local currentVowelPositionIndex30\
    \ = 0\n    local currentVowelPositionIndex31 = 0\n    local currentVowelPositionIndex32\
    \ = 0\n    local currentVowelPositionIndex33 = 0\n    local currentVowelPositionIndex34\
    \ = 0\n    local currentVowelPositionIndex35 = 0\n    local currentVowelPositionIndex36\
    \ = 0\n    local currentVowelPositionIndex37 = 0\n    local currentVowelPositionIndex38\
    \ = 0\n    local currentVowelPositionIndex39 = 0\n    local currentVowelPositionIndex40\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd46op5tr.lua:72: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local newMessage = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter)\n    if index and (index\
    \ > 0 or (index == 0 and letter ~= vowels[1])) then\n      local vowelIndex =\
    \ alphabet and alphabet:find(vowels, index + 1)\n      if vowelIndex and (vowelIndex\
    \ > 0 or (vowelIndex == 0 and letter ~= vowels[2])) then\n        newMessage =\
    \ newMessage .. alphabet:sub(index, index + 1)\n      else\n        newMessage\
    \ = newMessage .. letter\n      end\n    else\n      newMessage = newMessage ..\
    \ letter\n    end\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg07354m.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpxg07354m.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpxg07354m.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local newMessage = \"\"\n    local vowelIndex = 0\n    local letterIndex\
    \ = 0\n    local vowelCount = 0\n    local letterCount = 0\n    local currentLetter\
    \ = message[1]\n    local currentVowel = message[2]\n    local currentVowelIndex\
    \ = alphabet:find(currentVowel)\n    local currentLetterIndex = alphabet:find(currentLetter)\n\
    \    local currentVowelCount = alphabet:find(currentVowel)\n    local currentLetterCount\
    \ = alphabet:find(currentLetter)\n    local currentVowelIndex2 = alphabet:find(currentVowel)\n\
    \    local currentLetterIndex2 = alphabet:find(currentLetter)\n    local currentVowelCount2\
    \ = alphabet:find(currentVowel)\n    local currentLetterCount2 = alphabet:find(currentLetter)\n\
    \    local currentVowelIndex3 = alphabet:find(currentVowel)\n    local currentLetterIndex3\
    \ = alphabet:find(currentLetter)\n    local currentVowelCount3 = alphabet:find(currentVowel)\n\
    \    local currentLetterCount3 = alphabet:find(currentLetter)\n    local currentVowelIndex4\
    \ = alphabet:find(currentVowel)\n    local currentLetterIndex4 = alphabet:find(currentLetter)\n\
    \    local currentVowelCount4 = alphabet:find(currentVowel)\n    local currentLetterCount4\
    \ = alphabet:find(currentLetter)\n    local currentVowelIndex5 = alphabet:find(currentVowel)\n\
    \    local currentLetterIndex5 = alphabet:find(currentLetter)\n    local currentVowelCount5\
    \ = alphabet:find(currentVowel)\n    local currentLetterCount5 = alphabet:find(currentLetter)\n\
    \    local currentVowelIndex6 = alphabet:find(currentVowel)\n    local currentLetterIndex6\
    \ = alphabet:find(currentLetter)\n    local currentVowelCount6 = alphabet:find(currentVowel)\n\
    \    local currentLetterCount6 = alphabet:find(currentLetter)\n    local currentVowelIndex7\
    \ = alphabet:find(currentVowel)\n    local currentLetterIndex7 = alphabet:find(currentLetter)\n\
    \    local currentVowelCount7 = alphabet:find(currentVowel)\n    local currentLetterCount7\
    \ = alphabet:find(currentLetter)\n    local currentVowelIndex8 = alphabet:find(currentVowel)\n\
    \    local currentLetterIndex8 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphau23zrw.lua:51: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['a'] = {\n      ['e'] = {\n        ['i'] = {\n   \
    \       ['o'] = {\n            ['u'] = {\n              ['y'] = {\n          \
    \      ['A'] = {\n                  ['B'] = {\n                    ['C'] = {\n\
    \                      ['D'] = {\n                        ['E'] = {\n        \
    \                  ['F'] = {\n                            ['G'] = {\n        \
    \                      ['H'] = {\n                                ['I'] = {\n\
    \                                  ['J'] = {\n                               \
    \     ['K'] = {\n                                      ['L'] = {\n           \
    \                             ['M'] = {\n                                    \
    \      ['N'] = {\n                                            ['O'] = {\n    \
    \                                          ['P'] = {\n                       \
    \                         ['Q'] = {\n                                        \
    \          ['R'] = {\n                                                    ['S']\
    \ = {\n                                                      ['T'] = {\n     \
    \                                                   ['U'] = {\n              \
    \                                            ['V'] = {\n                     \
    \                                       ['W'] = {\n                          \
    \                                    ['X'] = {\n                             \
    \                                   ['Y'] = {\n                              \
    \                                    ['Z'] = {\n                             \
    \                                       ['0'] = {\n                          \
    \                                            ['1'] = {\n                     \
    \                                                   ['2'] = {\n              \
    \                                                            ['3'] = {\n     \
    \                                                                       ['4']\
    \ = {\n                                                                      \
    \        ['5'] = {\n                                                         \
    \                       ['6'] = {\n                                          \
    \                                        ['7'] = {\n                         \
    \                                                           ['8'] = {\n      \
    \                                                                            \
    \    ['9'] = {\n                                                             \
    \                           ['!'] = {\n                                      \
    \                                                    ['?'] = {\n             \
    \                                                                            \
    \   ['#'] = {\n                                                              \
    \                                ['$'] = {\n                                 \
    \                                                               ['%'] = {\n  \
    \                                                                            \
    \                    ['&'] = {\n                                             \
    \                                                       ['*'] = {\n          \
    \                                                                            \
    \                ['('] = {\n                                                 \
    \                                                       [')'] = {\n          \
    \                                                                            \
    \                    ['-'] = {\n                                             \
    \                                                               ['+'] = {\n  \
    \                                                                            \
    \                                ['/'] = {\n                                 \
    \                                                                            \
    \   ['0'] = {\n                                                              \
    \                                                    ['1'] = {\n             \
    \                                                                            \
    \                           ['2'] = {\n                                      \
    \                                                                            \
    \    ['3'] = {\n                                                             \
    \                                                           ['4'] = {\n      \
    \                                                                            \
    \                                        ['5'] = {\n                         \
    \                                                                            \
    \                       ['6'] = {\n                                          \
    \                                                                            \
    \        ['7'] = {\n                                                         \
    \                                                                       ['8']\
    \ = {\n                                                                      \
    \                                                            ['9'] = {\n     \
    \                                                                            \
    \                                                   [':'] = {\n              \
    \                                                                            \
    \                                            [';'] = {\n                     \
    \                                                                            \
    \                                       ['<'] = {\n                          \
    \                                                                            \
    \                                    ['>'] = {\n                             \
    \                                                                            \
    \                                   ['?'] = {\n                              \
    \                                                                            \
    \                                    ['@'] = {\n                             \
    \                                                                            \
    \                                       ['A'] = {\n                          \
    \                                                                            \
    \                                            ['B'] = {\n                     \
    \                                                                            \
    \                                                   ['C'] = {\n              \
    \                                                                            \
    \                                                            ['D'] = {\n     \
    \                                                                            \
    \                                                                       ['E']\
    \ = {\n                                                                      \
    \                                                                            \
    \        ['F'] = {\n                                                         \
    \                                                                            \
    \                       ['G'] = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp23d70mpo.lua:90: '}' expected (to close '{' at line 88) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['A'] = 'A',\n    ['B'] = 'B',\n    ['C'] = 'C',\n\
    \    ['D'] = 'D',\n    ['E'] = 'E',\n    ['F'] = 'F',\n    ['G'] = 'G',\n    ['H']\
    \ = 'H',\n    ['I'] = 'I',\n    ['J'] = 'J',\n    ['K'] = 'K',\n    ['L'] = 'L',\n\
    \    ['M'] = 'M',\n    ['N'] = 'N',\n    ['O'] = 'O',\n    ['P'] = 'P',\n    ['Q']\
    \ = 'Q',\n    ['R'] = 'R',\n    ['S'] = 'S',\n    ['T'] = 'T',\n    ['U'] = 'U',\n\
    \    ['V'] = 'V',\n    ['W'] = 'W',\n    ['X'] = 'X',\n    ['Y'] = 'Y',\n    ['Z']\
    \ = 'Z',\n    ['a'] = 'a',\n    ['b'] = 'b',\n    ['c'] = 'c',\n    ['d'] = 'd',\n\
    \    ['e'] = 'e',\n    ['f'] = 'f',\n    ['g'] = 'g',\n    ['h'] = 'h',\n    ['i']\
    \ = 'i',\n    ['j'] = 'j',\n    ['k'] = 'k',\n    ['l'] = 'l',\n    ['m'] = 'm',\n\
    \    ['n'] = 'n',\n    ['o'] = 'o',\n    ['p'] = 'p',\n    ['q'] = 'q',\n    ['r']\
    \ = 'r',\n    ['s'] = 's',\n    ['t'] = 't',\n    ['u'] = 'u',\n    ['v'] = 'v',\n\
    \    ['w'] = 'w',\n    ['x'] = 'x',\n    ['y'] = 'y',\n    ['z'] = 'z',\n    ['\
    \ '] = '_',\n    ['.'] = '.',\n    ['!'] = '!',\n    ['?'] = '?',\n    ['('] =\
    \ '(',\n    [')'] = ')',\n    ['-'] = '-',\n    ['_'] = '_',\n    ['/'] = '/',\n\
    \    ['\\\\'] = '\\\\',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n\
    \    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    ['\
    \ '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] =\
    \ '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n\
    \    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    ['\
    \ '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] = '_',\n    [' '] =\
    \ '_',\n    [' '] = '_',\n    [' '] = '_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwc6d55iu.lua:101: unfinished string near ''_'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local messageWithVowels = message\n  local vowelIndex = 1\n  local vowelIndex2\
    \ = 0\n  local newMessage = ''\n  local newMessageWithVowels = ''\n  for i = 1,\
    \ #message do\n    if alphabet:sub(i,i) == alphabet:sub(vowelIndex,vowelIndex)\
    \ then\n      newMessage = newMessage .. alphabet:sub(vowelIndex2,vowelIndex)\
    \ \n      vowelIndex2 = vowelIndex2 + 1\n    elseif alphabet:sub(i,i) == alphabet:sub(vowelIndex2,vowelIndex2)\
    \ then\n      newMessageWithVowels = newMessageWithVowels .. alphabet:sub(vowelIndex,vowelIndex)\
    \ \n      vowelIndex = vowelIndex + 1\n    else\n      newMessage = newMessage\
    \ .. alphabet:sub(i,i) \n    end\n  end\n  return newMessageWithVowels .. newMessage\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8em895n.lua:36:\
    \ expected: \"tgst\"\nactual: \"abcd\"\nstack traceback:\n\t/tmp/tmpl8em895n.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local alphabet = {'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local messageLength = #message\n  local\
    \ encodedMessage = \"\"\n  local currentLetter = \"\"\n  local currentVowel =\
    \ \"\"\n  local currentLetterIndex = 0\n  local currentVowelIndex = 0\n  local\
    \ currentLetterIndex2 = 0\n  local currentVowelIndex2 = 0\n  for i = 1, messageLength\
    \ do\n    currentLetter = message[i]\n    currentVowel = vowels[currentLetterIndex]\n\
    \    currentLetterIndex = currentLetterIndex + 1\n    currentVowelIndex = currentVowelIndex\
    \ + 1\n    currentLetterIndex2 = currentLetterIndex2 + 1\n    currentVowelIndex2\
    \ = currentVowelIndex2 + 1\n    if currentLetterIndex2 > #alphabet then\n    \
    \  currentLetterIndex2 = 1\n      currentVowelIndex2 = 1\n    end\n    if currentVowelIndex2\
    \ > #vowels then\n      currentVowelIndex2 = 1\n    end\n    encodedMessage =\
    \ encodedMessage .. alphabet[currentLetterIndex2] .. vowels[currentVowelIndex2]\
    \ .. alphabet[currentVowelIndex] .. currentLetter\n    currentLetterIndex2 = currentLetterIndex2\
    \ + 1\n    currentVowelIndex2 = currentVowelIndex2 + 1\n  end\n  return encodedMessage\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpat1ueq14.lua:36:\
    \ attempt to concatenate local 'currentLetter' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpat1ueq14.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local newLetter = alphabet[alphabet + alphabet + letter]\n    newMessage\
    \ = newMessage .. newLetter\n  end\n  for i = 1, #vowels do\n    newMessage =\
    \ newMessage .. alphabet[alphabet + alphabet + vowels[i]]\n  end\n  return newMessage\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo2rajwt.lua:17:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmpxo2rajwt.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local nextLetter = letter:sub(2, 2)\n\
    \    local index = alphabet:find(vowel)\n    if index == nil then\n      index\
    \ = alphabet:find(nextLetter)\n    end\n    if index == nil then\n      index\
    \ = alphabet:find(letter)\n    end\n    if index == nil then\n      index = alphabet:find(vowel)\n\
    \    end\n    if index == nil then\n      index = alphabet:find(nextLetter)\n\
    \    end\n    if index == nil then\n      index = alphabet:find(letter)\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel)\n    end\n    if\
    \ index == nil then\n      index = alphabet:find(nextLetter)\n    end\n    if\
    \ index == nil then\n      index = alphabet:find(letter)\n    end\n    if index\
    \ == nil then\n      index = alphabet:find(vowel)\n    end\n    if index == nil\
    \ then\n      index = alphabet:find(nextLetter)\n    end\n    if index == nil\
    \ then\n      index = alphabet:find(letter)\n    end\n    if index == nil then\n\
    \      index = alphabet:find(vowel)\n    end\n    if index == nil then\n     \
    \ index = alphabet:find(nextLetter)\n    end\n    if index == nil then\n     \
    \ index = alphabet:find(letter)\n    end\n    if index == nil then\n      index\
    \ = alphabet:find(vowel)\n    end\n    if index == nil then\n      index = alphabet:find(nextLetter)\n\
    \    end\n    if index == nil then\n      index = alphabet:find(letter)\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel)\n    end\n    if\
    \ index == nil then\n      index = alphabet:find(nextLetter)\n    end\n    if\
    \ index == nil then\n      index = alphabet:find(letter)\n    end\n    if index\
    \ == nil then\n      index = alphabet:find(vowel)\n    end\n    if index == nil\
    \ then\n      index = alphabet:find(nextLetter)\n    end\n    if index == nil\
    \ then\n      index = alphabet:find(letter)\n    end\n    if index == nil then\n\
    \      index = alphabet:find(vowel)\n    end\n    if index == nil then\n     \
    \ index = alphabet:find(nextLetter)\n    end\n    if index == nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_xdtgdik.lua:96: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['a'] = 'A',\n    ['b'] = 'B',\n    ['c'] = 'C',\n\
    \    ['d'] = 'D',\n    ['e'] = 'E',\n    ['f'] = 'F',\n    ['g'] = 'G',\n    ['h']\
    \ = 'H',\n    ['i'] = 'I',\n    ['j'] = 'J',\n    ['k'] = 'K',\n    ['l'] = 'L',\n\
    \    ['m'] = 'M',\n    ['n'] = 'N',\n    ['o'] = 'O',\n    ['p'] = 'P',\n    ['q']\
    \ = 'Q',\n    ['r'] = 'R',\n    ['s'] = 'S',\n    ['t'] = 'T',\n    ['u'] = 'U',\n\
    \    ['v'] = 'V',\n    ['w'] = 'W',\n    ['x'] = 'X',\n    ['y'] = 'Y',\n    ['z']\
    \ = 'Z',\n    ['A'] = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n    ['D'] = 'd',\n\
    \    ['E'] = 'e',\n    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H'] = 'h',\n    ['I']\
    \ = 'i',\n    ['J'] = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n    ['M'] = 'm',\n\
    \    ['N'] = 'n',\n    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q'] = 'q',\n    ['R']\
    \ = 'r',\n    ['S'] = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n    ['V'] = 'v',\n\
    \    ['W'] = 'w',\n    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z'] = 'z',\n  }\n\
    \  local vowels = {\n    ['a'] = 'a',\n    ['e'] = 'e',\n    ['i'] = 'i',\n  \
    \  ['o'] = 'o',\n    ['u'] = 'u',\n  }\n  local result = \"\"\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local letterIndex = alphabet.keys[letter]\n\
    \    local vowelIndex = vowels.keys[letter]\n    if letterIndex == nil then\n\
    \      letterIndex = alphabet.keys[' ']\n    end\n    if vowelIndex == nil then\n\
    \      vowelIndex = vowels.keys[' ']\n    end\n    local letter2 = alphabet[alphabet[letterIndex\
    \ + 1]]\n    local vowel2 = vowels[vowelIndex]\n    local letter3 = alphabet[alphabet[letterIndex\
    \ + 2]]\n    local vowel3 = vowels[vowelIndex + 1]\n    local letter4 = alphabet[alphabet[letterIndex\
    \ + 3]]\n    local vowel4 = vowels[vowelIndex + 2]\n    local letter5 = alphabet[alphabet[letterIndex\
    \ + 4]]\n    local vowel5 = vowels[vowelIndex + 3]\n    local letter\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl8_2o_8g.lua:104: 'end' expected (to close 'for' at line 74)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local messageLetters = message:gsub('%c', function(letter)\n    local index\
    \ = alphabet == letter or alphabet:find(letter)\n    return alphabet:sub(index,\
    \ index+1)\n  end)\n  local messageVowels = messageLetters:gsub('%a', function(letter)\n\
    \    local index = vowels:find(letter)\n    return vowels:sub(index, index+1)\n\
    \  end)\n  return messageVowels .. messageLetters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz8t_44g.lua:20:\
    \ attempt to perform arithmetic on local 'index' (a nil value)\nstack traceback:\n\
    \t[C]: in function 'gsub'\n\t/tmp/tmpyz8t_44g.lua:18: in function 'candidate'\n\
    \t/tmp/tmpyz8t_44g.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ new_message = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    if letter == 'a' then\n      new_message = new_message .. alphabet[#alphabet\
    \ + 1]\n    elseif letter == 'e' then\n      new_message = new_message .. alphabet[#alphabet\
    \ + 2]\n    elseif letter == 'i' then\n      new_message = new_message .. alphabet[#alphabet\
    \ + 3]\n    elseif letter == 'o' then\n      new_message = new_message .. alphabet[#alphabet\
    \ + 4]\n    elseif letter == 'u' then\n      new_message = new_message .. alphabet[#alphabet\
    \ + 5]\n    else\n      new_message = new_message .. letter\n    end\n  end\n\
    \  return new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yfzemmr.lua:29:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp_yfzemmr.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local vowels = \"aeiou\"\n  local new_message = \"\"\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local vowel_index = alphabet.find(letter)\n\
    \    local vowel_letter = alphabet[vowel_index + 1]\n    new_message = new_message\
    \ .. string.sub(alphabet, vowel_index + 1, vowel_index + 2) .. vowel_letter\n\
    \  end\n  return new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jysnwgt.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp2jysnwgt.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp2jysnwgt.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i + 1, #alphabet)\n\
    \    local replacement = alphabet:sub(i + 1, #alphabet)\n    if letter:lower()\
    \ ~= letter then\n      letter = letter:lower()\n    end\n    letter = letter:gsub('a',\
    \ 'z')\n    letter = letter:gsub('e', 'z')\n    letter = letter:gsub('i', 'z')\n\
    \    letter = letter:gsub('o', 'z')\n    letter = letter:gsub('u', 'z')\n    letter\
    \ = letter:gsub('y', 'z')\n    letter = letter:gsub('a', 'a')\n    letter = letter:gsub('e',\
    \ 'e')\n    letter = letter:gsub('i', 'i')\n    letter = letter:gsub('o', 'o')\n\
    \    letter = letter:gsub('u', 'u')\n    letter = letter:gsub('y', 'y')\n    letter\
    \ = letter:gsub('h', 'h')\n    letter = letter:gsub('r', 'r')\n    letter = letter:gsub('s',\
    \ 's')\n    letter = letter:gsub('d', 'd')\n    letter = letter:gsub('g', 'g')\n\
    \    letter = letter:gsub('b', 'b')\n    letter = letter:gsub('p', 'p')\n    letter\
    \ = letter:gsub('v', 'v')\n    letter = letter:gsub('w', 'w')\n    letter = letter:gsub('z',\
    \ 'z')\n    letter = letter:gsub('s', 's')\n    letter = letter:gsub('c', 'c')\n\
    \    letter = letter:gsub('j', 'j')\n    letter = letter:gsub('q', 'q')\n    letter\
    \ = letter:gsub('t', 't')\n    letter = letter:gsub('k', 'k')\n    letter = letter:gsub('p',\
    \ 'p')\n    letter = letter:gsub('l', 'l')\n    letter = letter:gsub('f', 'f')\n\
    \    letter = letter:gsub('v', 'v')\n    letter = letter:gsub('y', 'y')\n    letter\
    \ = letter:gsub('h', 'h')\n    letter = letter:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp21zsw86m.lua:57: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['A'] = 'A',\n    ['B'] = 'B',\n    ['C'] = 'C',\n\
    \    ['D'] = 'D',\n    ['E'] = 'E',\n    ['F'] = 'F',\n    ['G'] = 'G',\n    ['H']\
    \ = 'H',\n    ['I'] = 'I',\n    ['J'] = 'J',\n    ['K'] = 'K',\n    ['L'] = 'L',\n\
    \    ['M'] = 'M',\n    ['N'] = 'N',\n    ['O'] = 'O',\n    ['P'] = 'P',\n    ['Q']\
    \ = 'Q',\n    ['R'] = 'R',\n    ['S'] = 'S',\n    ['T'] = 'T',\n    ['U'] = 'U',\n\
    \    ['V'] = 'V',\n    ['W'] = 'W',\n    ['X'] = 'X',\n    ['Y'] = 'Y',\n    ['Z']\
    \ = 'Z',\n    ['a'] = 'a',\n    ['b'] = 'b',\n    ['c'] = 'c',\n    ['d'] = 'd',\n\
    \    ['e'] = 'e',\n    ['f'] = 'f',\n    ['g'] = 'g',\n    ['h'] = 'h',\n    ['i']\
    \ = 'i',\n    ['j'] = 'j',\n    ['k'] = 'k',\n    ['l'] = 'l',\n    ['m'] = 'm',\n\
    \    ['n'] = 'n',\n    ['o'] = 'o',\n    ['p'] = 'p',\n    ['q'] = 'q',\n    ['r']\
    \ = 'r',\n    ['s'] = 's',\n    ['t'] = 't',\n    ['u'] = 'u',\n    ['v'] = 'v',\n\
    \    ['w'] = 'w',\n    ['x'] = 'x',\n    ['y'] = 'y',\n    ['z'] = 'z',\n    ['A']\
    \ = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n    ['D'] = 'd',\n    ['E'] = 'e',\n\
    \    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H'] = 'h',\n    ['I'] = 'i',\n    ['J']\
    \ = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n    ['M'] = 'm',\n    ['N'] = 'n',\n\
    \    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q'] = 'q',\n    ['R'] = 'r',\n    ['S']\
    \ = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n    ['V'] = 'v',\n    ['W'] = 'w',\n\
    \    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z'] = 'z',\n    ['a'] = 'a',\n    ['b']\
    \ = 'b',\n    ['c'] = 'c',\n    ['d'] = 'd',\n    ['e'] = 'e',\n    ['f'] = 'f',\n\
    \    ['g'] = 'g',\n    ['h'] = 'h',\n    ['i'] = 'i',\n    ['j'] = 'j',\n    ['k']\
    \ = 'k',\n    ['l'] = 'l',\n    ['m'] = 'm',\n    ['n'] = 'n',\n    ['o\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe1pfeqw9.lua:105: unfinished string near ''o'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local messageLength\
    \ = #message\n  local newMessage = \"\"\n  local index\n  for i = 1, messageLength\
    \ do\n    index = math.floor((messageLength - i) / 2)\n    newMessage = newMessage\
    \ .. alphabet[math.floor((messageLength - i) / 2) + 1]\n    newMessage = newMessage\
    \ .. alphabet[math.floor((messageLength - i) / 2)]\n    newMessage = newMessage\
    \ .. alphabet[math.floor((messageLength - i) / 2) - 1]\n  end\n  return newMessage\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf88bicn.lua:22:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpxf88bicn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelCount = 0\n    local letterCount = 0\n\
    \    for i = 1, #message do\n        local letter = message[i]\n        if letter:lower()\
    \ == letter then\n            letterCount = letterCount + 1\n        elseif letter:upper()\
    \ == letter then\n            letterCount = letterCount + 1\n        end\n   \
    \     if letter:upper() == letter then\n            local index = alphabet:find(letter:lower())\n\
    \            if index == nil then\n                index = alphabet:find(letter:upper())\n\
    \            end\n            if index ~= nil then\n                local nextVowel\
    \ = alphabet:sub((index - 1), index)\n                if nextVowel:upper() ==\
    \ nextVowel then\n                    vowelCount = vowelCount + 1\n          \
    \      end\n            end\n        end\n    end\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter:lower() == letter then\n\
    \            letterCount = letterCount + 1\n        elseif letter:upper() == letter\
    \ then\n            letterCount = letterCount + 1\n        end\n        if letter:upper()\
    \ == letter then\n            local index = alphabet:find(letter:lower())\n  \
    \          if index == nil then\n                index = alphabet:find(letter:upper())\n\
    \            end\n            if index ~= nil then\n                local nextVowel\
    \ = alphabet:sub((index - 1), index)\n                if nextVowel:upper() ==\
    \ nextVowel then\n                    vowelCount = vowelCount + 1\n          \
    \      end\n            end\n        end\n    end\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter:lower() == letter then\n\
    \            letterCount = letterCount + 1\n        elseif letter:upper() == letter\
    \ then\n            letterCount = letterCount + 1\n        end\n        if letter:upper()\
    \ == letter then\n            local index = alphabet:find(letter:lower())\n  \
    \          if index == nil then\n                index = alphabet:find(letter:upper())\n\
    \            end\n            if index ~= nil then\n                local nextVowel\
    \ = alphabet:sub((index - 1), index)\n                if nextVowel:upper() ==\
    \ nextVowel then\n                    vowelCount = vowelCount + 1\n          \
    \      end\n            end\n        end\n    end\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter:lower() == letter then\n\
    \            letterCount = letterCount + 1\n        elseif letter:upper() == letter\
    \ then\n            letter\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq4826b15.lua:83: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowel_positions = {}\n  local new_message = ''\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local vowel = letter:sub(1, 1)\n    local\
    \ position = alphabet:find(vowel)\n    if position == nil then\n      position\
    \ = alphabet + 1\n    end\n    vowel_positions[letter] = position\n  end\n  for\
    \ i = 1, #message do\n    local letter = message[i]\n    local vowel = letter:sub(1,\
    \ 1)\n    local position = alphabet:find(vowel)\n    if position == nil then\n\
    \      position = alphabet + 1\n    end\n    local new_letter = alphabet:sub(position,\
    \ position + 1)\n    new_message = new_message .. new_letter\n  end\n  for i =\
    \ 1, #message do\n    local letter = message[i]\n    local vowel = letter:sub(1,\
    \ 1)\n    local position = alphabet:find(vowel)\n    if position == nil then\n\
    \      position = alphabet + 1\n    end\n    local new_letter = alphabet:sub(position\
    \ + 1, position + 2)\n    new_message = new_message .. new_letter\n  end\n  for\
    \ i = 1, #message do\n    local letter = message[i]\n    local vowel = letter:sub(1,\
    \ 1)\n    local position = alphabet:find(vowel)\n    if position == nil then\n\
    \      position = alphabet + 1\n    end\n    local new_letter = alphabet:sub(position\
    \ + 2, position + 3)\n    new_message = new_message .. new_letter\n  end\n  for\
    \ i = 1, #message do\n    local letter = message[i]\n    local vowel = letter:sub(1,\
    \ 1)\n    local position = alphabet:find(vowel)\n    if position == nil then\n\
    \      position = alphabet + 1\n    end\n    local new_letter = alphabet:sub(position\
    \ + 3, position + 4)\n    new_message = new_message .. new_letter\n  end\n  for\
    \ i = 1, #message do\n    local letter = message[i]\n    local vowel = letter:sub(1,\
    \ 1)\n    local position = alphabet:find(vowel)\n    if position == nil then\n\
    \      position = alphabet + 1\n    end\n    local new_letter = alphabet:sub(position\
    \ + 4, position + 5)\n    new_message = new_message .. new_letter\n  end\n  for\
    \ i = 1, #message do\n    local letter = message[i]\n    local vowel = letter:sub(1,\
    \ 1)\n    local position = alphabet:find(vowel)\n    if position == nil then\n\
    \      position = alphabet + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcmr_dgpi.lua:93: 'end' expected (to close 'for' at line 75)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    local vowels = \"AEIOU\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        local vowel = letter:sub(1, 1)\n        local position =\
    \ alphabet:find(vowel)\n        if position > 0 then\n            local next =\
    \ alphabet:find(vowel, position + 1)\n            if next > 0 then\n         \
    \       local newLetter = alphabet:sub(position + 1, next - 1)\n             \
    \   local newPosition = alphabet:find(newLetter)\n                if newPosition\
    \ > 0 then\n                    local newNext = alphabet:find(newLetter, newPosition\
    \ + 1)\n                    if newNext > 0 then\n                        local\
    \ newNextLetter = alphabet:sub(newPosition + 1, newNext - 1)\n               \
    \         local newNextPosition = alphabet:find(newNextLetter)\n             \
    \           if newNextPosition > 0 then\n                            local newNextNext\
    \ = alphabet:find(newNextLetter, newNextPosition + 1)\n                      \
    \      if newNextNext > 0 then\n                                local newNextNextLetter\
    \ = alphabet:sub(newNextPosition + 1, newNextNext - 1)\n                     \
    \           local newNextNextPosition = alphabet:find(newNextNextLetter)\n   \
    \                             if newNextNextPosition > 0 then\n              \
    \                      local newNextNextNext = alphabet:find(newNextNextLetter,\
    \ newNextNextPosition + 1)\n                                    if newNextNextNext\
    \ > 0 then\n                                        local newNextNextNextLetter\
    \ = alphabet:sub(newNextNextPosition + 1, newNextNextNext - 1)\n             \
    \                           local newNextNextNextPosition = alphabet:find(newNextNextNextLetter)\n\
    \                                        if newNextNextNextPosition > 0 then\n\
    \                                            local newNextNextNextNext = alphabet:find(newNextNextNextLetter,\
    \ newNextNextNextPosition + 1)\n                                            if\
    \ newNextNextNextNext > 0 then\n                                             \
    \   local newNextNextNextNextLetter = alphabet:sub(newNextNextNextPosition + 1,\
    \ newNextNextNextNext - 1)\n                                                local\
    \ newNextNextNextNextPosition = alphabet:find(newNextNextNextNextLetter)\n   \
    \                                             if newNextNextNextNextPosition >\
    \ 0 then\n                                                    local newNextNextNextNextNext\
    \ = alphabet:find(newNextNextNextNextLetter, newNextNextNextNextPosition + 1)\n\
    \                                                    if newNextNextNextNextNext\
    \ > 0 then\n                                                        local newNextNextNextNextNextLetter\
    \ = alphabet:sub(newNextNextNextNextPosition + 1, newNextNextNextNextNext - 1)\n\
    \                                                        local newNextNextNextNextNextPosition\
    \ = alphabet:find(new\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9s01jsyq.lua:49: ')' expected (to close '(' at line 48) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n  -- Hint: use string.gsub\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyg0aquzd.lua:81: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a','e','i','o','u','y'}\n  local\
    \ alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local message1 = message\n  local message2 = message\n  local message3 = message\n\
    \  local message4 = message\n  local message5 = message\n  local message6 = message\n\
    \  local message7 = message\n  local message8 = message\n  local message9 = message\n\
    \  local message10 = message\n  local message11 = message\n  local message12 =\
    \ message\n  local message13 = message\n  local message14 = message\n  local message15\
    \ = message\n  local message16 = message\n  local message17 = message\n  local\
    \ message18 = message\n  local message19 = message\n  local message20 = message\n\
    \  local message21 = message\n  local message22 = message\n  local message23 =\
    \ message\n  local message24 = message\n  local message25 = message\n  local message26\
    \ = message\n  local message27 = message\n  local message28 = message\n  local\
    \ message29 = message\n  local message30 = message\n  local message31 = message\n\
    \  local message32 = message\n  local message33 = message\n  local message34 =\
    \ message\n  local message35 = message\n  local message36 = message\n  local message37\
    \ = message\n  local message38 = message\n  local message39 = message\n  local\
    \ message40 = message\n  local message41 = message\n  local message42 = message\n\
    \  local message43 = message\n  local message44 = message\n  local message45 =\
    \ message\n  local message46 = message\n  local message47 = message\n  local message48\
    \ = message\n  local message49 = message\n  local message50 = message\n  local\
    \ message51 = message\n  local message52 = message\n  local message53 = message\n\
    \  local message54 = message\n  local message55 = message\n  local message56 =\
    \ message\n  local message57 = message\n  local message58 = message\n  local message59\
    \ = message\n  local message60 = message\n  local message61 = message\n  local\
    \ message62 = message\n  local message63 = message\n  local message\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbos63cqt.lua:90: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local alphabet = {'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local result = \"\"\n  for i = 1,\
    \ #message do\n    local char = message[i]\n    local index = alphabet.find(char)\n\
    \    if index == nil then\n      result = result .. char\n    else\n      local\
    \ vowel = vowels[index]\n      local vowelIndex = alphabet.find(vowel)\n     \
    \ if vowelIndex == nil then\n        result = result .. char\n      else\n   \
    \     local nextVowel = alphabet[vowelIndex + 1]\n        result = result .. alphabet[vowelIndex]\
    \ .. nextVowel\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ih1zyjj.lua:17:\
    \ attempt to call field 'find' (a nil value)\nstack traceback:\n\t/tmp/tmp6ih1zyjj.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local vowels = \"aeiou\"\n  local output = ''\n  for i = 1, #message do\n\
    \    local char = message[i]\n    local index = alphabet.find(char)\n    if index\
    \ == nil then\n      output = output .. char\n    else\n      local vowel = vowels.sub(index,\
    \ index + 1)\n      local letter = alphabet.sub(index, index + 1)\n      output\
    \ = output .. letter .. vowel\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86pvlpp5.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp86pvlpp5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp86pvlpp5.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLength = #message\n    local encodedMessage = ''\n    local\
    \ index = 1\n    local currentLetter = message[1]\n    local currentVowel = message[1]\n\
    \    local currentVowelIndex = 1\n    local currentVowelIndex2 = 1\n    local\
    \ currentVowelIndex3 = 1\n    local currentVowelIndex4 = 1\n    local currentVowelIndex5\
    \ = 1\n    local currentVowelIndex6 = 1\n    local currentVowelIndex7 = 1\n  \
    \  local currentVowelIndex8 = 1\n    local currentVowelIndex9 = 1\n    local currentVowelIndex10\
    \ = 1\n    local currentVowelIndex11 = 1\n    local currentVowelIndex12 = 1\n\
    \    local currentVowelIndex13 = 1\n    local currentVowelIndex14 = 1\n    local\
    \ currentVowelIndex15 = 1\n    local currentVowelIndex16 = 1\n    local currentVowelIndex17\
    \ = 1\n    local currentVowelIndex18 = 1\n    local currentVowelIndex19 = 1\n\
    \    local currentVowelIndex20 = 1\n    local currentVowelIndex21 = 1\n    local\
    \ currentVowelIndex22 = 1\n    local currentVowelIndex23 = 1\n    local currentVowelIndex24\
    \ = 1\n    local currentVowelIndex25 = 1\n    local currentVowelIndex26 = 1\n\
    \    local currentVowelIndex27 = 1\n    local currentVowelIndex28 = 1\n    local\
    \ currentVowelIndex29 = 1\n    local currentVowelIndex30 = 1\n    local currentVowelIndex31\
    \ = 1\n    local currentVowelIndex32 = 1\n    local currentVowelIndex33 = 1\n\
    \    local currentVowelIndex34 = 1\n    local currentVowelIndex35 = 1\n    local\
    \ currentVowelIndex36 = 1\n    local currentVowelIndex37 = 1\n    local currentVowelIndex38\
    \ = 1\n    local currentVowelIndex39 = 1\n    local currentVowelIndex40 = 1\n\
    \    local currentVowelIndex41 = 1\n    local currentVowelIndex42 = 1\n    local\
    \ currentVowelIndex43 = 1\n    local currentVowelIndex44 = 1\n    local currentVowelIndex\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprde88ena.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  local vowelIndex = 1\n  for i = 1, #message do\n    local\
    \ char = message[i]\n    if char == 'a' then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    elseif char == 'e' then\n     \
    \ output = output .. alphabet[vowelIndex + 1]\n      vowelIndex = vowelIndex +\
    \ 2\n    elseif char == 'i' then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    elseif char == 'o' then\n     \
    \ output = output .. alphabet[vowelIndex + 1]\n      vowelIndex = vowelIndex +\
    \ 2\n    elseif char == 'u' then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    elseif char == 'y' then\n     \
    \ output = output .. alphabet[vowelIndex + 1]\n      vowelIndex = vowelIndex +\
    \ 2\n    elseif char == 'A' then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    elseif char == 'E' then\n     \
    \ output = output .. alphabet[vowelIndex + 1]\n      vowelIndex = vowelIndex +\
    \ 2\n    elseif char == 'I' then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    elseif char == 'O' then\n     \
    \ output = output .. alphabet[vowelIndex + 1]\n      vowelIndex = vowelIndex +\
    \ 2\n    elseif char == 'U' then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    elseif char == 'Y' then\n     \
    \ output = output .. alphabet[vowelIndex + 1]\n      vowelIndex = vowelIndex +\
    \ 2\n    elseif char in vowels then\n      output = output .. alphabet[vowelIndex\
    \ + 1]\n      vowelIndex = vowelIndex + 2\n    else\n      output = output ..\
    \ char\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptk674q3k.lua:54: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = \"aeiouAEIOU\"\n  local alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  local new_message = \"\"\n  for i = 1, #message\
    \ do\n    local char = message[i]\n    local new_char = char\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        new_char = alphabet[alphabet +\
    \ j + 1]\n      end\n    end\n    new_message = new_message .. new_char\n  end\n\
    \  return new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_keakq_q.lua:21:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmp_keakq_q.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ vowel_positions = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local position = alphabet.find(letter)\n    if position == nil then\n   \
    \   position = alphabet.find(tolower(letter))\n    end\n    if position == nil\
    \ then\n      position = alphabet.find(toupper(letter))\n    end\n    if position\
    \ == nil then\n      position = alphabet.find(letter)\n    end\n    if position\
    \ == nil then\n      position = alphabet.find(tolower(letter))\n    end\n    if\
    \ position == nil then\n      position = alphabet.find(toupper(letter))\n    end\n\
    \    if position == nil then\n      position = alphabet.find(letter)\n    end\n\
    \    if position == nil then\n      position = alphabet.find(tolower(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(toupper(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(letter)\n\
    \    end\n    if position == nil then\n      position = alphabet.find(tolower(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(toupper(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(letter)\n\
    \    end\n    if position == nil then\n      position = alphabet.find(tolower(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(toupper(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(letter)\n\
    \    end\n    if position == nil then\n      position = alphabet.find(tolower(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(toupper(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(letter)\n\
    \    end\n    if position == nil then\n      position = alphabet.find(tolower(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(toupper(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(letter)\n\
    \    end\n    if position == nil then\n      position = alphabet.find(tolower(letter))\n\
    \    end\n    if position == nil then\n      position = alphabet.find(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplf5ljdq8.lua:87: ')' expected (to close '(' at line 86) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local newMessage = ''\n    local vowelIndex = 0\n    local vowelPosition\
    \ = 0\n    local letterIndex = 0\n    local letterPosition = 0\n    for letter\
    \ in message:gmatch'[%a]+' do\n        if letter:sub(1, 1) ~= vowels[vowelIndex]\
    \ then\n            newMessage = newMessage .. letter\n        else\n        \
    \    letterPosition = letterIndex\n            letterIndex = letterIndex + 1\n\
    \            vowelPosition = vowelIndex\n            vowelIndex = vowelIndex +\
    \ 1\n            newMessage = newMessage .. alphabet[letterPosition + \n     \
    \           ((letterPosition - vowelPosition) % #alphabet)]\n        end\n   \
    \ end\n    return newMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k0kg_ww.lua:37:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp8k0kg_ww.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local newLetter = letter\n    for j = 1, #alphabet do\n      if letter ==\
    \ alphabet[j] then\n        newLetter = alphabet[(j + 2) % #alphabet]\n      end\n\
    \    end\n    for j = 1, #vowels do\n      if letter == vowels[j] then\n     \
    \   newLetter = vowels[(j + 2) % #vowels]\n      end\n    end\n    newMessage\
    \ = newMessage .. newLetter\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd0yopxe.lua:28:\
    \ attempt to concatenate local 'newLetter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpzd0yopxe.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['A'] = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n\
    \    ['D'] = 'd',\n    ['E'] = 'e',\n    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H']\
    \ = 'h',\n    ['I'] = 'i',\n    ['J'] = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n\
    \    ['M'] = 'm',\n    ['N'] = 'n',\n    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q']\
    \ = 'q',\n    ['R'] = 'r',\n    ['S'] = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n\
    \    ['V'] = 'v',\n    ['W'] = 'w',\n    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z']\
    \ = 'z',\n    ['a'] = 'A',\n    ['b'] = 'B',\n    ['c'] = 'C',\n    ['d'] = 'D',\n\
    \    ['e'] = 'E',\n    ['f'] = 'F',\n    ['g'] = 'G',\n    ['h'] = 'H',\n    ['i']\
    \ = 'I',\n    ['j'] = 'J',\n    ['k'] = 'K',\n    ['l'] = 'L',\n    ['m'] = 'M',\n\
    \    ['n'] = 'N',\n    ['o'] = 'O',\n    ['p'] = 'P',\n    ['q'] = 'Q',\n    ['r']\
    \ = 'R',\n    ['s'] = 'S',\n    ['t'] = 'T',\n    ['u'] = 'U',\n    ['v'] = 'V',\n\
    \    ['w'] = 'W',\n    ['x'] = 'X',\n    ['y'] = 'Y',\n    ['z'] = 'Z',\n    ['0']\
    \ = '0',\n    ['1'] = '1',\n    ['2'] = '2',\n    ['3'] = '3',\n    ['4'] = '4',\n\
    \    ['5'] = '5',\n    ['6'] = '6',\n    ['7'] = '7',\n    ['8'] = '8',\n    ['9']\
    \ = '9',\n    ['-'] = '-',\n    ['.'] = '.',\n    ['?'] = '?',\n    ['!'] = '!',\n\
    \    ['('] = '(',\n    [')'] = ')',\n    [' '] = ' ',\n    ['!'] = '!',\n    ['?']\
    \ = '?',\n    ['.'] = '.',\n    ['-'] = '-',\n    ['('] = '(',\n    [')'] = ')',\n\
    \    [' '] = ' ',\n    ['!'] = '!',\n    ['?'] = '?',\n    ['.'] = '.',\n    ['-']\
    \ = '-',\n    ['('] = '(',\n    [')'] = ')',\n    [' '] = ' ',\n    ['!'] = '!',\n\
    \    ['?'] = '?',\n    ['.'] = '.',\n    ['-'] = '-',\n    ['('] = '(',\n    [')']\
    \ = ')',\n    [' '] = ' ',\n    ['!'] = '!',\n    ['?'] = '?',\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaxusmx3w.lua:107: '}' expected (to close '{' at line 12) near\
    \ 'function'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local alphabet = {string.lowercase,\
    \ string.uppercase, string.digit}\n  local messageLength = string.len(message)\n\
    \  local newMessage = \"\"\n  for i = 1, messageLength do\n    local letter =\
    \ string.sub(message, i, i)\n    local vowelIndex = string.find(letter, vowels)\n\
    \    if vowelIndex > 0 then\n      local vowel = string.sub(letter, vowelIndex+1,\
    \ vowelIndex)\n      local nextLetter = string.sub(letter, vowelIndex+1, vowelIndex+1)\n\
    \      local index = string.find(alphabet, nextLetter)\n      if index > 0 then\n\
    \        local newLetter = alphabet[index+1]\n        newMessage = newMessage\
    \ .. string.sub(vowel, 1) .. newLetter\n      else\n        newMessage = newMessage\
    \ .. string.sub(vowel, 1)\n      end\n    else\n      newMessage = newMessage\
    \ .. letter\n    end\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ebvcoqv.lua:18:\
    \ bad argument #2 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmp6ebvcoqv.lua:18: in function 'candidate'\n\t/tmp/tmp6ebvcoqv.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local messageWithVowels = message\n    local vowelIndex = 1\n    local vowelIndex2\
    \ = 0\n    local newMessage = \"\"\n    for i = 1, #message do\n        if alphabet:sub(i,\
    \ i) == alphabet:sub(vowelIndex2, vowelIndex) then\n            newMessage = newMessage\
    \ .. alphabet:sub(vowelIndex, vowelIndex2)\n            vowelIndex2 = vowelIndex2\
    \ + 1\n        else\n            newMessage = newMessage .. alphabet:sub(vowelIndex,\
    \ vowelIndex2)\n            vowelIndex = vowelIndex + 1\n        end\n    end\n\
    \    return newMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5g4ylrp.lua:33:\
    \ expected: \"tgst\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpl5g4ylrp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local char = message[i]\n\
    \        local index = alphabet.find(char)\n        if index == nil then\n   \
    \         index = alphabet.find(vowels, 1, index + 1)\n        end\n        if\
    \ index == nil then\n            index = alphabet.find(vowels, index + 1, #alphabet)\n\
    \        end\n        if index == nil then\n            index = #alphabet\n  \
    \      end\n        output = output .. alphabet[index + 1]\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuzhs5am.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpwuzhs5am.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpwuzhs5am.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local message = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        local index = alphabet.find(letter)\n        if index ==\
    \ nil then\n            index = alphabet.find(vowels, letter)\n        end\n \
    \       if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, 1)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, 2)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, 3)\n        end\n        if index == nil\
    \ then\n            index = alphabet.find(vowels, letter + 1, 4)\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, 5)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, 6)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, 7)\n        end\n        if index == nil\
    \ then\n            index = alphabet.find(vowels, letter + 1, 8)\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, 9)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, 10)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, 11)\n        end\n        if index == nil\
    \ then\n            index = alphabet.find(vowels, letter + 1, 12)\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, 13)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, 14)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, 15)\n        end\n        if index == nil\
    \ then\n            index = alphabet.find(vowels, letter + 1, 16)\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, 17)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, 18)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, 19)\n        end\n        if index == nil\
    \ then\n            index = alphabet.find(vowels, letter + 1, 20)\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, 21)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, 22)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1etqn1z5.lua:98: 'end' expected (to close 'if' at line 84)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  local vowelIndex = 1\n  for i = 1, #message do\n    local\
    \ char = message[i]\n    if #alphabet > #vowels then\n      local nextVowelIndex\
    \ = #vowels + 1\n      while #alphabet > #vowels do\n        alphabet = alphabet:sub(1,\
    \ #alphabet)\n      end\n      alphabet = alphabet:sub(1, #alphabet)\n      local\
    \ nextVowel = alphabet:sub(1, nextVowelIndex)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      local nextVowelIndex = #alphabet\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet:sub(1, #alphabet)\n      alphabet = alphabet:sub(1,\
    \ #alphabet)\n      alphabet = alphabet\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdpz9_cr2.lua:72: 'end' expected (to close 'if' at line 18)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local alphabet = {'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local newMessage = message\n\
    \    for i = 1, #message do\n        local letter = message[i]\n        if letter\
    \ ~= ' ' then\n            local newLetter = alphabet[#alphabet]\n           \
    \ alphabet[#alphabet] = letter\n            newMessage = newMessage:sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1,\
    \ i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):sub(1, i):\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5n23ry6f.lua:21: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ alphabet2 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet3\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet4 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet5 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet6 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet7 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet8 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet9 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet10 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet11 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet12 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet13 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpftl1snce.lua:26: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = message\n    for i = 1, #message do\n        local char =\
    \ string.sub(message, i, i)\n        local index = alphabet.find(char)\n     \
    \   if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i, i))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i, i - 1))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i - 1))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(vowels, i - 1, i))\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(string.sub(vowels, i - 1, i -\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i - 1))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(vowels, i - 1, i))\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(string.sub(vowels, i - 1, i -\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i - 1))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(vowels, i - 1, i))\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(string.sub(vowels, i - 1, i -\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i - 1))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(vowels, i - 1, i))\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(string.sub(vowels, i - 1, i -\
    \ 1))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(vowels,\
    \ i - 1, i - 1))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(vowels, i - 1, i))\n        end\n        if index\
    \ == nil then\n            index = alphab\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp53wjpjh6.lua:91: 'end' expected (to close 'if' at line 78)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local newMessage = \"\"\n    for i = 1, #message do\n        local letter\
    \ = message[i]\n        local vowel = letter:sub(1, 1)\n        local nextLetter\
    \ = letter:sub(2, 2)\n        if vowel:sub(1, 1) ~= nextLetter:sub(1, 1) then\n\
    \            newMessage = newMessage .. letter\n        else\n            newMessage\
    \ = newMessage .. alphabet:sub((alphabet:find(vowel) + 1):sub(1, 1), (alphabet:find(nextLetter)\
    \ + 1):sub(1, 1))\n        end\n    end\n    return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicl0mjf8.lua:17:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpicl0mjf8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLength = #message\n    local encodedMessage = ''\n    local\
    \ index = 1\n    local vowelIndex = 1\n    local currentLetter = ''\n    local\
    \ currentVowel = ''\n    local currentVowelIndex = 1\n    local currentVowelCount\
    \ = 0\n    local currentVowelPosition = 1\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local currentVowelPositionIndex\
    \ = 1\n    local currentVowelPositionCount = 0\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmxis_9z4.lua:77: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local position = alphabet:find(vowel)\n\
    \    local nextLetter = alphabet:sub(1, position + 1)\n    local nextVowel = alphabet:sub(position\
    \ + 1, position)\n    local nextPosition = alphabet:find(nextVowel)\n    local\
    \ nextLetter2 = alphabet:sub(1, nextPosition + 1)\n    local nextVowel2 = alphabet:sub(nextPosition\
    \ + 1, nextPosition)\n    local nextPosition2 = alphabet:find(nextVowel2)\n  \
    \  local nextLetter3 = alphabet:sub(1, nextPosition2 + 1)\n    local nextVowel3\
    \ = alphabet:sub(nextPosition2 + 1, nextPosition2)\n    local nextPosition3 =\
    \ alphabet:find(nextVowel3)\n    local nextLetter4 = alphabet:sub(1, nextPosition3\
    \ + 1)\n    local nextVowel4 = alphabet:sub(nextPosition3 + 1, nextPosition3)\n\
    \    local nextPosition4 = alphabet:find(nextVowel4)\n    local nextLetter5 =\
    \ alphabet:sub(1, nextPosition4 + 1)\n    local nextVowel5 = alphabet:sub(nextPosition4\
    \ + 1, nextPosition4)\n    local nextPosition5 = alphabet:find(nextVowel5)\n \
    \   local nextLetter6 = alphabet:sub(1, nextPosition5 + 1)\n    local nextVowel6\
    \ = alphabet:sub(nextPosition5 + 1, nextPosition5)\n    local nextPosition6 =\
    \ alphabet:find(nextVowel6)\n    local nextLetter7 = alphabet:sub(1, nextPosition6\
    \ + 1)\n    local nextVowel7 = alphabet:sub(nextPosition6 + 1, nextPosition6)\n\
    \    local nextPosition7 = alphabet:find(nextVowel7)\n    local nextLetter8 =\
    \ alphabet:sub(1, nextPosition7 + 1)\n    local nextVowel8 = alphabet:sub(nextPosition7\
    \ + 1, nextPosition7)\n    local nextPosition8 = alphabet:find(nextVowel8)\n \
    \   local nextLetter9 = alphabet:sub(1, nextPosition8 + 1)\n    local nextVowel9\
    \ = alphabet:sub(nextPosition8 + 1, nextPosition8)\n    local nextPosition9 =\
    \ alphabet:find(nextVowel9)\n    local nextLetter10 = alphabet:sub(1, nextPosition9\
    \ + 1)\n    local nextVowel10 = alphabet:sub(nextPosition9 + 1, nextPosition9)\n\
    \    local nextPosition10 = alphabet:find(nextVow\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpua8jdj10.lua:49: ')' expected (to close '(' at line 48) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  -- Hint: Use a dictionary to map each letter\
    \ to its position\n  -- Hint: Use a dictionary to map each vowel to its position\n\
    \  -- Hint: Use a dictionary to map each letter to its position\n  -- Hint: Use\
    \ a dictionary to map each vowel to its position\n  -- Hint: Use a dictionary\
    \ to map each letter to its position\n  -- Hint: Use a dictionary to map each\
    \ vowel to its position\n  -- Hint: Use a dictionary to map each letter to its\
    \ position\n  -- Hint: Use a dictionary to map each vowel to its position\n  --\
    \ Hint: Use a dictionary to map each letter to its position\n  -- Hint: Use a\
    \ dictionary to map each vowel to its position\n  -- Hint: Use a dictionary to\
    \ map each letter to its position\n  -- Hint: Use a dictionary to map each vowel\
    \ to its position\n  -- Hint: Use a dictionary to map each letter to its position\n\
    \  -- Hint: Use a dictionary to map each vowel to its position\n  -- Hint: Use\
    \ a dictionary to map each letter to its position\n  -- Hint: Use a dictionary\
    \ to map each vowel to its position\n  -- Hint: Use a dictionary to map each letter\
    \ to its position\n  -- Hint: Use a dictionary to map each vowel to its position\n\
    \  -- Hint: Use a dictionary to map each letter to its position\n  -- Hint: Use\
    \ a dictionary to map each vowel to its position\n  -- Hint: Use a dictionary\
    \ to map each letter to its position\n  -- Hint: Use a dictionary to map each\
    \ vowel to its position\n  -- Hint: Use a dictionary to map each letter to its\
    \ position\n  -- Hint: Use a dictionary to map each vowel to its position\n  --\
    \ Hint: Use a dictionary to map each letter to its position\n  -- Hint: Use a\
    \ dictionary to map each vowel to its position\n  -- Hint: Use a dictionary to\
    \ map each letter to its position\n  -- Hint: Use a dictionary to map each vowel\
    \ to its position\n  -- Hint: Use a dictionary to map each letter to its position\n\
    \  -- Hint: Use a dictionary to map each vowel to its position\n  -- Hint: Use\
    \ a dictionary to map each letter to its position\n  -- Hint: Use a dictionary\
    \ to map each vowel to its position\n  -- Hint: Use a dictionary to map each letter\
    \ to its position\n  -- Hint: Use a dictionary to map each \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiz0ys0_3.lua:58: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet.find(letter)\n        if index == nil then\n \
    \           index = alphabet.find(vowels, letter)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 2)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 3)\n        end\n        if index == nil then\n       \
    \     index = alphabet.find(vowels, letter + 1, letter + 4)\n        end\n   \
    \     if index == nil then\n            index = alphabet.find(vowels, letter +\
    \ 1, letter + 5)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 6)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 7)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 8)\n        end\n        if index == nil then\n       \
    \     index = alphabet.find(vowels, letter + 1, letter + 9)\n        end\n   \
    \     if index == nil then\n            index = alphabet.find(vowels, letter +\
    \ 1, letter + 10)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 11)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 12)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 13)\n        end\n        if index == nil then\n      \
    \      index = alphabet.find(vowels, letter + 1, letter + 14)\n        end\n \
    \       if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, letter + 15)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 16)\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels, letter + 1, letter +\
    \ 17)\n        end\n        if index == nil then\n            index = alphabet.find(vowels,\
    \ letter + 1, letter + 18)\n        end\n        if index == nil then\n      \
    \      index = alphabet.find(vowels, letter + 1, letter + 19)\n        end\n \
    \       if index == nil then\n            index = alphabet.find(vowels, letter\
    \ + 1, letter + 20)\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(vowels, letter + 1, letter + 21)\n        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpai3jvi9r.lua:92: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = \"\"\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local position = alphabet.find(letter)\n        if position == nil then\n\
    \            position = alphabet.find(vowels, letter)\n        end\n        if\
    \ position ~= nil then\n            local nextLetter = alphabet[position + 1]\n\
    \            local nextPosition = alphabet.find(nextLetter)\n            if nextPosition\
    \ ~= nil then\n                local newLetter = alphabet[nextPosition + 1]\n\
    \                local newPosition = alphabet.find(newLetter)\n              \
    \  if newPosition ~= nil then\n                    result = result .. alphabet[newPosition\
    \ + 1]\n                else\n                    result = result .. alphabet[position\
    \ + 1]\n                end\n            else\n                result = result\
    \ .. alphabet[position + 1]\n            end\n        else\n            result\
    \ = result .. letter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm37g61gd.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpm37g61gd.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpm37g61gd.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if char == nil then\n            char = \"\"\n        end\n        local\
    \ index = alphabet.find(char)\n        if index == nil then\n            index\
    \ = alphabet.find(vowels[#vowels])\n        end\n        if index == nil then\n\
    \            index = alphabet.find(vowels[#vowels])\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(vowels[#vowels])\n        end\n\
    \        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            index = alphabet.find(vowels[#vowels])\n\
    \        end\n        if index == nil then\n            \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzt28yz8n.lua:100: 'end' expected (to close 'if' at line 87)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = \"aeiouAEIOU\"\n  local alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  local messageLength = #message\n  local\
    \ encodedMessage = \"\"\n  for i = 1, messageLength do\n    local currentChar\
    \ = message[i]\n    local currentCharIndex = alphabet.find(currentChar)\n    local\
    \ nextCharIndex = alphabet.find(currentChar, currentCharIndex + 1)\n    local\
    \ nextChar = alphabet[nextCharIndex]\n    local currentCharVowelIndex = alphabet.find(currentChar,\
    \ currentCharIndex - 1)\n    local currentCharVowel = alphabet[currentCharVowelIndex]\n\
    \    local nextCharVowelIndex = alphabet.find(nextChar, nextCharIndex + 1)\n \
    \   local nextCharVowel = alphabet[nextCharVowelIndex]\n    local currentCharVowelIndex\
    \ = alphabet.find(currentChar, currentCharIndex + 1)\n    local currentCharVowel\
    \ = alphabet[currentCharVowelIndex]\n    local nextCharVowelIndex = alphabet.find(nextChar,\
    \ nextCharIndex - 1)\n    local nextCharVowel = alphabet[nextCharVowelIndex]\n\
    \    local currentCharVowelIndex = alphabet.find(currentChar, currentCharIndex\
    \ - 1)\n    local currentCharVowel = alphabet[currentCharVowelIndex]\n    local\
    \ nextCharVowelIndex = alphabet.find(nextChar, nextCharIndex + 1)\n    local nextCharVowel\
    \ = alphabet[nextCharVowelIndex]\n    local currentCharVowelIndex = alphabet.find(currentChar,\
    \ currentCharIndex + 1)\n    local currentCharVowel = alphabet[currentCharVowelIndex]\n\
    \    local nextCharVowelIndex = alphabet.find(nextChar, nextCharIndex - 1)\n \
    \   local nextCharVowel = alphabet[nextCharVowelIndex]\n    local currentCharVowelIndex\
    \ = alphabet.find(currentChar, currentCharIndex - 1)\n    local currentCharVowel\
    \ = alphabet[currentCharVowelIndex]\n    local nextCharVowelIndex = alphabet.find(nextChar,\
    \ nextCharIndex + 1)\n    local nextCharVowel = alphabet[nextCharVowelIndex]\n\
    \    local currentCharVowelIndex = alphabet.find(currentChar, currentCharIndex\
    \ + 1)\n    local currentCharVowel = alphabet[currentCharVowelIndex]\n    local\
    \ nextCharVowelIndex = alphabet.find(nextChar\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnbq45_wr.lua:45: ')' expected (to close '(' at line 44) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLetters = string.gsub(message, '%c', function(letter)\n    \
    \    local index = alphabet.find(letter)\n        if index == nil then\n     \
    \       return letter\n        end\n        local vowelIndex = alphabet.find(vowels,\
    \ index + 1)\n        if vowelIndex == nil then\n            return letter\n \
    \       end\n        return alphabet[vowelIndex + 1]\n    end)\n    return messageLetters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe16y33mi.lua:31:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpe16y33mi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        ['a'] = 'A',\n        ['b'] = 'B',\n        ['c']\
    \ = 'C',\n        ['d'] = 'D',\n        ['e'] = 'E',\n        ['f'] = 'F',\n \
    \       ['g'] = 'G',\n        ['h'] = 'H',\n        ['i'] = 'I',\n        ['j']\
    \ = 'J',\n        ['k'] = 'K',\n        ['l'] = 'L',\n        ['m'] = 'M',\n \
    \       ['n'] = 'N',\n        ['o'] = 'O',\n        ['p'] = 'P',\n        ['q']\
    \ = 'Q',\n        ['r'] = 'R',\n        ['s'] = 'S',\n        ['t'] = 'T',\n \
    \       ['u'] = 'U',\n        ['v'] = 'V',\n        ['w'] = 'W',\n        ['x']\
    \ = 'X',\n        ['y'] = 'Y',\n        ['z'] = 'Z',\n        ['A'] = 'a',\n \
    \       ['B'] = 'b',\n        ['C'] = 'c',\n        ['D'] = 'd',\n        ['E']\
    \ = 'e',\n        ['F'] = 'f',\n        ['G'] = 'g',\n        ['H'] = 'h',\n \
    \       ['I'] = 'i',\n        ['J'] = 'j',\n        ['K'] = 'k',\n        ['L']\
    \ = 'l',\n        ['M'] = 'm',\n        ['N'] = 'n',\n        ['O'] = 'o',\n \
    \       ['P'] = 'p',\n        ['Q'] = 'q',\n        ['R'] = 'r',\n        ['S']\
    \ = 's',\n        ['T'] = 't',\n        ['U'] = 'u',\n        ['V'] = 'v',\n \
    \       ['W'] = 'w',\n        ['X'] = 'x',\n        ['Y'] = 'y',\n        ['Z']\
    \ = 'z',\n    }\n    local vowels = {\n        ['a'] = 'A',\n        ['e'] = 'E',\n\
    \        ['i'] = 'I',\n        ['o'] = 'O',\n        ['u'] = 'U',\n    }\n   \
    \ local result = \"\"\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter:lower() ~= letter then\n            letter = letter:lower()\n\
    \        end\n        local vowel = letter:sub(1, 1)\n        if vowels[vowel]\
    \ ~= letter then\n            letter = vowels[vowel]\n        end\n        result\
    \ = result .. alphabet[letter]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bk4tyrd.lua:76:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp9bk4tyrd.lua:91:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = message\n  local vowel_positions = {}\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local position = alphabet + letter\n\
    \    local vowel_position = position\n    for j = 1, #vowels do\n      if vowel_position\
    \ == vowels then\n        vowel_position = alphabet + vowels[j]\n      end\n \
    \   end\n    position = position\n    for j = 1, #vowels do\n      if position\
    \ == vowel_position then\n        position = alphabet + vowels[j]\n      end\n\
    \    end\n    position = position\n    vowel_positions[letter] = position\n  end\n\
    \  for i = 1, #message do\n    local letter = message[i]\n    local position =\
    \ vowel_positions[letter]\n    local new_letter = alphabet:sub(position, position\
    \ + 1)\n    local new_position = alphabet:sub(position, position + 1)\n    local\
    \ new_vowel_position = alphabet:sub(position, position + 1)\n    local new_vowel\
    \ = alphabet:sub(position, position + 1)\n    local new_position = alphabet:sub(position,\
    \ position + 1)\n    local new_vowel_position = alphabet:sub(position, position\
    \ + 1)\n    local new_vowel = alphabet:sub(position, position + 1)\n    local\
    \ new_position = alphabet:sub(position, position + 1)\n    local new_vowel_position\
    \ = alphabet:sub(position, position + 1)\n    local new_vowel = alphabet:sub(position,\
    \ position + 1)\n    local new_position = alphabet:sub(position, position + 1)\n\
    \    local new_vowel_position = alphabet:sub(position, position + 1)\n    local\
    \ new_vowel = alphabet:sub(position, position + 1)\n    local new_position = alphabet:sub(position,\
    \ position + 1)\n    local new_vowel_position = alphabet:sub(position, position\
    \ + 1)\n    local new_vowel = alphabet:sub(position, position + 1)\n    local\
    \ new_position = alphabet:sub(position, position + 1)\n    local new_vowel_position\
    \ = alphabet:sub(position, position + 1)\n    local new_vowel = alphabet:sub(position,\
    \ position + 1)\n    local new_position = alphabet:sub(position, position + 1)\n\
    \    local new_vowel_position = alphabet:sub(position, position + 1)\n    local\
    \ new_vowel = alphabet:sub(position, position + 1)\n    local new_position = alphabet:sub(position,\
    \ position + 1)\n    local new_vowel_position = alphabet:sub(position, position\
    \ + 1)\n    local new_vowel = alphabet:sub(position, position + 1)\n    local\
    \ new_position = alphabet:sub(position, position + 1)\n    local new_vowel_position\
    \ = alphabet:sub(position, position + 1)\n    local new_vowel = alphabet:sub(position,\
    \ position + 1)\n    local new_position = alphabet:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9jgiwx40.lua:66: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        ['A'] = 'A',\n        ['B'] = 'B',\n        ['C']\
    \ = 'C',\n        ['D'] = 'D',\n        ['E'] = 'E',\n        ['F'] = 'F',\n \
    \       ['G'] = 'G',\n        ['H'] = 'H',\n        ['I'] = 'I',\n        ['J']\
    \ = 'J',\n        ['K'] = 'K',\n        ['L'] = 'L',\n        ['M'] = 'M',\n \
    \       ['N'] = 'N',\n        ['O'] = 'O',\n        ['P'] = 'P',\n        ['Q']\
    \ = 'Q',\n        ['R'] = 'R',\n        ['S'] = 'S',\n        ['T'] = 'T',\n \
    \       ['U'] = 'U',\n        ['V'] = 'V',\n        ['W'] = 'W',\n        ['X']\
    \ = 'X',\n        ['Y'] = 'Y',\n        ['Z'] = 'Z',\n        ['a'] = 'a',\n \
    \       ['b'] = 'b',\n        ['c'] = 'c',\n        ['d'] = 'd',\n        ['e']\
    \ = 'e',\n        ['f'] = 'f',\n        ['g'] = 'g',\n        ['h'] = 'h',\n \
    \       ['i'] = 'i',\n        ['j'] = 'j',\n        ['k'] = 'k',\n        ['l']\
    \ = 'l',\n        ['m'] = 'm',\n        ['n'] = 'n',\n        ['o'] = 'o',\n \
    \       ['p'] = 'p',\n        ['q'] = 'q',\n        ['r'] = 'r',\n        ['s']\
    \ = 's',\n        ['t'] = 't',\n        ['u'] = 'u',\n        ['v'] = 'v',\n \
    \       ['w'] = 'w',\n        ['x'] = 'x',\n        ['y'] = 'y',\n        ['z']\
    \ = 'z',\n        ['0'] = '0',\n        ['1'] = '1',\n        ['2'] = '2',\n \
    \       ['3'] = '3',\n        ['4'] = '4',\n        ['5'] = '5',\n        ['6']\
    \ = '6',\n        ['7'] = '7',\n        ['8'] = '8',\n        ['9'] = '9',\n \
    \       ['-'] = '-',\n        ['.'] = '.',\n        ['!'] = '!',\n        ['?']\
    \ = '?',\n        ['('] = '(',\n        [')'] = ')',\n        [' '] = ' ',\n \
    \       [':'] = ':',\n        [';'] = ';',\n        ['/'] = '/',\n        ['\\\
    \\'] = '\\\\',\n        ['|'] = '|',\n        ['&'] = '&',\n        ['='] = '=',\n\
    \        ['+'] = '+',\n        ['%'] = '%',\n        ['$'] = '$',\n        ['@']\
    \ = '@',\n        ['!'] = '!',\n        ['?'] = '?',\n        ['('] = '(',\n \
    \       [')'] = ')',\n        [' '] = ' ',\n        [':'] = ':',\n        [';']\
    \ = ';',\n        ['/'] = '/',\n        ['\\\\'] = '\\\\',\n        ['|'] = '|',\n\
    \        ['&'] = '&',\n        ['\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0m4bzolw.lua:104: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter) or letter\n    local vowel\
    \ = vowels and vowels:find(letter) or letter\n    local next = alphabet:find(vowel,\
    \ index + 1)\n    local letter = alphabet:sub(index, next or #alphabet)\n    output\
    \ = output .. letter .. vowel\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkngf843i.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpkngf843i.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpkngf843i.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local newMessage = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local nextLetter = message[i + 1]\n    local newLetter = alphabet:sub((letter\
    \ - 1):byte() + 1, (letter - 1):byte() + 2)\n    newMessage = newMessage .. newLetter\n\
    \    if nextLetter:byte() ~= vowels:byte() then\n      newMessage = newMessage\
    \ .. vowels:byte()\n    end\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p5hn7au.lua:18:\
    \ attempt to perform arithmetic on local 'letter' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp9p5hn7au.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local char = message[i]\n\
    \    local index = alphabet.find(char)\n    if index == nil then\n      result\
    \ = result .. char\n    else\n      local vowel = vowels[index]\n      local vowelIndex\
    \ = alphabet.find(vowel)\n      local vowel2 = alphabet[vowelIndex + 1]\n    \
    \  result = result .. alphabet[vowelIndex] .. vowel2\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus1xjhdc.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpus1xjhdc.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpus1xjhdc.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        ['a'] = 'A', \n        ['b'] = 'B', \n      \
    \  ['c'] = 'C', \n        ['d'] = 'D', \n        ['e'] = 'E', \n        ['f']\
    \ = 'F', \n        ['g'] = 'G', \n        ['h'] = 'H', \n        ['i'] = 'I',\
    \ \n        ['j'] = 'J', \n        ['k'] = 'K', \n        ['l'] = 'L', \n    \
    \    ['m'] = 'M', \n        ['n'] = 'N', \n        ['o'] = 'O', \n        ['p']\
    \ = 'P', \n        ['q'] = 'Q', \n        ['r'] = 'R', \n        ['s'] = 'S',\
    \ \n        ['t'] = 'T', \n        ['u'] = 'U', \n        ['v'] = 'V', \n    \
    \    ['w'] = 'W', \n        ['x'] = 'X', \n        ['y'] = 'Y', \n        ['z']\
    \ = 'Z', \n        ['A'] = 'a', \n        ['B'] = 'b', \n        ['C'] = 'c',\
    \ \n        ['D'] = 'd', \n        ['E'] = 'e', \n        ['F'] = 'f', \n    \
    \    ['G'] = 'g', \n        ['H'] = 'h', \n        ['I'] = 'i', \n        ['J']\
    \ = 'j', \n        ['K'] = 'k', \n        ['L'] = 'l', \n        ['M'] = 'm',\
    \ \n        ['N'] = 'n', \n        ['O'] = 'o', \n        ['P'] = 'p', \n    \
    \    ['Q'] = 'q', \n        ['R'] = 'r', \n        ['S'] = 's', \n        ['T']\
    \ = 't', \n        ['U'] = 'u', \n        ['V'] = 'v', \n        ['W'] = 'w',\
    \ \n        ['X'] = 'x', \n        ['Y'] = 'y', \n        ['Z'] = 'z', \n    }\n\
    \    local vowels = {\n        ['a'] = 'A', \n        ['e'] = 'E', \n        ['i']\
    \ = 'I', \n        ['o'] = 'O', \n        ['u'] = 'U', \n    }\n    local result\
    \ = \"\"\n    for i = 1, #message do\n        local letter = message[i]\n    \
    \    local letter2 = alphabet[letter]\n        if letter2 ~= nil then\n      \
    \      local letter3 = alphabet[letter2]\n            if letter3 ~= nil then\n\
    \                local letter4 = alphabet[letter3]\n                if letter4\
    \ ~= nil then\n                    local letter5 = alphabet[letter4]\n       \
    \             if letter5 ~= nil then\n                        local letter6 =\
    \ alphabet[letter5]\n                        if letter6 ~= nil then\n        \
    \                    local letter7 = alphabet[letter6]\n                     \
    \       if letter7 ~= nil then\n                                local letter8\
    \ = alphabet[letter7]\n                                if letter8 ~= nil then\n\
    \                                    local letter9 = alphabet[letter8]\n     \
    \                               if letter9 ~= nil then\n                     \
    \                   local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaonc959f.lua:104: 'end' expected (to close 'if' at line 91)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local newMessage = ''\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        if letter ~= ' ' then\n            local index = alphabet\
    \ + letter\n            local letterIndex = alphabet + letter:sub(1, 1)\n    \
    \        if letterIndex:sub(1, 1) ~= vowels then\n                newMessage =\
    \ newMessage .. index:sub(1, 1) .. letter:sub(2)\n            else\n         \
    \       newMessage = newMessage .. index:sub(1, 1) .. letter:sub(1)\n        \
    \    end\n        end\n    end\n    return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyv76ujo.lua:18:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmphyv76ujo.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local position = alphabet.find(letter)\n    if position == nil then\n   \
    \   output = output .. letter\n    else\n      local vowel = vowels[position]\n\
    \      local vowel_position = alphabet.find(vowel)\n      local next_letter =\
    \ alphabet[position + 1]\n      local next_letter_position = alphabet.find(next_letter)\n\
    \      if vowel_position == nil then\n        output = output .. vowel\n     \
    \ elseif vowel_position + 1 == next_letter_position then\n        output = output\
    \ .. letter\n      else\n        output = output .. vowel\n      end\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoecfo_a.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpuoecfo_a.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpuoecfo_a.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        A = string.char(\"A\"),\n        B = string.char(\"\
    B\"),\n        C = string.char(\"C\"),\n        D = string.char(\"D\"),\n    \
    \    E = string.char(\"E\"),\n        F = string.char(\"F\"),\n        G = string.char(\"\
    G\"),\n        H = string.char(\"H\"),\n        I = string.char(\"I\"),\n    \
    \    J = string.char(\"J\"),\n        K = string.char(\"K\"),\n        L = string.char(\"\
    L\"),\n        M = string.char(\"M\"),\n        N = string.char(\"N\"),\n    \
    \    O = string.char(\"O\"),\n        P = string.char(\"P\"),\n        Q = string.char(\"\
    Q\"),\n        R = string.char(\"R\"),\n        S = string.char(\"S\"),\n    \
    \    T = string.char(\"T\"),\n        U = string.char(\"U\"),\n        V = string.char(\"\
    V\"),\n        W = string.char(\"W\"),\n        X = string.char(\"X\"),\n    \
    \    Y = string.char(\"Y\"),\n        Z = string.char(\"Z\"),\n    }\n    local\
    \ vowels = {\n        A = string.char(\"A\"),\n        E = string.char(\"E\"),\n\
    \        I = string.char(\"I\"),\n        O = string.char(\"O\"),\n        U =\
    \ string.char(\"U\"),\n    }\n    local function swapCase(message)\n        local\
    \ newMessage = \"\"\n        for i = 1, #message do\n            local letter\
    \ = string.sub(message, i, i)\n            local newLetter = string.upper(letter)\n\
    \            newMessage = newMessage .. newLetter\n        end\n        return\
    \ newMessage\n    end\n    local function replaceVowels(message)\n        local\
    \ newMessage = \"\"\n        for i = 1, #message do\n            local letter\
    \ = string.sub(message, i, i)\n            local newLetter = string.sub(alphabet,\
    \ letter, letter)\n            newMessage = newMessage .. newLetter\n        end\n\
    \        return newMessage\n    end\n    return swapCase(replaceVowels(message))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_u2htuh.lua:13:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpo_u2htuh.lua:13: in function 'candidate'\n\t/tmp/tmpo_u2htuh.lua:71: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local position = alphabet.find(letter)\n    if position == nil then\n   \
    \   output = output .. letter\n    else\n      local vowel = vowels[position +\
    \ 1]\n      local replacement = alphabet[position + 2]\n      output = output\
    \ .. vowel .. replacement\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6x9l486.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpd6x9l486.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpd6x9l486.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local messageLetters = string.gsub(message, '%c', function(letter)\n    local\
    \ index = alphabet.find(letter)\n    if index == nil then\n      error('Invalid\
    \ letter: ' .. letter)\n    end\n    return alphabet[index + 1]\n  end)\n  local\
    \ messageVowels = string.gsub(message, '%v', function(letter)\n    local index\
    \ = vowels.find(letter)\n    if index == nil then\n      error('Invalid letter:\
    \ ' .. letter)\n    end\n    return alphabet[index + 1]\n  end)\n  return messageLetters\
    \ .. messageVowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e6q9wtc.lua:34:\
    \ expected: \"tgst\"\nactual: \"TESTTEST\"\nstack traceback:\n\t/tmp/tmp7e6q9wtc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local index = alphabet + vowels\n        local letterIndex = index:find(letter)\n\
    \        if letterIndex == nil then\n            letterIndex = alphabet + letter\n\
    \        end\n        local letter2 = alphabet:sub(letterIndex + 1, letterIndex\
    \ + 2)\n        local letter3 = alphabet:sub(letterIndex + 2, letterIndex + 3)\n\
    \        local letter4 = alphabet:sub(letterIndex + 3, letterIndex + 4)\n    \
    \    local letter5 = alphabet:sub(letterIndex + 4, letterIndex + 5)\n        local\
    \ letter6 = alphabet:sub(letterIndex + 5, letterIndex + 6)\n        local letter7\
    \ = alphabet:sub(letterIndex + 6, letterIndex + 7)\n        local letter8 = alphabet:sub(letterIndex\
    \ + 7, letterIndex + 8)\n        local letter9 = alphabet:sub(letterIndex + 8,\
    \ letterIndex + 9)\n        local letter10 = alphabet:sub(letterIndex + 9, letterIndex\
    \ + 10)\n        local letter11 = alphabet:sub(letterIndex + 10, letterIndex +\
    \ 11)\n        local letter12 = alphabet:sub(letterIndex + 11, letterIndex + 12)\n\
    \        local letter13 = alphabet:sub(letterIndex + 12, letterIndex + 13)\n \
    \       local letter14 = alphabet:sub(letterIndex + 13, letterIndex + 14)\n  \
    \      local letter15 = alphabet:sub(letterIndex + 14, letterIndex + 15)\n   \
    \     local letter16 = alphabet:sub(letterIndex + 15, letterIndex + 16)\n    \
    \    local letter17 = alphabet:sub(letterIndex + 16, letterIndex + 17)\n     \
    \   local letter18 = alphabet:sub(letterIndex + 17, letterIndex + 18)\n      \
    \  local letter19 = alphabet:sub(letterIndex + 18, letterIndex + 19)\n       \
    \ local letter20 = alphabet:sub(letterIndex + 19, letterIndex + 20)\n        local\
    \ letter21 = alphabet:sub(letterIndex + 20, letterIndex + 21)\n        local letter22\
    \ = alphabet:sub(letterIndex + 21, letterIndex + 22)\n        local letter23 =\
    \ alphabet:sub(letterIndex + 22, letterIndex + 23)\n        local letter24 = alphabet:sub(letterIndex\
    \ + 23, letterIndex + 24)\n        local letter25 = alphabet:sub(letterIndex +\
    \ 24, letterIndex + 25)\n        local letter26 = alphabet:sub(letterIndex + 25,\
    \ letterIndex + 26)\n        local letter27 = alphabet:sub(letterIndex + 26, letterIndex\
    \ + 27\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7am1egpg.lua:48: ')' expected (to close '(' at line 47) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local messageLength = #message\n  local encodedMessage = ''\n  local index\n\
    \  for index = 1, messageLength do\n    local letter = message[index]\n    local\
    \ nextLetter = message[index + 1]\n    local newLetter\n    if letter ~= nextLetter\
    \ then\n      newLetter = alphabet[alphabet + 1]\n    else\n      newLetter =\
    \ alphabet[alphabet + 1]\n    end\n    encodedMessage = encodedMessage .. newLetter\n\
    \  end\n  return encodedMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6649ut_.lua:24:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmpj6649ut_.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        '0','1','2','3','4','5','6','7','8','9',\n        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        '0','1','2','3','4','5','6','7','8','9',\n        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj6oasj94.lua:23: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local newMessage = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet.find(letter)\n    if index == nil then\n      newMessage\
    \ = newMessage .. letter\n    else\n      local vowelIndex = alphabet.find(vowels,\
    \ index + 1)\n      if vowelIndex == nil then\n        newMessage = newMessage\
    \ .. letter\n      else\n        newMessage = newMessage .. alphabet[vowelIndex\
    \ + 1]\n      end\n    end\n  end\n  return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnhtxwyy.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpjnhtxwyy.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpjnhtxwyy.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local messageLength = #message\n  local encodedMessage = \"\"\n  local index\n\
    \  local vowelIndex\n  for index=1, messageLength do\n    local letter = message[index]\n\
    \    local vowel = string.sub(letter, 1, 1)\n    local nextLetter = string.sub(letter,\
    \ 2, 1)\n    if vowel ~= nextLetter then\n      local index = alphabet.find(vowel)\n\
    \      if index > -1 then\n        local nextIndex = alphabet.find(nextLetter)\n\
    \        if nextIndex > -1 then\n          local newLetter = alphabet[nextIndex\
    \ + 1]\n          encodedMessage = encodedMessage .. newLetter\n        else\n\
    \          encodedMessage = encodedMessage .. vowel\n        end\n      else\n\
    \        encodedMessage = encodedMessage .. vowel\n      end\n    else\n     \
    \ encodedMessage = encodedMessage .. letter\n    end\n  end\n  return encodedMessage\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma1vb9oh.lua:20:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpma1vb9oh.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpma1vb9oh.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['A'] = 'A',\n    ['B'] = 'B',\n    ['C'] = 'C',\n\
    \    ['D'] = 'D',\n    ['E'] = 'E',\n    ['F'] = 'F',\n    ['G'] = 'G',\n    ['H']\
    \ = 'H',\n    ['I'] = 'I',\n    ['J'] = 'J',\n    ['K'] = 'K',\n    ['L'] = 'L',\n\
    \    ['M'] = 'M',\n    ['N'] = 'N',\n    ['O'] = 'O',\n    ['P'] = 'P',\n    ['Q']\
    \ = 'Q',\n    ['R'] = 'R',\n    ['S'] = 'S',\n    ['T'] = 'T',\n    ['U'] = 'U',\n\
    \    ['V'] = 'V',\n    ['W'] = 'W',\n    ['X'] = 'X',\n    ['Y'] = 'Y',\n    ['Z']\
    \ = 'Z',\n    ['a'] = 'a',\n    ['b'] = 'b',\n    ['c'] = 'c',\n    ['d'] = 'd',\n\
    \    ['e'] = 'e',\n    ['f'] = 'f',\n    ['g'] = 'g',\n    ['h'] = 'h',\n    ['i']\
    \ = 'i',\n    ['j'] = 'j',\n    ['k'] = 'k',\n    ['l'] = 'l',\n    ['m'] = 'm',\n\
    \    ['n'] = 'n',\n    ['o'] = 'o',\n    ['p'] = 'p',\n    ['q'] = 'q',\n    ['r']\
    \ = 'r',\n    ['s'] = 's',\n    ['t'] = 't',\n    ['u'] = 'u',\n    ['v'] = 'v',\n\
    \    ['w'] = 'w',\n    ['x'] = 'x',\n    ['y'] = 'y',\n    ['z'] = 'z',\n    ['A']\
    \ = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n    ['D'] = 'd',\n    ['E'] = 'e',\n\
    \    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H'] = 'h',\n    ['I'] = 'i',\n    ['J']\
    \ = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n    ['M'] = 'm',\n    ['N'] = 'n',\n\
    \    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q'] = 'q',\n    ['R'] = 'r',\n    ['S']\
    \ = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n    ['V'] = 'v',\n    ['W'] = 'w',\n\
    \    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z'] = 'z',\n    ['a'] = 'A',\n    ['b']\
    \ = 'B',\n    ['c'] = 'C',\n    ['d'] = 'D',\n    ['e'] = 'E',\n    ['f'] = 'F',\n\
    \    ['g'] = 'G',\n    ['h'] = 'H',\n    ['i'] = 'I',\n    ['j'] = 'J',\n    ['k']\
    \ = 'K',\n    ['l'] = 'L',\n    ['m'] = 'M',\n    ['\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5em_mxpj.lua:104: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  local vowels = \"aeiou\"\n  local new_message = \"\"\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local index = alphabet.find(letter)\n\
    \    local vowel_index = alphabet.find(vowels, index + 1)\n    local new_letter\
    \ = alphabet[vowel_index + 1]\n    new_message = new_message .. new_letter\n \
    \ end\n  return new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnlpf4lx.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpcnlpf4lx.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpcnlpf4lx.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  local vowels = \"aeiou\"\n  local result = \"\"\n  for i = 1, #message do\n\
    \    local letter = message[i]\n    local vowel = letter:sub(1, 1)\n    local\
    \ index = alphabet:find(vowel)\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + vowel)\n    end\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + vowel + vowel)\n    end\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + vowel + vowel + vowel)\n    end\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + vowel + vowel + vowel + vowel)\n    end\n    if index == nil then\n      index\
    \ = alphabet:find(vowel + vowel + vowel + vowel + vowel + vowel)\n    end\n  \
    \  if index == nil then\n      index = alphabet:find(vowel + vowel + vowel + vowel\
    \ + vowel + vowel + vowel)\n    end\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + vowel + vowel + vowel + vowel + vowel + vowel + vowel)\n    end\n    if index\
    \ == nil then\n      index = alphabet:find(vowel + vowel + vowel + vowel + vowel\
    \ + vowel + vowel + vowel + vowel + vowel)\n    end\n    if index == nil then\n\
    \      index = alphabet:find(vowel + vowel + vowel + vowel + vowel + vowel + vowel\
    \ + vowel + vowel + vowel + vowel)\n    end\n    if index == nil then\n      index\
    \ = alphabet:find(vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel\
    \ + vowel + vowel + vowel + vowel + vowel)\n    end\n    if index == nil then\n\
    \      index = alphabet:find(vowel + vowel + vowel + vowel + vowel + vowel + vowel\
    \ + vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel)\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel + vowel + vowel +\
    \ vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel\
    \ + vowel + vowel)\n    end\n    if index == nil then\n      index = alphabet:find(vowel\
    \ + vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel + vowel\
    \ + vowel + vowel + vowel + vowel + vowel)\n    end\n    if index == nil then\n\
    \      index = alphabet:find(vowel + vowel + vowel + \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp21rzyknv.lua:61: ')' expected (to close '(' at line 60) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local vowel_positions = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local position = alphabet and alphabet:find(letter)\n    if position then\n\
    \      vowel_positions[letter] = position\n    end\n  end\n  local new_message\
    \ = ''\n  for i = 1, #message do\n    local letter = message[i]\n    local position\
    \ = alphabet and alphabet:find(letter)\n    if position then\n      local vowel\
    \ = letter:sub(1, 1)\n      local vowel_position = vowel_positions[vowel]\n  \
    \    if vowel_position then\n        local new_letter = letter:sub(2, vowel_position-1)\n\
    \        new_message = new_message .. new_letter\n      else\n        new_message\
    \ = new_message .. letter\n      end\n    else\n      new_message = new_message\
    \ .. letter\n    end\n  end\n  return new_message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxu4t6z0.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpgxu4t6z0.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpgxu4t6z0.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local char = message[i]\n \
    \   local index = alphabet.find(char)\n    if index == nil then\n      output\
    \ = '' -- No vowel found\n      break\n    end\n    local vowelIndex = alphabet.find(vowels,\
    \ index + 1)\n    if vowelIndex == nil then\n      output = '' -- No vowel found\n\
    \      break\n    end\n    local nextVowelIndex = alphabet.find(vowels, index\
    \ + 1, vowelIndex + 1)\n    if nextVowelIndex == nil then\n      output = '' --\
    \ No vowel found\n      break\n    end\n    local nextVowel = alphabet[nextVowelIndex]\n\
    \    local nextChar = alphabet[index]\n    output = output .. nextVowel\n  end\n\
    \  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_h9zyh5.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpp_h9zyh5.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpp_h9zyh5.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter or alphabet == letter:upper() \n      and\
    \ alphabet + 1\n    local nextLetter = alphabet:sub(index, index + 1)\n    local\
    \ vowelIndex = vowels:find(letter)\n    if vowelIndex then\n      result = result\
    \ .. alphabet:sub(vowelIndex + 1, vowelIndex + 2)\n    else\n      result = result\
    \ .. nextLetter\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgt2oumi.lua:17:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpcgt2oumi.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local position = alphabet.find(letter)\n    if position == nil then\n   \
    \   output = output .. letter\n    else\n      local vowel = vowels[position]\n\
    \      local vowel_position = alphabet.find(vowel)\n      local vowel_letter =\
    \ alphabet[vowel_position + 1]\n      output = output .. vowel_letter\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxiustlvh.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpxiustlvh.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpxiustlvh.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ alphabet2 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet3\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet4 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet5 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet6 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet7 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet8 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet9 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet10 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet11 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet12 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet13 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg636_6if.lua:26: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1, 1)\n    local position = alphabet:find(vowel)\n\
    \    local nextLetter = alphabet:sub(1, position + 1)\n    local nextVowel = alphabet:sub(position\
    \ + 1, position)\n    local nextPosition = alphabet:find(nextVowel)\n    local\
    \ nextLetter2 = alphabet:sub(1, nextPosition + 1)\n    local nextVowel2 = alphabet:sub(nextPosition\
    \ + 1, nextPosition)\n    local nextPosition2 = alphabet:find(nextVowel2)\n  \
    \  local nextLetter3 = alphabet:sub(1, nextPosition2 + 1)\n    local nextVowel3\
    \ = alphabet:sub(nextPosition2 + 1, nextPosition2)\n    local nextPosition3 =\
    \ alphabet:find(nextVowel3)\n    local nextLetter4 = alphabet:sub(1, nextPosition3\
    \ + 1)\n    local nextVowel4 = alphabet:sub(nextPosition3 + 1, nextPosition3)\n\
    \    local nextPosition4 = alphabet:find(nextVowel4)\n    local nextLetter5 =\
    \ alphabet:sub(1, nextPosition4 + 1)\n    local nextVowel5 = alphabet:sub(nextPosition4\
    \ + 1, nextPosition4)\n    local nextPosition5 = alphabet:find(nextVowel5)\n \
    \   local nextLetter6 = alphabet:sub(1, nextPosition5 + 1)\n    local nextVowel6\
    \ = alphabet:sub(nextPosition5 + 1, nextPosition5)\n    local nextPosition6 =\
    \ alphabet:find(nextVowel6)\n    local nextLetter7 = alphabet:sub(1, nextPosition6\
    \ + 1)\n    local nextVowel7 = alphabet:sub(nextPosition6 + 1, nextPosition6)\n\
    \    local nextPosition7 = alphabet:find(nextVowel7)\n    local nextLetter8 =\
    \ alphabet:sub(1, nextPosition7 + 1)\n    local nextVowel8 = alphabet:sub(nextPosition7\
    \ + 1, nextPosition7)\n    local nextPosition8 = alphabet:find(nextVowel8)\n \
    \   local nextLetter9 = alphabet:sub(1, nextPosition8 + 1)\n    local nextVowel9\
    \ = alphabet:sub(nextPosition8 + 1, nextPosition8)\n    local nextPosition9 =\
    \ alphabet:find(nextVowel9)\n    local nextLetter10 = alphabet:sub(1, nextPosition9\
    \ + 1)\n    local nextVowel10 = alphabet:sub(nextPosition9 + 1, nextPosition9)\n\
    \    local nextPosition10 = alphabet:find(nextVow\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprzcrtgf4.lua:49: ')' expected (to close '(' at line 48) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local alphabetLength = #alphabet\n  local messageLength = #message\n  local\
    \ encodedMessage = ''\n  local index\n  local vowelIndex\n  local vowel\n  local\
    \ alphabetIndex\n  local alphabetLetter\n  local encodedLetter\n  \n  for index\
    \ = 1, messageLength do\n    vowelIndex = math.floor(messageLength / 2)\n    vowel\
    \ = message[vowelIndex]\n    alphabetIndex = math.floor(vowelIndex / 2)\n    alphabetLetter\
    \ = alphabet[alphabetIndex]\n    encodedLetter = alphabetLetter\n    \n    if\
    \ vowelIndex > 0 then\n      encodedLetter = alphabet[alphabetIndex + 1]\n   \
    \ end\n    \n    encodedMessage = encodedMessage .. encodedLetter\n  end\n  \n\
    \  return encodedMessage\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_gvoqm3.lua:35:\
    \ attempt to concatenate local 'encodedLetter' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpq_gvoqm3.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter or alphabet == letter:upper() \n      and\
    \ alphabet + 1\n    local vowel = vowels:sub(1, index - 1)\n    local vowelIndex\
    \ = alphabet == vowel or alphabet == vowel:upper() \n      and alphabet + 1\n\
    \    local replacement = alphabet:sub(1, vowelIndex - 1)\n    output = output\
    \ .. replacement\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbp1woonq.lua:17:\
    \ attempt to index local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpbp1woonq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local char = message[i]\n\
    \    local index = alphabet.find(char)\n    if index == nil then\n      result\
    \ = result .. char\n    else\n      local vowelIndex = alphabet.find(vowels, index\
    \ + 1)\n      if vowelIndex == nil then\n        result = result .. char\n   \
    \   else\n        local vowel = vowels[vowelIndex]\n        result = result ..\
    \ alphabet[(index + 1) + (vowelIndex - index)]\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1fmej2u.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmph1fmej2u.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmph1fmej2u.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ vowel_map = {\n    ['a'] = 'A', \n    ['e'] = 'E', \n    ['i'] = 'I', \n   \
    \ ['o'] = 'O', \n    ['u'] = 'U', \n    ['y'] = 'Y'\n  }\n  local new_message\
    \ = ''\n  for i = 1, #message do\n    local letter = message[i]\n    local new_letter\
    \ = letter\n    for j = 1, #vowels do\n      if letter == vowels[j] then\n   \
    \     new_letter = vowel_map[letter]\n      end\n    end\n    new_message = new_message\
    \ .. new_letter\n  end\n  return new_message\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9aulkfj5.lua:32:\
    \ attempt to concatenate local 'new_letter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp9aulkfj5.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local messageLetters = string.gsub(message, \"%c\", function (letter)\n  \
    \  return alphabet[alphabet.find(letter, alphabet) + 1]\n  end)\n  local vowelLetters\
    \ = string.gsub(messageLetters, vowels, function (letter)\n    return alphabet[alphabet.find(letter,\
    \ alphabet) + 2]\n  end)\n  return vowelLetters .. messageLetters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9biqt55d.lua:26:\
    \ expected: \"tgst\"\nactual: \"TESTTEST\"\nstack traceback:\n\t/tmp/tmp9biqt55d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  local vowels = \"aeiou\"\n  local result = \"\"\n  for i = 1, #message do\n\
    \    local char = message[i]\n    local index = alphabet.find(char)\n    if index\
    \ == nil then\n      result = result .. char\n    else\n      local vowel_index\
    \ = alphabet.find(vowels, index + 1)\n      if vowel_index == nil then\n     \
    \   result = result .. char\n      else\n        local vowel_char = alphabet[vowel_index\
    \ + 1]\n        result = result .. vowel_char\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks06apqk.lua:18:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpks06apqk.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpks06apqk.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', '\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl9vyd1fp.lua:25: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local vowel_map\
    \ = {\n    ['a'] = 'A',\n    ['e'] = 'E',\n    ['i'] = 'I',\n    ['o'] = 'O',\n\
    \    ['u'] = 'U'\n  }\n  local alphabets = {\n    ['a'] = 'B',\n    ['b'] = 'C',\n\
    \    ['c'] = 'D',\n    ['d'] = 'E',\n    ['e'] = 'F',\n    ['f'] = 'G',\n    ['g']\
    \ = 'H',\n    ['h'] = 'I',\n    ['i'] = 'J',\n    ['j'] = 'K',\n    ['k'] = 'L',\n\
    \    ['l'] = 'M',\n    ['m'] = 'N',\n    ['n'] = 'O',\n    ['o'] = 'P',\n    ['p']\
    \ = 'Q',\n    ['q'] = 'R',\n    ['r'] = 'S',\n    ['s'] = 'T',\n    ['t'] = 'U',\n\
    \    ['u'] = 'V',\n    ['v'] = 'W',\n    ['w'] = 'X',\n    ['x'] = 'Y',\n    ['y']\
    \ = 'Z'\n  }\n  local alphabets_map = {\n    ['a'] = 'B',\n    ['b'] = 'C',\n\
    \    ['c'] = 'D',\n    ['d'] = 'E',\n    ['e'] = 'F',\n    ['f'] = 'G',\n    ['g']\
    \ = 'H',\n    ['h'] = 'I',\n    ['i'] = 'J',\n    ['j'] = 'K',\n    ['k'] = 'L',\n\
    \    ['l'] = 'M',\n    ['m'] = 'N',\n    ['n'] = 'O',\n    ['o'] = 'P',\n    ['p']\
    \ = 'Q',\n    ['q'] = 'R',\n    ['r'] = 'S',\n    ['s'] = 'T',\n    ['t'] = 'U',\n\
    \    ['u'] = 'V',\n    ['v'] = 'W',\n    ['w'] = 'X',\n    ['x'] = 'Y',\n    ['y']\
    \ = 'Z'\n  }\n  local alphabets_reverse = {\n    ['B'] = 'a',\n    ['C'] = 'b',\n\
    \    ['D'] = 'c',\n    ['E'] = 'd',\n    ['F'] = 'e',\n    ['G'] = 'f',\n    ['H']\
    \ = 'g',\n    ['I'] = 'h',\n    ['J'] = 'i',\n    ['K'] = 'j',\n    ['L'] = 'k',\n\
    \    ['M'] = 'l',\n    ['N'] = 'm',\n    ['O'] = 'n',\n    ['P'] = 'o',\n    ['Q']\
    \ = 'p',\n    ['R'] = 'q',\n    ['S'] = 'r',\n    ['T'] = 's',\n    ['U\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp373irxj5.lua:95: unfinished string near ''U'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local letters = {}\n    local vowels = {}\n    local count = 0\n    local\
    \ message = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter:lower() ~= letter then\n            letter = letter:lower()\n\
    \        end\n        if letter:upper() ~= letter then\n            letter = letter:upper()\n\
    \        end\n        if letter:sub(1, 1) ~= letter then\n            letter =\
    \ letter:sub(1, 1)\n        end\n        if letter:sub(2, 2) ~= letter then\n\
    \            letter = letter:sub(2, 2)\n        end\n        if letter:sub(3,\
    \ 3) ~= letter then\n            letter = letter:sub(3, 3)\n        end\n    \
    \    if letter:sub(4, 4) ~= letter then\n            letter = letter:sub(4, 4)\n\
    \        end\n        if letter:sub(5, 5) ~= letter then\n            letter =\
    \ letter:sub(5, 5)\n        end\n        if letter:sub(6, 6) ~= letter then\n\
    \            letter = letter:sub(6, 6)\n        end\n        if letter:sub(7,\
    \ 7) ~= letter then\n            letter = letter:sub(7, 7)\n        end\n    \
    \    if letter:sub(8, 8) ~= letter then\n            letter = letter:sub(8, 8)\n\
    \        end\n        if letter:sub(9, 9) ~= letter then\n            letter =\
    \ letter:sub(9, 9)\n        end\n        if letter:sub(1, 1) ~= letter then\n\
    \            letter = letter:sub(1, 1)\n        end\n        if letter:sub(2,\
    \ 2) ~= letter then\n            letter = letter:sub(2, 2)\n        end\n    \
    \    if letter:sub(3, 3) ~= letter then\n            letter = letter:sub(3, 3)\n\
    \        end\n        if letter:sub(4, 4) ~= letter then\n            letter =\
    \ letter:sub(4, 4)\n        end\n        if letter:sub(5, 5) ~= letter then\n\
    \            letter = letter:sub(5, 5)\n        end\n        if letter:sub(6,\
    \ 6) ~= letter then\n            letter = letter:sub(6, 6)\n        end\n    \
    \    if letter:sub(7, 7) ~= letter then\n            letter = letter:sub(7, 7)\n\
    \        end\n        if letter:sub(8, 8) ~= letter then\n            letter =\
    \ letter:sub(8, 8)\n        end\n        if letter:sub(9, 9) ~= letter then\n\
    \            letter = letter:sub(9, 9)\n        end\n        if letter:sub(1,\
    \ 1) ~= letter then\n            letter\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdxm0p5n7.lua:82: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local\
    \ alphabet2 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet3\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet4 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet5 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet6 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet7 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet8 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet9 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet10 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet11 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet12 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n  local alphabet13 =\
    \ {'a', 'b', 'c', 'd', 'e', 'f', 'g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx4k6kgx2.lua:26: unfinished string near ''g'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = \"\"\n  for i = 1, #message do\n    local char = message[i]\n\
    \    local index = alphabet.find(char)\n    if index == nil then\n      result\
    \ = result .. char\n    else\n      local vowel = vowels[index]\n      local vowelIndex\
    \ = alphabet.find(vowel)\n      local vowel2 = alphabet[vowelIndex + 1]\n    \
    \  result = result .. alphabet[vowelIndex] .. vowel2\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_gwjd8m.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp0_gwjd8m.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp0_gwjd8m.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    local vowels = \"AEIOU\"\
    \n    local messageLength = #message\n    local encodedMessage = \"\"\n    local\
    \ index = 0\n    while index <= messageLength do\n        local letter = message[index]\n\
    \        local vowelIndex = math.floor(index / 2)\n        local vowel = vowels[vowelIndex]\n\
    \        local letterIndex = math.floor(index - vowelIndex * 2)\n        local\
    \ letter = alphabet[letterIndex]\n        encodedMessage = encodedMessage .. letter\
    \ .. vowel\n        index = index + 1\n    end\n    return encodedMessage\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0_fg3nt.lua:23:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmpq0_fg3nt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local char = message[i]\n        if char in vowels then\n           \
    \ local nextVowelIndex = vowelIndex + 2\n            if nextVowelIndex > #alphabet\
    \ then\n                nextVowelIndex = #alphabet\n            end\n        \
    \    local nextVowel = alphabet[nextVowelIndex]\n            local nextChar =\
    \ alphabet[vowelIndex]\n            local nextCharIndex = alphabet == vowels and\
    \ vowelIndex + 1 or vowelIndex\n            local nextCharIndex = alphabet ==\
    \ vowels and vowelIndex + 2 or vowelIndex + 1\n            local nextChar = alphabet[nextCharIndex]\n\
    \            local nextCharIndex = alphabet == vowels and vowelIndex + 3 or vowelIndex\
    \ + 2\n            local nextChar = alphabet[nextCharIndex]\n            local\
    \ nextCharIndex = alphabet == vowels and vowelIndex + 4 or vowelIndex + 3\n  \
    \          local nextChar = alphabet[nextCharIndex]\n            local nextCharIndex\
    \ = alphabet == vowels and vowelIndex + 5 or vowelIndex + 4\n            local\
    \ nextChar = alphabet[nextCharIndex]\n            local nextCharIndex = alphabet\
    \ == vowels and vowelIndex + 6 or vowelIndex + 5\n            local nextChar =\
    \ alphabet[nextCharIndex]\n            local nextCharIndex = alphabet == vowels\
    \ and vowelIndex + 7 or vowelIndex + 6\n            local nextChar = alphabet[nextCharIndex]\n\
    \            local nextCharIndex = alphabet == vowels and vowelIndex + 8 or vowelIndex\
    \ + 7\n            local nextChar = alphabet[nextCharIndex]\n            local\
    \ nextCharIndex = alphabet == vowels and vowelIndex + 9 or vowelIndex + 8\n  \
    \          local nextChar = alphabet[nextCharIndex]\n            local nextCharIndex\
    \ = alphabet == vowels and vowelIndex + 10 or vowelIndex + 9\n            local\
    \ nextChar = alphabet[nextCharIndex]\n            local nextCharIndex = alphabet\
    \ == vowels and vowelIndex + 11 or vowelIndex + 10\n            local nextChar\
    \ = alphabet[nextCharIndex]\n            local nextCharIndex = alphabet == vowels\
    \ and vowelIndex + 12 or vowelIndex + 11\n            local nextChar = alphabet[nextCharIndex]\n\
    \            local nextCharIndex = alphabet == vowels and vowelIndex + 13 or vowelIndex\
    \ + 12\n            local nextChar = alphabet[nextCharIndex]\n            local\
    \ nextCharIndex = alphabet == vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvk04kjoz.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = {\n    ['a'] = 'A',\n    ['b'] = 'B',\n    ['c'] = 'C',\n\
    \    ['d'] = 'D',\n    ['e'] = 'E',\n    ['f'] = 'F',\n    ['g'] = 'G',\n    ['h']\
    \ = 'H',\n    ['i'] = 'I',\n    ['j'] = 'J',\n    ['k'] = 'K',\n    ['l'] = 'L',\n\
    \    ['m'] = 'M',\n    ['n'] = 'N',\n    ['o'] = 'O',\n    ['p'] = 'P',\n    ['q']\
    \ = 'Q',\n    ['r'] = 'R',\n    ['s'] = 'S',\n    ['t'] = 'T',\n    ['u'] = 'U',\n\
    \    ['v'] = 'V',\n    ['w'] = 'W',\n    ['x'] = 'X',\n    ['y'] = 'Y',\n    ['z']\
    \ = 'Z',\n    ['A'] = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n    ['D'] = 'd',\n\
    \    ['E'] = 'e',\n    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H'] = 'h',\n    ['I']\
    \ = 'i',\n    ['J'] = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n    ['M'] = 'm',\n\
    \    ['N'] = 'n',\n    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q'] = 'q',\n    ['R']\
    \ = 'r',\n    ['S'] = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n    ['V'] = 'v',\n\
    \    ['W'] = 'w',\n    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z'] = 'z',\n  }\n\
    \  local vowels = {\n    ['a'] = 'a',\n    ['e'] = 'e',\n    ['i'] = 'i',\n  \
    \  ['o'] = 'o',\n    ['u'] = 'u',\n  }\n  local result = \"\"\n  for i = 1, #message\
    \ do\n    local letter = message[i]\n    local vowel = vowels[letter]\n    if\
    \ vowel then\n      local index = alphabet.indexOf(vowel)\n      local letter2\
    \ = alphabet[index + 1]\n      result = result .. letter2\n    else\n      result\
    \ = result .. letter\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ejb6dnx.lua:82:\
    \ attempt to concatenate local 'letter' (a nil value)\nstack traceback:\n\t/tmp/tmp2ejb6dnx.lua:91:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    local vowelCount = 0\n    local letterCount = 0\n\
    \    for i = 1, #message do\n        local letter = message[i]\n        if letter\
    \ ~= ' ' then\n            letterCount = letterCount + 1\n        end\n      \
    \  if letter ~= 'a' then\n            local nextLetter = alphabet:sub((letterCount\
    \ + 1), (letterCount + 2))\n            local nextVowel = vowels:sub((letterCount\
    \ + 1), (letterCount + 2))\n            local nextVowelIndex = alphabet:find(nextVowel)\n\
    \            local nextLetterIndex = alphabet:find(letter)\n            if nextLetterIndex\
    \ ~= nil then\n                local nextVowelIndex = alphabet:find(nextVowel)\n\
    \                if nextVowelIndex ~= nil then\n                    local nextLetterIndex\
    \ = alphabet:find(letter)\n                    if nextLetterIndex ~= nil then\n\
    \                        local nextLetter = alphabet:sub((nextLetterIndex + 1),\
    \ (nextLetterIndex + 2))\n                        local nextVowel = alphabet:sub((nextVowelIndex\
    \ + 1), (nextVowelIndex + 2))\n                        local nextVowelIndex =\
    \ alphabet:find(nextVowel)\n                        local nextLetterIndex = alphabet:find(letter)\n\
    \                        if nextLetterIndex ~= nil then\n                    \
    \        local nextLetter = alphabet:sub((nextLetterIndex + 1), (nextLetterIndex\
    \ + 2))\n                            local nextVowel = alphabet:sub((nextVowelIndex\
    \ + 1), (nextVowelIndex + 2))\n                            local nextVowelIndex\
    \ = alphabet:find(nextVowel)\n                            local nextLetterIndex\
    \ = alphabet:find(letter)\n                            if nextLetterIndex ~= nil\
    \ then\n                                local nextLetter = alphabet:sub((nextLetterIndex\
    \ + 1), (nextLetterIndex + 2))\n                                local nextVowel\
    \ = alphabet:sub((nextVowelIndex + 1), (nextVowelIndex + 2))\n               \
    \                 local nextVowelIndex = alphabet:find(nextVowel)\n          \
    \                      local nextLetterIndex = alphabet:find(letter)\n       \
    \                         if nextLetterIndex ~= nil then\n                   \
    \                 local nextLetter = alphabet:sub((nextLetterIndex + 1), (nextLetterIndex\
    \ + 2))\n                                    local nextVowel = alphabet:sub((nextVowelIndex\
    \ + 1), (nextVowelIndex + 2))\n                                    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp74equ9br.lua:61: 'end' expected (to close 'if' at line 46)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  local vowelIndex = 1\n  for i = 1, #message do\n    local\
    \ char = message[i]\n    if #alphabet > #vowels then\n      local index = alphabet\
    \ - #vowels\n      local vowel = alphabet[index]\n      local vowelIndex = index\n\
    \    else\n      local vowel = vowels[vowelIndex]\n      vowelIndex = vowelIndex\
    \ + 1\n    end\n    local index = alphabet - #alphabet\n    local char = alphabet[index]\n\
    \    local outputIndex = index\n    if char == vowel then\n      outputIndex =\
    \ vowelIndex\n    end\n    output = output .. alphabet[outputIndex]\n  end\n \
    \ return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_ywsl2p.lua:19:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmpm_ywsl2p.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        local vowel = letter:sub(1, 1)\n        local index = alphabet:find(vowel)\n\
    \        if index == nil then\n            index = alphabet:find(letter)\n   \
    \     end\n        if index == nil then\n            index = alphabet:find(vowel:sub(2))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(3))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(4))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(5))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(6))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(7))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(8))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(9))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(10))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(11))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(12))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(13))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(14))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(15))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(16))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(17))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(18))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(19))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(20))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(21))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(22))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(23))\n\
    \        end\n        if index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt9z2pfd_.lua:89: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = {'a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U'}\n  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'}\n  local alphabet2 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}\n  local alphabet3\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}\n  local alphabet4 = {'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', '\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiqw2i20v.lua:17: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  local vowelIndex = 1\n  for i = 1, #message do\n    local\
    \ char = message[i]\n    local nextVowelIndex = #vowels + vowelIndex\n    local\
    \ nextChar = alphabet[nextVowelIndex]\n    local nextCharIndex = alphabet + nextVowelIndex\n\
    \    if char == nextChar then\n      output = output .. nextChar\n      vowelIndex\
    \ = nextCharIndex\n    else\n      output = output .. char\n    end\n  end\n \
    \ return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuy9qjnk3.lua:20:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmpuy9qjnk3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        local vowel = letter:sub(1, 1)\n        local index = alphabet:find(vowel)\n\
    \        if index == nil then\n            index = alphabet:find(vowel:sub(2))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(3))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(4))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(5))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(6))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(7))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(8))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(9))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(10))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(11))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(12))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(13))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(14))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(15))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(16))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(17))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(18))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(19))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(20))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(21))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(22))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(23))\n\
    \        end\n        if index == nil then\n            index = alphabet:find(vowel:sub(24))\n\
    \        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfr8mqugn.lua:99: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  local vowels = \"AEIOU\"\
    \n  local output = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet .. vowels .. alphabet:sub(1, i)\n    local letterIndex\
    \ = alphabet:find(letter)\n    local nextLetterIndex = alphabet:find(letter, letterIndex\
    \ + 1)\n    local nextLetter = alphabet:sub(letterIndex + 1, nextLetterIndex)\n\
    \    local nextVowel = alphabet:sub(nextLetterIndex + 1, i)\n    local nextVowelIndex\
    \ = alphabet:find(nextLetter)\n    local nextVowelLetter = alphabet:sub(nextVowelIndex\
    \ + 1, i)\n    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelIndex + 1, nextVowelLetterIndex)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    local nextVowelLetter = alphabet:sub(nextVowelLetterIndex + 1, i)\n\
    \    local nextVowelLetterIndex = alphabet:find(nextLetter, nextVowelLetterIndex\
    \ + 1)\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxvh3dwdx.lua:53: 'end' expected (to close 'for' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if char in alphabet then\n            local index = alphabet == vowels\
    \ and i or alphabet == vowels and i - 1 or i\n            local nextChar = alphabet:sub(index,\
    \ index + 2)\n            local nextIndex = alphabet == vowels and i + 2 or i\
    \ + 1\n            local nextChar2 = alphabet:sub(nextIndex, nextIndex + 2)\n\
    \            local nextChar3 = alphabet:sub(nextIndex + 1, nextIndex + 3)\n  \
    \          local nextChar4 = alphabet:sub(nextIndex + 2, nextIndex + 4)\n    \
    \        local nextChar5 = alphabet:sub(nextIndex + 3, nextIndex + 5)\n      \
    \      local nextChar6 = alphabet:sub(nextIndex + 4, nextIndex + 6)\n        \
    \    local nextChar7 = alphabet:sub(nextIndex + 5, nextIndex + 7)\n          \
    \  local nextChar8 = alphabet:sub(nextIndex + 6, nextIndex + 8)\n            local\
    \ nextChar9 = alphabet:sub(nextIndex + 7, nextIndex + 9)\n            local nextChar10\
    \ = alphabet:sub(nextIndex + 8, nextIndex + 10)\n            local nextChar11\
    \ = alphabet:sub(nextIndex + 9, nextIndex + 11)\n            local nextChar12\
    \ = alphabet:sub(nextIndex + 10, nextIndex + 12)\n            local nextChar13\
    \ = alphabet:sub(nextIndex + 11, nextIndex + 13)\n            local nextChar14\
    \ = alphabet:sub(nextIndex + 12, nextIndex + 14)\n            local nextChar15\
    \ = alphabet:sub(nextIndex + 13, nextIndex + 15)\n            local nextChar16\
    \ = alphabet:sub(nextIndex + 14, nextIndex + 16)\n            local nextChar17\
    \ = alphabet:sub(nextIndex + 15, nextIndex + 17)\n            local nextChar18\
    \ = alphabet:sub(nextIndex + 16, nextIndex + 18)\n            local nextChar19\
    \ = alphabet:sub(nextIndex + 17, nextIndex + 19)\n            local nextChar20\
    \ = alphabet:sub(nextIndex + 18, nextIndex + 20)\n            local nextChar21\
    \ = alphabet:sub(nextIndex + 19, nextIndex + 21)\n            local nextChar22\
    \ = alphabet:sub(nextIndex + 20, nextIndex + 22)\n            local nextChar23\
    \ = alphabet:sub(nextIndex + 21, nextIndex + 23)\n            local nextChar24\
    \ = alphabet:sub(nextIndex + 22, nextIndex + 24)\n            local nextChar25\
    \ = alphabet:sub(nextIndex + 23, nextIndex + \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg2jj0apq.lua:17: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local vowel_positions = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_position = alphabet and alphabet:find(letter)\n    if vowel_position\
    \ then\n      vowel_positions[letter] = vowel_position\n    end\n  end\n  local\
    \ new_message = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_position = alphabet and alphabet:find(letter)\n    if vowel_position\
    \ then\n      local vowel = alphabet:sub(vowel_position + 1, vowel_position +\
    \ 2)\n      new_message[i] = alphabet:sub(vowel_position + 1, vowel_position +\
    \ 2):upper()\n    else\n      new_message[i] = letter\n    end\n  end\n  return\
    \ table.concat(new_message)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx8womqc.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpqx8womqc.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpqx8womqc.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local output = ''\n  local vowelIndex = 1\n  for i = 1, #message do\n    local\
    \ letter = message[i]\n    local nextLetter = message[i + 1]\n    local index\
    \ = alphabet and alphabet[letter] or letter\n    local nextIndex = alphabet and\
    \ alphabet[nextLetter] or nextLetter\n    local vowel = vowels and vowels[letter]\
    \ or letter\n    local nextVowel = vowels and vowels[nextLetter] or nextLetter\n\
    \    local newLetter = index\n    if index == nextIndex then\n      newLetter\
    \ = vowel\n    end\n    output = output .. newLetter\n    if nextIndex == vowelIndex\
    \ then\n      output = output .. nextVowel\n    end\n    vowelIndex = vowelIndex\
    \ + 1\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy97snyas.lua:27:\
    \ attempt to concatenate local 'newLetter' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpy97snyas.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLength = #message\n    local encodedMessage = ''\n    local\
    \ currentLetter = ''\n    local previousLetter = ''\n    local currentVowel =\
    \ ''\n    local previousVowel = ''\n    local currentVowelPosition = 0\n    local\
    \ previousVowelPosition = 0\n    local currentVowelPositionInAlphabet = 0\n  \
    \  local previousVowelPositionInAlphabet = 0\n    local currentVowelPositionInAlphabetInMessage\
    \ = 0\n    local previousVowelPositionInAlphabetInMessage = 0\n    local currentVowelPositionInAlphabetInAlphabet\
    \ = 0\n    local previousVowelPositionInAlphabetInAlphabet = 0\n    local currentVowelPositionInAlphabetInVowelPosition\
    \ = 0\n    local previousVowelPositionInAlphabetInVowelPosition = 0\n    local\
    \ currentVowelPositionInAlphabetInVowelPositionInMessage = 0\n    local previousVowelPositionInAlphabetInVowelPositionInMessage\
    \ = 0\n    local currentVowelPositionInAlphabetInVowelPositionInAlphabet = 0\n\
    \    local previousVowelPositionInAlphabetInVowelPositionInAlphabet = 0\n    local\
    \ currentVowelPositionInAlphabetInVowelPositionInVowelPosition = 0\n    local\
    \ previousVowelPositionInAlphabetInVowelPositionInVowelPosition = 0\n    local\
    \ currentVowelPositionInAlphabetInVowelPositionInVowelPositionInMessage = 0\n\
    \    local previousVowelPositionInAlphabetInVowelPositionInVowelPositionInMessage\
    \ = 0\n    local currentVowelPositionInAlphabetInVowelPositionInVowelPositionInAlphabet\
    \ = 0\n    local previousVowelPositionInAlphabetInVowelPositionInVowelPositionInAlphabet\
    \ = 0\n    local currentVowelPositionInAlphabetInVowelPositionInVowelPositionInVowelPosition\
    \ = 0\n    local previousVowelPositionInAlphabetInVowelPositionInVowelPositionInVowelPosition\
    \ = 0\n    local currentVowelPositionInAlphabetInVowelPositionInVowelPositionInVowelPositionInMessage\
    \ = 0\n    local previousVowelPositionInAlphab\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5nu95s50.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local message = '' .. message\n  local index = 1\n  local result = ''\n  while\
    \ index <= #message do\n    local letter = message[index]\n    local vowel = letter:sub(1,\
    \ 1)\n    local letterIndex = alphabet == vowels and index - 1 or alphabet ==\
    \ vowels and index - 2 or index - 1\n    local letter2 = alphabet:sub((letterIndex\
    \ + 1), letterIndex + 2)\n    local letter3 = alphabet:sub((letterIndex + 2),\
    \ letterIndex + 3)\n    local letter4 = alphabet:sub((letterIndex + 3), letterIndex\
    \ + 4)\n    local letter5 = alphabet:sub((letterIndex + 4), letterIndex + 5)\n\
    \    local letter6 = alphabet:sub((letterIndex + 5), letterIndex + 6)\n    local\
    \ letter7 = alphabet:sub((letterIndex + 6), letterIndex + 7)\n    local letter8\
    \ = alphabet:sub((letterIndex + 7), letterIndex + 8)\n    local letter9 = alphabet:sub((letterIndex\
    \ + 8), letterIndex + 9)\n    local letter10 = alphabet:sub((letterIndex + 9),\
    \ letterIndex + 10)\n    local letter11 = alphabet:sub((letterIndex + 10), letterIndex\
    \ + 11)\n    local letter12 = alphabet:sub((letterIndex + 11), letterIndex + 12)\n\
    \    local letter13 = alphabet:sub((letterIndex + 12), letterIndex + 13)\n   \
    \ local letter14 = alphabet:sub((letterIndex + 13), letterIndex + 14)\n    local\
    \ letter15 = alphabet:sub((letterIndex + 14), letterIndex + 15)\n    local letter16\
    \ = alphabet:sub((letterIndex + 15), letterIndex + 16)\n    local letter17 = alphabet:sub((letterIndex\
    \ + 16), letterIndex + 17)\n    local letter18 = alphabet:sub((letterIndex + 17),\
    \ letterIndex + 18)\n    local letter19 = alphabet:sub((letterIndex + 18), letterIndex\
    \ + 19)\n    local letter20 = alphabet:sub((letterIndex + 19), letterIndex + 20)\n\
    \    local letter21 = alphabet:sub((letterIndex + 20), letterIndex + 21)\n   \
    \ local letter22 = alphabet:sub((letterIndex + 21), letterIndex + 22)\n    local\
    \ letter23 = alphabet:sub((letterIndex + 22), letterIndex + 23)\n    local letter24\
    \ = alphabet:sub((letterIndex + 23), letterIndex + 24)\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpini7o6bh.lua:56: 'end' expected (to close 'while' at line\
    \ 17) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local char = message[i]\n        if char == 'a' then\n            char\
    \ = alphabet[vowelIndex + 1]\n            vowelIndex = vowelIndex + 1\n      \
    \  elseif char == 'e' then\n            char = alphabet[vowelIndex + 1]\n    \
    \        vowelIndex = vowelIndex + 1\n        elseif char == 'i' then\n      \
    \      char = alphabet[vowelIndex + 1]\n            vowelIndex = vowelIndex +\
    \ 1\n        elseif char == 'o' then\n            char = alphabet[vowelIndex +\
    \ 1]\n            vowelIndex = vowelIndex + 1\n        elseif char == 'u' then\n\
    \            char = alphabet[vowelIndex + 1]\n            vowelIndex = vowelIndex\
    \ + 1\n        elseif char == 'y' then\n            char = alphabet[vowelIndex\
    \ + 1]\n            vowelIndex = vowelIndex + 1\n        end\n        output =\
    \ output .. char\n    end\n    return output\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwglcdzb.lua:37:\
    \ attempt to concatenate local 'char' (a nil value)\nstack traceback:\n\t/tmp/tmpfwglcdzb.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local vowels = \"aeiouAEIOU\"\n  local alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  local new_message = \"\"\n  for i = 1, #message\
    \ do\n    local char = message[i]\n    local new_char = char\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        new_char = alphabet[alphabet +\
    \ j + 1]\n      end\n    end\n    new_message = new_message .. new_char\n  end\n\
    \  return new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4grw3q0k.lua:21:\
    \ attempt to perform arithmetic on local 'alphabet' (a string value)\nstack traceback:\n\
    \t/tmp/tmp4grw3q0k.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6hvlegt.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpc6hvlegt.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter ~= ' ' then\n            local index = alphabet + letter\n\
    \            local letter2 = alphabet:sub(i, i + 1)\n            local letter3\
    \ = alphabet:sub(i + 1, i + 2)\n            local letter4 = alphabet:sub(i + 2,\
    \ i + 3)\n            local letter5 = alphabet:sub(i + 3, i + 4)\n           \
    \ local letter6 = alphabet:sub(i + 4, i + 5)\n            local letter7 = alphabet:sub(i\
    \ + 5, i + 6)\n            local letter8 = alphabet:sub(i + 6, i + 7)\n      \
    \      local letter9 = alphabet:sub(i + 7, i + 8)\n            local letter10\
    \ = alphabet:sub(i + 8, i + 9)\n            local letter11 = alphabet:sub(i +\
    \ 9, i + 10)\n            local letter12 = alphabet:sub(i + 10, i + 11)\n    \
    \        local letter13 = alphabet:sub(i + 11, i + 12)\n            local letter14\
    \ = alphabet:sub(i + 12, i + 13)\n            local letter15 = alphabet:sub(i\
    \ + 13, i + 14)\n            local letter16 = alphabet:sub(i + 14, i + 15)\n \
    \           local letter17 = alphabet:sub(i + 15, i + 16)\n            local letter18\
    \ = alphabet:sub(i + 16, i + 17)\n            local letter19 = alphabet:sub(i\
    \ + 17, i + 18)\n            local letter20 = alphabet:sub(i + 18, i + 19)\n \
    \           local letter21 = alphabet:sub(i + 19, i + 20)\n            local letter22\
    \ = alphabet:sub(i + 20, i + 21)\n            local letter23 = alphabet:sub(i\
    \ + 21, i + 22)\n            local letter24 = alphabet:sub(i + 22, i + 23)\n \
    \           local letter25 = alphabet:sub(i + 23, i + 24)\n            local letter26\
    \ = alphabet:sub(i + 24, i + 25)\n            local letter27 = alphabet:sub(i\
    \ + 25, i + 26)\n            local letter28 = alphabet:sub(i + 26, i + 27)\n \
    \           local letter29 = alphabet:sub(i + 27, i + 28)\n            local letter30\
    \ = alphabet:sub(i + 28, i + 29)\n            local letter31 = alphabet:sub(i\
    \ + 29, i + 30)\n            local letter32 = alphabet:sub(i + 30, i + 31)\n \
    \           local letter33 = alphabet:sub(i + 31, i + 32)\n            local letter34\
    \ = alphabet:sub(i + 32, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1eksb8r9.lua:52: ')' expected (to close '(' at line 51) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  local vowel_counter = 0\n  for i = 1, #message do\n\
    \    local char = message[i]\n    if #alphabet > 1 then\n      local letter_pos\
    \ = alphabet.find(char)\n      if letter_pos > 0 then\n        local vowel_pos\
    \ = vowels.find(char)\n        if vowel_pos > 0 then\n          local vowel_letter\
    \ = alphabet[letter_pos - 1]\n          local vowel_letter_pos = alphabet.find(vowel_letter)\n\
    \          if vowel_letter_pos > 0 then\n            local vowel_letter_pos_2\
    \ = alphabet.find(vowel_letter, vowel_letter_pos + 1)\n            if vowel_letter_pos_2\
    \ > 0 then\n              local vowel_letter_pos_3 = alphabet.find(vowel_letter,\
    \ vowel_letter_pos_2 + 1)\n              if vowel_letter_pos_3 > 0 then\n    \
    \            local vowel_letter_pos_4 = alphabet.find(vowel_letter, vowel_letter_pos_3\
    \ + 1)\n                if vowel_letter_pos_4 > 0 then\n                  local\
    \ vowel_letter_pos_5 = alphabet.find(vowel_letter, vowel_letter_pos_4 + 1)\n \
    \                 if vowel_letter_pos_5 > 0 then\n                    local vowel_letter_pos_6\
    \ = alphabet.find(vowel_letter, vowel_letter_pos_5 + 1)\n                    if\
    \ vowel_letter_pos_6 > 0 then\n                      local vowel_letter_pos_7\
    \ = alphabet.find(vowel_letter, vowel_letter_pos_6 + 1)\n                    \
    \  if vowel_letter_pos_7 > 0 then\n                        local vowel_letter_pos_8\
    \ = alphabet.find(vowel_letter, vowel_letter_pos_7 + 1)\n                    \
    \    if vowel_letter_pos_8 > 0 then\n                          local vowel_letter_pos_9\
    \ = alphabet.find(vowel_letter, vowel_letter_pos_8 + 1)\n                    \
    \      if vowel_letter_pos_9 > 0 then\n                            local vowel_letter_pos_10\
    \ = alphabet.find(vowel_letter, vowel_letter_pos_9 + 1)\n                    \
    \        if vowel_letter_pos_10 > 0 then\n                              local\
    \ vowel_letter_pos_11 = alphabet.find(vowel_letter, vowel_letter_pos_10 + 1)\n\
    \                              if vowel_letter_pos_11 > 0 then\n             \
    \                   local vowel_letter_pos_12 = alphabet.find(vowel_letter, vowel_letter_pos_11\
    \ + 1)\n                                if vowel_letter_pos_12 > 0 then\n    \
    \                              local vowel_letter_pos_13 = alphabet.find(vowel_letter,\
    \ vowel_letter_pos_12 + 1)\n                                  if vowel_letter_pos_13\
    \ > 0 then\n                                    local vowel_letter_pos_14\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphttrio3u.lua:62: 'end' expected (to close 'if' at line 49)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local char = message[i]\n        if char in alphabet:gmatch('%a') then\n\
    \            local nextVowelIndex = alphabet:find(vowels, char)\n            if\
    \ nextVowelIndex > vowelIndex then\n                local nextVowel = alphabet:sub(vowelIndex,\
    \ nextVowelIndex)\n                local nextVowelIndex = alphabet:find(vowels,\
    \ nextVowel)\n                local nextVowel = alphabet:sub(nextVowelIndex, nextVowelIndex\
    \ + 1)\n                output = output .. alphabet:sub(vowelIndex, nextVowelIndex)\n\
    \            end\n            vowelIndex = nextVowelIndex + 1\n        else\n\
    \            output = output .. char\n        end\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6jin0tf2.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your code here\n  local vowels = {'a','e','i','o','u'}\n  local alphabet\
    \ = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local messageLetters = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local letterIndex = alphabet.find(letter)\n    local vowelIndex = vowels.find(letter)\n\
    \    if letterIndex == nil then\n      letterIndex = alphabet.find(letter)\n \
    \   end\n    if vowelIndex == nil then\n      letterIndex = alphabet.find(letter)\n\
    \    end\n    local letterIndex = letterIndex + 2\n    if letterIndex > 26 then\n\
    \      letterIndex = letterIndex - 26\n    end\n    local letter = alphabet[letterIndex]\n\
    \    table.insert(messageLetters, letter)\n  end\n  local message = ''\n  for\
    \ i = 1, #messageLetters do\n    local letter = messageLetters[i]\n    local letterIndex\
    \ = alphabet.find(letter)\n    local vowelIndex = vowels.find(letter)\n    if\
    \ letterIndex == nil then\n      letterIndex = alphabet.find(letter)\n    end\n\
    \    if vowelIndex == nil then\n      letterIndex = alphabet.find(letter)\n  \
    \  end\n    local letterIndex = letterIndex + 2\n    if letterIndex > 26 then\n\
    \      letterIndex = letterIndex - 26\n    end\n    local letter = alphabet[letterIndex]\n\
    \    message = message .. letter\n  end\n  return message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8o0ptwy.lua:18:\
    \ attempt to call field 'find' (a nil value)\nstack traceback:\n\t/tmp/tmpc8o0ptwy.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local alphabet = {\n \
    \       'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', \n  \
    \      'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n    }\n\
    \    local messageLength = #message\n    local encodedMessage = \"\"\n    for\
    \ i = 1, messageLength do\n        local currentChar = message[i]\n        local\
    \ nextChar = message[i+1]\n        if currentChar in vowels then\n           \
    \ local index = alphabet.indexOf(currentChar)\n            local nextIndex = alphabet.indexOf(nextChar)\n\
    \            local nextCharIndex = alphabet.indexOf(nextChar, index+1)\n     \
    \       local nextCharIndex2 = alphabet.indexOf(nextChar, index+2)\n         \
    \   local nextCharIndex3 = alphabet.indexOf(nextChar, index+3)\n            local\
    \ nextCharIndex4 = alphabet.indexOf(nextChar, index+4)\n            local nextCharIndex5\
    \ = alphabet.indexOf(nextChar, index+5)\n            local nextCharIndex6 = alphabet.indexOf(nextChar,\
    \ index+6)\n            local nextCharIndex7 = alphabet.indexOf(nextChar, index+7)\n\
    \            local nextCharIndex8 = alphabet.indexOf(nextChar, index+8)\n    \
    \        local nextCharIndex9 = alphabet.indexOf(nextChar, index+9)\n        \
    \    local nextCharIndex10 = alphabet.indexOf(nextChar, index+10)\n          \
    \  local nextCharIndex11 = alphabet.indexOf(nextChar, index+11)\n            local\
    \ nextCharIndex12 = alphabet.indexOf(nextChar, index+12)\n            local nextCharIndex13\
    \ = alphabet.indexOf(nextChar, index+13)\n            local nextCharIndex14 =\
    \ alphabet.indexOf(nextChar, index+14)\n            local nextCharIndex15 = alphabet.indexOf(nextChar,\
    \ index+15)\n            local nextCharIndex16 = alphabet.indexOf(nextChar, index+16)\n\
    \            local nextCharIndex17 = alphabet.indexOf(nextChar, index+17)\n  \
    \          local nextCharIndex18 = alphabet.indexOf(nextChar, index+18)\n    \
    \        local nextCharIndex19 = alphabet.indexOf(nextChar, index+19)\n      \
    \      local nextCharIndex20 = alphabet.indexOf(nextChar, index+20)\n        \
    \    local nextCharIndex21 = alphabet.indexOf(nextChar, index+21)\n          \
    \  local nextCharIndex22 = alphabet.indexOf(nextChar, index+22)\n            local\
    \ nextCharIndex23 = alphabet.indexOf(nextChar, index+23)\n            local nextCharIndex24\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplatpd9ms.lua:22: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
