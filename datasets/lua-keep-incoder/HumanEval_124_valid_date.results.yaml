name: HumanEval_124_valid_date
language: lua
results:
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    local months = {\n        [1] = 1,\n        [3] =\
    \ 1\n    }\n    local days = {\n        [5] = 1,\n        [7] = 1,\n        [8]\
    \ = 1,\n        [10] = 1,\n        [12] = 1\n    }\n    local months_count = months[month]\n\
    \    local days_count = days[day]\n    local year_count = year - 1900 -- 1900\
    \ is leap year\n    local months_count_valid = months_count >= 1 and months_count\
    \ <= 12\n    local days_count_valid = days_count >= 1 and days_count <= 31\n \
    \   local year_count_valid = year_count >= 1 and year_count <= 30\n    local months_count_valid\
    \ = months_count_valid and days_count_valid and year_count\n    local months_count_valid\
    \ = months_count_valid and months_count_valid and months_count_valid\n    local\
    \ months_count_valid = months_count_valid and months_count_valid and months_count_valid\n\
    \    local months_count_valid = months_count_valid and months_count_valid and\
    \ months_count_valid\n    local months_count_valid = months_count_valid and months_count_valid\
    \ and months_count_valid\n    local months_count_valid = months_count_valid and\
    \ months_count_valid and months_count_valid\n    local months_count_valid = months_count_valid\
    \ and months_count_valid and months_count_valid\n    local months_count_valid\
    \ = months_count_valid and months_count_valid and months_count_valid\n    local\
    \ months_count_valid = months_count_valid and months_count_valid and months_count_valid\n\
    \    local months_count_valid = months_count_valid and months_count_valid and\
    \ months_count_valid\n    local months_count_valid = months_count_valid and months_count_valid\
    \ and months_count_valid\n    local months_count_valid = months_count_valid and\
    \ months_count_valid and months_count_valid\n    local months_count_valid = months_count_valid\
    \ and months_count_valid and months_count_valid\n    local months_count_valid\
    \ = months_count_valid and months_count_valid and months_count_valid\n    local\
    \ months_count_valid = months_count_valid and months_count_valid and months_count_valid\n\
    \    local months_count_valid = months_count_valid and months_count_valid and\
    \ months_count_valid\n    local months_count_valid = months_count_valid \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn06jncrx.lua:72: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local months_length = #months\n    local days_length\
    \ = #days\n    local date_length = #date\n    \n    if date_length == 0 then\n\
    \        return false\n    end\n    \n    if date_length < 2 then\n        return\
    \ false\n    end\n    \n    if date_length < 3 then\n        return false\n  \
    \  end\n    \n    if date_length < 4 then\n        return false\n    end\n   \
    \ \n    if date_length < 5 then\n        return false\n    end\n    \n    if date_length\
    \ < 6 then\n        return false\n    end\n    \n    if date_length < 7 then\n\
    \        return false\n    end\n    \n    if date_length < 8 then\n        return\
    \ false\n    end\n    \n    if date_length < 9 then\n        return false\n  \
    \  end\n    \n    if date_length < 10 then\n        return false\n    end\n  \
    \  \n    if date_length < 11 then\n        return false\n    end\n    \n    if\
    \ date_length < 12 then\n        return false\n    end\n    \n    if date_length\
    \ < 13 then\n        return false\n    end\n    \n    if date_length < 14 then\n\
    \        return false\n    end\n    \n    if date_length < 15 then\n        return\
    \ false\n    end\n    \n    if date_length < 16 then\n        return false\n \
    \   end\n    \n    if date_length < 17 then\n        return false\n    end\n \
    \   \n    if date_length < 18 then\n        return false\n    end\n    \n    if\
    \ date_length < 19 then\n        return false\n    end\n    \n    if date_length\
    \ < 20 then\n        return false\n    end\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwhd8vei6.lua:157: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local date_year = tonumber(date_split[2])\n  local date_month = tonumber(date_split[1])\n\
    \  local date_day = tonumber(date_split[3])\n  \n  if date_year == nil then\n\
    \    return false\n  end\n  \n  if date_month == nil then\n    return false\n\
    \  end\n  \n  if date_day == nil then\n    return false\n  end\n  \n  if date_month\
    \ < 1 or date_month > 12 then\n    return false\n  end\n  \n  if date_day < 1\
    \ or date_day > 31 then\n    return false\n  end\n  \n  if date_month == 1 or\
    \ date_month == 3 or date_month == 5 or date_month == 7 or date_month == 8 or\
    \ date_month == 10 or date_month == 12 or date_month == 14 then\n    if date_day\
    \ < 1 or date_day > 30 then\n      return false\n    end\n  elseif date_month\
    \ == 4 or date_month == 6 or date_month == 9 or date_month == 11 or date_month\
    \ == 14 then\n    if date_day < 1 or date_day > 29 then\n      return false\n\
    \    end\n  elseif date_month == 2 then\n    if date_day < 1 or date_day > 28\
    \ then\n      return false\n    end\n  end\n  \n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x7rce7m.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp_x7rce7m.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 1 and day > 30 then\n        return false\n    end\n    if month == 3 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 31 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 10 and day > 31 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj_l1hhm.lua:68:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcj_l1hhm.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ < 1 or date_array[3] > 12 then\n      return false\n   end\n   if date_array[2]\
    \ < 1 or date_array[2] > 31 then\n      return false\n   end\n   if date_array[1]\
    \ < 1 or date_array[1] > 12 then\n      return false\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamycg_an.lua:37:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpamycg_an.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ ~= nil then\n      if date_array[3] < 1 or date_array[3] > 12 then\n       \
    \  return false\n      end\n   end\n   if date_array[2] ~= nil then\n      if\
    \ date_array[2] < 1 or date_array[2] > 31 then\n         return false\n      end\n\
    \   end\n   if date_array[1] ~= nil then\n      if date_array[1] < 1 or date_array[1]\
    \ > 30 then\n         return false\n      end\n   end\n   if date_array[2] ~=\
    \ nil then\n      if date_array[2] < 1 or date_array[2] > 29 then\n         return\
    \ false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkcp4dlm.lua:22:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpzkcp4dlm.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ '-')\n  local date_year = tonumber(date_split[2])\n  local date_month = tonumber(date_split[1])\n\
    \  local date_day = tonumber(date_split[3])\n  \n  if date_year == nil or date_month\
    \ == nil or date_day == nil then\n    return false\n  end\n  \n  if date_month\
    \ < 1 or date_month > 12 then\n    return false\n  end\n  \n  if date_day < 1\
    \ or date_day > 31 then\n    return false\n  end\n  \n  if date_month == 1 or\
    \ date_month == 3 or date_month == 5 or\n    date_month == 7 or date_month ==\
    \ 8 or date_month == 10 or\n    date_month == 12 or date_month == 14 then\n  \
    \  if date_day < 1 or date_day > 30 then\n      return false\n    end\n  elseif\
    \ date_month == 4 or date_month == 6 or date_month == 9 or date_month == 11 or\
    \ date_month == 14 then\n    if date_day < 1 or date_day > 29 then\n      return\
    \ false\n    end\n  elseif date_month == 2 then\n    if date_day < 1 or date_day\
    \ > 28 then\n      return false\n    end\n  end\n  \n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0r_7mk_o.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0r_7mk_o.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil or date_month == nil or date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_year < 1 or date_year > 9999 or\
    \ date_month < 1 or date_month > 12 or date_day < 1 or date_day > 31 then\n  \
    \      return false\n    end\n    \n    if date_month == 1 or date_month == 3\
    \ or date_month == 5 or\n        date_month == 7 or date_month == 8 or date_month\
    \ == 10 or\n        date_month == 12 then\n        if date_day < 1 or date_day\
    \ > 30 then\n            return false\n        end\n    elseif date_month == 4\
    \ or date_month == 6 or date_month == 9 or date_month == 11 or date_month == 12\
    \ then\n        if date_day < 1 or date_day > 29 then\n            return false\n\
    \        end\n    elseif date_month == 2 then\n        if date_day < 1 or date_day\
    \ > 29 then\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolq_ok5u.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpolq_ok5u.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_array == nil then\n\
    \      return false\n   end\n   if date_array[3] < 1 or date_array[3] > 12 then\n\
    \      return false\n   end\n   if date_array[2] < 1 or date_array[2] > 31 then\n\
    \      return false\n   end\n   if date_array[1] < 1 or date_array[1] > 12 then\n\
    \      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8fiaxx_.lua:25:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpl8fiaxx_.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.split(date,\
    \ \"-\")\n    local months = {\n        [1] = \"01\",\n        [3] = \"03\",\n\
    \        [5] = \"05\",\n        [7] = \"07\",\n        [8] = \"08\",\n       \
    \ [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days = {\n        [1]\
    \ = 1,\n        [31] = 31,\n        [59] = 29\n    }\n    local months_count =\
    \ #months\n    local days_count = #days\n    local months_valid = months_count\
    \ > 0 and months[date_array[1]] ~= nil\n    local days_valid = days_count > 0\
    \ and days[date_array[2]] ~= nil\n    local months_less_than_1 = months_count\
    \ < 1\n    local days_less_than_31 = days_count < 31\n    local months_less_than_30\
    \ = months_count < 30\n    local days_less_than_29 = days_count < 29\n    local\
    \ months_less_than_12 = months_count < 12\n    local days_less_than_31 = days_count\
    \ < 31\n    local months_less_than_30 = months_count < 30\n    local days_less_than_29\
    \ = days_count < 29\n    local months_less_than_12 = months_count < 12\n    local\
    \ days_less_than_31 = days_count < 31\n    local months_less_than_30 = months_count\
    \ < 30\n    local days_less_than_29 = days_count < 29\n    local months_less_than_12\
    \ = months_count < 12\n    local days_less_than_31 = days_count < 31\n    local\
    \ months_less_than_30 = months_count < 30\n    local days_less_than_29 = days_count\
    \ < 29\n    local months_less_than_12 = months_count < 12\n    local days_less_than_31\
    \ = days_count < 31\n    local months_less_than_30 = months_count < 30\n    local\
    \ days_less_than_29 = days_count < 29\n    local months_less_than_12 = months_count\
    \ < 12\n    local days_less_than_31 = days_count < 31\n    local months_less_than_30\
    \ = months_count < 30\n    local days_less_than_29 = days_count < 29\n    local\
    \ months_less_than_12 = months_count < 12\n    local days_less_th\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmf9sm8f1.lua:82: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day < 1 or day > 31 then\n\
    \        return false\n    end\n    \n    if month < 1 or month > 12 then\n  \
    \      return false\n    end\n    \n    if year < 1 or year > 9999 then\n    \
    \    return false\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp806eksf8.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp806eksf8.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {1, 3, 5, 7, 8, 10, 12}\n    local\
    \ days = {1, 30, 29, 31}\n    local months_not_less = {1, 4, 6, 9, 11}\n    local\
    \ months_not_higher = {1, 2}\n    local years = {2000, 2012, 2040, 2020}\n   \
    \ local months_not_less_or_higher = {1, 4, 6, 9, 11}\n    local months_not_less_or_higher_or_equal\
    \ = {1, 2}\n    local days_not_less_or_higher = {1, 29}\n    local days_not_less_or_higher_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal = {1, 29}\n \
    \   local days_not_less_or_higher_or_equal_or_equal_or_equal = {1, 29}\n    local\
    \ days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal = {1, 29}\n    local\
    \ days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal = {1, 29}\n\
    \    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = {1, 29}\n    local days_not_less_or_higher_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_equal_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwkep4imf.lua:60: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Your code here\n  local date_array\
    \ = string.split(date, \"-\")\n  local month = tonumber(date_array[1])\n  local\
    \ day = tonumber(date_array[2])\n  local year = tonumber(date_array[3])\n  if\
    \ month == nil or day == nil or year == nil then\n    return false\n  end\n  if\
    \ month < 1 or month > 12 then\n    return false\n  end\n  if day < 1 or day >\
    \ 31 then\n    return false\n  end\n  if year < 1 or year > 2020 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzj0_cov.lua:16:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpdzj0_cov.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil then\n        return false\n    end\n    \n    if\
    \ date_month == nil then\n        return false\n    end\n    \n    if date_day\
    \ == nil then\n        return false\n    end\n    \n    if date_month < 1 or date_month\
    \ > 12 then\n        return false\n    end\n    \n    if date_day < 1 or date_day\
    \ > 31 then\n        return false\n    end\n    \n    if date_month == 1 or date_month\
    \ == 3 or date_month == 5 or\n        date_month == 7 or\n        date_month ==\
    \ 8 or\n        date_month == 10 or\n        date_month == 12 then\n        if\
    \ date_day < 1 or date_day > 30 then\n            return false\n        end\n\
    \    elseif date_month == 4 or date_month == 6 or date_month == 9 or date_month\
    \ == 11 or date_month == 12 then\n        if date_day < 1 or date_day > 29 then\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbow9wt.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpqtbow9wt.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year < 1 or date_year > 9999 then\n        return false\n   \
    \ end\n    if date_month < 1 or date_month > 12 then\n        return false\n \
    \   end\n    if date_day < 1 or date_day > 31 then\n        return false\n   \
    \ end\n    if date_month == 2 then\n        if date_day > 29 then\n          \
    \  return false\n        end\n    end\n    if date_month == 4 then\n        if\
    \ date_day > 30 then\n            return false\n        end\n    end\n    if date_month\
    \ == 6 then\n        if date_day > 29 then\n            return false\n       \
    \ end\n    end\n    if date_month == 8 then\n        if date_day > 29 then\n \
    \           return false\n        end\n    end\n    if date_month == 10 then\n\
    \        if date_day > 29 then\n            return false\n        end\n    end\n\
    \    if date_month == 12 then\n        if date_day > 31 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbth5btqw.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpbth5btqw.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local month = tonumber(date_array[1]) -- month\n  local day = tonumber(date_array[2])\
    \ -- day\n  local year = tonumber(date_array[3]) -- year\n  local months = { 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n  local days = { 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31 }\n  local months_count = #months\n  local days_count\
    \ = #days\n  local months_count_in_year = months_count + year / 100\n  local days_count_in_year\
    \ = days_count + year / 100\n  local months_count_in_year_2 = months_count + year\
    \ / 10\n  local days_count_in_year_2 = days_count + year / 10\n  local months_count_in_year_3\
    \ = months_count + year / 1\n  local days_count_in_year_3 = days_count + year\
    \ / 1\n  local months_count_in_year_4 = months_count + year\n  local days_count_in_year_4\
    \ = days_count + year\n  local months_count_in_year_5 = months_count + year *\
    \ 10\n  local days_count_in_year_5 = days_count + year * 10\n  local months_count_in_year_6\
    \ = months_count + year * 100\n  local days_count_in_year_6 = days_count + year\
    \ * 100\n  local months_count_in_year_7 = months_count + year * 1000\n  local\
    \ days_count_in_year_7 = days_count + year * 1000\n  local months_count_in_year_8\
    \ = months_count + year * 10000\n  local days_count_in_year_8 = days_count + year\
    \ * 10000\n  local months_count_in_year_9 = months_count + year * 100000\n  local\
    \ days_count_in_year_9 = days_count + year * 100000\n  local months_count_in_year_10\
    \ = months_count + year * 1000000\n  local days_count_in_year_10 = days_count\
    \ + year * 1000000\n  local months_count_in_year_11 = months_count + year * 10000000\n\
    \  local days_count_in_year_11 = days_count + year * 10000000\n  local months_count_in_year_12\
    \ = months_count + year * 100000000\n  local days_count_in_year_12 = days_count\
    \ + year * 100000000\n  local months_count_in_year_13 = months_count + \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjv1fbm8w.lua:51: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [3] = '04',\n        [5] = '06',\n        [7] = '09',\n        [8] = '11',\n\
    \        [10] = '12',\n        [12] = '01'\n    }\n    local months_length = months[month]\n\
    \    local days_length = days[day]\n    local years_length = years[year]\n   \
    \ local months_length_str = months_length\n    local days_length_str = days_length\n\
    \    local years_length_str = years_length\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg25b4cvd.lua:103: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '01',\n        [3] = '02',\n        [4] = '03',\n        [5] = '04',\n\
    \        [6] = '05',\n        [7] = '06',\n        [8] = '07',\n        [9] =\
    \ '08',\n        [10] = '09',\n        [11] = '10',\n        [12] = '11',\n  \
    \      [13] = '12',\n        [14] = '13',\n        [15] = '14',\n        [16]\
    \ = '15',\n        [17] = '16',\n        [18] = '17',\n        [19] = '18',\n\
    \        [20] = '19',\n        [21] = '20',\n        [22] = '21',\n        [23]\
    \ = '22',\n        [24] = '23',\n        [25] = '24',\n        [26] = '25',\n\
    \        [27] = '26',\n        [28] = '27',\n        [29] = '28',\n        [30]\
    \ = '29',\n        [31] = '30'\n    }\n    local months_length = months[month]\n\
    \    local days_length = days[day]\n    local years_length = years[year]\n   \
    \ local months_length_2 = months[month]\n    local days_length_2 = days[day]\n\
    \    local years_length_2 = years[year]\n    local months_length_3 = months[month]\n\
    \    local days_length_3 = days[day]\n    local years_length_3 = years[year]\n\
    \    local months_length_4 = months[month]\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1x5gvo27.lua:117: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    \n\
    \    if date_year < 1 or date_year > 9999 then\n        return false\n    end\n\
    \    \n    if date_month < 1 or date_month > 12 then\n        return false\n \
    \   end\n    \n    if date_day < 1 or date_day > 31 then\n        return false\n\
    \    end\n    \n    if date_month == 1 or date_month == 3 or date_month == 5 or\n\
    \        date_month == 7 or date_month == 8 or date_month == 10 or\n        date_month\
    \ == 12 or date_month == 14 then\n        if date_day < 1 or date_day > 30 then\n\
    \            return false\n        end\n    elseif date_month == 4 or date_month\
    \ == 6 or date_month == 9 or date_month == 11 or date_month == 14 then\n     \
    \   if date_day < 1 or date_day > 29 then\n            return false\n        end\n\
    \    elseif date_month == 2 then\n        if date_day < 1 or date_day > 28 then\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsso92ntl.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpsso92ntl.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month == 2 and day < 29 then\n\
    \    return false\n  end\n  if month == 2 and day == 29 then\n    return false\n\
    \  end\n  if month == 2 and day > 28 then\n    return false\n  end\n  if month\
    \ == 2 and day < 28 then\n    return false\n  end\n  if month == 2 and day ==\
    \ 28 then\n    return false\n  end\n  if month == 2 and day > 31 then\n    return\
    \ false\n  end\n  if month == 2 and day < 31 then\n    return false\n  end\n \
    \ if month == 2 and day == 31 then\n    return false\n  end\n  if month == 3 and\
    \ day > 31 then\n    return false\n  end\n  if month == 3 and day < 31 then\n\
    \    return false\n  end\n  if month == 3 and day == 31 then\n    return false\n\
    \  end\n  if month == 3 and day > 30 then\n    return false\n  end\n  if month\
    \ == 3 and day < 30 then\n    return false\n  end\n  if month == 3 and day ==\
    \ 30 then\n    return false\n  end\n  if month == 3 and day > 31 then\n    return\
    \ false\n  end\n  if month == 3 and day < 31 then\n    return false\n  end\n \
    \ if month == 3 and day == 31 then\n    return false\n  end\n  if month == 3 and\
    \ day > 30 then\n    return false\n  end\n  if month == 3 and day < 30 then\n\
    \    return false\n  end\n  if month == 3 and day == 30 then\n    return false\n\
    \  end\n  if month == 3 and day > 31 then\n    return false\n  end\n  if month\
    \ == 3 and day < 31 then\n    return false\n  end\n  if month == 3 and day ==\
    \ 31 then\n    return false\n  end\n  if month == 4 and day > 31 then\n    return\
    \ false\n  end\n  if month == 4 and day < 31 then\n    return false\n  end\n \
    \ if month == 4 and day == 31 then\n    return false\n  end\n  if month == 4 and\
    \ day > 30 then\n    return false\n  end\n  if month == 4 and day < 30 then\n\
    \    return false\n  end\n  if month == 4 and day == 30 then\n    return false\n\
    \  end\n  if month == 4 and day > 31 then\n    return false\n  end\n  if month\
    \ == 4 and day < 31 then\n    return \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpetscrn2f.lua:120: 'end' expected (to close 'if' at line 118)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = #months\n    local days_count\
    \ = #days\n    local months_count_valid = months_count > 0 and months_count <=\
    \ 12\n    local days_count_valid = days_count > 0 and days_count <= 31\n    local\
    \ months_count_invalid = months_count > 12\n    local days_count_invalid = days_count\
    \ > 31\n    local months_count_invalid = months_count < 1 or months_count > 12\n\
    \    local days_count_invalid = days_count < 1 or days_count > 31\n    local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n    local days_count_invalid = days_count\
    \ < 1 or days_count > 31\n    local months_count_invalid = months_count < 1 or\
    \ months_count > 12\n    local days_count_invalid = days_count < 1 or days_count\
    \ > 31\n    local months_count_invalid = months_count < 1 or months_count > 12\n\
    \    local days_count_invalid = days_count < 1 or days_count > 31\n    local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n    local days_count_invalid = days_count\
    \ < 1 or days_count > 31\n    local months_count_invalid = months_count < 1 or\
    \ months_count > 12\n    local days_count_invalid = days_count < 1 or days_count\
    \ > 31\n    local months_count_invalid = months_count < 1 or months_count > 12\n\
    \    local days_count_invalid = days_count < 1 or days_count > 31\n    local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n    local days_count_invalid = days_count\
    \ < 1 or days_count > 31\n    local months_count_invalid = months_count < 1 or\
    \ months_count > 12\n    local days_count_invalid = days_count < 1 or \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpssiqhp46.lua:58: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil or date_month == nil or date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_month < 1 or date_month > 12 then\n\
    \        return false\n    end\n    \n    if date_day < 1 or date_day > 31 then\n\
    \        return false\n    end\n    \n    if date_month == 1 or date_month ==\
    \ 3 or date_month == 5 or\n        date_month == 7 or\n        date_month == 8\
    \ or\n        date_month == 10 or\n        date_month == 12 then\n        if date_day\
    \ < 1 or date_day > 30 then\n            return false\n        end\n    elseif\
    \ date_month == 4 or date_month == 6 or date_month == 9 or date_month == 11 or\
    \ date_month == 12 then\n        if date_day < 1 or date_day > 29 then\n     \
    \       return false\n        end\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ecr7k4q.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0ecr7k4q.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  local date_month_name = month_name[date_month]\n    local date_days_name =\
    \ {\n        [1] = \"Sunday\",\n        [2] = \"Monday\",\n        [3] = \"Tuesday\"\
    ,\n        [4] = \"Wednesday\",\n        [5] = \"Thursday\",\n        [6] = \"\
    Friday\",\n        [7] = \"Saturday\"\n    }\n    local date_days_number = date_days_name[date_day]\n\
    \    local date_days_number_length = #date_days_number\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_length + 1\n    local\
    \ date_days_number_length = date_days_number_length + 1\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_length + 1\n    local\
    \ date_days_number_length = date_days_number_length + 1\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_length + 1\n    local\
    \ date_days_number_length = date_days_number_length + 1\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_length + 1\n    local\
    \ date_days_number_length = date_days_number_length + 1\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_length + 1\n    local\
    \ date_days_number_length = date_days_number_length + 1\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_length + 1\n    local\
    \ date_days_number_length = date_days_number_length + 1\n    local date_days_number_length\
    \ = date_days_number_length + 1\n    local date_days_number_length = date_days_number_length\
    \ + 1\n    local date_days_number_length = date_days_number_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm61zonr6.lua:80: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local day = tonumber(date_array[2])\n  local month = tonumber(date_array[1])\n\
    \  local year = tonumber(date_array[3])\n  if day == nil or month == nil or year\
    \ == nil then\n    return false\n  end\n  if day < 1 or day > 31 then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if year < 1 or year > 9999 then\n    return false\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2d1g15m.lua:19:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpz2d1g15m.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local days_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n    local months_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n    local\
    \ year = date_array[3]\n    local month = months_array[1]\n    local day = date_array[2]\n\
    \    local days_in_month = days_array[2]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    local days_in_decade = days_array[5]\n\
    \    local days_in_year = days_array[3]\n    local days_in_century = days_array[4]\n\
    \    local days_in_decade = days_array[5]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    local days_in_decade = days_array[5]\n\
    \    local days_in_year = days_array[3]\n    local days_in_century = days_array[4]\n\
    \    local days_in_decade = days_array[5]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    local days_in_decade = days_array[5]\n\
    \    local days_in_year = days_array[3]\n    local days_in_century = days_array[4]\n\
    \    local days_in_decade = days_array[5]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    local days_in_decade = days_array[5]\n\
    \    local days_in_year = days_array[3]\n    local days_in_century = days_array[4]\n\
    \    local days_in_decade = days_array[5]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    local days_in_decade = days_array[5]\n\
    \    local days_in_year = days_array[3]\n    local days_in_century = days_array[4]\n\
    \    local days_in_decade = days_array[5]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    local days_in_decade = days_array[5]\n\
    \    local days_in_year = days_array[3]\n    local days_in_century = days_array[4]\n\
    \    local days_in_decade = days_array[5]\n    local days_in_year = days_array[3]\n\
    \    local days_in_century = days_array[4]\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpici6an2p.lua:83: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local years = {\n        [1] = \"00\",\n        [3]\
    \ = \"04\",\n        [5] = \"06\",\n        [7] = \"09\",\n        [8] = \"11\"\
    ,\n        [10] = \"12\"\n    }\n    local months_count = months[date_parts[1]]\n\
    \    local days_count = days[date_parts[2]]\n    local years_count = years[date_parts[3]]\n\
    \    if date_parts[1] ~= nil and date_parts[1] > 0 and date_parts[1] <= months_count\
    \ and date_parts[2] ~= nil and date_parts[2] > 0 and date_parts[2] <= days_count\
    \ and date_parts[3] ~= nil and date_parts[3] > 0 and date_parts[3] <= years_count\
    \ then\n        return true\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0rcuhql.lua:55:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb0rcuhql.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '20',\n        [3] = '21',\n        [4] = '22',\n        [5] = '23',\n\
    \        [6] = '24',\n        [7] = '25',\n        [8] = '26',\n        [9] =\
    \ '27',\n        [10] = '28',\n        [11] = '29',\n        [12] = '30',\n  \
    \      [13] = '31'\n    }\n    local date_parts = string.match(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n    local months_count = date_parts[1]\n    local days_count = date_parts[2]\n\
    \    local years_count = date_parts[3]\n    local months_valid = months[months_count]\n\
    \    local days_valid = days[days_count]\n    local years_valid = years[years_count]\n\
    \    if months_valid ~= months_count or days_valid ~= days_count or years_valid\
    \ ~= years_count then\n        return false\n    end\n    if months_valid == '12'\
    \ and days_valid == '31' and years_valid == '00' then\n        return true\n \
    \   end\n    if months_valid == '01' and days_valid == '31' and years_valid ==\
    \ '00' then\n        return true\n    end\n    if months_valid == '01' and days_valid\
    \ == '30' and years_valid == '00' then\n        return true\n    end\n    if months_valid\
    \ == '01' and days_valid == '29' and years_valid == '00' then\n        return\
    \ true\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3lz8dwzi.lua:88: 'end' expected (to close 'if' at line 85)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_valid = months_count and months_count >\
    \ 1 and months_count <= 12\n    local days_count_valid = days_count and days_count\
    \ > 1 and days_count <= 31\n    local months_count_valid_2 = months_count and\
    \ months_count > 4 and months_count <= 12\n    local days_count_valid_2 = days_count\
    \ and days_count > 4 and days_count <= 30\n    local months_count_valid_3 = months_count\
    \ and months_count > 6 and months_count <= 12\n    local days_count_valid_3 =\
    \ days_count and days_count > 6 and days_count <= 29\n    local months_count_valid_4\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_4\
    \ = days_count and days_count > 12 and days_count <= 29\n    local months_count_valid_5\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_5\
    \ = days_count and days_count > 12 and days_count <= 29\n    local months_count_valid_6\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_6\
    \ = days_count and days_count > 12 and days_count <= 29\n    local months_count_valid_7\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_7\
    \ = days_count and days_count > 12 and days_count <= 29\n    local months_count_valid_8\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_8\
    \ = days_count and days_count > 12 and days_count <= 29\n    local months_count_valid_9\
    \ = months_count \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn9jtajva.lua:75: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local month = tonumber(date_split[1])\n    local day = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    \n    if month < 1 or month > 12\
    \ then\n        return false\n    end\n    \n    if day < 1 or day > 31 then\n\
    \        return false\n    end\n    \n    if month == 2 then\n        if day >\
    \ 29 then\n            return false\n        end\n    else\n        if day > 30\
    \ then\n            return false\n        end\n    end\n    \n    if year < 1900\
    \ then\n        return false\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiveblj0c.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpiveblj0c.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.split(date,\
    \ \"-\")\n  local date_year = tonumber(date_array[2])\n  local date_month = tonumber(date_array[1])\n\
    \  local date_day = tonumber(date_array[3])\n  -- Check that the date is not empty\n\
    \  if date_year == nil or date_month == nil or date_day == nil then\n    return\
    \ false\n  end\n  -- Check that the number of days is between 1 and 31\n  if date_month\
    \ == 1 or date_month == 3 or date_month == 5 or\n    date_month == 7 or date_month\
    \ == 8 or date_month == 10 or\n    date_month == 12 then\n    if date_day < 1\
    \ or date_day > 31 then\n      return false\n    end\n  end\n  -- Check that the\
    \ number of days is between 1 and 30\n  if date_month == 4 or date_month == 6\
    \ or date_month == 9 or date_month == 11\n  then\n    if date_day < 1 or date_day\
    \ > 30 then\n      return false\n    end\n  end\n  -- Check that the number of\
    \ days is between 1 and 29\n  if date_month == 2 then\n    if date_day < 1 or\
    \ date_day > 29 then\n      return false\n    end\n  end\n  -- Check that the\
    \ month is between 1 and 12\n  if date_month == 1 then\n    if date_year < 1 or\
    \ date_year > 2020 then\n      return false\n    end\n  end\n  -- Check that the\
    \ date is in the correct format\n  if date_month == 2 and date_day == 1 and date_year\
    \ == 2000 then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppekgsq_w.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmppekgsq_w.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 1 and\
    \ day > 30 then\n        return false\n    end\n    if month == 1 and day < 30\
    \ then\n        return false\n    end\n    if month == 3 and day > 31 then\n \
    \       return false\n    end\n    if month == 3 and day < 31 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj64fb6k8.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj64fb6k8.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    \n\
    \    if date_year and date_month and date_day then\n        if date_month > 12\
    \ or date_month < 1 then\n            return false\n        end\n        if date_day\
    \ > 31 or date_day < 1 then\n            return false\n        end\n        if\
    \ date_day > 29 or date_day < 1 then\n            return false\n        end\n\
    \        if date_year < 1 or date_year > 9999 then\n            return false\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3r_gr45p.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3r_gr45p.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local days_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n  if days_array\
    \ == nil then\n    return false\n  end\n  local months_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if months_array == nil then\n    return false\n  end\n\
    \  local years_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n  if years_array\
    \ == nil then\n    return false\n  end\n  local months = months_array[2]\n  local\
    \ days = days_array[2]\n  local years = years_array[2]\n  local months_array =\
    \ string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n  if months_array == nil then\n\
    \    return false\n  end\n  local months = months_array[2]\n  local days = days_array[2]\n\
    \  local years = years_array[2]\n  if months < 1 or months > 12 then\n    return\
    \ false\n  end\n  if days < 1 or days > 31 then\n    return false\n  end\n  if\
    \ years < 1 or years > 20 then\n    return false\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2p9sest.lua:31:\
    \ attempt to index local 'months_array' (a function value)\nstack traceback:\n\
    \t/tmp/tmpf2p9sest.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = \"January\",\n    [3]\
    \ = \"March\",\n    [5] = \"May\",\n    [7] = \"July\",\n    [8] = \"August\"\
    ,\n    [10] = \"October\",\n    [12] = \"December\"\n  }\n  local days = {\n \
    \   [1] = \"1\",\n    [3] = \"3\",\n    [5] = \"5\",\n    [7] = \"7\",\n    [8]\
    \ = \"8\",\n    [10] = \"10\",\n    [12] = \"12\"\n  }\n  local months_count =\
    \ months[month]\n  local days_count = days[day]\n  local months_count_lower =\
    \ months_count:lower()\n  local days_count_lower = days_count:lower()\n  local\
    \ months_count_higher = months_count:upper()\n  local days_count_higher = days_count:upper()\n\
    \  local months_count_lower = months_count:lower()\n  local days_count_lower =\
    \ days_count:lower()\n  local months_count_higher = months_count:upper()\n  local\
    \ days_count_higher = days_count:upper()\n  local months_count_lower = months_count:lower()\n\
    \  local days_count_lower = days_count:lower()\n  local months_count_higher =\
    \ months_count:upper()\n  local days_count_higher = days_count:upper()\n  local\
    \ months_count_lower = months_count:lower()\n  local days_count_lower = days_count:lower()\n\
    \  local months_count_higher = months_count:upper()\n  local days_count_higher\
    \ = days_count:upper()\n  local months_count_lower = months_count:lower()\n  local\
    \ days_count_lower = days_count:lower()\n  local months_count_higher = months_count:upper()\n\
    \  local days_count_higher = days_count:upper()\n  local months_count_lower =\
    \ months_count:lower()\n  local days_count_lower = days_count:lower()\n  local\
    \ months_count_higher = months_count:upper()\n  local days_count_higher = days_count:upper()\n\
    \  local months_count_lower = months_count:lower()\n  local days_count_lower =\
    \ days_count:lower()\n  local months_count_higher = months_count:upper()\n  local\
    \ days_count_higher = days_count:upper()\n  local months_count_lower = months_count:lower()\n\
    \  local days_count_lower = days_count:lower()\n  local months_count_higher =\
    \ months_count:upper()\n  local days_count_higher = day\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxgiea1q_.lua:90: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = 1,\n        [31] = 31,\n        [59] = 59,\n       \
    \ [90] = 30,\n        [120, 31] = 29,\n        [152] = 29\n    }\n    local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n\
    \        return false\n    end\n    local month = date_array[1]\n    local day\
    \ = date_array[2]\n    local year = date_array[3]\n    if months[month] == nil\
    \ or days[day] == nil or year == nil then\n        return false\n    end\n   \
    \ local days_in_month = days[months[month]]\n    if days_in_month < 1 or days_in_month\
    \ > 31 then\n        return false\n    end\n    local days_in_year = days[year]\n\
    \    if days_in_year < 1 or days_in_year > 30 then\n        return false\n   \
    \ end\n    local days_in_month = days[months[month]]\n    if days_in_month < 1\
    \ or days_in_month > 29 then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1lt9wxqc.lua:29: ']' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year < 1 or date_year > 9999 then\n        return false\n   \
    \ end\n    \n    if date_month < 1 or date_month > 12 then\n        return false\n\
    \    end\n    \n    if date_day < 1 or date_day > 31 then\n        return false\n\
    \    end\n    \n    if date_month == 1 or date_month == 3 or date_month == 5 or\n\
    \        date_month == 7 or\n        date_month == 8 or\n        date_month ==\
    \ 10 or\n        date_month == 12 then\n        if date_day < 1 or date_day >\
    \ 29 then\n            return false\n        end\n    elseif date_month == 4 or\
    \ date_month == 6 or\n        date_month == 9 or date_month == 11\n    then\n\
    \        if date_day < 1 or date_day > 30 then\n            return false\n   \
    \     end\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g6v2gri.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp_g6v2gri.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day and month and year\
    \ then\n        if month >= 1 and month <= 12 and day >= 1 and day <= 31 and day\
    \ > 0 and day <= 29 then\n            if month >= 4 and month <= 11 and day >=\
    \ 1 and day <= 30 then\n                if month >= 2 and day >= 1 and day <=\
    \ 29 then\n                    return true\n                else\n           \
    \         return false\n                end\n            else\n              \
    \  return false\n            end\n        else\n            return false\n   \
    \     end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqp_u7dx.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpnqp_u7dx.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local year = tonumber(date_split[2])\n  local month = tonumber(date_split[1])\n\
    \  local day = tonumber(date_split[3])\n  \n  if year and month and day then\n\
    \    if month >= 1 and month <= 12 and day >= 1 and day <= 31 and day ~= day then\n\
    \      return true\n    elseif month >= 4 and month <= 11 and day >= 1 and day\
    \ <= 30 and day ~= day then\n      return true\n    elseif month >= 2 and day\
    \ >= 1 and day <= 29 and day ~= day then\n      return true\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl78yhf4.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpyl78yhf4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.split(date,\
    \ '-')\n    local day = tonumber(date_array[1])\n    local month = tonumber(date_array[2])\n\
    \    local year = tonumber(date_array[3])\n    \n    if day < 1 or day > 31 then\n\
    \        return false\n    end\n    \n    if month < 1 or month > 12 then\n  \
    \      return false\n    end\n    \n    if year < 1 or year > 9999 then\n    \
    \    return false\n    end\n    \n    if month == 2 and day > 29 then\n      \
    \  return false\n    end\n    \n    if month == 4 and day > 30 then\n        return\
    \ false\n    end\n    \n    if month == 6 and day > 30 then\n        return false\n\
    \    end\n    \n    if month == 9 and day > 30 then\n        return false\n  \
    \  end\n    \n    if month == 11 and day > 30 then\n        return false\n   \
    \ end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jazmonk.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3jazmonk.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  local date_date_valid = date_year and date_month and date_day and date_year\
    \ >= 1 and date_month <= 12 and date_day <= 31 and date_day >= 1\n    return date_date_valid\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h7enfo3.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0h7enfo3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  local\
    \ date_array = string.split(date, \"-\")\n  if #date_array == 3 then\n    if date_array[1]\
    \ >= 1 and date_array[1] <= 12 and date_array[2] >= 1 and date_array[2] <= 31\
    \ then\n      if date_array[2] <= 29 then\n        if date_array[1] >= 1 and date_array[1]\
    \ <= 12 then\n          return true\n        end\n      else\n        if date_array[1]\
    \ >= 4 and date_array[1] <= 11 then\n          return true\n        end\n    \
    \  end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h1j17lu.lua:16:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp3h1j17lu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '01',\n        [3] = '02',\n        [4] = '03',\n        [5] = '04',\n\
    \        [6] = '05',\n        [7] = '06',\n        [8] = '07',\n        [9] =\
    \ '08',\n        [10] = '09',\n        [11] = '10',\n        [12] = '11',\n  \
    \      [13] = '12',\n        [14] = '13',\n        [15] = '14',\n        [16]\
    \ = '15',\n        [17] = '16',\n        [18] = '17',\n        [19] = '18',\n\
    \        [20] = '19',\n        [21] = '20',\n        [22] = '21',\n        [23]\
    \ = '22',\n        [24] = '23',\n        [25] = '24',\n        [26] = '25',\n\
    \        [27] = '26',\n        [28] = '27',\n        [29] = '28',\n        [30]\
    \ = '29',\n        [31] = '30',\n        [32] = '31'\n    }\n    local months_length\
    \ = #months\n    local days_length = #days\n    local years_length = #years\n\
    \    local months_index = nil\n    local days_index = nil\n    local years_index\
    \ = nil\n    local months_value = nil\n    local days_value = nil\n    local years_value\
    \ = nil\n    local months_value = nil\n    local days_value = nil\n    local years_value\
    \ = nil\n    local months_value = nil\n    local days_value = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph7gvsqxz.lua:121: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '01',\n      \
    \  [2] = '02',\n        [3] = '03',\n        [4] = '04',\n        [5] = '05',\n\
    \        [6] = '06',\n        [7] = '07',\n        [8] = '08',\n        [9] =\
    \ '09',\n        [10] = '10',\n        [11] = '11',\n        [12] = '12',\n  \
    \      [13] = '13',\n        [14] = '14',\n        [15] = '15',\n        [16]\
    \ = '16',\n        [17] = '17',\n        [18] = '18',\n        [19] = '19',\n\
    \        [20] = '20',\n        [21] = '21',\n        [22] = '22',\n        [23]\
    \ = '23',\n        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n\
    \        [27] = '27',\n        [28] = '28',\n        [29] = '29',\n        [30]\
    \ = '30',\n        [31] = '31',\n        [32] = '32',\n        [33] = '33',\n\
    \        [34] = '34',\n        [35] = '35',\n        [36] = '36',\n        [37]\
    \ = '37',\n        [38] = '38',\n        [39] = '39',\n        [40] = '40',\n\
    \        [41] = '41',\n        [42] = '42',\n        [43] = '43',\n        [44]\
    \ = '44',\n        [45] = '45',\n        [46] = '46',\n        [47] = '47',\n\
    \        [48] = '48',\n        [49] = '49',\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfks4sp4w.lua:103: '}' expected (to close '{' at line 51) near\
    \ 'function'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_parts == nil then\n        return false\n\
    \    end\n    local months = {\n        [1] = 1,\n        [3] = 1\n    }\n   \
    \ local days = {\n        [5] = 1,\n        [7] = 1,\n        [8] = 1,\n     \
    \   [10] = 1,\n        [12] = 1\n    }\n    local months_count = months[1] + months[3]\
    \ + months[5] + months[7] + months[8] + months[10] + months[12]\n    local days_count\
    \ = days[5] + days[7] + days[8] + days[10] + days[12]\n    local months_valid\
    \ = months_count > 0 and months_count <= 12\n    local days_valid = days_count\
    \ > 0 and days_count <= 31\n    local months_valid_or_days_valid = months_valid\
    \ or days_valid\n    local date_valid = date_parts[1] >= 1 and date_parts[1] <=\
    \ 12 and date_parts[2] >= 1 and date_parts[2] <= 31 and date_parts[3] >= 1 and\
    \ date_parts[3] <= 29 and months_valid_or_days_valid\n    return date_valid\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7_8bc3t.lua:30:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmps7_8bc3t.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [3] = '04',\n        [5] = '06',\n        [7] = '09',\n        [8] = '11',\n\
    \        [10] = '12',\n        [12] = '00'\n    }\n    local months_length = months[month]\n\
    \    local days_length = days[day]\n    local years_length = years[year]\n   \
    \ local months_length_str = months_length\n    local days_length_str = days_length\n\
    \    local years_length_str = years_length\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\n    local months_length_str_length\
    \ = #months_length_str\n    local days_length_str_length = #days_length_str\n\
    \    local years_length_str_length = #years_length_str\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpidkgftmm.lua:103: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if year < 1 or year > 9999 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiyi4xa_.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpqiyi4xa_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local months_count = months[month]\n    local\
    \ days_count = days[day]\n    local year_count = year\n    local months_count_str\
    \ = months_count .. '-' .. days_count\n    local days_count_str = days_count ..\
    \ '-' .. months_count\n    local years_count_str = year_count .. '-' .. months_count\n\
    \    local months_count_str = months_count .. '-' .. days_count\n    local days_count_str\
    \ = days_count .. '-' .. months_count\n    local years_count_str = year_count\
    \ .. '-' .. months_count\n    local months_count_str = months_count .. '-' ..\
    \ days_count\n    local days_count_str = days_count .. '-' .. months_count\n \
    \   local years_count_str = year_count .. '-' .. months_count\n    local months_count_str\
    \ = months_count .. '-' .. days_count\n    local days_count_str = days_count ..\
    \ '-' .. months_count\n    local years_count_str = year_count .. '-' .. months_count\n\
    \    local months_count_str = months_count .. '-' .. days_count\n    local days_count_str\
    \ = days_count .. '-' .. months_count\n    local years_count_str = year_count\
    \ .. '-' .. months_count\n    local months_count_str = months_count .. '-' ..\
    \ days_count\n    local days_count_str = days_count \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpty7brkg2.lua:93: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_lower = months_count - 1\n    local days_count_lower\
    \ = days_count - 1\n    local months_count_upper = months_count + 1\n    local\
    \ days_count_upper = days_count + 1\n    local months_count_lower = months_count\
    \ - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp18gxqeld.lua:90: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_lower = months_count - 1\n    local days_count_lower\
    \ = days_count - 1\n    local months_count_upper = months_count + 1\n    local\
    \ days_count_upper = days_count + 1\n    local months_count_lower = months_count\
    \ - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8_sd4rnj.lua:90: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local year = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local day = tonumber(date_split[3])\n    \n    if year == nil or month ==\
    \ nil or day == nil then\n        return false\n    end\n    \n    if year < 1\
    \ or year > 9999 then\n        return false\n    end\n    \n    if month < 1 or\
    \ month > 12 then\n        return false\n    end\n    \n    if day < 1 or day\
    \ > 31 then\n        return false\n    end\n    \n    if month == 2 then\n   \
    \     if day > 29 then\n            return false\n        end\n    end\n    \n\
    \    if month == 4 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    \n    if month == 6 then\n        if day > 29 then\n\
    \            return false\n        end\n    end\n    \n    if month == 9 then\n\
    \        if day > 30 then\n            return false\n        end\n    end\n  \
    \  \n    if month == 11 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp372d1vgw.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp372d1vgw.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_valid = months_count and months_count >\
    \ 0 and months_count <= 12\n    local days_count_valid = days_count and days_count\
    \ > 0 and days_count <= 31\n    local months_count_valid_2 = months_count and\
    \ months_count > 0 and months_count <= 12\n    local days_count_valid_2 = days_count\
    \ and days_count > 0 and days_count <= 30\n    local months_count_valid_3 = months_count\
    \ and months_count > 0 and months_count <= 12\n    local days_count_valid_3 =\
    \ days_count and days_count > 0 and days_count <= 29\n    local months_count_valid_4\
    \ = months_count and months_count > 0 and months_count <= 12\n    local days_count_valid_4\
    \ = days_count and days_count > 0 and days_count <= 29\n    local months_count_valid_5\
    \ = months_count and months_count > 0 and months_count <= 12\n    local days_count_valid_5\
    \ = days_count and days_count > 0 and days_count <= 29\n    local months_count_valid_6\
    \ = months_count and months_count > 0 and months_count <= 12\n    local days_count_valid_6\
    \ = days_count and days_count > 0 and days_count <= 29\n    local months_count_valid_7\
    \ = months_count and months_count > 0 and months_count <= 12\n    local days_count_valid_7\
    \ = days_count and days_count > 0 and days_count <= 29\n    local months_count_valid_8\
    \ = months_count and months_count > 0 and months_count <= 12\n    local days_count_valid_8\
    \ = days_count and days_count > 0 and days_count <= 29\n    local months_count_valid_9\
    \ = months_count and months_count > 0 and months_count <= 12\n    local \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9u8n8492.lua:76: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date < 1 then\n      return false\n   end\n   if #date\
    \ > 31 then\n      return false\n   end\n   if #date > 29 then\n      return false\n\
    \   end\n   if #date > 12 then\n      return false\n   end\n   if #date == 1 then\n\
    \      if date ~= '01-01-' then\n         return false\n      end\n   elseif #date\
    \ == 2 then\n      if date ~= '02-' then\n         return false\n      end\n \
    \  elseif #date == 3 then\n      if date ~= '03-' then\n         return false\n\
    \      end\n   elseif #date == 4 then\n      if date ~= '04-' then\n         return\
    \ false\n      end\n   elseif #date == 5 then\n      if date ~= '05-' then\n \
    \        return false\n      end\n   elseif #date == 6 then\n      if date ~=\
    \ '06-' then\n         return false\n      end\n   elseif #date == 7 then\n  \
    \    if date ~= '07-' then\n         return false\n      end\n   elseif #date\
    \ == 8 then\n      if date ~= '08-' then\n         return false\n      end\n \
    \  elseif #date == 9 then\n      if date ~= '09-' then\n         return false\n\
    \      end\n   elseif #date == 10 then\n      if date ~= '10-' then\n        \
    \ return false\n      end\n   elseif #date == 11 then\n      if date ~= '11-'\
    \ then\n         return false\n      end\n   elseif #date == 12 then\n      if\
    \ date ~= '12-' then\n         return false\n      end\n   else\n      return\
    \ false\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet8qu21n.lua:87:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpet8qu21n.lua:87:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local month = tonumber(date_split[1])\n    local day = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    \n    if year < 1 or year > 9999\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 30 then\n \
    \       return false\n    end\n    if month == 2 and day < 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 31 then\n        return false\n\
    \    end\n    if month == 2 and day < 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 30 then\n        return false\n    end\n    if month\
    \ == 2 and day < 30 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 29 then\n \
    \       return false\n    end\n    if month == 2 and day < 29 then\n        return\
    \ false\n    end\n    if month == 2 and day > 28 then\n        return false\n\
    \    end\n    if month == 2 and day < 28 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp018rm6wq.lua:120: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n  \
    \      [7] = '29'\n    }\n    local years = {\n        [1] = '00',\n        [3]\
    \ = '20',\n        [5] = '19',\n        [7] = '18',\n        [8] = '17',\n   \
    \     [10] = '16',\n        [12] = '15'\n    }\n    local months_length = #months\n\
    \    local days_length = #days\n    local years_length = #years\n    local months_index\
    \ = nil\n    local days_index = nil\n    local years_index = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr71n2_mb.lua:116: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = 1,\n        [3]\
    \ = 1..3,\n        [5] = 1..5,\n        [7] = 1..7,\n        [8] = 1..8,\n   \
    \     [10] = 1..10,\n        [12] = 1..12\n    }\n    local days = {\n       \
    \ [1] = 1,\n        [3] = 1..31,\n        [5] = 1..30,\n        [7] = 1..29,\n\
    \        [8] = 1..28,\n        [10] = 1..28,\n        [12] = 1..31\n    }\n  \
    \  local months_count = months[month]\n    local days_count = days[day]\n    if\
    \ months_count > 12 or days_count > 31 then\n        return false\n    end\n \
    \   if months_count < 1 or days_count < 1 or months_count > 12 or days_count >\
    \ 31 then\n        return false\n    end\n    if months[month] < 1 or months[month]\
    \ > 12 then\n        return false\n    end\n    if days[day] < 1 or days[day]\
    \ > 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 29 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 28 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 30 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 30 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 30 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 30 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and days[day]\
    \ == 31 then\n        return false\n    end\n    if months[month] == 2 and \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpakmvedh7.lua:18: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local date_year = tonumber(date_split[2])\n  local date_month = tonumber(date_split[1])\n\
    \  local date_day = tonumber(date_split[3])\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ou76803.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    else\n        if day > 30 then\n            return false\n \
    \       end\n    end\n    if year < 1900 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0jdhpuc.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpa0jdhpuc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local days_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n\
    \    if days_array == nil then\n        return false\n    end\n    local months_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n    if months_array == nil then\n\
    \        return false\n    end\n    local year = date_array[3]\n    local month\
    \ = months_array[1]\n    local day = days_array[2]\n    local days_in_month =\
    \ days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_century\
    \ = days_array[5]\n    local days_in_decade = days_array[6]\n    local days_in_year\
    \ = days_array[4]\n    local days_in_century = days_array[5]\n    local days_in_decade\
    \ = days_array[6]\n    local days_in_year = days_array[4]\n    local days_in_century\
    \ = days_array[5]\n    local days_in_decade = days_array[6]\n    local days_in_year\
    \ = days_array[4]\n    local days_in_century = days_array[5]\n    local days_in_decade\
    \ = days_array[6]\n    local days_in_year = days_array[4]\n    local days_in_century\
    \ = days_array[5]\n    local days_in_decade = days_array[6]\n    local days_in_year\
    \ = days_array[4]\n    local days_in_century = days_array[5]\n    local days_in_decade\
    \ = days_array[6]\n    local days_in_year = days_array[4]\n    local days_in_century\
    \ = days_array[5]\n    local days_in_decade = days_array[6]\n    local days_in_year\
    \ = days_array[4]\n    local days_in_century = days_array[5]\n    local days_in_decade\
    \ = days_array[6]\n    local days_in_year = days_array[4]\n    local days_in_century\
    \ = days_array[5]\n    local days_in_decade = days_array[6]\n    local days_in_year\
    \ = days_array[4]\n    local days_in_century = days_array[5]\n    local days_in_decade\
    \ = days_array[6]\n    local days_in_year = days_array[4]\n    local days_in_century\
    \ = days_array[5]\n    local days_in_decade = days_array[6]\n    local \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp69rpvq7t.lua:87: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = 1,\n        [3]\
    \ = 1..3,\n        [5] = 1..5,\n        [7] = 1..7,\n        [8] = 1..8,\n   \
    \     [10] = 1..10,\n        [12] = 1..12\n    }\n    local days = {\n       \
    \ [1] = 1,\n        [3] = 1..31,\n        [5] = 1..30,\n        [7] = 1..29,\n\
    \        [8] = 1..28,\n        [10] = 1..28,\n        [12] = 1..31\n    }\n  \
    \  local months_count = months[month]\n    local days_count = days[day]\n    local\
    \ year_count = year == nil and 1 or year\n    return months_count <= 12 and days_count\
    \ <= 31 and year_count <= 12\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdkshzmew.lua:18: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local year_count = year\n    if months_count < 1 or months_count\
    \ > 12 then\n        return false\n    end\n    if days_count < 1 or days_count\
    \ > 31 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 3 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 5 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 7 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 9 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 10 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 11 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 12 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 1 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 3 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 5 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 7 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 31 then\n        return false\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplm60riug.lua:125: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = \"01\",\n    [3] = \"\
    03\",\n    [5] = \"05\",\n    [7] = \"07\",\n    [8] = \"08\",\n    [10] = \"\
    10\",\n    [12] = \"12\"\n  }\n  local days = {\n    [1] = \"01\",\n    [3] =\
    \ \"03\",\n    [5] = \"05\",\n    [7] = \"07\",\n    [8] = \"08\",\n    [10] =\
    \ \"10\",\n    [12] = \"12\"\n  }\n  local months_count = #months\n  local days_count\
    \ = #days\n  local months_count_in_year = months_count / 12\n  local days_count_in_year\
    \ = days_count / 31\n  local months_count_in_month = months_count / 31\n  local\
    \ days_count_in_month = days_count / 30\n  local months_count_in_day = months_count\
    \ / 30\n  local days_count_in_day = days_count / 29\n  local months_count_in_month\
    \ = months_count / 29\n  local days_count_in_month = days_count / 28\n  local\
    \ months_count_in_year = months_count / 28\n  local days_count_in_year = days_count\
    \ / 31\n  local months_count_in_day = months_count / 31\n  local days_count_in_day\
    \ = days_count / 30\n  local months_count_in_month = months_count / 30\n  local\
    \ days_count_in_month = days_count / 29\n  local months_count_in_year = months_count\
    \ / 29\n  local days_count_in_year = days_count / 28\n  local months_count_in_day\
    \ = months_count / 28\n  local days_count_in_day = days_count / 31\n  local months_count_in_month\
    \ = months_count / 31\n  local days_count_in_month = days_count / 30\n  local\
    \ months_count_in_year = months_count / 30\n  local days_count_in_year = days_count\
    \ / 29\n  local months_count_in_day = months_count / 29\n  local days_count_in_day\
    \ = days_count / 28\n  local months_count_in_month = months_count / 28\n  local\
    \ days_count_in_month = days_count / 31\n  local months_count_in_year = months_count\
    \ / 31\n  local days_count_in_year = days_count / 30\n  local months_count_in_day\
    \ = months_count / 30\n  local day\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf2zjoul5.lua:88: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_arr = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_arr ~= nil then\n      if date_arr[3] < 1 or date_arr[3] > 12 then\n\
    \         return false\n      end\n      if date_arr[2] < 1 or date_arr[2] > 31\
    \ then\n         return false\n      end\n      if date_arr[1] < 1 or date_arr[1]\
    \ > 12 then\n         return false\n      end\n   end\n   return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry_6pm9a.lua:35:\
    \ attempt to index local 'date_arr' (a function value)\nstack traceback:\n\t/tmp/tmpry_6pm9a.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)') \n  local months = {\n    [1] = 1,\n    [3] = 1,\n    [5]\
    \ = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [1] = 1,\n    [2] = 1,\n    [3] = 1,\n    [4] = 1,\n    [6] =\
    \ 1,\n    [9] = 1,\n    [11] = 1,\n  }\n  local months_count = months[month]\n\
    \  local days_count = days[day]\n  local year_count = year - 2000\n  \n  if months_count\
    \ < 1 or months_count > 12 then\n    return false\n  end\n  if days_count < 1\
    \ or days_count > 31 then\n    return false\n  end\n  if months_count == 2 and\
    \ days_count < 2 then\n    return false\n  end\n  if months_count == 2 and days_count\
    \ > 29 then\n    return false\n  end\n  if months_count == 3 and days_count <\
    \ 1 then\n    return false\n  end\n  if months_count == 3 and days_count > 30\
    \ then\n    return false\n  end\n  if months_count == 4 and days_count < 1 then\n\
    \    return false\n  end\n  if months_count == 4 and days_count > 31 then\n  \
    \  return false\n  end\n  if months_count == 6 and days_count < 1 then\n    return\
    \ false\n  end\n  if months_count == 6 and days_count > 30 then\n    return false\n\
    \  end\n  if months_count == 9 and days_count < 1 then\n    return false\n  end\n\
    \  if months_count == 9 and days_count > 31 then\n    return false\n  end\n  if\
    \ months_count == 11 and days_count < 1 then\n    return false\n  end\n  if months_count\
    \ == 11 and days_count > 31 then\n    return false\n  end\n  if months_count ==\
    \ 12 and days_count < 1 then\n    return false\n  end\n  if months_count == 12\
    \ and days_count > 31 then\n    return false\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptv2rz7f5.lua:38:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptv2rz7f5.lua:92:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil then\n        return false\n    end\n    if date_month\
    \ == nil then\n        return false\n    end\n    if date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_month < 1 or date_month > 12 then\n\
    \        return false\n    end\n    if date_day < 1 or date_day > 31 then\n  \
    \      return false\n    end\n    \n    if date_month == 1 or date_month == 3\
    \ or date_month == 5 or\n        date_month == 7 or\n        date_month == 8 or\n\
    \        date_month == 10 or\n        date_month == 12 then\n        if date_day\
    \ < 1 or date_day > 30 then\n            return false\n        end\n    elseif\
    \ date_month == 4 or date_month == 6 or date_month == 9 or date_month == 11\n\
    \        if date_day < 1 or date_day > 29 then\n            return false\n   \
    \     end\n    elseif date_month == 2 then\n        if date_day < 1 or date_day\
    \ > 28 then\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjezvwa1e.lua:46: 'then' expected near 'if'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 30 then\n \
    \       return false\n    end\n    if month == 2 and day < 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 31 then\n        return false\n\
    \    end\n    if month == 2 and day < 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 30 then\n        return false\n    end\n    if month\
    \ == 2 and day < 30 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 29 then\n \
    \       return false\n    end\n    if month == 2 and day < 29 then\n        return\
    \ false\n    end\n    if month == 2 and day > 28 then\n        return false\n\
    \    end\n    if month == 2 and day < 28 then\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpas4y1iqw.lua:141: 'end' expected (to close 'if' at line 118)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local months = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n  local days = {\
    \ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n  local months_count = #months\n\
    \  local days_count = #days\n  local months_index = #date_array[1] - 1\n  local\
    \ days_index = #date_array[2] - 1\n  local year = tonumber(date_array[3])\n  local\
    \ month = tonumber(date_array[1])\n  local day = tonumber(date_array[2])\n  local\
    \ days_in_month = days[month]\n  local days_in_year = days_in_month * year\n \
    \ local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local days_in_month = days[month]\n  local days_in_year = days_in_month * year\n\
    \  local day\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3_8po2xs.lua:87: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ < 1 or date_array[3] > 12 then\n      return false\n   end\n   if date_array[2]\
    \ < 1 or date_array[2] > 31 then\n      return false\n   end\n   if date_array[1]\
    \ < 1 or date_array[1] > 12 then\n      return false\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6ep_mo1.lua:37:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpl6ep_mo1.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date == 0 then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date < 1 then\n      return false\n   end\n   if #date > 29 then\n\
    \      return false\n   end\n   if #date < 1 then\n      return false\n   end\n\
    \   if #date > 12 then\n      return false\n   end\n   if string.find(date, \"\
    -\") ~= nil then\n      local date_array = string.split(date, \"-\")\n      if\
    \ #date_array ~= 3 then\n         return false\n      end\n   end\n   if string.find(date,\
    \ \"/\") ~= nil then\n      local date_array = string.split(date, \"/\")\n   \
    \   if #date_array ~= 3 then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4ylviks.lua:40:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpy4ylviks.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date == 0 then\n      return false\n   end\n   if #date\
    \ > 1 then\n      return false\n   end\n   if #date < 1 then\n      return false\n\
    \   end\n   if #date > 31 then\n      return false\n   end\n   if #date < 31 then\n\
    \      return false\n   end\n   if #date > 30 then\n      return false\n   end\n\
    \   if #date < 30 then\n      return false\n   end\n   if #date > 29 then\n  \
    \    return false\n   end\n   if #date < 29 then\n      return false\n   end\n\
    \   if #date > 12 then\n      return false\n   end\n   if #date < 12 then\n  \
    \    return false\n   end\n   if #date > 12 then\n      return false\n   end\n\
    \   if #date < 1 then\n      return false\n   end\n   if #date < 1 then\n    \
    \  return false\n   end\n   if #date > 12 then\n      return false\n   end\n \
    \  if #date < 1 then\n      return false\n   end\n   if #date < 1 then\n     \
    \ return false\n   end\n   if #date > 12 then\n      return false\n   end\n  \
    \ if #date < 1 then\n      return false\n   end\n   if #date < 1 then\n      return\
    \ false\n   end\n   if #date > 12 then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date < 1 then\n      return false\n\
    \   end\n   if #date > 12 then\n      return false\n   end\n   if #date < 1 then\n\
    \      return false\n   end\n   if #date < 1 then\n      return false\n   end\n\
    \   if #date > 12 then\n      return false\n   end\n   if #date < 1 then\n   \
    \   return false\n   end\n   if #date < 1 then\n      return false\n   end\n \
    \  if #date > 12 then\n      return false\n   end\n   if #date < 1 then\n    \
    \  return false\n   end\n   if #date < 1 then\n      return false\n   end\n  \
    \ if #date > 12 then\n      return false\n   end\n   if #date < 1 then\n     \
    \ return false\n   end\n   if #date < 1 then\n      return false\n   end\n   if\
    \ #date > 12 then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxsn0h3nz.lua:147: 'end' expected (to close 'if' at line 123)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year and date_month and date_day then\n        if date_month\
    \ >= 1 and date_month <= 12 then\n            if date_day >= 1 and date_day <=\
    \ 31 then\n                if date_month >= 1 and date_month <= 12 then\n    \
    \                if date_day >= 1 and date_day <= 29 then\n                  \
    \      if date_month >= 1 and date_month <= 12 then\n                        \
    \    if date_day >= 1 and date_day <= 31 then\n                              \
    \  return true\n                            end\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkemcwg3.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpdkemcwg3.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year and date_month and date_day then\n        if date_month\
    \ < 1 or date_month > 12 then\n            return false\n        end\n       \
    \ if date_day < 1 or date_day > 31 then\n            return false\n        end\n\
    \        if date_month == 2 and date_day > 29 then\n            return false\n\
    \        end\n        if date_month == 4 and date_day > 30 then\n            return\
    \ false\n        end\n        if date_month == 6 and date_day > 31 then\n    \
    \        return false\n        end\n        if date_month == 9 and date_day >\
    \ 31 then\n            return false\n        end\n        if date_month == 11\
    \ and date_day > 30 then\n            return false\n        end\n        if date_month\
    \ == 1 and date_day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1d6fld4.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpw1d6fld4.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.split(date,\
    \ \"-\")\n    local year = tonumber(date_array[2])\n    local month = tonumber(date_array[1])\n\
    \    local day = tonumber(date_array[3])\n    \n    if year and month and day\
    \ then\n        if month > 12 or month < 1 then\n            return false\n  \
    \      end\n        if day > 31 or day < 1 then\n            return false\n  \
    \      end\n        if day > 29 or day < 1 then\n            return false\n  \
    \      end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\n        if day\
    \ > 30 then\n            return false\n        end\n        if day > 31 then\n\
    \            return false\n        end\n        if day > 30 then\n           \
    \ return false\n        end\n        if day > 31 then\n            return false\n\
    \        end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\n        if day\
    \ > 30 then\n            return false\n        end\n        if day > 31 then\n\
    \            return false\n        end\n        if day > 30 then\n           \
    \ return false\n        end\n        if day > 31 then\n            return false\n\
    \        end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\n        if day\
    \ > 30 then\n            return false\n        end\n        if day > 31 then\n\
    \            return false\n        end\n        if day > 30 then\n           \
    \ return false\n        end\n        if day > 31 then\n            return false\n\
    \        end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\n        if day\
    \ > 30 then\n            return false\n        end\n        if day > 31 then\n\
    \            return false\n        end\n        if day > 30 then\n           \
    \ return false\n        end\n        if day > 31 then\n            return false\n\
    \        end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\n        if day\
    \ > 30 then\n            return false\n        end\n        if day > 31 then\n\
    \            return false\n        end\n        if day > 30 then\n           \
    \ return false\n        end\n        if day > 31 then\n            return false\n\
    \        end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\n        if day\
    \ > 30 then\n            return false\n        end\n        if day > 31 then\n\
    \            return false\n        end\n        if day > 30 then\n           \
    \ return false\n        end\n        if day > 31 then\n            return false\n\
    \        end\n        if day > 30 then\n            return false\n        end\n\
    \        if day > 31 then\n            return false\n        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyubc8ufm.lua:166: 'end' expected (to close 'if' at line 20)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [16] = '16',\n        [18] = '18',\n  \
    \      [20] = '20',\n        [30] = '30',\n        [36] = '36',\n        [40]\
    \ = '40',\n        [44] = '44',\n        [48] = '48',\n        [50] = '50',\n\
    \        [54] = '54',\n        [58] = '58',\n        [60] = '60',\n        [64]\
    \ = '64',\n        [68] = '68',\n        [70] = '70',\n        [74] = '74',\n\
    \        [78] = '78',\n        [80] = '80',\n        [84] = '84',\n        [88]\
    \ = '88',\n        [90] = '90',\n        [92] = '92',\n        [96] = '96',\n\
    \        [100] = '100',\n        [104] = '104',\n        [108] = '108',\n    \
    \    [112] = '112',\n        [116] = '116',\n        [120] = '120',\n        [124]\
    \ = '124',\n        [128] = '128',\n        [132] = '132',\n        [136] = '136',\n\
    \        [140] = '140',\n        [144] = '144',\n        [148] = '148',\n    \
    \    [152] = '152',\n        [156] = '156',\n        [160] = '160',\n        [164]\
    \ = '164',\n        [168] = '168',\n        [172] = '172',\n        [176] = '176',\n\
    \        [180] = '180',\n        [184] = '184',\n        [188] = '188',\n    \
    \    [192] = '192',\n        [196] = '196',\n        [200] = '200',\n        [204]\
    \ = '204',\n        [208] = '208',\n        [212] = '212',\n        [216] = '216',\n\
    \        [220] = '220',\n        [224] = '224',\n        [224] = '224',\n    \
    \    [228] = '228',\n        [230] = '230',\n        [234] = '234',\n        [236]\
    \ = '236',\n        [238] = '238',\n        [242] = '242',\n        [246] = '246',\n\
    \        [248] = '248',\n        [252] = '252',\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_vwhofwe.lua:101: '}' expected (to close '{' at line 24) near\
    \ 'function'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = 'January',\n   \
    \     [3] = 'March',\n        [5] = 'May',\n        [7] = 'July',\n        [8]\
    \ = 'August',\n        [10] = 'October',\n        [12] = 'December'\n    }\n \
    \   local days = {\n        [1] = '1',\n        [3] = '3',\n        [5] = '5',\n\
    \        [7] = '7',\n        [8] = '8',\n        [10] = '10',\n        [12] =\
    \ '12'\n    }\n    local months_count = #months\n    local days_count = #days\n\
    \    local months_count_in_year = months_count / 12\n    local days_count_in_year\
    \ = days_count / 31\n    local months_count_in_month = months_count / 30\n   \
    \ local days_count_in_month = days_count / 29\n    local months_count_in_day =\
    \ months_count / 31\n    local days_count_in_day = days_count / 30\n    local\
    \ months_count_in_year = months_count / 12\n    local days_count_in_year = days_count\
    \ / 31\n    local months_count_in_month = months_count / 30\n    local days_count_in_month\
    \ = days_count / 29\n    local months_count_in_day = months_count / 31\n    local\
    \ days_count_in_day = days_count / 30\n    local months_count_in_year = months_count\
    \ / 12\n    local days_count_in_year = days_count / 31\n    local months_count_in_month\
    \ = months_count / 30\n    local days_count_in_month = days_count / 29\n    local\
    \ months_count_in_day = months_count / 31\n    local days_count_in_day = days_count\
    \ / 30\n    local months_count_in_year = months_count / 12\n    local days_count_in_year\
    \ = days_count / 31\n    local months_count_in_month = months_count / 30\n   \
    \ local days_count_in_month = days_count / 29\n    local months_count_in_day =\
    \ months_count / 31\n    local days_count_in_day = days_count / 30\n    local\
    \ months_count_in_year = months_count / 12\n    local days_count_in_year = days_count\
    \ / 31\n    local months_count_in_month = months_count / 30\n    local days_count_in_month\
    \ = days_count / 29\n    local months_count_in_day = months_count / 31\n    local\
    \ days_count_in_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphknzgrpj.lua:88: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"January\",\n \
    \       [3] = \"March\",\n        [5] = \"May\",\n        [7] = \"July\",\n  \
    \      [8] = \"August\",\n        [10] = \"October\",\n        [12] = \"December\"\
    \n    }\n    local days = {\n        [1] = \"1\",\n        [3] = \"3\",\n    \
    \    [5] = \"5\",\n        [7] = \"7\",\n        [8] = \"8\",\n        [10] =\
    \ \"10\",\n        [12] = \"12\"\n    }\n    local months_count = months[month]\n\
    \    local days_count = days[day]\n    local months_count_lower = months_count\
    \ and months_count:lower()\n    local days_count_lower = days_count and days_count:lower()\n\
    \    local months_count_higher = months_count and months_count:upper()\n    local\
    \ days_count_higher = days_count and days_count:upper()\n    local months_count_lower\
    \ = months_count and months_count:lower()\n    local days_count_lower = days_count\
    \ and days_count:lower()\n    local months_count_higher = months_count and months_count:upper()\n\
    \    local days_count_higher = days_count and days_count:upper()\n    local months_count_lower\
    \ = months_count and months_count:lower()\n    local days_count_lower = days_count\
    \ and days_count:lower()\n    local months_count_higher = months_count and months_count:upper()\n\
    \    local days_count_higher = days_count and days_count:upper()\n    local months_count_lower\
    \ = months_count and months_count:lower()\n    local days_count_lower = days_count\
    \ and days_count:lower()\n    local months_count_higher = months_count and months_count:upper()\n\
    \    local days_count_higher = days_count and days_count:upper()\n    local months_count_lower\
    \ = months_count and months_count:lower()\n    local days_count_lower = days_count\
    \ and days_count:lower()\n    local months_count_higher = months_count and months_count:upper()\n\
    \    local days_count_higher = days_count and days_count:upper()\n    local months_count_lower\
    \ = months_count and months_count:lower()\n    local days_count_lower = days_count\
    \ and days_count:lower()\n    local months_count_higher = months_count and months_count:upper()\n\
    \    local days_count_higher = days_count and day\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxn88gh29.lua:82: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"January\",\n \
    \       [3] = \"March\",\n        [5] = \"May\",\n        [7] = \"July\",\n  \
    \      [8] = \"August\",\n        [10] = \"October\",\n        [12] = \"December\"\
    \n    }\n    local days = {\n        [1] = \"1\",\n        [3] = \"3\",\n    \
    \    [5] = \"5\",\n        [7] = \"7\",\n        [8] = \"8\",\n        [10] =\
    \ \"10\",\n        [12] = \"12\"\n    }\n    local months_count = #months\n  \
    \  local days_count = #days\n    local months_count_in_year = months_count / 12\n\
    \    local days_count_in_year = days_count / 31\n    local months_count_in_month\
    \ = months_count % 12\n    local days_count_in_month = days_count % 31\n    local\
    \ months_count_in_day = months_count % 12\n    local days_count_in_day = days_count\
    \ % 30\n    local months_count_in_year = months_count % 12\n    local days_count_in_year\
    \ = days_count % 31\n    local months_count_in_month = months_count % 12\n   \
    \ local days_count_in_month = days_count % 30\n    local months_count_in_day =\
    \ months_count % 12\n    local days_count_in_day = days_count % 30\n    local\
    \ months_count_in_year = months_count % 12\n    local days_count_in_year = days_count\
    \ % 31\n    local months_count_in_month = months_count % 12\n    local days_count_in_month\
    \ = days_count % 30\n    local months_count_in_day = months_count % 12\n    local\
    \ days_count_in_day = days_count % 30\n    local months_count_in_year = months_count\
    \ % 12\n    local days_count_in_year = days_count % 31\n    local months_count_in_month\
    \ = months_count % 12\n    local days_count_in_month = days_count % 30\n    local\
    \ months_count_in_day = months_count % 12\n    local days_count_in_day = days_count\
    \ % 30\n    local months_count_in_year = months_count % 12\n    local days_count_in_year\
    \ = days_count % 31\n    local months_count_in_month = months_count % 12\n   \
    \ local days_count_in_month = days_count % 30\n    local months_count_in_day =\
    \ months_count % 12\n    local days_count_in_day = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoiurwlud.lua:66: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local month = tonumber(date_array[1]) -- month\n  local day = tonumber(date_array[2])\
    \ -- day\n  local year = tonumber(date_array[3]) -- year\n  if month == nil or\
    \ day == nil or year == nil then\n    return false\n  end\n  if month < 1 or month\
    \ > 12 then\n    return false\n  end\n  if day < 1 or day > 31 then\n    return\
    \ false\n  end\n  if month == 2 and day > 29 then\n    return false\n  end\n \
    \ if month == 2 and day < 29 then\n    return false\n  end\n  if month == 1 and\
    \ day > 30 then\n    return false\n  end\n  if month == 1 and day < 30 then\n\
    \    return false\n  end\n  if month == 3 and day > 31 then\n    return false\n\
    \  end\n  if month == 3 and day < 31 then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso2jxj91.lua:19:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpso2jxj91.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if day > 31 then\n        return false\n    end\n    if year < 1900\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.split(date,\
    \ \"-\")\n    local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n    local days = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}\n\
    \    local months_valid = #months == 12\n    local days_valid = #days == 31\n\
    \    local months_not_valid = #months == 13 or #months == 14 or #months == 15\
    \ or #months == 16 or #months == 17 or #months == 18 or #months == 19 or #months\
    \ == 20 or #months == 21 or #months == 22 or #months == 23\n    local days_not_valid\
    \ = #days == 29 or #days == 30\n    local date_valid = #date_array == 3 and days_valid\
    \ and months_valid and date_array[1] >= 1 and date_array[1] < 12 and date_array[2]\
    \ >= 1 and date_array[2] <= 12\n    return date_valid and months_not_valid and\
    \ days_not_valid and months_valid and days_valid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptycbuggg.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmptycbuggg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    if day < 1 then\n        return false\n  \
    \  end\n    if year < 1 or year > 9999 then\n        return false\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [16] = '16',\n        [18] = '18',\n  \
    \      [20] = '20',\n        [30] = '30',\n        [36] = '31'\n    }\n    local\
    \ months_length = #months\n    local days_length = #days\n    local months_count\
    \ = months_length\n    local days_count = days_length\n    local month = 1\n \
    \   local day = 1\n    local year = 1\n    local month_index = 1\n    local day_index\
    \ = 1\n    local year_index = 1\n    local month_string = ''\n    local day_string\
    \ = ''\n    local year_string = ''\n    local month_string_index = 1\n    local\
    \ day_string_index = 1\n    local year_string_index = 1\n    local month_string_index\
    \ = 1\n    local day_string_index = 1\n    local year_string_index = 1\n    local\
    \ month_string_index = 1\n    local day_string_index = 1\n    local year_string_index\
    \ = 1\n    local month_string_index = 1\n    local day_string_index = 1\n    local\
    \ year_string_index = 1\n    local month_string_index = 1\n    local day_string_index\
    \ = 1\n    local year_string_index = 1\n    local month_string_index = 1\n   \
    \ local day_string_index = 1\n    local year_string_index = 1\n    local month_string_index\
    \ = 1\n    local day_string_index = 1\n    local year_string_index = 1\n    local\
    \ month_string_index = 1\n    local day_string_index = 1\n    local year_string_index\
    \ = 1\n    local month_string_index = 1\n    local day_string_index = 1\n    local\
    \ year_string_index = 1\n    local month_string_index = 1\n    local day_string_index\
    \ = 1\n    local year_string_index = 1\n    local month_string_index = 1\n   \
    \ local day_string_index = 1\n    local year_string_index = 1\n    local month_string_index\
    \ = 1\n    local day_string_index = 1\n    local year_string_index = 1\n    local\
    \ month_string_index = 1\n    local day_string_index = 1\n    local year_string_index\
    \ = 1\n    local month_string_index = 1\n    local day_string_index = 1\n    local\
    \ year_string_index\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqtqyxlqx.lua:116: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local date_year = tonumber(date_split[2])\n  local date_month = tonumber(date_split[1])\n\
    \  local date_day = tonumber(date_split[3])\n  -- Check validity of date\n  if\
    \ date_year and date_month and date_day then\n    if date_month > 12 or date_month\
    \ < 1 then\n      return false\n    end\n    if date_day > 31 or date_day < 1\
    \ then\n      return false\n    end\n    if date_year < 1000 or date_year > 9999\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil6dbs0s.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpil6dbs0s.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.split(date,\
    \ \"-\")\n  local month = tonumber(date_array[1])\n  local day = tonumber(date_array[2])\n\
    \  local year = tonumber(date_array[3])\n  \n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if month == 2 then\n    if day > 29 then\n      return false\n    end\n  else\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  if year < 1 or year\
    \ > 9999 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vzm07fp.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp1vzm07fp.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    \n\
    \    if date_year == nil then\n        return false\n    end\n    if date_month\
    \ == nil then\n        return false\n    end\n    if date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_month < 1 or date_month > 12 then\n\
    \        return false\n    end\n    if date_day < 1 or date_day > 31 then\n  \
    \      return false\n    end\n    \n    if date_month == 1 or date_month == 3\
    \ or date_month == 5 or\n        date_month == 7 or\n        date_month == 8 or\n\
    \        date_month == 10 or\n        date_month == 12 then\n        if date_day\
    \ < 1 or date_day > 30 then\n            return false\n        end\n    elseif\
    \ date_month == 4 or date_month == 6 or date_month == 9 or date_month == 11 or\
    \ date_month == 12 then\n        if date_day < 1 or date_day > 29 then\n     \
    \       return false\n        end\n    else\n        return false\n    end\n \
    \   \n    if date_year < 1000 or date_year > 9999 then\n        return false\n\
    \    end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph13rh1f2.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmph13rh1f2.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month < 1 or month > 12 then\n        return false\n\
    \    end\n    if day < 1 or day > 31 then\n        return false\n    end\n   \
    \ if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if day > 31 then\n        return false\n\
    \    end\n    if day < 1 then\n        return false\n    end\n    if year < 1\
    \ or year > 9999 then\n        return false\n    end\n    return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tl11ib5.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp2tl11ib5.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '20',\n        [3] = '21',\n        [4] = '22',\n        [5] = '23',\n\
    \        [6] = '24',\n        [7] = '25',\n        [8] = '26',\n        [9] =\
    \ '27',\n        [10] = '28',\n        [11] = '29',\n        [12] = '30',\n  \
    \      [13] = '31'\n    }\n    local months_length = months[month]\n    local\
    \ days_length = days[day]\n    local years_length = years[year]\n    local months_length_2\
    \ = months[month]\n    local days_length_2 = days[day]\n    local years_length_2\
    \ = years[year]\n    local months_length_3 = months[month]\n    local days_length_3\
    \ = days[day]\n    local years_length_3 = years[year]\n    local months_length_4\
    \ = months[month]\n    local days_length_4 = days[day]\n    local years_length_4\
    \ = years[year]\n    local months_length_5 = months[month]\n    local days_length_5\
    \ = days[day]\n    local years_length_5 = years[year]\n    local months_length_6\
    \ = months[month]\n    local days_length_6 = days[day]\n    local years_length_6\
    \ = years[year]\n    local months_length_7 = months[month]\n    local days_length_7\
    \ = days[day]\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm5m46cnu.lua:109: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local months = {\n    [1] = '01',\n\
    \    [3] = '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10]\
    \ = '10',\n    [12] = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] =\
    \ '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n\
    \    [12] = '12',\n    [14] = '14',\n    [16] = '16',\n    [18] = '18',\n    [20]\
    \ = '20',\n    [22] = '22',\n    [24] = '24',\n    [26] = '26',\n    [28] = '28',\n\
    \    [30] = '30',\n    [32] = '32',\n    [34] = '34',\n    [36] = '36',\n    [38]\
    \ = '38',\n    [40] = '40',\n    [42] = '42',\n    [44] = '44',\n    [46] = '46',\n\
    \    [48] = '48',\n    [50] = '50',\n    [52] = '52',\n    [54] = '54',\n    [56]\
    \ = '56',\n    [58] = '58',\n    [60] = '60',\n    [62] = '62',\n    [64] = '64',\n\
    \    [66] = '66',\n    [68] = '68',\n    [70] = '70',\n    [72] = '72',\n    [74]\
    \ = '74',\n    [76] = '76',\n    [78] = '78',\n    [80] = '80',\n    [82] = '82',\n\
    \    [84] = '84',\n    [86] = '86',\n    [88] = '88',\n    [90] = '90',\n    [92]\
    \ = '92',\n    [94] = '94',\n    [96] = '96',\n    [98] = '98',\n    [100] = '100',\n\
    \    [102] = '102',\n    [104] = '104',\n    [106] = '106',\n    [108] = '108',\n\
    \    [110] = '110',\n    [112] = '112',\n    [114] = '114',\n    [116] = '116',\n\
    \    [118] = '118',\n    [120] = '120',\n    [122] = '122',\n    [124] = '124',\n\
    \    [126] = '126',\n    [128] = '128',\n    [130] = '130',\n    [132] = '132',\n\
    \    [134] = '134',\n    [136] = '136',\n    [138] = '138',\n    [140] = '140',\n\
    \    [142] = '142',\n    [144] = '144',\n    [146] = '146',\n    [148\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0w3d0vqv.lua:100: ']' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil or date_month == nil or date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_month < 1 or date_month > 12 then\n\
    \        return false\n    end\n    \n    if date_day < 1 or date_day > 31 then\n\
    \        return false\n    end\n    \n    if date_month == 1 or date_month ==\
    \ 3 or date_month == 5 or\n        date_month == 7 or\n        date_month == 8\
    \ or\n        date_month == 10 or\n        date_month == 12 then\n        return\
    \ true\n    end\n    \n    if date_month == 4 or date_month == 6 or\n        date_month\
    \ == 9 or date_month == 11\n    then\n        return true\n    end\n    \n   \
    \ if date_month == 2 then\n        return true\n    end\n    \n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptozwnjpy.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmptozwnjpy.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local months = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n    local\
    \ days = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local months_count\
    \ = #months\n    local days_count = #days\n    local months_count_valid = months_count\
    \ > 0 and months_count <= 12\n    local days_count_valid = days_count > 0 and\
    \ days_count <= days_count[months_count]\n    local date_valid = date_split[1]\
    \ and date_split[1] >= \"1\" and date_split[1] < \"12\" and date_split[2] and\
    \ date_split[2] >= \"1\" and date_split[2] < \"31\"\n    return date_valid and\
    \ months_count_valid and days_count_valid and date_split[3] and date_split[3]\
    \ ~= \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2q1yd1c.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpo2q1yd1c.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_lower = months_count - 1\n    local days_count_lower\
    \ = days_count - 1\n    local months_count_upper = months_count + 1\n    local\
    \ days_count_upper = days_count + 1\n    local months_count_lower = months_count\
    \ - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_jzo9y4g.lua:90: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month and day and year then\n        month =\
    \ tonumber(month)\n        day = tonumber(day)\n        year = tonumber(year)\n\
    \        if month >= 1 and month <= 12 and day >= 1 and day <= 31 and day > 0\
    \ and day <= 29 then\n            if month == 1 or month == 3 or month == 5 then\n\
    \                if day == 1 or day == 3 or day == 5 then\n                  \
    \  if year >= 1900 then\n                        return true\n               \
    \     else\n                        return false\n                    end\n  \
    \              else\n                    if day == 2 then\n                  \
    \      if year >= 1900 then\n                            return true\n       \
    \                 else\n                            return false\n           \
    \             end\n                    else\n                        if year >=\
    \ 1900 then\n                            return true\n                       \
    \ else\n                            return false\n                        end\n\
    \                    end\n                end\n            elseif month == 4 or\
    \ month == 6 then\n                if day == 4 or day == 6 then\n            \
    \        if year >= 1900 then\n                        return true\n         \
    \           else\n                        return false\n                    end\n\
    \                else\n                    if day == 1 or day == 2 then\n    \
    \                    if year >= 1900 then\n                            return\
    \ true\n                        else\n                            return false\n\
    \                        end\n                    else\n                     \
    \   if year >= 1900 then\n                            return true\n          \
    \              else\n                            return false\n              \
    \          end\n                    end\n                end\n            elseif\
    \ month == 9 or month == 11 then\n                if day == 9 or day == 11 then\n\
    \                    if year >= 1900 then\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if day == 1 or day ==\
    \ 2 then\n                        if year >= 1900 then\n                     \
    \       return true\n                        else\n                          \
    \  return false\n                        end\n                    else\n     \
    \                   if year >= 1900 then\n                            return true\n\
    \                        else\n                            return false\n    \
    \                    end\n                    end\n                end\n     \
    \       else\n                if day == 1 or day == 2 or day == 3 or day == 4\
    \ or day == 5 or day == 6 or day == 7 or day == 8 or day == 9 or day == 10 then\n\
    \                    if year >= 1900 then\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if day == 1 or day ==\
    \ 2 or day == 3 or day == 4 or day == 5 or day == 6 or day == 7 or day == 8 or\
    \ day == 9 or day == 10 then\n                        if year >= 1900 then\n \
    \                           return true\n                        else\n      \
    \                      return false\n                        end\n           \
    \         else\n                        if year >= 1900 then\n               \
    \             return true\n                        else\n                    \
    \        return false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpar48op5w.lua:107: 'end' expected (to close 'if' at line 102)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 12 or month < 1 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    if day < 1 then\n        return false\n  \
    \  end\n    if year < 1000 or year > 9999 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cnf4lw2.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp2cnf4lw2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month and day and year then\n        month =\
    \ tonumber(month)\n        day = tonumber(day)\n        year = tonumber(year)\n\
    \        if month >= 1 and month <= 12 and day >= 1 and day <= 31 and day > 0\
    \ and day <= 29 then\n            if month == 1 or month == 3 or month == 5 then\n\
    \                if day == 1 or day == 3 or day == 5 then\n                  \
    \  if year >= 1900 and year <= 2100 then\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if day == 2 then\n   \
    \                     if year >= 1900 and year <= 2100 then\n                \
    \            return true\n                        else\n                     \
    \       return false\n                        end\n                    else\n\
    \                        if year >= 1900 and year <= 2100 then\n             \
    \               return true\n                        else\n                  \
    \          return false\n                        end\n                    end\n\
    \                end\n            else\n                if day == 1 or day ==\
    \ 4 or day == 6 then\n                    if year >= 1900 and year <= 2100 then\n\
    \                        return true\n                    else\n             \
    \           return false\n                    end\n                else\n    \
    \                if day == 2 then\n                        if year >= 1900 and\
    \ year <= 2100 then\n                            return true\n               \
    \         else\n                            return false\n                   \
    \     end\n                    else\n                        if year >= 1900 and\
    \ year <= 2100 then\n                            return true\n               \
    \         else\n                            return false\n                   \
    \     end\n                    end\n                end\n            end\n   \
    \     else\n            return false\n        end\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local months = {\n        [1] = 1,\n        [3] = 1\n    }\n   \
    \ local days = {\n        [5] = 1,\n        [7] = 1,\n        [8] = 1,\n     \
    \   [10] = 1,\n        [12] = 1\n    }\n    local months_count = #months\n   \
    \ local days_count = #days\n    local months_count_in_range = months_count >=\
    \ 1 and months_count <= 12\n    local days_count_in_range = days_count >= 1 and\
    \ days_count <= 31\n    local months_count_not_in_range = months_count < 1 or\
    \ months_count > 12\n    local days_count_not_in_range = days_count < 1 or days_count\
    \ > 31\n    local months_not_in_range = months_count_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_count_not_in_range and months_count_not_in_range\n\
    \    local days_not_in_range = days_count_not_in_range and days_count_not_in_range\n\
    \    local months_not_in_range = months_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpighol39g.lua:75: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '04',\n        [3] = '06',\n        [4] = '09',\n        [5] = '11',\n\
    \        [6] = '12',\n        [7] = '15',\n        [8] = '18',\n        [9] =\
    \ '21',\n        [10] = '24',\n        [11] = '27',\n        [12] = '30',\n  \
    \      [13] = '33',\n        [14] = '36',\n        [15] = '39',\n        [16]\
    \ = '42',\n        [17] = '45',\n        [18] = '48',\n        [19] = '51',\n\
    \        [20] = '54',\n        [21] = '57',\n        [22] = '60',\n        [23]\
    \ = '63',\n        [24] = '66',\n        [25] = '69',\n        [26] = '72',\n\
    \        [27] = '75',\n        [28] = '78',\n        [29] = '81',\n        [30]\
    \ = '84',\n        [31] = '87'\n    }\n    local months_length = #months\n   \
    \ local days_length = #days\n    local years_length = #years\n    local months_index\
    \ = nil\n    local days_index = nil\n    local years_index = nil\n    local months_value\
    \ = nil\n    local days_value = nil\n    local years_value = nil\n    local months_value_length\
    \ = nil\n    local days_value_length = nil\n    local years_value_length = nil\n\
    \    local months_value_length = nil\n    local days_value_length = nil\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ize2hc4.lua:121: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local month = tonumber(date_split[1])\n  local day = tonumber(date_split[2])\n\
    \  local year = tonumber(date_split[3])\n  \n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if year < 1 or year > 9999 then\n    return false\n  end\n  if month == 2 and\
    \ day == 29 then\n    return false\n  end\n  if month == 2 then\n    if day ==\
    \ 29 then\n      return false\n    end\n  end\n  if month == 4 then\n    if day\
    \ == 29 then\n      return false\n    end\n  end\n  if month == 6 then\n    if\
    \ day == 29 then\n      return false\n    end\n  end\n  if month == 9 and day\
    \ == 30 then\n    return false\n  end\n  if month == 11 and day == 30 then\n \
    \   return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vkymkyw.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp4vkymkyw.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [20] = '20',\n  \
    \      [30] = '30',\n        [50] = '50',\n        [60] = '60',\n        [90]\
    \ = '90',\n        [120] = '120',\n        [150] = '150',\n        [180] = '180',\n\
    \        [365] = '365'\n    }\n    local years = {\n        [1] = '00',\n    \
    \    [2] = '20',\n        [3] = '40',\n        [4] = '60',\n        [5] = '80',\n\
    \        [6] = '100',\n        [7] = '120',\n        [8] = '140',\n        [9]\
    \ = '160',\n        [10] = '180',\n        [11] = '200',\n        [12] = '220',\n\
    \        [13] = '240',\n        [14] = '260',\n        [15] = '280',\n       \
    \ [16] = '300',\n        [17] = '320',\n        [18] = '340',\n        [19] =\
    \ '360',\n        [20] = '380',\n        [21] = '400',\n        [22] = '420',\n\
    \        [23] = '440',\n        [24] = '450',\n        [25] = '460',\n       \
    \ [26] = '480',\n        [27] = '500',\n        [28] = '520',\n        [29] =\
    \ '540',\n        [30] = '560',\n        [31] = '580',\n        [32] = '600',\n\
    \        [33] = '620',\n        [34] = '640',\n        [35] = '660',\n       \
    \ [36] = '680',\n        [37] = '700',\n        [38] = '720',\n        [39] =\
    \ '740',\n        [40] = '760',\n        [41] = '780',\n        [42] = '800',\n\
    \        [43] = '820',\n        [44] = '840',\n        [45] = '860',\n       \
    \ [46] = '880',\n        [47] = '900',\n        [48] = '920',\n        [49] =\
    \ '940',\n        [50] = '960',\n        [51] = '980',\n        [52] = '1000',\n\
    \        [53] = '1020',\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpivj7zdln.lua:101: '}' expected (to close '{' at line 44) near\
    \ 'function'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local year = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local day = tonumber(date_split[3])\n    \n    if year == nil or month ==\
    \ nil or day == nil then\n        return false\n    end\n    \n    if month <\
    \ 1 or month > 12 then\n        return false\n    end\n    \n    if day < 1 or\
    \ day > 31 then\n        return false\n    end\n    \n    if month == 1 or month\
    \ == 3 or month == 5 or\n        month == 7 or month == 8 or month == 10 or\n\
    \        month == 12 or month == 14 then\n        if day < 1 or day > 29 then\n\
    \            return false\n        end\n    end\n    \n    if month == 4 or month\
    \ == 6 or month == 9 or month == 11 or month == 14 then\n        if day < 1 or\
    \ day > 30 then\n            return false\n        end\n    end\n    \n    if\
    \ month == 2 then\n        if day < 1 or day > 29 then\n            return false\n\
    \        end\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeazc8ccy.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpeazc8ccy.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if day == nil then\n        return false\n    end\n    if year == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    end\n    if month == 4 then\n        if day\
    \ > 30 then\n            return false\n        end\n    end\n    if month == 6\
    \ then\n        if day > 29 then\n            return false\n        end\n    end\n\
    \    if month == 9 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    if month == 11 then\n        if day > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtck04d_.lua:25:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmprtck04d_.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv4g1u2x.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmv4g1u2x.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month < 1 or month > 12 then\n        return false\n\
    \    end\n    if day < 1 or day > 31 then\n        return false\n    end\n   \
    \ if month == 2 and day > 29 then\n        return false\n    end\n    if day >\
    \ 30 then\n        return false\n    end\n    if year < 1 or year > 9999 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmz9kavv.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpsmz9kavv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local months = date_array[2]\n    local days = date_array[3]\n \
    \   local years = date_array[4]\n    local months_array = string.gmatch(months,\
    \ \"(%d+)\")\n    if months_array == nil then\n        return false\n    end\n\
    \    local days_array = string.gmatch(days, \"(%d+)\")\n    if days_array == nil\
    \ then\n        return false\n    end\n    local years_array = string.gmatch(years,\
    \ \"(%d+)\")\n    if years_array == nil then\n        return false\n    end\n\
    \    local months_count = tonumber(months_array[1])\n    local days_count = tonumber(days_array[1])\n\
    \    local years_count = tonumber(years_array[1])\n    if months_count < 1 or\
    \ months_count > 12 then\n        return false\n    end\n    if days_count < 1\
    \ or days_count > 31 then\n        return false\n    end\n    if months_count\
    \ > 12 or days_count > 30 then\n        return false\n    end\n    if months_count\
    \ < 2 or months_count > 12 then\n        return false\n    end\n    if years_count\
    \ < 1 or years_count > 20 then\n        return false\n    end\n    if months_count\
    \ == 2 and days_count == 1 and years_count == 20 then\n        return true\n \
    \   end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp73wg31c.lua:19:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpp73wg31c.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.split(date,\
    \ \"-\")\n  local month = tonumber(date_array[1])\n  local day = tonumber(date_array[2])\n\
    \  local year = tonumber(date_array[3])\n  \n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if month == 2 and day > 29 then\n    return false\n  end\n  if month == 2 and\
    \ day < 29 then\n    return false\n  end\n  if month == 2 and day > 28 then\n\
    \    return false\n  end\n  if month == 2 and day < 28 then\n    return false\n\
    \  end\n  if month == 2 and day > 31 then\n    return false\n  end\n  if month\
    \ == 2 and day < 31 then\n    return false\n  end\n  if month == 2 and day > 30\
    \ then\n    return false\n  end\n  if month == 2 and day < 30 then\n    return\
    \ false\n  end\n  if month == 2 and day > 31 then\n    return false\n  end\n \
    \ if month == 2 and day < 31 then\n    return false\n  end\n  if month == 3 and\
    \ day > 31 then\n    return false\n  end\n  if month == 3 and day < 31 then\n\
    \    return false\n  end\n  if month == 3 and day > 30 then\n    return false\n\
    \  end\n  if month == 3 and day < 30 then\n    return false\n  end\n  if month\
    \ == 3 and day > 29 then\n    return false\n  end\n  if month == 3 and day < 29\
    \ then\n    return false\n  end\n  if month == 3 and day > 28 then\n    return\
    \ false\n  end\n  if month == 3 and day < 28 then\n    return false\n  end\n \
    \ if month == 3 and day > 31 then\n    return false\n  end\n  if month == 3 and\
    \ day < 31 then\n    return false\n  end\n  if month == 4 and day > 31 then\n\
    \    return false\n  end\n  if month == 4 and day < 31 then\n    return false\n\
    \  end\n  if month == 4 and day > 30 then\n    return false\n  end\n  if month\
    \ == 4 and day < 30 then\n    return false\n  end\n  if month == 4 and day > 29\
    \ then\n    return false\n  end\n  if month == 4 and day < 29 then\n    return\
    \ false\n  end\n  if month == 4 and day > 28 then\n    return false\n  end\n \
    \ if month == 4 and day < 28 then\n    return false\n  end\n  if month == 4 and\
    \ day > 31 then\n    return false\n  end\n  if month == 4 and day < 31 then\n\
    \    return false\n  end\n  if month == 5 and day > 31 then\n    return false\n\
    \  end\n  if month == 5 and day < 31 then\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz9ol9vds.lua:142: 'end' expected (to close 'if' at line 119)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [17] = '17',\n  \
    \      [19] = '19',\n        [21] = '21',\n        [24] = '24',\n        [29]\
    \ = '29',\n        [31] = '31'\n    }\n    local months_count = #months\n    local\
    \ days_count = #days\n    local months_count_temp = months_count\n    local days_count_temp\
    \ = days_count\n    local months_count_temp2 = months_count\n    local days_count_temp2\
    \ = days_count\n    local months_count_temp3 = months_count\n    local days_count_temp3\
    \ = days_count\n    local months_count_temp4 = months_count\n    local days_count_temp4\
    \ = days_count\n    local months_count_temp5 = months_count\n    local days_count_temp5\
    \ = days_count\n    local months_count_temp6 = months_count\n    local days_count_temp6\
    \ = days_count\n    local months_count_temp7 = months_count\n    local days_count_temp7\
    \ = days_count\n    local months_count_temp8 = months_count\n    local days_count_temp8\
    \ = days_count\n    local months_count_temp9 = months_count\n    local days_count_temp9\
    \ = days_count\n    local months_count_temp10 = months_count\n    local days_count_temp10\
    \ = days_count\n    local months_count_temp11 = months_count\n    local days_count_temp11\
    \ = days_count\n    local months_count_temp12 = months_count\n    local days_count_temp12\
    \ = days_count\n    local months_count_temp13 = months_count\n    local days_count_temp13\
    \ = days_count\n    local months_count_temp14 = months_count\n    local days_count_temp14\
    \ = days_count\n    local months_count_temp15 = months_count\n    local days_count_temp15\
    \ = days_count\n    local months_count_temp16 = months_count\n    local days_count_temp16\
    \ = days_count\n    local months_count_temp17 = months_count\n    local days_count_temp17\
    \ = days_count\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl9rw1rso.lua:100: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    if month == 12 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"%d-%d-%d\")\n    if date_array == nil then\n        return false\n    end\n\
    \    local date_array = date_array\n    local months = date_array[1]\n    local\
    \ days = date_array[2]\n    local year = date_array[3]\n    local months_array\
    \ = string.gmatch(months, \"%d\")\n    if months_array == nil then\n        return\
    \ false\n    end\n    local months_array = months_array\n    local days_array\
    \ = string.gmatch(days, \"%d\")\n    if days_array == nil then\n        return\
    \ false\n    end\n    local days_array = days_array\n    local years_array = string.gmatch(year,\
    \ \"%d\")\n    if years_array == nil then\n        return false\n    end\n   \
    \ local years_array = years_array\n    local months_count = months_array[1]\n\
    \    local days_count = days_array[1]\n    local years_count = years_array[1]\n\
    \    local months_count_array = string.gmatch(months_count, \"%d\")\n    if months_count_array\
    \ == nil then\n        return false\n    end\n    local months_count_array = months_count_array\n\
    \    local days_count_array = string.gmatch(days_count, \"%d\")\n    if days_count_array\
    \ == nil then\n        return false\n    end\n    local days_count_array = days_count_array\n\
    \    local years_count_array = string.gmatch(years_count, \"%d\")\n    if years_count_array\
    \ == nil then\n        return false\n    end\n    local years_count_array = years_count_array\n\
    \    local months_count_count = months_count_array[1]\n    local days_count_count\
    \ = days_count_array[1]\n    local years_count_count = years_count_array[1]\n\
    \    local months_count_count_array = string.gmatch(months_count_count, \"%d\"\
    )\n    if months_count_count_array == nil then\n        return false\n    end\n\
    \    local months_count_count_array = months_count_count_array\n    local days_count_count_array\
    \ = string.gmatch(days_count_count, \"%d\")\n    if days_count_count_array ==\
    \ nil then\n        return false\n    end\n    local days_count_count_array =\
    \ days_count_count_array\n    local years_count_count_array = string.gmatch(years_count_count,\
    \ \"%d\")\n    if years_count_count_array == nil then\n        return false\n\
    \    end\n    local years_count_count_array = years_count_count_array\n    local\
    \ months_count_count_count = months_count_count_array[1]\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppcai2wuv.lua:98: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1..3,\n\
    \    [5] = 1..5,\n    [7] = 1..7,\n    [8] = 1..8,\n    [10] = 1..10,\n    [12]\
    \ = 1..12\n  }\n  local days = {\n    [1] = 1,\n    [2] = 4..6,\n    [9] = 4..9,\n\
    \    [11] = 4..11\n  }\n  local months_count = months[month]\n  local days_count\
    \ = days[day]\n  local year_count = year == nil and 1 or year\n  return months_count\
    \ <= days_count and months_count <= year_count and months_count <= 12\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdxg429uo.lua:18: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    local months = {\n        [1] = 1,\n        [3] =\
    \ 1\n    }\n    local days = {\n        [5] = 1\n    }\n    local months_30 =\
    \ {\n        [4] = 1\n    }\n    local days_29 = {\n        [6] = 1\n    }\n \
    \   local months_12 = {\n        [12] = 1\n    }\n    local days_31 = {\n    \
    \    [1,3,5,7,8,10,12] = 1\n    }\n    local days_30 = {\n        [4,6,9,11] =\
    \ 1\n    }\n    local days_29 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local\
    \ days_30 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local days_31 = {\n   \
    \     [1,3,5,7,8,10,12] = 1\n    }\n    local days_30 = {\n        [4,6,9,11]\
    \ = 1\n    }\n    local days_29 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local\
    \ days_30 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local days_31 = {\n   \
    \     [1,3,5,7,8,10,12] = 1\n    }\n    local days_30 = {\n        [4,6,9,11]\
    \ = 1\n    }\n    local days_29 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local\
    \ days_30 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local days_31 = {\n   \
    \     [1,3,5,7,8,10,12] = 1\n    }\n    local days_30 = {\n        [4,6,9,11]\
    \ = 1\n    }\n    local days_29 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local\
    \ days_30 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local days_31 = {\n   \
    \     [1,3,5,7,8,10,12] = 1\n    }\n    local days_30 = {\n        [4,6,9,11]\
    \ = 1\n    }\n    local days_29 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local\
    \ days_30 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local days_31 = {\n   \
    \     [1,3,5,7,8,10,12] = 1\n    }\n    local days_30 = {\n        [4,6,9,11]\
    \ = 1\n    }\n    local days_29 = {\n        [2,4,6,8,10,12] = 1\n    }\n    local\
    \ days_30 = {\n        [2,4,6,8,10,\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxfsh2x4o.lua:33: ']' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day and month and year\
    \ then\n        if month < 1 or month > 12 then\n            return false\n  \
    \      end\n        if day < 1 or day > 31 then\n            return false\n  \
    \      end\n        if month == 2 and day > 29 then\n            return false\n\
    \        end\n        if month == 2 and day < 29 then\n            return false\n\
    \        end\n        if month == 2 and day > 28 then\n            return false\n\
    \        end\n        if month == 2 and day < 28 then\n            return false\n\
    \        end\n        if month == 2 and day > 31 then\n            return false\n\
    \        end\n        if month == 2 and day < 31 then\n            return false\n\
    \        end\n        if month == 2 and day > 30 then\n            return false\n\
    \        end\n        if month == 2 and day < 30 then\n            return false\n\
    \        end\n        if month == 2 and day > 31 then\n            return false\n\
    \        end\n        if month == 2 and day < 31 then\n            return false\n\
    \        end\n        if month == 2 and day > 30 then\n            return false\n\
    \        end\n        if month == 2 and day < 30 then\n            return false\n\
    \        end\n        if month == 2 and day > 31 then\n            return false\n\
    \        end\n        if month == 2 and day < 31 then\n            return false\n\
    \        end\n        if month == 2 and day > 29 then\n            return false\n\
    \        end\n        if month == 2 and day < 29 then\n            return false\n\
    \        end\n        if month == 2 and day > 28 then\n            return false\n\
    \        end\n        if month == 2 and day < 28 then\n            return false\n\
    \        end\n        if month == 2 and day > 31 then\n            return false\n\
    \        end\n        if month == 2 and day < 31 then\n            return false\n\
    \        end\n        if month == 2 and day > 30 then\n            return false\n\
    \        end\n        if month == 2 and day < 30 then\n            return false\n\
    \        end\n        if month == 2 and day > 31 then\n            return false\n\
    \        end\n        if month == 2 and day < 31 then\n            return false\n\
    \        end\n        if month == 2 and day > 30 then\n            return false\n\
    \        end\n        if month == 2 and day < 30 then\n            return false\n\
    \        end\n        if month == 2 and day > 31 then\n            return false\n\
    \        end\n        if month == 2 and day < 31 then\n            return false\n\
    \        end\n        if month == 2 and day > 29 then\n            return false\n\
    \        end\n        if month == 2 and day < 29 then\n            return false\n\
    \        end\n        if month == 2 and day > 28 then\n            return false\n\
    \        end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkx54y_o_.lua:143: 'end' expected (to close 'if' at line 20)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local month = tonumber(date_split[1])\n    local day = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    \n    if year < 1 or year > 9999\
    \ then\n        return false\n    end\n    \n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    \n    if day < 1 or day > 31 then\n      \
    \  return false\n    end\n    \n    if month == 2 and day > 29 then\n        return\
    \ false\n    end\n    \n    if month > 2 then\n        return true\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0rey8kp.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpg0rey8kp.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphp234dqi.lua:123: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local days_array = date_array[2]\n  local months_array = date_array[1]\n  local\
    \ years_array = date_array[3]\n  local days_length = days_array:len()\n  local\
    \ months_length = months_array:len()\n  local years_length = years_array:len()\n\
    \  if days_length < 1 or days_length > 31 then\n    return false\n  end\n  if\
    \ months_length < 1 or months_length > 12 then\n    return false\n  end\n  if\
    \ years_length < 1 or years_length > 4 then\n    return false\n  end\n  if days_length\
    \ == 1 and months_length == 1 and years_length == 1 then\n    return true\n  end\n\
    \  if days_length == 2 and months_length == 2 and years_length == 2 then\n   \
    \ return true\n  end\n  if days_length == 3 and months_length == 3 and years_length\
    \ == 3 then\n    return true\n  end\n  if days_length == 4 and months_length ==\
    \ 4 and years_length == 4 then\n    return true\n  end\n  if days_length == 5\
    \ and months_length == 5 and years_length == 5 then\n    return true\n  end\n\
    \  if days_length == 6 and months_length == 6 and years_length == 6 then\n   \
    \ return true\n  end\n  if days_length == 7 and months_length == 7 and years_length\
    \ == 7 then\n    return true\n  end\n  if days_length == 8 and months_length ==\
    \ 8 and years_length == 8 then\n    return true\n  end\n  if days_length == 9\
    \ and months_length == 9 and years_length == 9 then\n    return true\n  end\n\
    \  if days_length == 10 and months_length == 10 and years_length == 10 then\n\
    \    return true\n  end\n  if days_length == 11 and months_length == 11 and years_length\
    \ == 11 then\n    return true\n  end\n  if days_length == 12 and months_length\
    \ == 12 and years_length == 12 then\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqz7juc5.lua:19:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpfqz7juc5.lua:76: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    local days_in_month = \n      \
    \  days_in_month(month) \n        or days_in_month(month + 12) \n        or 31\n\
    \    local days_in_year = days_in_month * 365\n    local days_in_date = day +\
    \ days_in_year\n    \n    if day < 1 or day > days_in_date or month < 1 or month\
    \ > 12 or year < 1 or year > days_in_year then\n        return false\n    end\n\
    \    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6iyt0d4.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpr6iyt0d4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local month = tonumber(date_array[1])\n    local day = tonumber(date_array[2])\n\
    \    local year = tonumber(date_array[3])\n    if month == nil or day == nil or\
    \ year == nil then\n        return false\n    end\n    if month < 1 or month >\
    \ 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n  \
    \      return false\n    end\n    if month == 2 then\n        if day > 29 then\n\
    \            return false\n        end\n    end\n    if month == 4 then\n    \
    \    if day > 30 then\n            return false\n        end\n    end\n    if\
    \ month == 6 then\n        if day > 29 then\n            return false\n      \
    \  end\n    end\n    if month == 8 then\n        if day > 31 then\n          \
    \  return false\n        end\n    end\n    if month == 10 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    if month == 12\
    \ then\n        if day > 31 then\n            return false\n        end\n    end\n\
    \    if day > 31 then\n        return false\n    end\n    if day > 30 then\n \
    \       return false\n    end\n    if day > 29 then\n        return false\n  \
    \  end\n    if day > 28 then\n        return false\n    end\n    if day > 27 then\n\
    \        return false\n    end\n    if day > 26 then\n        return false\n \
    \   end\n    if day > 25 then\n        return false\n    end\n    if day > 24\
    \ then\n        return false\n    end\n    if day > 23 then\n        return false\n\
    \    end\n    if day > 22 then\n        return false\n    end\n    if day > 21\
    \ then\n        return false\n    end\n    if day > 20 then\n        return false\n\
    \    end\n    if day > 19 then\n        return false\n    end\n    if day > 18\
    \ then\n        return false\n    end\n    if day > 17 then\n        return false\n\
    \    end\n    if day > 16 then\n        return false\n    end\n    if day > 15\
    \ then\n        return false\n    end\n    if day > 14 then\n        return false\n\
    \    end\n    if day > 13 then\n        return false\n    end\n    if day > 12\
    \ then\n        return false\n    end\n    if day > 11 then\n        return false\n\
    \    end\n    if day > 10 then\n        return false\n    end\n    if day > 9\
    \ then\n        return false\n    end\n    if day > 8 then\n        return false\n\
    \    end\n    if day > 7 then\n        return false\n    end\n    if day > 6 then\n\
    \        return false\n    end\n    if day > 5 then\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpldhpf2z5.lua:163: 'end' expected (to close 'if' at line 139)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local months_length = #months\n    local days_length\
    \ = #days\n    local date_length = #date\n    local months_valid = nil\n    local\
    \ days_valid = nil\n    local date_valid = nil\n    if date_length > 0 then\n\
    \        if date_length == date_length then\n            date_valid = true\n \
    \       else\n            date_valid = false\n        end\n    end\n    if date_valid\
    \ then\n        if date_length == date_length then\n            if date_length\
    \ == date_length then\n                if date_length == date_length then\n  \
    \                  if date_length == date_length then\n                      \
    \  if date_length == date_length then\n                            if date_length\
    \ == date_length then\n                                if date_length == date_length\
    \ then\n                                    if date_length == date_length then\n\
    \                                        if date_length == date_length then\n\
    \                                            if date_length == date_length then\n\
    \                                                if date_length == date_length\
    \ then\n                                                    if date_length ==\
    \ date_length then\n                                                        if\
    \ date_length == date_length then\n                                          \
    \                  if date_length == date_length then\n                      \
    \                                          if date_length == date_length then\n\
    \                                                                    if date_length\
    \ == date_length then\n                                                      \
    \                  if date_length == date_length then\n                      \
    \                                                      if date_length == date_length\
    \ then\n                                                if date_length == date_length\
    \ then\n                                                    if date_length ==\
    \ date_length then\n                                                        if\
    \ date_length == date_length then\n                                          \
    \                  if date_length == date_length then\n                      \
    \                                          if date_length == date_length then\n\
    \                                                                    if date_length\
    \ == date_length then\n                                                      \
    \  if date_length == date_length then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb_7ujvnh.lua:113: 'end' expected (to close 'if' at line 89)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  local months = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n\
    \    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12] = '12',\n    [14]\
    \ = '14',\n    [16] = '16',\n    [18] = '18',\n    [20] = '20',\n    [22] = '22',\n\
    \    [24] = '24',\n    [26] = '26',\n    [28] = '28',\n    [30] = '30',\n    [32]\
    \ = '32',\n    [34] = '34',\n    [36] = '36',\n    [38] = '38',\n    [40] = '40',\n\
    \    [42] = '42',\n    [44] = '44',\n    [46] = '46',\n    [48] = '48',\n    [50]\
    \ = '50',\n    [52] = '52',\n    [54] = '54',\n    [56] = '56',\n    [58] = '58',\n\
    \    [60] = '60',\n    [62] = '62',\n    [64] = '64',\n    [66] = '66',\n    [68]\
    \ = '68',\n    [70] = '70',\n    [72] = '72',\n    [74] = '74',\n    [76] = '76',\n\
    \    [78] = '78',\n    [80] = '80',\n    [82] = '82',\n    [84] = '84',\n    [86]\
    \ = '86',\n    [88] = '88',\n    [90] = '90',\n    [92] = '92',\n    [94] = '94',\n\
    \    [96] = '96',\n    [98] = '98',\n    [100] = '100',\n    [102] = '102',\n\
    \    [104] = '104',\n    [106] = '106',\n    [108] = '108',\n    [110] = '110',\n\
    \    [112] = '112',\n    [114] = '114',\n    [116] = '116',\n    [118] = '118',\n\
    \    [120] = '120',\n    [122] = '122',\n    [124] = '124',\n    [126] = '126',\n\
    \    [128] = '128',\n    [130] = '130',\n    [132] = '132',\n    [134] = '134',\n\
    \    [136] = '136',\n    [138] = '138',\n    [140] = '140',\n    [\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph8_3aj9f.lua:98: ']' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local days_month = tonumber(date_parts[1]) + tonumber(date_parts[2]) + tonumber(date_parts[3])\n\
    \  if days_month < 1 or days_month > 31 then\n    return false\n  end\n  if days_month\
    \ < 1 or days_month > 30 then\n    return false\n  end\n  if days_month < 1 or\
    \ days_month > 29 then\n    return false\n  end\n  if tonumber(date_parts[1])\
    \ < 1 or tonumber(date_parts[1]) > 12 then\n    return false\n  end\n  if tonumber(date_parts[2])\
    \ < 1 or tonumber(date_parts[2]) > 12 then\n    return false\n  end\n  if tonumber(date_parts[3])\
    \ < 1 or tonumber(date_parts[3]) > 12 then\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxz1p0me.lua:19:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpkxz1p0me.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  local\
    \ months = {1,2,3,4,5,6,7,8,9,10,11,12}\n  local days = {31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31}\n  local years = {2000, 2001, 2002, 2003, 2004, 2005,\
    \ 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,\
    \ 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n  local days = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  local years = {2000, 2001, 2002,\
    \ 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,\
    \ 2016, 2017, 2018, 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n  local\
    \ days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  local years = {2000,\
    \ 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,\
    \ 2014, 2015, 2016, 2017, 2018, 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \  local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  local years\
    \ = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\
    \ 2013, 2014, 2015, 2016, 2017, 2018, 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \  local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  local years\
    \ = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\
    \ 2013, 2014, 2015, 2016, 2017, 2018, 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \  local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  local years\
    \ = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\
    \ 2013, 2014, 2015, 2016, 2017, 2018, 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \  local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  local years\
    \ = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\
    \ 2013, 2014, 2015, 2016, 2017, 2018, 2019}\n  local months = {1,2,3,4,5,6,7,8,9,10,11,12}\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ai95by8.lua:61: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = 1,\n        [31] = 31,\n        [59] = 30,\n       \
    \ [91] = 31\n    }\n    local years = {\n        [1] = '01',\n        [12] = '12'\n\
    \    }\n    local months_count = months[month]\n    local days_count = days[day]\n\
    \    local years_count = years[year]\n    \n    if date == '' then\n        return\
    \ false\n    end\n    \n    local date_array = string.gsub(date, \"-\", \"\")\n\
    \    local date_array_count = #date_array\n    \n    if date_array_count < 3 then\n\
    \        return false\n    end\n    \n    if date_array_count > 3 then\n     \
    \   return false\n    end\n    \n    if date_array_count ~= 3 then\n        return\
    \ false\n    end\n    \n    local date_year = date_array[1]\n    local date_month\
    \ = date_array[2]\n    local date_day = date_array[3]\n    \n    if date_year\
    \ < 1 or date_year > 12 then\n        return false\n    end\n    \n    if date_month\
    \ < 1 or date_month > 12 then\n        return false\n    end\n    \n    if date_day\
    \ < 1 or date_day > 31 then\n        return false\n    end\n    \n    if date_month\
    \ == 1 or date_month == 3 or date_month == 5 or date_month == 7 or date_month\
    \ == 8 or date_month == 10 then\n        if date_day > 31 then\n            return\
    \ false\n        end\n    end\n    \n    if date_month == 4 or date_month == 6\
    \ or date_month == 9 or date_month == 11 then\n        if date_day > 30 then\n\
    \            return false\n        end\n    end\n    \n    if date_month == 2\
    \ then\n        if date_day > 29 then\n            return false\n        end\n\
    \    end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sva1n08.lua:97:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4sva1n08.lua:97:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year and date_month and date_day then\n        if date_month\
    \ < 1 or date_month > 12 then\n            return false\n        end\n       \
    \ if date_day < 1 or date_day > 31 then\n            return false\n        end\n\
    \        if date_month == 2 and date_day > 29 then\n            return false\n\
    \        end\n        if date_month == 2 and date_day < 1 then\n            return\
    \ false\n        end\n        if date_month == 3 and date_day > 30 then\n    \
    \        return false\n        end\n        if date_month == 3 and date_day <\
    \ 1 then\n            return false\n        end\n        if date_month == 4 and\
    \ date_day > 29 then\n            return false\n        end\n        if date_month\
    \ == 4 and date_day < 1 then\n            return false\n        end\n        if\
    \ date_month == 5 and date_day > 28 then\n            return false\n        end\n\
    \        if date_month == 5 and date_day < 1 then\n            return false\n\
    \        end\n        if date_month == 7 and date_day > 31 then\n            return\
    \ false\n        end\n        if date_month == 7 and date_day < 1 then\n     \
    \       return false\n        end\n        if date_month == 8 and date_day > 31\
    \ then\n            return false\n        end\n        if date_month == 8 and\
    \ date_day < 1 then\n            return false\n        end\n        if date_month\
    \ == 9 and date_day > 30 then\n            return false\n        end\n       \
    \ if date_month == 9 and date_day < 1 then\n            return false\n       \
    \ end\n        if date_month == 10 and date_day > 31 then\n            return\
    \ false\n        end\n        if date_month == 10 and date_day < 1 then\n    \
    \        return false\n        end\n        if date_month == 11 and date_day >\
    \ 30 then\n            return false\n        end\n        if date_month == 11\
    \ and date_day < 1 then\n            return false\n        end\n        if date_year\
    \ < 1 or date_year > 9999 then\n            return false\n        end\n      \
    \  return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1q0spdo.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmps1q0spdo.lua:92:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"January\",\n \
    \       [3] = \"March\",\n        [5] = \"May\",\n        [7] = \"July\",\n  \
    \      [8] = \"August\",\n        [10] = \"October\",\n        [12] = \"December\"\
    \n    }\n    local days = {\n        [1] = \"01\",\n        [3] = \"03\",\n  \
    \      [5] = \"05\",\n        [7] = \"07\",\n        [8] = \"08\",\n        [10]\
    \ = \"10\",\n        [12] = \"12\"\n    }\n    local months_count = months[month]\n\
    \    local days_count = days[day]\n    local months_count_lower = months_count:lower()\n\
    \    local days_count_lower = days_count:lower()\n    local months_count_higher\
    \ = months_count:upper()\n    local days_count_higher = days_count:upper()\n \
    \   if months_count_lower < 1 or months_count_higher > 12 then\n        return\
    \ false\n    end\n    if days_count_lower < 1 or days_count_higher > 31 then\n\
    \        return false\n    end\n    if months_count_lower > months_count_higher\
    \ then\n        return false\n    end\n    if days_count_lower > days_count_higher\
    \ then\n        return false\n    end\n    if months_count_lower == months_count_higher\
    \ then\n        if days_count_lower == days_count_higher then\n            if\
    \ months_count_lower == 1 then\n                if days_count_lower == 1 then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzuo7m49.lua:36:\
    \ attempt to index local 'months_count' (a nil value)\nstack traceback:\n\t/tmp/tmplzuo7m49.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local month = tonumber(date_array[1])\n    local day = tonumber(date_array[2])\n\
    \    local year = tonumber(date_array[3])\n    if month == nil or day == nil or\
    \ year == nil then\n        return false\n    end\n    if month < 1 or month >\
    \ 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n  \
    \      return false\n    end\n    if month == 2 then\n        if day > 29 then\n\
    \            return false\n        end\n    end\n    if month == 4 then\n    \
    \    if day > 30 then\n            return false\n        end\n    end\n    if\
    \ month == 6 then\n        if day > 29 then\n            return false\n      \
    \  end\n    end\n    if month == 8 then\n        if day > 30 then\n          \
    \  return false\n        end\n    end\n    if month == 10 then\n        if day\
    \ > 29 then\n            return false\n        end\n    end\n    if month == 12\
    \ then\n        if day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgyebawp.lua:19:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpbgyebawp.lua:67: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = 1,\n        [3] = 1..3,\n        [5] = 1..5,\n        [7] = 1..7,\n      \
    \  [8] = 1..8,\n        [10] = 1..10,\n        [12] = 1..12\n    }\n    local\
    \ days = {\n        [1] = 1,\n        [3] = 1..31,\n        [5] = 1..30,\n   \
    \     [7] = 1..29,\n        [8] = 1..28,\n        [10] = 1..31\n    }\n    local\
    \ years = {\n        [1] = 1900,\n        [31] = 1901,\n        [50] = 1902,\n\
    \        [70] = 1903,\n        [80] = 1904,\n        [100] = 1905,\n        [120]\
    \ = 1906\n    }\n    local date_parts = string.match(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n    if date_parts == nil then\n        return false\n    end\n    local months_count\
    \ = months[date_parts[1]]\n    local days_count = days[date_parts[2]]\n    local\
    \ years_count = years[date_parts[3]]\n    if months_count < 1 or months_count\
    \ > 12 then\n        return false\n    end\n    if days_count < 1 or days_count\
    \ > 31 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 3 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 5 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 7 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 10 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpamtf8z3l.lua:17: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    \n\
    \    if date_year == nil or date_month == nil or date_day == nil then\n      \
    \  return false\n    end\n    \n    if date_year < 1 or date_year > 9999 or date_month\
    \ < 1 or date_month > 12 or date_day < 1 or date_day > 31 then\n        return\
    \ false\n    end\n    \n    if date_month == 1 or date_month == 3 or date_month\
    \ == 5 or\n        date_month == 7 or date_month == 8 or date_month == 10 or\n\
    \        date_month == 12 then\n        if date_day < 1 or date_day > 30 then\n\
    \            return false\n        end\n    elseif date_month == 4 or date_month\
    \ == 6 or\n        date_month == 9 or date_month == 11 then\n        if date_day\
    \ < 1 or date_day > 29 then\n            return false\n        end\n    elseif\
    \ date_month == 2 then\n        if date_day < 1 or date_day > 29 then\n      \
    \      return false\n        end\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya8jurg9.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpya8jurg9.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7en19dj8.lua:19:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7en19dj8.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local month = tonumber(date_split[1])\n    local day = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day < 1 or day > 31 or\
    \ month < 1 or month > 12 or year < 1 or year > 9999 then\n        return false\n\
    \    end\n    \n    if month == 1 or month == 3 or month == 5 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    elseif\
    \ month == 4 or month == 6 then\n        if day < 1 or day > 30 then\n       \
    \     return false\n        end\n    elseif month == 2 then\n        if day <\
    \ 1 or day > 29 then\n            return false\n        end\n    end\n    \n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7a0u94h.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpi7a0u94h.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"January\",\n \
    \       [3] = \"March\",\n        [5] = \"May\",\n        [7] = \"July\",\n  \
    \      [8] = \"August\",\n        [10] = \"October\",\n        [12] = \"December\"\
    \n    }\n    local days = {\n        [1] = \"1\",\n        [3] = \"3\",\n    \
    \    [5] = \"5\",\n        [7] = \"7\",\n        [8] = \"8\",\n        [10] =\
    \ \"10\",\n        [12] = \"12\"\n    }\n    local months_count = #months\n  \
    \  local days_count = #days\n    local year_count = #year\n    if month == nil\
    \ or day == nil or year == nil then\n        return false\n    end\n    if month\
    \ < 1 or month > months_count then\n        return false\n    end\n    if day\
    \ < 1 or day > days_count then\n        return false\n    end\n    if month ==\
    \ 2 then\n        if day > 29 then\n            return false\n        end\n  \
    \  end\n    if month == 4 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    if month == 6 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 8 then\n        if\
    \ day > 31 then\n            return false\n        end\n    end\n    if month\
    \ == 10 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 12 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if year < 1 or year > year_count then\n        return false\n\
    \    end\n    if year == 0 then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeywlv6ny.lua:40:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpeywlv6ny.lua:91:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 31 then\n        return false\n    end\n    if month == 4 and\
    \ day > 30 then\n        return false\n    end\n    if month == 6 and day > 29\
    \ then\n        return false\n    end\n    if month == 9 and day > 31 then\n \
    \       return false\n    end\n    if month == 11 and day > 30 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local month = tonumber(date_split[1])\n    local day = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    \n    if month < 1 or month > 12\
    \ then\n        return false\n    end\n    \n    if day < 1 or day > 31 then\n\
    \        return false\n    end\n    \n    if month == 2 and day > 29 then\n  \
    \      return false\n    end\n    \n    if month == 2 and day < 1 then\n     \
    \   return false\n    end\n    \n    if day > 30 then\n        return false\n\
    \    end\n    \n    if month == 1 and day > 31 then\n        return false\n  \
    \  end\n    \n    if month == 1 and day < 1 then\n        return false\n    end\n\
    \    \n    if day > 31 then\n        return false\n    end\n    \n    if year\
    \ < 1000 or year > 9999 then\n        return false\n    end\n    \n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ihu81k_.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp8ihu81k_.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = 1,\n        [31] = 31,\n        [59] = 30,\n        [91]\
    \ = 31\n    }\n    local months_count = months[month]\n    local days_count =\
    \ days[day]\n    local months_count_valid = months_count and months_count > 0\
    \ and months_count <= 12\n    local days_count_valid = days_count and days_count\
    \ > 0 and days_count <= 31\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 30\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 29\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 31\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 30\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 29\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 31\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 30\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 29\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 31\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 30\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 29\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 31\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 30\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 29\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 31\n    local months_count_valid = \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7xexgzfl.lua:51: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local date_parts = date_parts:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n \
    \ local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplm69ekto.lua:75: unfinished string near '\"(%d+)-(%d+)-(%d+)'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [1] = 1,\n    [31] = 31,\n    [59] = 30,\n  }\n  local months_count\
    \ = months[month]\n  local days_count = days[day]\n  if months_count < 1 or months_count\
    \ > 12 then\n    return false\n  end\n  if days_count < 1 or days_count > 31 then\n\
    \    return false\n  end\n  if month == 2 then\n    if days_count < 1 or days_count\
    \ > 29 then\n      return false\n    end\n  else\n    if days_count < 1 or days_count\
    \ > 30 then\n      return false\n    end\n  end\n  if year < 1000 or year > 9999\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprk41zlud.lua:32:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmprk41zlud.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '01',\n        [3] = '02',\n        [4] = '03',\n        [5] = '04',\n\
    \        [6] = '05',\n        [7] = '06',\n        [8] = '07',\n        [9] =\
    \ '08',\n        [10] = '09',\n        [11] = '10',\n        [12] = '11',\n  \
    \      [13] = '12',\n        [14] = '13',\n        [15] = '14',\n        [16]\
    \ = '15',\n        [17] = '16',\n        [18] = '17',\n        [19] = '18',\n\
    \        [20] = '19',\n        [21] = '20',\n        [22] = '21',\n        [23]\
    \ = '22',\n        [24] = '23',\n        [25] = '24',\n        [26] = '25',\n\
    \        [27] = '26',\n        [28] = '27',\n        [29] = '28',\n        [30]\
    \ = '29',\n        [31] = '30'\n    }\n    local months_length = months[month]\n\
    \    local days_length = days[day]\n    local years_length = years[year]\n   \
    \ local months_length_2 = months[month + 1]\n    local days_length_2 = days[day\
    \ + 1]\n    local years_length_2 = years[year + 1]\n    local months_length_3\
    \ = months[month + 2]\n    local days_length_3 = days[day + 2]\n    local years_length_3\
    \ = years[year + 2]\n    local months_length_4 = month\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6psqxoyy.lua:116: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ < 1 or date_array[3] > 12 then\n      return false\n   end\n   if date_array[2]\
    \ < 1 or date_array[2] > 31 then\n      return false\n   end\n   if date_array[1]\
    \ < 1 or date_array[1] > 12 then\n      return false\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoaluk7a.lua:37:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpuoaluk7a.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_array == nil then\n\
    \      return false\n   end\n   if date_array[3] < 1 or date_array[3] > 12 then\n\
    \      return false\n   end\n   if date_array[2] < 1 or date_array[2] > 31 then\n\
    \      return false\n   end\n   if date_array[1] < 1 or date_array[1] > 12 then\n\
    \      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u458xob.lua:25:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmp_u458xob.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_arr\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_arr ~= nil then\n \
    \     if date_arr[3] < 1 or date_arr[3] > 12 then\n         return false\n   \
    \   end\n      if date_arr[2] < 1 or date_arr[2] > 31 then\n         return false\n\
    \      end\n      if date_arr[1] < 1 or date_arr[1] > 12 then\n         return\
    \ false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatmut1f1.lua:23:\
    \ attempt to index local 'date_arr' (a function value)\nstack traceback:\n\t/tmp/tmpatmut1f1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if day\
    \ > 30 then\n        return false\n    end\n    if day > 29 then\n        return\
    \ false\n    end\n    if day > 28 then\n        return false\n    end\n    if\
    \ day > 27 then\n        return false\n    end\n    if day > 26 then\n       \
    \ return false\n    end\n    if day > 25 then\n        return false\n    end\n\
    \    if day > 24 then\n        return false\n    end\n    if day > 23 then\n \
    \       return false\n    end\n    if day > 22 then\n        return false\n  \
    \  end\n    if day > 21 then\n        return false\n    end\n    if day > 20 then\n\
    \        return false\n    end\n    if day > 19 then\n        return false\n \
    \   end\n    if day > 18 then\n        return false\n    end\n    if day > 17\
    \ then\n        return false\n    end\n    if day > 16 then\n        return false\n\
    \    end\n    if day > 15 then\n        return false\n    end\n    if day > 14\
    \ then\n        return false\n    end\n    if day > 13 then\n        return false\n\
    \    end\n    if day > 12 then\n        return false\n    end\n    if day > 11\
    \ then\n        return false\n    end\n    if day > 10 then\n        return false\n\
    \    end\n    if day > 9 then\n        return false\n    end\n    if day > 8 then\n\
    \        return false\n    end\n    if day > 7 then\n        return false\n  \
    \  end\n    if day > 6 then\n        return false\n    end\n    if day > 5 then\n\
    \        return false\n    end\n    if day > 4 then\n        return false\n  \
    \  end\n    if day > 3 then\n        return false\n    end\n    if day > 2 then\n\
    \        return false\n    end\n    if day > 1 then\n        return false\n  \
    \  end\n    if day > 0 then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73aysys2.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp73aysys2.lua:124:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_parts == nil then\n        return false\n\
    \    end\n    local months = {\n        [1] = \"01\",\n        [3] = \"03\",\n\
    \        [5] = \"05\",\n        [7] = \"07\",\n        [8] = \"08\",\n       \
    \ [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days = {\n        [1]\
    \ = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\"\
    ,\n        [8] = \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n\
    \    local months_count = #months\n    local days_count = #days\n    local months_count_valid\
    \ = months_count > 0 and months_count <= 12\n    local days_count_valid = days_count\
    \ > 0 and days_count <= 31\n    local months_count_invalid = months_count < 1\
    \ or months_count > 12\n    local days_count_invalid = days_count < 1 or days_count\
    \ > 31\n    local months_count_invalid = months_count < 1 or months_count > 12\n\
    \    local days_count_invalid = days_count < 1 or days_count > 30\n    local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n    local days_count_invalid = days_count\
    \ < 1 or days_count > 29\n    local months_count_invalid = months_count < 1 or\
    \ months_count > 12\n    local days_count_invalid = days_count < 1 or days_count\
    \ > 29\n    local months_count_invalid = months_count < 1 or months_count > 12\n\
    \    local days_count_invalid = days_count < 1 or days_count > 29\n    local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n    local days_count_invalid = days_count\
    \ < 1 or days_count > 29\n    local months_count_invalid = months_count < 1 or\
    \ months_count > 12\n    local days_count_invalid = days_count < 1 or days_count\
    \ > 29\n    local months_count_invalid = months_count < 1 or months_count > 12\n\
    \    local days_count_invalid = days_count < 1 or days_count > 29\n    local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n    local days_count_invalid = days_count\
    \ < 1 or days_count > 29\n    local months_count_invalid = month\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnxo3s6f4.lua:82: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = 1,\n        [31] = 31,\n        [59] = 29,\n        [91] = 30,\n        [121]\
    \ = 31\n    }\n    local months_count = months[month]\n    local days_count =\
    \ days[day]\n    local year_count = year\n    if months_count < 1 or months_count\
    \ > 12 then\n        return false\n    end\n    if days_count < 1 or days_count\
    \ > 31 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 2 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 3 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 4 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 5 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 6 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 7 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 8 and days_count\
    \ == 29 then\n        return false\n    end\n    if months_count == 9 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 9 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 10 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 11 and days_count\
    \ == 30 then\n        return false\n    end\n    if months_count == 11 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 12 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 1 and days_count\
    \ == 31 then\n        return false\n    end\n    if months_count == 1 and days_count\
    \ == 30 then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuqt5rpon.lua:125: 'end' expected (to close 'if' at line 101)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_array == nil then\n\
    \      return false\n   end\n   local month = tonumber(date_array[1])\n   local\
    \ day = tonumber(date_array[2])\n   local year = tonumber(date_array[3])\n   if\
    \ month == nil or day == nil or year == nil then\n      return false\n   end\n\
    \   if month < 1 or month > 12 then\n      return false\n   end\n   if day < 1\
    \ or day > 31 then\n      return false\n   end\n   if month == 2 then\n      if\
    \ day > 29 then\n         return false\n      end\n   else\n      if day > 30\
    \ then\n         return false\n      end\n   end\n   if month == 4 or month ==\
    \ 6 or month == 9 or month == 11 and day > 31 then\n      return false\n   end\n\
    \   if month == 1 then\n      if day > 31 then\n         return false\n      end\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_klkn6qr.lua:25:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmp_klkn6qr.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ < 1 or date_array[3] > 12 then\n      return false\n   end\n   if date_array[2]\
    \ < 1 or date_array[2] > 31 then\n      return false\n   end\n   if date_array[1]\
    \ < 1 or date_array[1] > 12 then\n      return false\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd137bqt.lua:37:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpmd137bqt.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   if date:sub(1,1) ~= '-' or date:sub(4,4) ~= '-'\
    \ or date:sub(7,7) ~= '-' then\n      return false\n   end\n   if date:sub(1,1)\
    \ ~= '-' or date:sub(4,4) ~= '-' or date:sub(7,7) ~= '-' or date:sub(10,10) ~=\
    \ '-' or date:sub(12,12) ~= '-' then\n      return false\n   end\n   if date:sub(1,1)\
    \ ~= '-' or date:sub(4,4) ~= '-' or date:sub(7,7) ~= '-' or date:sub(10,10) ~=\
    \ '-' or date:sub(12,12) ~= '-' or date:sub(15,15) ~= '-' or date:sub(18,18) ~=\
    \ '-' or date:sub(21,21) ~= '-' or date:sub(24,24) ~= '-' or date:sub(27,27) ~=\
    \ '-' or date:sub(30,30) ~= '-' or date:sub(33,33) ~= '-' or date:sub(36,36) ~=\
    \ '-' or date:sub(39,39) ~= '-' or date:sub(42,42) ~= '-' or date:sub(45,45) ~=\
    \ '-' or date:sub(48,48) ~= '-' or date:sub(51,51) ~= '-' or date:sub(54,54) ~=\
    \ '-' or date:sub(57,57) ~= '-' or date:sub(60,60) ~= '-' or date:sub(63,63) ~=\
    \ '-' or date:sub(66,66) ~= '-' or date:sub(69,69) ~= '-' or date:sub(72,72) ~=\
    \ '-' or date:sub(75,75) ~= '-' or date:sub(78,78) ~= '-' or date:sub(81,81) ~=\
    \ '-' or date:sub(84,84) ~= '-' or date:sub(87,87) ~= '-' or date:sub(90,90) ~=\
    \ '-' or date:sub(93,93) ~= '-' or date\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbmeqrhsx.lua:40: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  else\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  if year < 1000 or year > 9999\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  local\
    \ date_array = string.split(date, \"-\")\n  local month = tonumber(date_array[1])\n\
    \  local day = tonumber(date_array[2])\n  local year = tonumber(date_array[3])\n\
    \  \n  if month < 1 or month > 12 then\n    return false\n  end\n  if day < 1\
    \ or day > 31 then\n    return false\n  end\n  if year < 1 or year > 9999 then\n\
    \    return false\n  end\n  \n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby9ah2jz.lua:16:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpby9ah2jz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = 1,\n        [3] = 1..3,\n        [5] = 4,\n        [7] = 6,\n        [8] =\
    \ 8,\n        [10] = 10,\n        [12] = 12\n    }\n    local days = {\n     \
    \   [1] = 1,\n        [3] = 1..31,\n        [5] = 4,\n        [7] = 6,\n     \
    \   [8] = 8,\n        [10] = 10,\n        [12] = 12\n    }\n    local years =\
    \ {\n        [1] = 1900,\n        [31] = 1900,\n        [50] = 1900,\n       \
    \ [70] = 1900,\n        [80] = 1900,\n        [90] = 1900,\n        [100] = 1900,\n\
    \        [110] = 1900,\n        [120] = 1900,\n        [130] = 1900,\n       \
    \ [140] = 1900,\n        [150] = 1900,\n        [160] = 1900,\n        [170] =\
    \ 1900,\n        [180] = 1900,\n        [190] = 1900,\n        [200] = 1900,\n\
    \        [210] = 1900,\n        [220] = 1900,\n        [230] = 1900,\n       \
    \ [240] = 1900,\n        [250] = 1900,\n        [260] = 1900,\n        [270] =\
    \ 1900,\n        [280] = 1900,\n        [300] = 1900,\n        [310] = 1900,\n\
    \        [322] = 1900,\n        [330] = 1900,\n        [340] = 1900,\n       \
    \ [350] = 1900,\n        [360] = 1900,\n        [370] = 1900,\n        [380] =\
    \ 1900,\n        [390] = 1900,\n        [410] = 1900,\n        [420] = 1900,\n\
    \        [432] = 1900,\n        [440] = 1900,\n        [450] = 1900,\n       \
    \ [460] = 1900,\n        [470] = 1900,\n        [480] = 1900,\n        [490] =\
    \ 1900,\n        [500] = 1900,\n        [510] = 1900,\n        [520] = 1900,\n\
    \        [530] = 1900,\n        [540] = 1900,\n        [550] = 1900,\n       \
    \ [560] = 1900,\n        [570] = 1900,\n        [580] = 1900,\n        [590] =\
    \ 1900,\n        [600] = 1900,\n        [610] = 1900,\n        [621] = 1900,\n\
    \        [630] = 1900,\n        [640] = 1900,\n        [650] = 1900,\n       \
    \ [660] = 1900,\n        [670] = 1900,\n        [680] = 1900,\n        [690] =\
    \ 1900,\n        [700] = 1900,\n        [710] = 1900,\n        [721] = 1900,\n\
    \        [730] = 1900,\n        [740] = 1900,\n        [\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxaowrya5.lua:17: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day == nil or month ==\
    \ nil or year == nil then\n        return false\n    end\n    \n    if day < 1\
    \ or day > 31 then\n        return false\n    end\n    \n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    \n    if year < 1 or year > 9999\
    \ then\n        return false\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hsz2gjg.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp6hsz2gjg.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n  \
    \      [7] = '29',\n        [8] = '28',\n        [10] = '31',\n        [12] =\
    \ '30'\n    }\n    local year = tonumber(date:match(\"(%d+)-(%d+)-(%d+)\"))\n\
    \    if year == nil then\n        return false\n    end\n    local month = months[tonumber(date:sub(1,2))]\n\
    \    local day = tonumber(date:sub(-2,-1))\n    if month == nil or day == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > days[month] then\n    \
    \    return false\n    end\n    if year < 1000 or year > 9999 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkzzzmbe.lua:42:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpjkzzzmbe.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_valid = months_count and months_count >\
    \ 1 and months_count <= 12\n    local days_count_valid = days_count and days_count\
    \ > 1 and days_count <= 31\n    local months_count_valid_2 = months_count and\
    \ months_count > 4 and months_count <= 12\n    local days_count_valid_2 = days_count\
    \ and days_count > 4 and days_count <= 30\n    local months_count_valid_3 = months_count\
    \ and months_count > 6 and months_count <= 12\n    local days_count_valid_3 =\
    \ days_count and days_count > 6 and days_count <= 29\n    local months_count_valid_4\
    \ = months_count and months_count > 9 and months_count <= 12\n    local days_count_valid_4\
    \ = days_count and days_count > 9 and days_count <= 28\n    local months_count_valid_5\
    \ = months_count and months_count > 11 and months_count <= 12\n    local days_count_valid_5\
    \ = days_count and days_count > 11 and days_count <= 28\n    local months_count_valid_6\
    \ = months_count and months_count > 0 and months_count <= 12\n    local days_count_valid_6\
    \ = days_count and days_count > 0 and days_count <= 28\n    local months_count_valid_7\
    \ = months_count and months_count > 1 and months_count <= 12\n    local days_count_valid_7\
    \ = days_count and days_count > 1 and days_count <= 31\n    local months_count_valid_8\
    \ = months_count and months_count > 3 and months_count <= 12\n    local days_count_valid_8\
    \ = days_count and days_count > 3 and days_count <= 31\n    local months_count_valid_9\
    \ = months_count and months_count > 5\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk_h1h48e.lua:75: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if year\
    \ < 1 or year > 9999 then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptinpip9g.lua:16:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmptinpip9g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year and date_month and date_day then\n        if date_month\
    \ < 1 or date_month > 12 then\n            return false\n        end\n       \
    \ if date_day < 1 or date_day > 31 then\n            return false\n        end\n\
    \        if date_month == 2 and date_day > 29 then\n            return false\n\
    \        end\n        if date_month == 2 and date_day < 1 then\n            return\
    \ false\n        end\n        if date_month == 1 and date_day > 30 then\n    \
    \        return false\n        end\n        if date_month == 1 and date_day <\
    \ 1 then\n            return false\n        end\n        if date_month == 3 and\
    \ date_day > 31 then\n            return false\n        end\n        if date_month\
    \ == 3 and date_day < 1 then\n            return false\n        end\n        if\
    \ date_month == 5 and date_day > 30 then\n            return false\n        end\n\
    \        if date_month == 5 and date_day < 1 then\n            return false\n\
    \        end\n        if date_month == 7 and date_day > 31 then\n            return\
    \ false\n        end\n        if date_month == 7 and date_day < 1 then\n     \
    \       return false\n        end\n        if date_month == 8 and date_day > 31\
    \ then\n            return false\n        end\n        if date_month == 8 and\
    \ date_day < 1 then\n            return false\n        end\n        if date_month\
    \ == 10 and date_day > 31 then\n            return false\n        end\n      \
    \  if date_month == 10 and date_day < 1 then\n            return false\n     \
    \   end\n        if date_month == 12 and date_day > 31 then\n            return\
    \ false\n        end\n        if date_month == 12 and date_day < 1 then\n    \
    \        return false\n        end\n        if date_year < 1 or date_year > 9999\
    \ then\n            return false\n        end\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujjey6bv.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpujjey6bv.lua:86:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local months_length = #months\n    local days_length\
    \ = #days\n    local date_length = #date\n    \n    if date_length == 0 then\n\
    \        return false\n    end\n    \n    if date_length == 1 then\n        if\
    \ months[date[1]] ~= '01' and months[date[1]] ~= '03' and months[date[1]] ~= '05'\
    \ and months[date[1]] ~= '07' and months[date[1]] ~= '08' and months[date[1]]\
    \ ~= '10' and months[date[1]] ~= '12' then\n            return false\n       \
    \ end\n    end\n    \n    if date_length == 2 then\n        if months[date[1]]\
    \ ~= '01' and months[date[1]] ~= '03' and months[date[1]] ~= '05' and months[date[1]]\
    \ ~= '07' and months[date[1]] ~= '08' and months[date[1]] ~= '10' and months[date[1]]\
    \ ~= '12' and months[date[1]] ~= '14' and months[date[1]] ~= '15' and months[date[1]]\
    \ ~= '16' and months[date[1]] ~= '17' and months[date[1]] ~= '18' and months[date[1]]\
    \ ~= '19' and months[date[1]] ~= '20' and months[date[1]] ~= '21' and months[date[1]]\
    \ ~= '22' and months[date[1]] ~= '23' and months[date[1]] ~= '24' and months[date[1]]\
    \ ~= '25' and months[date[1]] \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo0azrbk9.lua:67: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local month = tonumber(date_parts[1])\n  local day = tonumber(date_parts[2])\n\
    \  local year = tonumber(date_parts[3])\n  if month < 1 or month > 12 then\n \
    \   return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if month == 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n\
    \    return false\n  end\n  if day > 31 then\n    return false\n  end\n  if month\
    \ == 1 and day > 30 then\n    return false\n  end\n  if month == 1 and day > 29\
    \ then\n    return false\n  end\n  if month == 2 and day > 28 then\n    return\
    \ false\n  end\n  if month == 3 and day > 31 then\n    return false\n  end\n \
    \ if month == 4 and day > 30 then\n    return false\n  end\n  if month == 4 and\
    \ day > 29 then\n    return false\n  end\n  if month == 5 and day > 31 then\n\
    \    return false\n  end\n  if month == 6 and day > 30 then\n    return false\n\
    \  end\n  if month == 6 and day > 29 then\n    return false\n  end\n  if month\
    \ == 7 and day > 31 then\n    return false\n  end\n  if month == 8 and day > 31\
    \ then\n    return false\n  end\n  if month == 8 and day > 30 then\n    return\
    \ false\n  end\n  if month == 9 and day > 31 then\n    return false\n  end\n \
    \ if month == 9 and day > 30 then\n    return false\n  end\n  if month == 10 and\
    \ day > 31 then\n    return false\n  end\n  if month == 10 and day > 30 then\n\
    \    return false\n  end\n  if month == 11 and day > 31 then\n    return false\n\
    \  end\n  if month == 11 and day > 30 then\n    return false\n  end\n  if month\
    \ == 12 and day > 31 then\n    return false\n  end\n  if month == 12 and day >\
    \ 30 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkjqaopf.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbkjqaopf.lua:103:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- Write your code here\n  local\
    \ month, day, year = string.match(date, \"(%d+)-(%d+)-(%d+)\")\n  if month < 1\
    \ or month > 12 then return false end\n  if day < 1 or day > 31 then return false\
    \ end\n  if year < 1 or year > 9999 then return false end\n  if month == 2 and\
    \ day > 29 then return false end\n  if month == 4 or month == 6 or month == 9\
    \ or month == 11 and day > 30 then return false end\n  if month == 1 then return\
    \ day > 31 end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxi10a1p.lua:17:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpgxi10a1p.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n  \
    \      [7] = '29',\n        [8] = '28',\n        [10] = '31',\n        [12] =\
    \ '30'\n    }\n    local years = {\n        [1] = '00',\n        [3] = '20',\n\
    \        [5] = '19',\n        [7] = '18',\n        [8] = '17',\n        [10] =\
    \ '16',\n        [12] = '15'\n    }\n    local months_length = #months\n    local\
    \ days_length = #days\n    local years_length = #years\n    local months_index\
    \ = #date:sub(1,2)\n    local days_index = #date:sub(1,3)\n    local years_index\
    \ = #date:sub(1,4)\n    local months_value = months[months_index]\n    local days_value\
    \ = days[days_index]\n    local years_value = years[years_index]\n    local months_length\
    \ = months_length\n    local days_length = days_length\n    local years_length\
    \ = years_length\n    local months_index = months_index\n    local days_index\
    \ = days_index\n    local years_index = years_index\n    local months_value =\
    \ months_value\n    local days_value = days_value\n    local years_value = years_value\n\
    \    local months_length = months_length\n    local days_length = days_length\n\
    \    local years_length = years_length\n    local months_index = months_index\n\
    \    local days_index = days_index\n    local years_index = years_index\n    local\
    \ months_value = months_value\n    local days_value = days_value\n    local years_value\
    \ = years_value\n    local months_length = months_length\n    local days_length\
    \ = days_length\n    local years_length = years_length\n    local months_index\
    \ = months_index\n    local days_index = days_index\n    local years_index = years_index\n\
    \    local months_value = months_value\n    local days_value = days_value\n  \
    \  local years_value = years_value\n    local months_length = months_length\n\
    \    local days_length = days_length\n    local years_length = years_length\n\
    \    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnu3pfw5i.lua:104: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5gqhhscd.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local month = tonumber(date_split[1])\n  local day = tonumber(date_split[2])\n\
    \  local year = tonumber(date_split[3])\n  \n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if month == 2 and day > 29 then\n    return false\n  end\n  if month == 2 and\
    \ day < 29 then\n    return false\n  end\n  if month == 2 and day > 28 then\n\
    \    return false\n  end\n  if month == 2 and day < 28 then\n    return false\n\
    \  end\n  if month == 2 and day > 31 then\n    return false\n  end\n  if month\
    \ == 2 and day < 31 then\n    return false\n  end\n  if month == 2 and day > 30\
    \ then\n    return false\n  end\n  if month == 2 and day < 30 then\n    return\
    \ false\n  end\n  if month == 2 and day > 31 then\n    return false\n  end\n \
    \ if month == 2 and day < 31 then\n    return false\n  end\n  if month == 3 and\
    \ day > 31 then\n    return false\n  end\n  if month == 3 and day < 31 then\n\
    \    return false\n  end\n  if month == 3 and day > 30 then\n    return false\n\
    \  end\n  if month == 3 and day < 30 then\n    return false\n  end\n  if month\
    \ == 3 and day > 29 then\n    return false\n  end\n  if month == 3 and day < 29\
    \ then\n    return false\n  end\n  if month == 3 and day > 28 then\n    return\
    \ false\n  end\n  if month == 3 and day < 28 then\n    return false\n  end\n \
    \ if month == 3 and day > 31 then\n    return false\n  end\n  if month == 3 and\
    \ day < 31 then\n    return false\n  end\n  if month == 3 and day > 30 then\n\
    \    return false\n  end\n  if month == 3 and day < 30 then\n    return false\n\
    \  end\n  if month == 3 and day > 31 then\n    return false\n  end\n  if month\
    \ == 3 and day < 31 then\n    return false\n  end\n  if month == 4 and day > 31\
    \ then\n    return false\n  end\n  if month == 4 and day < 31 then\n    return\
    \ false\n  end\n  if month == 4 and day > 30 then\n    return false\n  end\n \
    \ if month == 4 and day < 30 then\n    return false\n  end\n  if month == 4 and\
    \ day > 29 then\n    return false\n  end\n  if month == 4 and day < 29 then\n\
    \    return false\n  end\n  if month == 4 and day > 28 then\n    return false\n\
    \  end\n  if month == 4 and day < 28 then\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1d2te48h.lua:142: 'end' expected (to close 'if' at line 119)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    local\
    \ days_in_month = {\n        [1] = 0, [3] = 1..31,\n        [4] = 4..31, [6] =\
    \ 6..31,\n        [9] = 9..31, [11] = 11..31\n    }\n    local days_in_month_length\
    \ = #days_in_month\n    local days_in_year = 31\n    local days_in_year_length\
    \ = #days_in_year\n    local days_in_month_length = days_in_month_length * days_in_year\n\
    \    local days_in_year_length = days_in_year_length * days_in_month\n    local\
    \ days_in_month_length = days_in_month_length * days_in_year\n    local days_in_year_length\
    \ = days_in_year_length * days_in_month\n    local days_in_month_length = days_in_month_length\
    \ * days_in_year\n    local days_in_year_length = days_in_year_length * days_in_month\n\
    \    local days_in_month_length = days_in_month_length * days_in_year\n    local\
    \ days_in_year_length = days_in_year_length * days_in_month\n    local days_in_month_length\
    \ = days_in_month_length * days_in_year\n    local days_in_year_length = days_in_year_length\
    \ * days_in_month\n    local days_in_month_length = days_in_month_length * days_in_year\n\
    \    local days_in_year_length = days_in_year_length * days_in_month\n    local\
    \ days_in_month_length = days_in_month_length * days_in_year\n    local days_in_year_length\
    \ = days_in_year_length * days_in_month\n    local days_in_month_length = days_in_month_length\
    \ * days_in_year\n    local days_in_year_length = days_in_year_length * days_in_month\n\
    \    local days_in_month_length = days_in_month_length * days_in_year\n    local\
    \ days_in_year_length = days_in_year_length * days_in_month\n    local days_in_month_length\
    \ = days_in_month_length * days_in_year\n    local days_in_year_length = days_in_year_length\
    \ * days_in_month\n    local days_in_month_length = days_in_month_length * days_in_year\n\
    \    local days_in_year_length = days_in_year_length * days_in_month\n    local\
    \ days_in_month_length = days_in_month_length * days_in_year\n    local days_in_year_length\
    \ = days_in_year_length * days_in_month\n    local days_in_month_length = days_in_month_length\
    \ * days_in_year\n    local days_in_year_length = days_in_year_length * days_in_month\n\
    \    local days_in_month_length = day\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7xieqqgw.lua:20: malformed number near '1..31'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = 1,\n    [3] = 1..3,\n\
    \    [5] = 1..5,\n    [7] = 1..7,\n    [8] = 1..8,\n    [10] = 1..10,\n    [12]\
    \ = 1..12\n  }\n  local days = {\n    [1] = 1,\n    [2] = 4,\n    [4] = 6,\n \
    \   [6] = 9,\n    [9] = 11,\n    [11] = 29\n  }\n  local months_count = months[month]\n\
    \  local days_count = days[day]\n  if months_count < 1 or months_count > 12 then\n\
    \    return false\n  end\n  if days_count < 1 or days_count > 31 then\n    return\
    \ false\n  end\n  if months[month] == 2 and days_count < 30 then\n    return false\n\
    \  end\n  if months[month] == 2 and days_count > 29 then\n    return false\n \
    \ end\n  if months[month] == 2 and days_count == 30 then\n    return false\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgsa660q9.lua:21: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day and month and year\
    \ then\n        if month >= 1 and month <= 12 and day >= 1 and day <= 31 and day\
    \ ~= day then\n            return false\n        end\n        if month >= 4 and\
    \ month <= 11 and day >= 1 and day <= 30 and day ~= day then\n            return\
    \ false\n        end\n        if month >= 2 and day >= 1 and day <= 29 and day\
    \ ~= day then\n            return false\n        end\n        return true\n  \
    \  end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi22koghq.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpi22koghq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 6 and day > 30\
    \ then\n        return false\n    end\n    if month == 9 and day > 31 then\n \
    \       return false\n    end\n    if month == 11 and day > 31 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8smprhoe.lua:59:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8smprhoe.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = #months\n    local days_count\
    \ = #days\n    local months_count_2 = #months_2\n    local days_count_2 = #days_2\n\
    \    local months_count_3 = #months_3\n    local days_count_3 = #days_3\n    local\
    \ months_count_4 = #months_4\n    local days_count_4 = #days_4\n    local months_count_5\
    \ = #months_5\n    local days_count_5 = #days_5\n    local months_count_6 = #months_6\n\
    \    local days_count_6 = #days_6\n    local months_count_7 = #months_7\n    local\
    \ days_count_7 = #days_7\n    local months_count_8 = #months_8\n    local days_count_8\
    \ = #days_8\n    local months_count_9 = #months_9\n    local days_count_9 = #days_9\n\
    \    local months_count_10 = #months_10\n    local days_count_10 = #days_10\n\
    \    local months_count_11 = #months_11\n    local days_count_11 = #days_11\n\
    \    local months_count_12 = #months_12\n    local days_count_12 = #days_12\n\
    \    local months_count_13 = #months_13\n    local days_count_13 = #days_13\n\
    \    local months_count_14 = #months_14\n    local days_count_14 = #days_14\n\
    \    local months_count_15 = #months_15\n    local days_count_15 = #days_15\n\
    \    local months_count_16 = #months_16\n    local days_count_16 = #days_16\n\
    \    local months_count_17 = #months_17\n    local days_count_17 = #days_17\n\
    \    local months_count_18 = #months_18\n    local days_count_18\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptwoc75hs.lua:92: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = 1,\n        [31] = 31,\n        [59] = 59,\n        [90] = 30,\n        [120,\
    \ 31] = 29,\n        [152] = 29\n    }\n    local months_count = months[month]\n\
    \    local days_count = days[day]\n    local year_count = year\n    local months_valid\
    \ = months_count > 0 and months_count <= 12\n    local days_valid = days_count\
    \ > 0 and days_count <= 31\n    local year_valid = year_count > 0 and year_count\
    \ <= 9999\n    local months_valid_2 = months_count > 0 and months_count <= 12\n\
    \    local days_valid_2 = days_count > 0 and days_count <= 30\n    local year_valid_2\
    \ = year_count > 0 and year_count <= 9999\n    local months_valid_3 = months_count\
    \ > 0 and months_count <= 12\n    local days_valid_3 = days_count > 0 and days_count\
    \ <= 29\n    local year_valid_3 = year_count > 0 and year_count <= 9999\n    local\
    \ months_valid_4 = months_count > 0 and months_count <= 12\n    local days_valid_4\
    \ = days_count > 0 and days_count <= 29\n    local year_valid_4 = year_count >\
    \ 0 and year_count <= 9999\n    local months_valid_5 = months_count > 0 and months_count\
    \ <= 12\n    local days_valid_5 = days_count > 0 and days_count <= 29\n    local\
    \ year_valid_5 = year_count > 0 and year_count <= 9999\n    local months_valid_6\
    \ = months_count > 0 and months_count <= 12\n    local days_valid_6 = days_count\
    \ > 0 and days_count <= 29\n    local year_valid_6 = year_count > 0 and year_count\
    \ <= 9999\n    local months_valid_7 = months_count > 0 and months_count <= 12\n\
    \    local days_valid_7 = days_count > 0 and days_count <= 30\n    local year_valid_7\
    \ = year_count > 0 and year_count <= 9999\n    local months_valid_8 = months_count\
    \ > 0 and months_count <= 12\n    local days_valid_8 = days_count > 0 and days_count\
    \ <= 30\n    local year_valid_8 = year_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1tidapcd.lua:30: ']' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    local\
    \ date_months = { 1, 3, 5, 7, 8, 10, 12 }\n    local date_days_not_less_than_1_or_higher_than_31\
    \ = { 1, 3, 5 }\n    local date_days_not_less_than_1_or_higher_than_30 = { 4,\
    \ 6 }\n    local date_days_not_less_than_1_or_higher_than_29 = { 2 }\n    local\
    \ date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12\
    \ = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4\
    \ }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local\
    \ date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12\
    \ = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4\
    \ }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local\
    \ date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12\
    \ = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4\
    \ }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local\
    \ date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12\
    \ = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4\
    \ }\n    local date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local\
    \ date_months_not_less_than_1_or_higher_than_12 = { 0, 4 }\n    local date_months_not_less_than_1_or_higher_than_12\
    \ = { 0, 4 }\n    local date_months_not_less_than_1_or_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoqokc637.lua:64: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    if month == 12 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date < 1 then\n      return false\n   end\n   if #date\
    \ > 31 then\n      return false\n   end\n   if #date > 29 then\n      return false\n\
    \   end\n   if #date > 12 then\n      return false\n   end\n   local months =\
    \ {\n      [1] = '01',\n      [3] = '03',\n      [5] = '05',\n      [7] = '07',\n\
    \      [8] = '08',\n      [10] = '10',\n      [12] = '12'\n   }\n   local day\
    \ = tonumber(date:sub(1,2))\n   local month = months[tonumber(date:sub(1,1))]\n\
    \   local year = tonumber(date:sub(4,4))\n   if day < 1 or day > 31 then\n   \
    \   return false\n   end\n   if month < 1 or month > 12 then\n      return false\n\
    \   end\n   if year < 1 or year > 9999 then\n      return false\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimda2i52.lua:45:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpimda2i52.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    if month == 1 and day > 31 then\n        return\
    \ false\n    end\n    if month == 1 and day < 31 then\n        return false\n\
    \    end\n    if month == 3 and day > 31 then\n        return false\n    end\n\
    \    if month == 3 and day < 31 then\n        return false\n    end\n    if month\
    \ == 5 and day > 31 then\n        return false\n    end\n    if month == 5 and\
    \ day < 31 then\n        return false\n    end\n    if month == 7 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day < 31 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 8 and day < 31 then\n        return false\n\
    \    end\n    if month == 10 and day > 31 then\n        return false\n    end\n\
    \    if month == 10 and day < 31 then\n        return false\n    end\n    if month\
    \ == 12 and day > 31 then\n        return false\n    end\n    if month == 12 and\
    \ day < 31 then\n        return false\n    end\n    if month == 1 and day > 29\
    \ then\n        return false\n    end\n    if month == 1 and day < 29 then\n \
    \       return false\n    end\n    if month == 3 and day > 29 then\n        return\
    \ false\n    end\n    if month == 3 and day < 29 then\n        return false\n\
    \    end\n    if month == 5 and day > 29 then\n        return false\n    end\n\
    \    if month == 5 and day < 29 then\n        return false\n    end\n    if month\
    \ == 7 and day > 29 then\n        return false\n    end\n    if month == 7 and\
    \ day < 29 then\n        return false\n    end\n    if month == 8 and day > 29\
    \ then\n        return false\n    end\n    if month == 8 and day < 29 then\n \
    \       return false\n    end\n    if month == 10 and day > 29 then\n        return\
    \ false\n    end\n    if month == 10 and day < 29 then\n        return false\n\
    \    end\n    if month == 12 and day > 29 then\n        return false\n    end\n\
    \    if month == 12 and day \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6y_deiar.lua:119: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year and date_month and date_day then\n        if date_month\
    \ < 1 or date_month > 12 then\n            return false\n        end\n       \
    \ if date_day < 1 or date_day > 31 then\n            return false\n        end\n\
    \        if date_year < 1 or date_year > 2020 then\n            return false\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cvv443q.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp2cvv443q.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month < 1 or month > 12 then\n        return false\n\
    \    end\n    if day < 1 or day > 31 then\n        return false\n    end\n   \
    \ if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 30 then\n \
    \       return false\n    end\n    if month == 2 and day < 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 31 then\n        return false\n\
    \    end\n    if month == 2 and day < 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 30 then\n        return false\n    end\n    if month\
    \ == 2 and day < 30 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 29 then\n \
    \       return false\n    end\n    if month == 2 and day < 29 then\n        return\
    \ false\n    end\n    if month == 2 and day > 28 then\n        return false\n\
    \    end\n    if month == 2 and day < 28 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfh3c_cqv.lua:122: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiwrzi162.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil or date_month == nil or date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_month < 1 or date_month > 12 then\n\
    \        return false\n    end\n    \n    if date_day < 1 or date_day > 31 then\n\
    \        return false\n    end\n    \n    if date_month == 1 or date_month ==\
    \ 3 or date_month == 5 or\n        date_month == 7 or date_month == 8 or date_month\
    \ == 10 or\n        date_month == 12 or date_month == 14 then\n        if date_day\
    \ < 1 then\n            return false\n        end\n    end\n    \n    if date_month\
    \ == 4 or date_month == 6 or date_month == 9 or date_month == 11 or date_month\
    \ == 14 then\n        if date_day < 1 then\n            return false\n       \
    \ end\n    end\n    \n    if date_month == 2 or date_month == 4 or date_month\
    \ == 6 then\n        if date_day < 1 then\n            return false\n        end\n\
    \    end\n    \n    if date_month == 2 and date_day > 29 then\n        return\
    \ false\n    end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj06ke7io.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpj06ke7io.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = 1,\n        [3]\
    \ = 1..3,\n        [5] = 1..5,\n        [7] = 1..7,\n        [8] = 1..8,\n   \
    \     [10] = 1..10,\n        [12] = 1..12\n    }\n    local days = {\n       \
    \ [1] = 1,\n        [3] = 1..31,\n        [5] = 1..30,\n        [7] = 1..29,\n\
    \        [8] = 1..28,\n        [10] = 1..28,\n        [12] = 1..31\n    }\n  \
    \  local months_count = months[month]\n    local days_count = days[day]\n    local\
    \ year_count = year == nil and 1 or year\n    return months_count <= days_count\
    \ and months_count <= year_count and months_count <= 12\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm0dg8fy5.lua:18: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[1])\n    local month = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day and month and year\
    \ then\n        if day > 0 and day <= 31 and month >= 1 and month <= 12 and month\
    \ > 0 and day > 0 and day <= 29 and month >= 1 and month <= 12 and month > 0 and\
    \ day > 0 and day <= 31 then\n            if month == 1 or month == 3 or month\
    \ == 5 then\n                if day == 1 or day == 3 or day == 5 then\n      \
    \              if year == 2000 then\n                        return true\n   \
    \                 else\n                        return false\n               \
    \     end\n                else\n                    if year == 2000 then\n  \
    \                      return true\n                    else\n               \
    \         return false\n                    end\n                end\n       \
    \     else\n                if year == 2000 then\n                    return true\n\
    \                else\n                    return false\n                end\n\
    \            end\n        else\n            return false\n        end\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppn9fbjp6.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmppn9fbjp6.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = 1,\n        [3] = 1..3,\n        [5] = 1..5,\n        [7] = 1..7,\n      \
    \  [8] = 1..8,\n        [10] = 1..10,\n        [12] = 1..12\n    }\n    local\
    \ days = {\n        [1] = 1,\n        [3] = 1..31,\n        [5] = 1..30,\n   \
    \     [7] = 1..29,\n        [8] = 1..28,\n        [10] = 1..28,\n        [12]\
    \ = 1..31\n    }\n    local year = tonumber(date:match(\"%d+\"))\n    local month\
    \ = tonumber(date:match(\"%m+\"))\n    local day = tonumber(date:match(\"%d+\"\
    ))\n    if year == nil then\n        return false\n    end\n    if month == nil\
    \ or month < 1 or month > 12 then\n        return false\n    end\n    if day ==\
    \ nil or day < 1 or day > 31 then\n        return false\n    end\n    if months[month]\
    \ == nil or days[months[month]] < 1 or days[months[month]] > 31 then\n       \
    \ return false\n    end\n    if months[month] == months[month] or months[month]\
    \ == months[month] + 1 then\n        if day == days[months[month]] then\n    \
    \        return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwi0odz_z.lua:17: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_valid = months_count and months_count >=\
    \ 1 and months_count <= 12\n    local days_count_valid = days_count and days_count\
    \ >= 1 and days_count <= 31\n    local months_count_valid_2 = months_count and\
    \ months_count >= 4 and months_count <= 6\n    local days_count_valid_2 = days_count\
    \ and days_count >= 1 and days_count <= 30\n    local months_count_valid_3 = months_count\
    \ and months_count >= 2 and months_count <= 12\n    local days_count_valid_3 =\
    \ days_count and days_count >= 1 and days_count <= 29\n    local months_count_valid_4\
    \ = months_count and months_count >= 1 and months_count <= 12\n    local days_count_valid_4\
    \ = days_count and days_count >= 1 and days_count <= 29\n    local months_count_valid_5\
    \ = months_count and months_count >= 1 and months_count <= 12\n    local days_count_valid_5\
    \ = days_count and days_count >= 1 and days_count <= 29\n    local months_count_valid_6\
    \ = months_count and months_count >= 1 and months_count <= 12\n    local days_count_valid_6\
    \ = days_count and days_count >= 1 and days_count <= 29\n    local months_count_valid_7\
    \ = months_count and months_count >= 1 and months_count <= 12\n    local days_count_valid_7\
    \ = days_count and days_count >= 1 and days_count <= 29\n    local months_count_valid_8\
    \ = months_count and months_count >= 1 and months_count <= 12\n    local days_count_valid_8\
    \ = days_count and days_count >= 1 and days_count <= 29\n    local months_count_valid_9\
    \ = months_count and months_count >= 1 and months_count <= 12\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfgcvoznf.lua:76: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n  \
    \      [7] = '29'\n    }\n    local year = tonumber(date:match('(%d+)-(%d+)-(%d+)'))\n\
    \    local month = months[tonumber(date:match('(%d+)-(%d+)'))]\n    local day\
    \ = tonumber(date:match('(%d+)'))\n    local months = months[tonumber(date:match('(%d+)-(%d+)'))]\n\
    \    local days = days[tonumber(date:match('(%d+)-(%d+)'))]\n    local year =\
    \ year or 2000\n    local month = month or 1\n    local day = day or 1\n    local\
    \ months = months or 1\n    local days = days or 1\n    local year = year or 2000\n\
    \    local month = month or 1\n    local day = day or 1\n    local months = months\
    \ or 1\n    local days = days or 1\n    local year = year or 2000\n    local month\
    \ = month or 1\n    local day = day or 1\n    local months = months or 1\n   \
    \ local days = days or 1\n    local year = year or 2000\n    local month = month\
    \ or 1\n    local day = day or 1\n    local months = months or 1\n    local days\
    \ = days or 1\n    local year = year or 2000\n    local month = month or 1\n \
    \   local day = day or 1\n    local months = months or 1\n    local days = days\
    \ or 1\n    local year = year or 2000\n    local month = month or 1\n    local\
    \ day = day or 1\n    local months = months or 1\n    local days = days or 1\n\
    \    local year = year or 2000\n    local month = month or 1\n    local day =\
    \ day or 1\n    local months = months or 1\n    local days = days or 1\n    local\
    \ year = year or 2000\n    local month = month or 1\n    local day = day or 1\n\
    \    local months = months or 1\n    local days = days or 1\n    local year =\
    \ year or 2000\n    local month = month or 1\n    local day = day or 1\n    local\
    \ months = months or 1\n    local days = days or 1\n    local year = year or 2000\n\
    \    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfjoq6rri.lua:104: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  local date_months = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n    local date_days_months\
    \ = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_months_years\
    \ = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months_years_months\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months_years_months_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months_years_months_years_months\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months_years_months_years_months_years\
    \ = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local date_days_years_months_years_months_years_months_years_months_years_month\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmkpbld25.lua:58: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local months = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n    local\
    \ days = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    local months_count\
    \ = months[date_split[1]] or 0\n    local days_count = days[date_split[2]] or\
    \ 0\n    local year_count = date_split[3] or 0\n    local months_valid = months_count\
    \ >= 1 and months_count <= 12\n    local days_valid = days_count >= 1 and days_count\
    \ <= 31\n    local year_valid = year_count >= 1 and year_count <= 99\n    local\
    \ date_valid = months_valid and days_valid and year_valid\n    return date_valid\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0a54ftt.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpz0a54ftt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local days_months = {\n    [1] = 0, [3] = 1..[13],\n    [5] = 4..[11],\n  \
    \  [7] = 6..[9]\n  }\n  local days_months_count = #days_months\n  local days_months_index\
    \ = #days_months\n  local days_months_value = days_months[date_parts[1]]\n  local\
    \ days_months_value = days_months_value or days_months_count\n  local days_months_value\
    \ = days_months_value or days_months_count\n  local days_months_value = days_months_value\
    \ or days_months_count\n  local days_months_value = days_months_value or days_months_count\n\
    \  local days_months_value = days_months_value or days_months_count\n  local days_months_value\
    \ = days_months_value or days_months_count\n  local days_months_value = days_months_value\
    \ or days_months_count\n  local days_months_value = days_months_value or days_months_count\n\
    \  local days_months_value = days_months_value or days_months_count\n  local days_months_value\
    \ = days_months_value or days_months_count\n  local days_months_value = days_months_value\
    \ or days_months_count\n  local days_months_value = days_months_value or days_months_count\n\
    \  local days_months_value = days_months_value or days_months_count\n  local days_months_value\
    \ = days_months_value or days_months_count\n  local days_months_value = days_months_value\
    \ or days_months_count\n  local days_months_value = days_months_value or days_months_count\n\
    \  local days_months_value = days_months_value or days_months_count\n  local days_months_value\
    \ = days_months_value or days_months_count\n  local days_months_value = days_months_value\
    \ or days_months_count\n  local days_months_value = days_months_value or days_months_count\n\
    \  local days_months_value = days_months_value or days_months_count\n  local days_months_value\
    \ = days_months_value or days_months_count\n  local days_months_value = day\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8a8krlqs.lua:20: malformed number near '1..'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_array == nil then\n\
    \      return false\n   end\n   if date_array[2] < 1 or date_array[2] > 12 then\n\
    \      return false\n   end\n   if date_array[1] < 1 or date_array[1] > 12 then\n\
    \      return false\n   end\n   if date_array[3] < 1 or date_array[3] > 31 then\n\
    \      return false\n   end\n   if date_array[1] < 1 or date_array[1] > 12 then\n\
    \      return false\n   end\n   if date_array[3] < 1 or date_array[3] > 30 then\n\
    \      return false\n   end\n   if date_array[1] < 1 or date_array[1] > 12 then\n\
    \      return false\n   end\n   if date_array[2] < 1 or date_array[2] > 31 then\n\
    \      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej6dzp8i.lua:25:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpej6dzp8i.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year < 1 or date_year > 9999 then\n        return false\n   \
    \ end\n    if date_month < 1 or date_month > 12 then\n        return false\n \
    \   end\n    if date_day < 1 or date_day > 31 then\n        return false\n   \
    \ end\n    \n    if date_month == 1 or date_month == 3 or date_month == 5 or\n\
    \        date_month == 7 or date_month == 8 or date_month == 10 or\n        date_month\
    \ == 12 then\n        if date_day < 1 or date_day > 30 then\n            return\
    \ false\n        end\n    elseif date_month == 4 or date_month == 6 or\n     \
    \   date_month == 9 or date_month == 11 then\n        if date_day < 1 or date_day\
    \ > 29 then\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel7ijvm3.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpel7ijvm3.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1..3,\n\
    \    [5] = 1..5,\n    [7] = 1..7,\n    [8] = 1..8,\n    [10] = 1..10,\n    [12]\
    \ = 1..12\n  }\n  local days = {\n    [1] = 1,\n    [2] = 4..6,\n    [3] = 9..11\n\
    \  }\n  local months_count = months[month]\n  local days_count = days[month]\n\
    \  if months_count < 1 or days_count < 1 or months_count > 12 or days_count >\
    \ 31 then\n    return false\n  end\n  if months[month] == 2 and days_count > 29\
    \ then\n    return false\n  end\n  if months[month] == 2 and days_count < 29 then\n\
    \    return true\n  end\n  if months[month] == 2 and days_count > 28 then\n  \
    \  return false\n  end\n  if months[month] == 2 and days_count < 28 then\n   \
    \ return true\n  end\n  if months[month] == 2 and days_count > 31 then\n    return\
    \ false\n  end\n  if months[month] == 2 and days_count < 31 then\n    return true\n\
    \  end\n  if year < 1000 or year > 9999 then\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj2il8cpx.lua:18: malformed number near '1..3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ '-')\n  local month = tonumber(date_split[1])\n  local day = tonumber(date_split[2])\n\
    \  local year = tonumber(date_split[3])\n  \n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if year < 1 or year > 9999 then\n    return false\n  end\n  \n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm26g1je.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpfm26g1je.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  local months = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n\
    \    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12] = '12',\n    [14]\
    \ = '14',\n    [16] = '16',\n    [18] = '18',\n    [20] = '20',\n    [22] = '22',\n\
    \    [24] = '24',\n    [26] = '26',\n    [28] = '28',\n    [30] = '30',\n    [32]\
    \ = '32',\n    [34] = '34',\n    [36] = '36',\n    [38] = '38',\n    [40] = '40',\n\
    \    [42] = '42',\n    [44] = '44',\n    [46] = '46',\n    [48] = '48',\n    [50]\
    \ = '50',\n    [52] = '52',\n    [54] = '54',\n    [56] = '56',\n    [58] = '58',\n\
    \    [60] = '60',\n    [62] = '62',\n    [64] = '64',\n    [66] = '66',\n    [68]\
    \ = '68',\n    [70] = '70',\n    [72] = '72',\n    [74] = '74',\n    [76] = '76',\n\
    \    [78] = '78',\n    [80] = '80',\n    [82] = '82',\n    [84] = '84',\n    [86]\
    \ = '86',\n    [88] = '88',\n    [90] = '90',\n    [92] = '92',\n    [94] = '94',\n\
    \    [96] = '96',\n    [98] = '98',\n    [100] = '100',\n    [102] = '102',\n\
    \    [104] = '104',\n    [106] = '106',\n    [108] = '108',\n    [110] = '110',\n\
    \    [112] = '112',\n    [114] = '114',\n    [116] = '116',\n    [118] = '118',\n\
    \    [120] = '120',\n    [122] = '122',\n    [124] = '124',\n    [126] = '126',\n\
    \    [128] = '128',\n    [130] = '130',\n    [132] = '132',\n    [134] = '134',\n\
    \    [136] = '136',\n    [138] = '138',\n    [140] = '140',\n    [\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_1jxrqcp.lua:98: ']' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local months = {\n        [1]\
    \ = '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n   \
    \     [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local\
    \ days = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n  \
    \      [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] =\
    \ '12',\n        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n  \
    \      [17] = '17',\n        [18] = '18',\n        [19] = '19',\n        [20]\
    \ = '20',\n        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n\
    \        [24] = '24',\n        [25] = '25',\n        [26] = '26',\n        [27]\
    \ = '27',\n        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n\
    \        [31] = '31'\n    }\n    local years = {\n        [1] = '00',\n      \
    \  [2] = '04',\n        [3] = '06',\n        [4] = '09',\n        [5] = '11',\n\
    \        [6] = '12'\n    }\n    local date_split = string.split(date, '-')\n \
    \   local month = date_split[1]\n    local day = date_split[2]\n    local year\
    \ = date_split[3]\n    local days_in_month = days[month]\n    local days_in_year\
    \ = days[year]\n    local days_in_month = days_in_month or 31\n    local days_in_year\
    \ = days_in_year or 30\n    local days_in_month = days_in_month or 31\n    local\
    \ days_in_year = days_in_year or 30\n    local days_in_month = days_in_month or\
    \ 31\n    local days_in_year = days_in_year or 30\n    local days_in_month = days_in_month\
    \ or 31\n    local days_in_year = days_in_year or 30\n    local days_in_month\
    \ = days_in_month or 31\n    local days_in_year = days_in_year or 30\n    local\
    \ days_in_month = days_in_month or 31\n    local days_in_year = days_in_year or\
    \ 30\n    local days_in_month = days_in_month or 31\n    local days_in_year =\
    \ days_in_year or 30\n    local days_in_month = days_in_month or 31\n    local\
    \ days_in_year = days_in_year or 30\n    local days_in_month = days_in_month or\
    \ 31\n    local days_in_year = days_in_year or 30\n    local days_in_month = days_in_month\
    \ or 31\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiplm7s8p.lua:107: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 1 and day > 31 then\n        return false\n    end\n\
    \    if month == 1 and day > 30 then\n        return false\n    end\n    if day\
    \ > 31 then\n        return false\n    end\n    if year < 1900 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  \n    if date_year == nil or date_month == nil or date_day == nil then\n  \
    \      return false\n    end\n    \n    if date_month < 1 or date_month > 12 then\n\
    \        return false\n    end\n    \n    if date_day < 1 or date_day > 31 then\n\
    \        return false\n    end\n    \n    if date_month == 1 or date_month ==\
    \ 3 or date_month == 5 or\n        date_month == 7 or date_month == 8 or date_month\
    \ == 10 or\n        date_month == 12 then\n        if date_day < 1 or date_day\
    \ > 30 then\n            return false\n        end\n    elseif date_month == 4\
    \ or date_month == 6 then\n        if date_day < 1 or date_day > 29 then\n   \
    \         return false\n        end\n    elseif date_month == 2 then\n       \
    \ if date_day < 1 or date_day > 28 then\n            return false\n        end\n\
    \    end\n    \n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uqlncjg.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp5uqlncjg.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8abvjsqu.lua:117: 'end' expected (to close 'if' at line 115)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local months = {\n      [1] = '01',\n      [3]\
    \ = '03',\n      [5] = '05',\n      [7] = '07',\n      [8] = '08',\n      [10]\
    \ = '10',\n      [12] = '12'\n   }\n   local day = tonumber(date:sub(1,2))\n \
    \  if day < 1 or day > 31 then\n      return false\n   end\n   local month = tonumber(date:sub(-2,-1))\n\
    \   if month < 1 or month > 12 then\n      return false\n   end\n   local year\
    \ = tonumber(date:sub(-4,-1))\n   if year < 0 or year > 9999 then\n      return\
    \ false\n   end\n   if months[month] == nil then\n      return false\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cp9ugja.lua:63:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9cp9ugja.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local month = tonumber(date_array[1])\n    local day = tonumber(date_array[2])\n\
    \    local year = tonumber(date_array[3])\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 30 then\n \
    \       return false\n    end\n    if month == 2 and day < 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 30 then\n \
    \       return false\n    end\n    if month == 2 and day < 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 30 then\n \
    \       return false\n    end\n    if month == 2 and day < 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day < 29 then\n        return false\n    end\n\
    \    if month == 2 and day > 28 then\n        return false\n    end\n    if month\
    \ == 2 and day < 28 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_4m8dak1.lua:119: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local months = {\n    [1] = 1,\n    [3] = 1\n  }\n  local days = {\n    [1,3,5,7,8,10,12]\
    \ = 1\n  }\n  local months_2 = {\n    [4,6,9,11] = 1\n  }\n  local days_2 = {\n\
    \    [1,3,5,7,8,10,12] = 1\n  }\n  local months_3 = {\n    [4,6,9,11] = 1\n  }\n\
    \  local days_3 = {\n    [1,3,5,7,8,10,12] = 1\n  }\n  local months_4 = {\n  \
    \  [4,6,9,11] = 1\n  }\n  local days_4 = {\n    [1,3,5,7,8,10,12] = 1\n  }\n \
    \ local months_5 = {\n    [4,6,9,11] = 1\n  }\n  local days_5 = {\n    [1,3,5,7,8,10,12]\
    \ = 1\n  }\n  local months_6 = {\n    [4,6,9,11] = 1\n  }\n  local days_6 = {\n\
    \    [1,3,5,7,8,10,12] = 1\n  }\n  local months_7 = {\n    [4,6,9,11] = 1\n  }\n\
    \  local days_7 = {\n    [1,3,5,7,8,10,12] = 1\n  }\n  local months_8 = {\n  \
    \  [4,6,9,11] = 1\n  }\n  local days_8 = {\n    [1,3,5,7,8,10,12] = 1\n  }\n \
    \ local months_9 = {\n    [4,6,9,11] = 1\n  }\n  local days_9 = {\n    [1,3,5,7,8,10,12]\
    \ = 1\n  }\n  local months_10 = {\n    [4,6,9,11] = 1\n  }\n  local days_10 =\
    \ {\n    [1,3,5,7,8,10,12] = 1\n  }\n  local months_11 = {\n    [4,6,9,11] = 1\n\
    \  }\n  local days_11 = {\n    [1,3,5,7,8,10,12] = 1\n  }\n  local months_12 =\
    \ {\n    [4,6,9,11] = 1\n  }\n  local days_12 = {\n    [1,3,5,7,8,10,12] = 1\n\
    \  }\n  local months_1 = {\n    [4,6,9,11] = 1\n  }\n  local days_1 = {\n    [1,3,5,7,8,10,12]\
    \ = 1\n  }\n  local months_2 = {\n    [4,6,9,11] = 1\n  }\n  local days_2 = {\n\
    \    [1,3,5,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnk77j0fi.lua:24: ']' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = #months\n    local days_count\
    \ = #days\n    local months_count_2 = #months\n    local days_count_2 = #days\n\
    \    local months_count_3 = #months\n    local days_count_3 = #days\n    local\
    \ months_count_4 = #months\n    local days_count_4 = #days\n    local months_count_5\
    \ = #months\n    local days_count_5 = #days\n    local months_count_6 = #months\n\
    \    local days_count_6 = #days\n    local months_count_7 = #months\n    local\
    \ days_count_7 = #days\n    local months_count_8 = #months\n    local days_count_8\
    \ = #days\n    local months_count_9 = #months\n    local days_count_9 = #days\n\
    \    local months_count_10 = #months\n    local days_count_10 = #days\n    local\
    \ months_count_11 = #months\n    local days_count_11 = #days\n    local months_count_12\
    \ = #months\n    local days_count_12 = #days\n    local months_count_13 = #months\n\
    \    local days_count_13 = #days\n    local months_count_14 = #months\n    local\
    \ days_count_14 = #days\n    local months_count_15 = #months\n    local days_count_15\
    \ = #days\n    local months_count_16 = #months\n    local days_count_16 = #days\n\
    \    local months_count_17 = #months\n    local days_count_17 = #days\n    local\
    \ months_count_18 = #months\n    local days_count_18 = #days\n    local months_count_19\
    \ = #months\n    local days_count_19 = #days\n    local months_count_20 = #months\n\
    \    local days_count_20 = #days\n    local months_count_21 = #months\n    local\
    \ days_count_21 = #days\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkykd2d6v.lua:99: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local months_count_lower = months_count - 1\n    local days_count_lower\
    \ = days_count - 1\n    local months_count_upper = months_count + 1\n    local\
    \ days_count_upper = days_count + 1\n    local months_count_lower = months_count\
    \ - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_count_upper = days_count + 1\n    local months_count_lower\
    \ = months_count - 1\n    local days_count_lower = days_count - 1\n    local months_count_upper\
    \ = months_count + 1\n    local days_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgaiwq61u.lua:90: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    \n    if day < 1 or day > 31 then\n\
    \        return false\n    end\n    \n    if month < 1 or month > 12 then\n  \
    \      return false\n    end\n    \n    if year < 1 or year > 9999 then\n    \
    \    return false\n    end\n    \n    if month == 2 then\n        if day > 29\
    \ then\n            return false\n        end\n    end\n    \n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri77xc8i.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpri77xc8i.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.split(date,\
    \ \"-\")\n    local month = tonumber(date_array[1])\n    local day = tonumber(date_array[2])\n\
    \    local year = tonumber(date_array[3])\n    \n    if month < 1 or month > 12\
    \ then\n        return false\n    end\n    \n    if day < 1 or day > 31 then\n\
    \        return false\n    end\n    \n    if month == 2 and day > 29 then\n  \
    \      return false\n    end\n    \n    if day > 30 then\n        return false\n\
    \    end\n    \n    if year < 1900 then\n        return false\n    end\n    \n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygubv1rj.lua:15:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpygubv1rj.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local days_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n\
    \    if days_array == nil then\n        return false\n    end\n    local months_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n    if months_array == nil then\n\
    \        return false\n    end\n    local year = date_array[3]\n    local month\
    \ = months_array[1]\n    local day = days_array[2]\n    local days_in_month =\
    \ days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = days_array[3]\n    local days_in_year = days_array[4]\n    local days_in_month\
    \ = day\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph6q7q2zr.lua:91: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj7kbel3e.lua:41: 'end' expected (to close 'function' at line\
    \ 14) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local months = {\n      [1] = '01',\n      [3]\
    \ = '03',\n      [5] = '05',\n      [7] = '07',\n      [8] = '08',\n      [10]\
    \ = '10',\n      [12] = '12'\n   }\n   local day = tonumber(date:sub(1,2))\n \
    \  if day < 1 or day > 31 then\n      return false\n   end\n   local month = tonumber(date:sub(-2,-1))\n\
    \   if month < 1 or month > 12 then\n      return false\n   end\n   local year\
    \ = tonumber(date:sub(-4,-1))\n   if year < 1 or year > 9999 then\n      return\
    \ false\n   end\n   if months[month] ~= date:sub(1,2) then\n      return false\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t0ak6yp.lua:63:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t0ak6yp.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
