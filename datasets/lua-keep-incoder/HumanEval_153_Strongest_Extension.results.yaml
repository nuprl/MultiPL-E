name: HumanEval_153_Strongest_Extension
language: lua
results:
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6l1xk6r.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmph6l1xk6r.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetoauwq7.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpetoauwq7.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength == 0 then\n            error(\"No extension\
    \ with strength zero\")\n        elseif strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    local strongest_extension_strength = #strongest_extension\n\
    \    if strongest_extension_strength == 1 then\n        return class_name .. \"\
    .\" .. strongest_extension[1]\n    else\n        local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n        return class_name .. \"\
    .\" .. strongest_extension_sorted[1]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yuct0cc.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp1yuct0cc.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkpuizlfw.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkpuizlfw.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36m2zjf8.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp36m2zjf8.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((cap\
    \ + 1):len()))\n    cap_counter = cap_counter + cap\n    sm_counter = sm_counter\
    \ + sm\n  end\n  local strength = cap_counter - sm_counter\n  if strength > 0\
    \ then\n    strongest_extension[class_name] = extensions[#extensions]\n  elseif\
    \ strength == 0 then\n    strongest_extension[class_name] = extensions[#extensions]\n\
    \  elseif strength < 0 then\n    for _, extension in ipairs(extensions) do\n \
    \     local cap = string.upper(extension:sub(1, #extension))\n      local sm =\
    \ string.lower(extension:sub((cap + 1):len()))\n      if cap == string.upper(class_name)\
    \ and sm == string.lower(class_name) then\n        strongest_extension[class_name]\
    \ = extension\n      end\n    end\n  end\n  return strongest_extension[class_name]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivn6e7af.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpivn6e7af.lua:46: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivghrzfc.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpivghrzfc.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\n\
    \    return a.strength < b.strength\n  end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpii6g_bvb.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpii6g_bvb.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap_counter\
    \ = cap_counter + #extension:upper()\n    local sm_counter = sm_counter + #extension:lower()\n\
    \  end\n  local strength = cap_counter - sm_counter\n  if strength > 0 then\n\
    \    local cap_counter = 0\n    local sm_counter = 0\n    for _, extension in\
    \ ipairs(extensions) do\n      local cap_counter = cap_counter + #extension:upper()\n\
    \      local sm_counter = sm_counter + #extension:lower()\n    end\n    local\
    \ strength = cap_counter - sm_counter\n  end\n  for _, extension in ipairs(extensions)\
    \ do\n    if #extension:upper() == #class_name then\n      strongest_extension\
    \ = extension\n    end\n  end\n  return strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodu0vb0e.lua:45:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpodu0vb0e.lua:45:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = \"\"\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9edvewtb.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9edvewtb.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n    cap_counter = cap_counter + cap\n    sm_counter = sm_counter\
    \ + sm\n  end\n  local strength = cap_counter - sm_counter\n  if strength > 0\
    \ then\n    local cap_counter = 0\n    local sm_counter = 0\n    for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \      cap_counter = cap_counter + cap\n      sm_counter = sm_counter + sm\n \
    \   end\n    local strength_of_extension = cap_counter - sm_counter\n    if strength_of_extension\
    \ > 0 then\n      local cap_counter = 0\n      local sm_counter = 0\n      for\
    \ _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n        cap_counter = cap_counter + cap\n        sm_counter =\
    \ sm_counter + sm\n      end\n      local strength_of_extension_of_extension =\
    \ cap_counter - sm_counter\n      if strength_of_extension_of_extension > 0 then\n\
    \        local cap_counter = 0\n        local sm_counter = 0\n        for _, extension\
    \ in ipairs(extensions) do\n          local cap = string.upper(extension:sub(1,\
    \ #extension))\n          local sm = string.lower(extension:sub((#extension) +\
    \ 1, #extension))\n          cap_counter = cap_counter + cap\n          sm_counter\
    \ = sm_counter + sm\n        end\n        local strength_of_extension_of_extension_of_extension\
    \ = cap_counter - sm_counter\n        if strength_of_extension_of_extension_of_extension\
    \ > 0 then\n          local cap_counter = 0\n          local sm_counter = 0\n\
    \          for _, extension in ipairs(extensions) do\n            local cap =\
    \ string.upper(extension:sub(1, #extension))\n            local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n            cap_counter = cap_counter + cap\n           \
    \ sm_counter = sm_counter + sm\n          end\n          local strength_of_extension_of_extension_of_extension\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppzapcqfl.lua:82: 'end' expected (to close 'if' at line\
    \ 57) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    for _, extension in ipairs(strongest) do\n      if extension > strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxa0limj5.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpxa0limj5.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6w_c7ek.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmph6w_c7ek.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpybr3wbxv.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpybr3wbxv.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1, #extension))\n      local\
    \ strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      return class_name\
    \ .. '.' .. strongest_extension[1]\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9tmpf3d9.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9tmpf3d9.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return string.sub(class_name, 1, #class_name-1) .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvalfj4i6.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpvalfj4i6.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sml_counter = 0\n  for _, extension in ipairs(extensions) do\n    cap_counter\
    \ = cap_counter + #extension:upper()\n    sml_counter = sml_counter + #extension:lower()\n\
    \  end\n  local strength = cap_counter - sml_counter\n  if strength == 0 then\n\
    \    return class_name\n  else\n    for _, extension in ipairs(extensions) do\n\
    \      if #extension:upper() == strength then\n        strongest_extension[#strongest_extension\
    \ + 1] = extension\n      end\n    end\n    return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN',\
    \ 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc98bphy0.lua:40:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi\"\\nstack traceback:\\n\\\
    t/tmp/tmpc98bphy0.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjnbuxhrh.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpjnbuxhrh.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  local sm_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_cap, min_cap = 1, 1\n  local max_sm, min_sm = 1, 1\n  for cap, extensions\
    \ in pairs(cap_extensions) do\n    for sm, strength in pairs(extensions) do\n\
    \      if strength > 0 then\n        if max_cap < cap then\n          max_cap\
    \ = cap\n        end\n        if min_cap > cap then\n          min_cap = cap\n\
    \        end\n        if max_sm < sm then\n          max_sm = sm\n        end\n\
    \        if min_sm > sm then\n          min_sm = sm\n        end\n      end\n\
    \    end\n  end\n  return class_name .. '.' .. string.lower(max_cap) .. string.upper(min_cap)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpel0ta4kj.lua:53:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.11\"\\nstack traceback:\\\
    n\\t/tmp/tmpel0ta4kj.lua:53: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5hiju31v.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp5hiju31v.lua:39: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpepycdnxa.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpepycdnxa.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.concat(strongest,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2b67b3c.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpc2b67b3c.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpowhcemes.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpowhcemes.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if #strongest_extension > 1 then\n    local first_extension = strongest_extension[1]\n\
    \    for _, extension in ipairs(strongest_extension) do\n      if first_extension\
    \ < extension then\n        first_extension = extension\n      end\n    end\n\
    \    strongest_extension_strength = first_extension\n  end\n  return class_name\
    \ .. '.' .. strongest_extension_strength\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7tn14n8r.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp7tn14n8r.lua:42: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      -- The extension's name is all uppercase\n\
    \      strongest_extension = extension\n      break\n    elseif strength > 0 then\n\
    \      -- The extension's name is all lowercase and has a strength greater than\
    \ 0\n      strongest_extension = extension\n      break\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd_l9aeqz.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpd_l9aeqz.lua:38: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = nil\n   local strongest_extension_strength\
    \ = nil\n   local strongest_extension_strength_counter = -1\n   for _, extension\
    \ in ipairs(extensions) do\n      local extension_strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n      if strongest_extension_strength_counter\
    \ == -1 or extension_strength > strongest_extension_strength_strength then\n \
    \        strongest_extension_strength = extension_strength\n         strongest_extension_strength_counter\
    \ = #extensions\n         strongest_extension = extension\n      end\n   end\n\
    \   return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxaxyr7l8.lua:21:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpxaxyr7l8.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmgetw34a.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpmgetw34a.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local max_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      strongest_extension\
    \ = extension\n      max_strength = strength\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgwn86uia.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpgwn86uia.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local cap_counter = 0\n    local sm_counter = 0\n    local\
    \ strongest_extension = \"\"\n    for _, extension in ipairs(extensions) do\n\
    \        cap_counter = cap_counter + #extension:upper()\n        sm_counter =\
    \ sm_counter + #extension:lower()\n    end\n    local strength = cap_counter -\
    \ sm_counter\n    if strength > 0 then\n        strongest_extension = class_name\
    \ .. \".\" .. extensions[1]\n    elseif strength == 0 then\n        strongest_extension\
    \ = class_name .. \".\" .. extensions[1]\n    elseif strength < 0 then\n     \
    \   strongest_extension = class_name .. \".\" .. extensions[2]\n    end\n    return\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ryfy65t.lua:38:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.tEN\"\\nstack traceback:\\\
    n\\t/tmp/tmp8ryfy65t.lua:38: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  if #strongest_extension == 1 then\n    return class_name ..\
    \ '.' .. strongest_extension[1]\n  else\n    local strengths = {}\n    for _,\
    \ extension in ipairs(strongest_extension) do\n      table.insert(strengths, strength)\n\
    \    end\n    table.sort(strengths)\n    return class_name .. '.' .. strongest_extension[1]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyhlza88h.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpyhlza88h.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extensions = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extensions,\
    \ {extension, strength})\n        end\n    end\n    table.sort(strongest_extensions,\
    \ function(a, b) return a.strength > b.strength end)\n    return class_name ..\
    \ '.' .. strongest_extensions[1].extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5n4op7a.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpa5n4op7a.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ smalls = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    smalls[#smalls + 1] =\
    \ string.lower(extension:sub(1, #extension))\n  end\n  local cap_strength = #capitals\n\
    \  local small_strength = #smalls\n  for _, extension in ipairs(extensions) do\n\
    \    local cap_letters = #string.upper(extension:sub(1, #extension))\n    local\
    \ small_letters = #string.lower(extension:sub(1, #extension))\n    local strength\
    \ = cap_strength - small_strength\n    if cap_letters > small_letters then\n \
    \     cap_strength = cap_strength - small_letters\n      small_strength = small_letters\n\
    \    elseif cap_letters < small_letters then\n      small_strength = small_letters\
    \ - cap_letters\n      cap_strength = cap_letters\n    end\n    if cap_strength\
    \ > 0 then\n      strongest_extension[#strongest_extension + 1] = class_name ..\
    \ '.' .. extension\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength > 1 then\n    local strongest_extension_strength_sorted\
    \ = {}\n    for _, strongest_extension in ipairs(strongest_extension) do\n   \
    \   table.insert(strongest_extension_strength_sorted, strongest_extension)\n \
    \   end\n    table.sort(strongest_extension_strength_sorted)\n    return strongest_extension_strength_sorted[1]\n\
    \  end\n  return strongest_extension[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0odog47p.lua:57:\
    \ expected: \"Boku123.YEs.WeCaNe\"\\nactual: \"Boku123.32145tggg\"\\nstack traceback:\\\
    n\\t/tmp/tmp0odog47p.lua:57: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_sum = 0\n  local sm_sum = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    cap_sum = cap_sum\
    \ + cap\n    sm_sum = sm_sum + sm\n  end\n  return class_name .. '.' .. string.lower(extensions[math.floor(cap_sum\
    \ - sm_sum)])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN',\
    \ 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgjbijqzf.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpgjbijqzf.lua:31: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpme9_qp_o.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpme9_qp_o.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptc_7n8h0.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmptc_7n8h0.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength > 1 then\n    local strongest_extension_strength_sorted\
    \ = {}\n    for _, extension in ipairs(strongest_extension) do\n      table.insert(strongest_extension_strength_sorted,\
    \ extension)\n    end\n    table.sort(strongest_extension_strength_sorted)\n \
    \   strongest_extension_strength = strongest_extension_strength_sorted[1]\n  end\n\
    \  return class_name .. '.' .. strongest_extension[strongest_extension_strength]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb48ur1_y.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpb48ur1_y.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_zro2nm.lua:34:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.tEN\"\\nstack traceback:\\\
    n\\t/tmp/tmpm_zro2nm.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      table.insert(strongest_extensions, extension)\n\
    \    elseif strength > 0 then\n      table.insert(strongest_extensions, extension)\n\
    \      break\n    elseif strength < 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n      break\n    end\n  end\n  if #strongest_extensions > 1 then\n\
    \    table.sort(strongest_extensions)\n  end\n  return class_name .. '.' .. table.concat(strongest_extensions,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpadzbnfdk.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpadzbnfdk.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    cap_extensions[#cap_extensions + 1] = extension:upper()\n  end\n  local\
    \ strength = #cap_extensions - 1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = extension:upper()\n    local sm = #extension:lower()\n    local\
    \ diff = cap - sm\n    if diff > 0 then\n      strength = strength + diff\n  \
    \  end\n  end\n  return class_name .. '.' .. cap_extensions[strength]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc0w4h6a9.lua:25:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpc0w4h6a9.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    for _, extension in ipairs(strongest) do\n      if strongest_extension\
    \ == extension then\n        strongest_extension = strongest_extension\n     \
    \ end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4t4obanq.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp4t4obanq.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  if #strongest_extension == 1 then\n    return class_name ..\
    \ '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    for _, extension in ipairs(extensions) do\n    \
    \  if strongest_extension_strength > 1 then\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n          strongest_extension_strength\
    \ = strongest_extension_strength - 1\n        end\n      end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96dsn882.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp96dsn882.lua:47: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n\
    \        strongest_extension = extension\n      else\n        if strength > #strongest_extension\
    \ then\n          strongest_extension = extension\n        end\n      end\n  \
    \  end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_v4rgxxm.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp_v4rgxxm.lua:38: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal max_strength = -1\n\tlocal max_extension = \"\"\n\tfor\
    \ _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength\
    \ = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn class_name\
    \ .. \".\" .. max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9a0q5o84.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9a0q5o84.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == nil then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpit620m7i.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpit620m7i.lua:39: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8lzxgys5.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp8lzxgys5.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local extension_strength =\
    \ nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_strength = cap - sm\n    if extension_strength == nil then\n  \
    \    extension_strength = cap_strength\n    elseif extension_strength > cap_strength\
    \ then\n      extension_strength = cap_strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaz4it37z.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpaz4it37z.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n    cap_counter = cap_counter + cap\n    sm_counter = sm_counter\
    \ + sm\n  end\n  local cap_strength = cap_counter - sm_counter\n  if cap_strength\
    \ > 0 then\n    cap_strength = cap_strength - 1\n  end\n  local strongest_extension_strength\
    \ = cap_strength\n  local strongest_extension_class = class_name\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  cap_counter = cap_counter + cap\n    sm_counter = sm_counter + sm\n    if cap_strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = cap_strength\n\
    \      strongest_extension_class = class_name\n    end\n  end\n  return strongest_extension_class\
    \ .. '.' .. strongest_extension_strength\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplkuoyigy.lua:23:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmplkuoyigy.lua:48: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local max_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptw_vtxtl.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmptw_vtxtl.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension[strength] == nil\
    \ then\n        strongest_extension[strength] = extension\n      else\n      \
    \  local i = 1\n        while i <= strength do\n          local s = strongest_extension[i]\n\
    \          strongest_extension[i] = extension\n          i = i + 1\n        end\n\
    \      end\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength == 1 then\n    return class_name .. '.' ..\
    \ strongest_extension[1]\n  elseif strongest_extension_strength > 1 then\n   \
    \ local i = 1\n    while i <= strongest_extension_strength do\n      local s =\
    \ strongest_extension[i]\n      local strength = i - 1\n      if strength > 0\
    \ then\n        return class_name .. '.' .. s .. '.' .. strongest_extension[strength]\n\
    \      else\n        return class_name .. '.' .. s\n      end\n      i = i + 1\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN',\
    \ 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgzdfwb6u.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpgzdfwb6u.lua:56: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension)\n  return class_name .. '.'\
    \ .. table.concat(strongest_extension, '.')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj92xa_d8.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpj92xa_d8.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpg4fgclj4.lua:30: unexpected symbol near '<'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ smalls = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    smalls[#smalls + 1] =\
    \ string.lower(extension:sub(1, #extension))\n  end\n  local capitals_count =\
    \ #capitals\n  local smalls_count = #smalls\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub(1, #extension))\n    local cap_diff = cap - capitals[capitals_count]\n\
    \    local sm_diff = sm - smalls[smalls_count]\n    if cap_diff > 0 and sm_diff\
    \ > 0 then\n      capitals[capitals_count] = cap\n      smalls[smalls_count] =\
    \ sm\n      capitals_count--\n      smalls_count--\n    end\n  end\n  capitals[capitals_count]\
    \ = nil\n  smalls[smalls_count] = nil\n  capitals_count--\n  smalls_count--\n\
    \  local cap_strength = capitals_count\n  local sm_strength = smalls_count\n \
    \ if cap_strength > 0 and sm_strength > 0 then\n    cap_strength = cap_strength\
    \ - capitals_count\n    sm_strength = sm_strength - smalls_count\n  end\n  if\
    \ cap_strength > 0 and sm_strength > 0 then\n    cap_strength = cap_strength -\
    \ capitals_count\n    sm_strength = sm_strength - smalls_count\n  end\n  if cap_strength\
    \ > 0 and sm_strength > 0 then\n    cap_strength = cap_strength - capitals_count\n\
    \    sm_strength = sm_strength - smalls_count\n  end\n  if cap_strength > 0 and\
    \ sm_strength > 0 then\n    cap_strength = cap_strength - capitals_count\n   \
    \ sm_strength = sm_strength - smalls_count\n  end\n  if cap_strength > 0 and sm_strength\
    \ > 0 then\n    cap_strength = cap_strength - capitals_count\n    sm_strength\
    \ = sm_strength - smalls_count\n  end\n  if cap_strength > 0 and sm_strength >\
    \ 0 then\n    cap_strength = cap_strength - capitals_count\n    sm_strength =\
    \ sm_strength - smalls_count\n  end\n  if cap_strength > 0 and sm_strength > 0\
    \ then\n    cap_strength = cap_strength - capitals_count\n    sm_strength = sm_strength\
    \ - smalls_count\n  end\n  if cap_strength > \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4850bqot.lua:35: '=' expected near 'smalls_count'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ lowercases = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  local cap_strength\
    \ = #capitals\n  local lcl_strength = #lowercases\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap_diff = capitals[#capitals] - capitals[#capitals - 1]\n   \
    \ local lcl_diff = lowercases[#lowercases] - lowercases[#lowercases - 1]\n   \
    \ if cap_diff > lcl_diff then\n      cap_strength = cap_strength - 1\n    elseif\
    \ lcl_diff > cap_diff then\n      lcl_strength = lcl_strength - 1\n    end\n \
    \ end\n  if cap_strength > lcl_strength then\n    strongest_extension[#strongest_extension\
    \ + 1] = class_name .. '.' .. capitals[#capitals] .. string.lower(extensions[#extensions])\n\
    \  elseif lcl_strength > cap_strength then\n    strongest_extension[#strongest_extension\
    \ + 1] = class_name .. '.' .. lowercases[#lowercases] .. string.upper(extensions[#extensions])\n\
    \  else\n    strongest_extension[#strongest_extension + 1] = class_name .. '.'\
    \ .. extensions[#extensions]\n  end\n  return table.concat(strongest_extension,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9z713mf8.lua:27:\
    \ attempt to perform arithmetic on field '?' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9z713mf8.lua:48: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ lowercases = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  local capitals_count\
    \ = #capitals\n  local lowercases_count = #lowercases\n  local capitals_strength\
    \ = #capitals - 1\n  local lowercases_strength = #lowercases - 1\n  for _, extension\
    \ in ipairs(extensions) do\n    local capitals_index = capitals_strength\n   \
    \ local lowercases_index = lowercases_strength\n    for i = 1, #extension do\n\
    \      if string.upper(extension:sub(i, i)) == extension:sub(i, i) then\n    \
    \    capitals_index = capitals_index - 1\n        lowercases_index = lowercases_index\
    \ - 1\n      else\n        capitals_index = capitals_index - 1\n        lowercases_index\
    \ = lowercases_index + 1\n      end\n    end\n    if capitals_index == 0 then\n\
    \      capitals_strength = capitals_strength - 1\n    elseif capitals_index >\
    \ 0 then\n      capitals_strength = capitals_strength - capitals_index\n    end\n\
    \    if lowercases_index == 0 then\n      lowercases_strength = lowercases_strength\
    \ - 1\n    elseif lowercases_index > 0 then\n      lowercases_strength = lowercases_strength\
    \ - lowercases_index\n    end\n  end\n  strongest_extension.name = class_name\n\
    \  strongest_extension.strength = capitals_strength + lowercases_strength\n  return\
    \ strongest_extension.name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeynvp5po.lua:59:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi\"\\nstack traceback:\\n\\\
    t/tmp/tmpeynvp5po.lua:59: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      return class_name\
    \ .. '.' .. strongest_extension[1]\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwh68nl46.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpwh68nl46.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extensions[strength] == nil then\n      strongest_extensions[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension = nil\n  local max_strength\
    \ = -1\n  for _, extension in ipairs(strongest_extensions) do\n    if max_strength\
    \ < strength then\n      max_strength = strength\n      strongest_extension =\
    \ extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjctwhmqe.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpjctwhmqe.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.concat(strongest,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi53ddmnu.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpi53ddmnu.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  local sml_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sml = string.lower(extension:sub(1, #extension))\n \
    \   cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sml]\
    \ = -1\n    sml_extensions[sml] = sml_extensions[sml] or {}\n    sml_extensions[sml][cap]\
    \ = -1\n  end\n  local max_strength = -1\n  local max_extension\n  for cap, extensions\
    \ in pairs(cap_extensions) do\n    for sml, strength in pairs(extensions) do\n\
    \      if strength > max_strength then\n        max_strength = strength\n    \
    \    max_extension = cap..'.'..sml\n      end\n    end\n  end\n  return max_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpka0_xs05.lua:43:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpka0_xs05.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmsaw90m0.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpmsaw90m0.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = {}\n    local capitals = {}\n \
    \   local lowercases = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     capitals[#capitals + 1] = string.upper(extension:sub(1, #extension))\n \
    \       lowercases[#lowercases + 1] = string.lower(extension:sub(1, #extension))\n\
    \    end\n    local cap_strength = #capitals\n    local lc_strength = #lowercases\n\
    \    local strength = cap_strength - lc_strength\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local lc = string.lower(extension:sub(1, #extension))\n        if cap == lc\
    \ then\n            cap_strength = cap_strength - 1\n            lc_strength =\
    \ lc_strength - 1\n        elseif cap_strength > lc_strength then\n          \
    \  cap_strength = cap_strength - 1\n            strongest_extension[#strongest_extension\
    \ + 1] = capitals[cap_strength]\n        elseif lc_strength > cap_strength then\n\
    \            lc_strength = lc_strength - 1\n            strongest_extension[#strongest_extension\
    \ + 1] = lowercases[lc_strength]\n        else\n            strongest_extension[#strongest_extension\
    \ + 1] = extension\n        end\n    end\n    return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7vtpuv8k.lua:49:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.tEN.niNE.eIGHt8OKe\"\\nstack\
    \ traceback:\\n\\t/tmp/tmp7vtpuv8k.lua:49: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8xcs5ojj.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp8xcs5ojj.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest, extension)\n\
    \      elseif strength == 0 then\n         table.insert(strongest, extension)\n\
    \      elseif strength < 0 then\n         table.insert(strongest, extension)\n\
    \      end\n   end\n   if #strongest == 0 then\n      return class_name\n   else\n\
    \      return string.sub(class_name, 1, #class_name) .. '.' .. table.concat(strongest,\
    \ ' ')\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN',\
    \ 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplneypt24.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmplneypt24.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ - tonumber(a) - tonumber(b) end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpspd918l9.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpspd918l9.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. max_extension\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppa7gk86q.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmppa7gk86q.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.unpack(strongest)[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5nexi0j0.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp5nexi0j0.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.concat(strongest,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt3szq1yq.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpt3szq1yq.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    for _, extension in ipairs(strongest) do\n      if extension > strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpil6o4toj.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpil6o4toj.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiq437p87.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpiq437p87.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptjp9tyr8.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmptjp9tyr8.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal max_strength = -1\n\tlocal max_extension\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength = strength\n\
    \t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. max_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppim4g8l6.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmppim4g8l6.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local extension_strength = string.match(extension, \"^(.-)(.-)$\")\n\
    \    extension_strengths[extension_strength] = extension\n  end\n  for _, extension_strength\
    \ in ipairs(extension_strengths) do\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension_strengths[extension_strength]\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(strongest_extension)) + strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp50127926.lua:30:\
    \ bad argument #1 to 'len' (string expected, got nil)\\nstack traceback:\\n\\\
    t/tmp/tmp50127926.lua:30: in function 'candidate'\\n\\t/tmp/tmp50127926.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extensions = {}\n\tlocal max_strength = -1\n\t\
    local max_strength_extension\n\tlocal max_strength_extension_class\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength = strength\n\
    \t\t\tmax_strength_extension = extension\n\t\t\tmax_strength_extension_class =\
    \ class_name\n\t\tend\n\tend\n\treturn max_strength_extension_class .. '.' ..\
    \ max_strength_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf5s5ko_k.lua:24:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpf5s5ko_k.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = nil\n  for _,\
    \ extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(2, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name)-#max_extension-1) ..\
    \ max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN',\
    \ 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpha0aupzl.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpha0aupzl.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3kwbffwi.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp3kwbffwi.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1, #extension))\n      local\
    \ strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      return class_name\
    \ .. '.' .. strongest_extension[1]\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz96qpef6.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpz96qpef6.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  if #strongest_extension == 1 then\n    return class_name ..\
    \ '.' .. strongest_extension[1]\n  else\n    local max_strength = -1\n    local\
    \ max_extension\n    for _, extension in ipairs(strongest_extension) do\n    \
    \  local cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n      local strength = cap - sm\n      if strength > max_strength then\n\
    \        max_strength = strength\n        max_extension = extension\n      end\n\
    \    end\n    return class_name .. '.' .. max_extension\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_iivw988.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp_iivw988.lua:47: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqg4reif2.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpqg4reif2.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local extension_strength =\
    \ nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff ~= 0 then\n      if extension_strength\
    \ == nil then\n        extension_strength = cap_diff\n      elseif extension_strength\
    \ > cap_diff then\n        extension_strength = cap_diff\n      end\n    end\n\
    \  end\n  if extension_strength ~= nil then\n    strongest_extension = class_name\
    \ .. '.' .. extensions[#extensions]\n  end\n  return strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfzblt7rk.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpfzblt7rk.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local strongest_extension_strength_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local extension_strength = string.upper(extension)\
    \ - string.lower(extension)\n    if strongest_extension_strength < extension_strength\
    \ then\n      strongest_extension_strength = extension_strength\n      strongest_extension_strength_counter\
    \ = 1\n    elseif strongest_extension_strength == extension_strength then\n  \
    \    strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ + 1\n    end\n  end\n  if strongest_extension_strength_counter > 1 then\n  \
    \  strongest_extension = class_name .. '.' .. extensions[1]\n  elseif strongest_extension_strength_counter\
    \ == 1 then\n    strongest_extension = class_name\n  end\n  return strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvszx8z6a.lua:21:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpvszx8z6a.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0968q0up.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp0968q0up.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension[strength] == nil\
    \ then\n        strongest_extension[strength] = extension\n      else\n      \
    \  local _, index = next, 1\n        while strongest_extension[strength] == extension\
    \ do\n          index = index + 1\n          strongest_extension[strength] = extension:sub(1,\
    \ index)\n        end\n      end\n    end\n  end\n  return class_name .. '.' ..\
    \ table.concat(strongest_extension, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ktjs0gx.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp5ktjs0gx.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp4jl35oa.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpp4jl35oa.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcje8o_ws.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpcje8o_ws.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)-#max_extension-1)\
    \ .. max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppns4h8_a.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmppns4h8_a.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local cap_diff = cap - sm\n    if cap_diff\
    \ > 0 then\n      if strongest_extension_strength == -1 or cap_diff > strongest_extension_strength\
    \ then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpguzypgdw.lua:30:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpguzypgdw.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  local sm_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_strength = -1\n  local max_extension\n  for cap, extensions in pairs(cap_extensions)\
    \ do\n    for sm, strength in pairs(extensions) do\n      if strength > max_strength\
    \ then\n        max_strength = strength\n        max_extension = cap..'.'..sm\n\
    \      end\n    end\n  end\n  if max_strength > 0 then\n    return max_extension\n\
    \  end\n  local max_strength = -1\n  local max_extension\n  for sm, extensions\
    \ in pairs(sm_extensions) do\n    for cap, strength in pairs(extensions) do\n\
    \      if strength > max_strength then\n        max_strength = strength\n    \
    \    max_extension = cap..'.'..sm\n      end\n    end\n  end\n  if max_strength\
    \ > 0 then\n    return max_extension\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjxznbor.lua:59:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpwjxznbor.lua:59:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplgx5cmuo.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmplgx5cmuo.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - #strongest_extension) .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb5b2ffxi.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpb5b2ffxi.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    for _, extension in ipairs(strongest) do\n      if strongest_extension\
    \ == extension then\n        strongest_extension = extension\n      end\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmhanuyet.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpmhanuyet.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcvpnv1kb.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpcvpnv1kb.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = \"\"\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpogvzqfb3.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpogvzqfb3.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest,\
    \ extension)\n        end\n    end\n    table.sort(strongest)\n    return class_name\
    \ .. '.' .. table.unpack(strongest)[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz8s3442u.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpz8s3442u.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local cap_extensions = {}\n    local sml_extensions = {}\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sml = string.lower(extension:sub(1, #extension))\n\
    \        cap_extensions[cap] = cap_extensions[cap] or {}\n        cap_extensions[cap][sml]\
    \ = cap_extensions[cap][sml] or -1\n        sml_extensions[sml] = sml_extensions[sml]\
    \ or {}\n        sml_extensions[sml][cap] = sml_extensions[sml][cap] or -1\n \
    \   end\n    local max_cap = #cap_extensions and #cap_extensions[#cap_extensions]\
    \ and #cap_extensions[#cap_extensions]:max()\n    local max_sml = #sml_extensions\
    \ and #sml_extensions[#sml_extensions] and #sml_extensions[#sml_extensions]:max()\n\
    \    if max_cap == max_sml then\n        return class_name\n    end\n    if max_cap\
    \ > max_sml then\n        return class_name .. '.' .. cap_extensions[#cap_extensions]:max()\n\
    \    else\n        return class_name .. '.' .. sml_extensions[#sml_extensions]:max()\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpedh6727j.lua:27:\
    \ attempt to get length of field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpedh6727j.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    extension_strengths[cap]\
    \ = extension_strengths[cap] or 0\n    extension_strengths[cap] = extension_strengths[cap]\
    \ + 1\n    extension_strengths[sm] = extension_strengths[sm] or 0\n    extension_strengths[sm]\
    \ = extension_strengths[sm] + 1\n  end\n  for cap, strength in pairs(extension_strengths)\
    \ do\n    if strength > strongest_extension_strength then\n      strongest_extension\
    \ = class_name\n      strongest_extension_strength = strength\n    end\n  end\n\
    \  return strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp79v3rxc7.lua:40:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi\"\\nstack traceback:\\n\\\
    t/tmp/tmp79v3rxc7.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      table.insert(strongest_extensions, extension)\n\
    \    elseif strength > 0 then\n      table.insert(strongest_extensions, extension)\n\
    \      table.insert(strongest_extensions, extension:sub(1, #extension))\n    end\n\
    \  end\n  local strongest_extension = strongest_extensions[#strongest_extensions]\n\
    \  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwptlv0oa.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpwptlv0oa.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnb7qhxuq.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpnb7qhxuq.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local max_strength = -1\n   local max_extension = \"\"\n   for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > max_strength then\n    \
    \     max_strength = strength\n         max_extension = extension\n      end\n\
    \   end\n   return string.gsub(class_name, \"^\" .. class_name .. \".\" .. max_extension,\
    \ \"$1\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6q841w1_.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp6q841w1_.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension[strength] == nil\
    \ then\n        strongest_extension[strength] = extension\n      else\n      \
    \  local extension_strength = string.upper(extension:sub(1, #extension))\n   \
    \     if extension_strength > strongest_extension[strength] then\n          strongest_extension[strength]\
    \ = extension\n        end\n      end\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if strongest_extension_strength > 1 then\n    local\
    \ strongest_extension_strength_sorted = {}\n    for _, extension in ipairs(strongest_extension)\
    \ do\n      table.insert(strongest_extension_strength_sorted, extension)\n   \
    \ end\n    table.sort(strongest_extension_strength_sorted)\n    strongest_extension\
    \ = strongest_extension_strength_sorted[1]\n  end\n  return class_name .. '.'\
    \ .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9x0eje52.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9x0eje52.lua:48: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      if strongest_extension[strength]\
    \ == nil then\n        strongest_extension[strength] = extension\n      else\n\
    \        local _, old_extension = strongest_extension[strength]\n        if old_extension\
    \ == extension then\n          strongest_extension[strength] = extension\n   \
    \     end\n      end\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength == 1 then\n    return class_name .. '.' ..\
    \ strongest_extension[1]\n  else\n    local _, strongest_extension = strongest_extension[1]\n\
    \    for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \        if strongest_extension_strength == strength then\n          return class_name\
    \ .. '.' .. strongest_extension\n        end\n      end\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkyz1wo3q.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkyz1wo3q.lua:54: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      -- The extension's name is all uppercase.\n\
    \      strongest_extension = extension\n      break\n    elseif strength > 0 then\n\
    \      -- The extension's name is all lowercase.\n      strongest_extension =\
    \ extension\n      break\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphexq56c8.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmphexq56c8.lua:38: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5jnnck9a.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp5jnnck9a.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extensions = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extensions, {extension,\
    \ strength})\n\t\tend\n\tend\n\ttable.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n\treturn class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo1nwqz7m.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpo1nwqz7m.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if #strongest_extension > 1 then\n    local max_strength = #strongest_extension\n\
    \    for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > max_strength then\n    \
    \    max_strength = strength\n        strongest_extension_strength = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension_strength\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0k1a33ed.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp0k1a33ed.lua:45: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkv3di72m.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkv3di72m.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7bvahv06.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp7bvahv06.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.concat(strongest,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7e26_96t.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp7e26_96t.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local cap_strength = #class_name:upper() - #class_name:lower()\n\
    \    local sm_strength = #class_name:lower() - #class_name:upper()\n    local\
    \ max_strength = cap_strength - sm_strength\n    local max_extension = extensions[max_strength]\n\
    \    return class_name .. '.' .. max_extension\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly fine for small strings.\
    \ But when I try it on a string with more than 30 characters, it returns nil.\n\
    <|/ c |>\n<| c |>\nI tested it on strings up to 30 characters and it works fine.\
    \ Can you post the string that you are trying to test?\n<|/ c |>\n<| c |>\nI tested\
    \ it on strings with more than 30 characters and it works fine. Can you post the\
    \ string that you are trying to test?\n<|/ c |>\n<| c |>\nI tested it on strings\
    \ with more than 30 characters and it works fine. Can you post the string that\
    \ you are trying to test?\n<|/ c |>\n<| c |>\nI tested it on strings with more\
    \ than 30 characters and it works fine. Can you post the string that you are trying\
    \ to test?\n<|/ c |>\n<| a dscore=2 |>\nI wrote a solution that uses Lua 5.1 string\
    \ manipulation functions to find the longest extension.\n<code>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvsqcxvlk.lua:23: unexpected symbol near '<'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_3hx801.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpw_3hx801.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = {}\n\tlocal cap_counter = 0\n\tlocal\
    \ sm_counter = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tcap_counter\
    \ = cap_counter + #extension:upper()\n\t\tsm_counter = sm_counter + #extension:lower()\n\
    \tend\n\tlocal cap_strength = cap_counter - sm_counter\n\tlocal strength = cap_strength\
    \ / #extensions\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap_counter\
    \ = 0\n\t\tlocal sm_counter = 0\n\t\tfor _, c in ipairs(extension:upper()) do\n\
    \t\t\tcap_counter = cap_counter + 1\n\t\tend\n\t\tfor _, c in ipairs(extension:lower())\
    \ do\n\t\t\tsm_counter = sm_counter + 1\n\t\tend\n\t\tlocal cap_strength = cap_counter\
    \ - sm_counter\n\t\tif cap_strength > strength then\n\t\t\tstrongest_extension\
    \ = extension\n\t\t\tstrength = cap_strength\n\t\tend\n\tend\n\treturn class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx9d63kg4.lua:29:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpx9d63kg4.lua:29: in function 'candidate'\\n\\t/tmp/tmpx9d63kg4.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local max_strength = -1\n    local max_extension\n    for _,\
    \ extension in ipairs(extensions) do\n        local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return string.gsub(class_name, \"^\"\
    \ .. class_name .. \".\", class_name .. \".\" .. max_extension)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgj5keba8.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpgj5keba8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return (string.upper(a) - string.upper(b)) or (string.lower(a) - string.lower(b))\
    \ end)\n    return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdeqs5r6s.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpdeqs5r6s.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extensions = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extensions, {extension,\
    \ strength})\n\t\tend\n\tend\n\ttable.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n\treturn class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpenebrvn9.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpenebrvn9.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpooo_98ba.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpooo_98ba.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyvarpouk.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpyvarpouk.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = nil\n  local max_strength = -1\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest = extension\n    end\n  end\n  return string.format(class_name\
    \ .. '.%s', strongest)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3m4hiv7w.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp3m4hiv7w.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ < b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp7xeocbi.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpp7xeocbi.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ lowercases = {}\n  for _, extension in ipairs(extensions) do\n    local capitals\
    \ = capitals or {}\n    local lowercases = lowercases or {}\n    for _, letter\
    \ in ipairs(extension) do\n      capitals[letter] = capitals[letter] or 0\n  \
    \    lowercases[letter] = lowercases[letter] or 0\n      capitals[letter] = capitals[letter]\
    \ + 1\n      lowercases[letter] = lowercases[letter] + 1\n    end\n    local cap\
    \ = #capitals\n    local sl = #lowercases\n    local strength = cap - sl\n   \
    \ if strength > 0 then\n      strongest_extension[extension] = strength\n    end\n\
    \  end\n  local max_strength = #strongest_extension\n  if max_strength == 1 then\n\
    \    return class_name .. '.' .. strongest_extension[1]\n  elseif max_strength\
    \ > 1 then\n    local max_strength_extension = strongest_extension[1]\n    for\
    \ _, extension in ipairs(strongest_extension) do\n      if extension > max_strength_extension\
    \ then\n        max_strength_extension = extension\n      end\n    end\n    return\
    \ class_name .. '.' .. max_strength_extension\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpessnuqbz.lua:23:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpessnuqbz.lua:23: in function 'candidate'\\n\\t/tmp/tmpessnuqbz.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = extensions[1]\n  for i = 2, #extensions do\n\
    \    local cap = string.upper(extensions[i])\n    local sm = string.lower(extensions[i])\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strength >\
    \ strongest.strength then\n        strongest.name = extensions[i]\n        strongest.strength\
    \ = strength\n      end\n    end\n  end\n  return class_name .. '.' .. strongest.name\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7guu53ql.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp7guu53ql.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strengths = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal extension_strength\
    \ = cap - sm\n\t\textension_strengths[extension_strength] = extension\n\tend\n\
    \tfor _, extension_strength in ipairs(extension_strengths) do\n\t\tif extension_strength\
    \ > strongest_extension_strength then\n\t\t\tstrongest_extension_strength = extension_strength\n\
    \t\t\tstrongest_extension = extension_strengths[extension_strength]\n\t\tend\n\
    \tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9zdnnay6.lua:23:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9zdnnay6.lua:38: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local max_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_dqh6wnv.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp_dqh6wnv.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength >= 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphl4gm_ng.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmphl4gm_ng.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = {}\n   local capitals = {}\n   local\
    \ lowercases = {}\n   for _, extension in ipairs(extensions) do\n      local capitals_count\
    \ = capitals[#capitals+1]\n      local lowercases_count = lowercases[#lowercases+1]\n\
    \      capitals[#capitals+1] = capitals_count\n      lowercases[#lowercases+1]\
    \ = lowercases_count\n      local capitals_index = #capitals\n      local lowercases_index\
    \ = #lowercases\n      for i = 1, #extension do\n         if extension:sub(i,\
    \ i) ~= string.upper(extension:sub(i, i)) then\n            capitals[capitals_index]\
    \ = capitals_count\n            lowercases[lowercases_index] = lowercases_count\n\
    \            capitals_index = capitals_index - 1\n            lowercases_index\
    \ = lowercases_index - 1\n         end\n      end\n      capitals[capitals_index]\
    \ = capitals_count\n      lowercases[lowercases_index] = lowercases_count\n  \
    \ end\n   local capitals_count = capitals[#capitals]\n   local lowercases_count\
    \ = lowercases[#lowercases]\n   if capitals_count > lowercases_count then\n  \
    \    strongest_extension = class_name..string.upper(extensions[#extensions])\n\
    \   elseif capitals_count < lowercases_count then\n      strongest_extension =\
    \ class_name..string.lower(extensions[#extensions])\n   else\n      strongest_extension\
    \ = class_name..extensions[#extensions]\n   end\n   return strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxanp4f0y.lua:40:\
    \ attempt to compare two nil values\\nstack traceback:\\n\\t/tmp/tmpxanp4f0y.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdh0_q3qr.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpdh0_q3qr.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_strength = cap - sm\n    if cap_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(strongest_extension) + 1) .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4_lfhsgu.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp4_lfhsgu.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local max_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpch0iy9uu.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpch0iy9uu.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = nil\n  for _,\
    \ extension in ipairs(extensions) do\n    local extension_strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if extension_strength\
    \ > max_strength then\n      max_strength = extension_strength\n      max_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(max_extension)) + max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2x18k5hr.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmp2x18k5hr.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  local sm_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_cap_extensions = #cap_extensions\n  local max_sm_extensions = #sm_extensions\n\
    \  local max_strength = -1\n  local max_extension\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap_extensions[cap][sm]\n\
    \    if strength > max_strength then\n      max_strength = strength\n      max_extension\
    \ = extension\n    end\n    local strength = sm_extensions[sm][cap]\n    if strength\
    \ > max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp521pr5h0.lua:45:\
    \ attempt to concatenate local 'max_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp521pr5h0.lua:51: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  local strength_sorted = {}\n  for _, extension\
    \ in pairs(strongest_extension) do\n    table.insert(strength_sorted, extension)\n\
    \  end\n  table.sort(strength_sorted)\n  return class_name .. '.' .. strength_sorted[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6m71mxmc.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp6m71mxmc.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extensions[strength] == nil then\n      strongest_extensions[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension = nil\n  for _, strength\
    \ in ipairs(strongest_extensions) do\n    if strongest_extension == nil then\n\
    \      strongest_extension = strongest_extensions[strength]\n    elseif strongest_extensions[strength]\
    \ < strongest_extension then\n      strongest_extension = strongest_extensions[strength]\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxve27t59.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpxve27t59.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqfswh2yz.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpqfswh2yz.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like your solution, however it fails for `'my_class', ['AA', 'Be',\
    \ 'CC']` which should return `'my_class.AA'` but instead returns `'my_class.Be'`\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses `string.gsub` which should be\
    \ faster than the solution using `string.sub`.\n<|/ c |>\n<| c |>\nThanks for\
    \ your solution, however I prefer my own solution as it uses less memory and less\
    \ loops. I did some benchmarking and found that your solution is about twice as\
    \ fast as mine.\n<|/ c |>\n<| c |>\nI added a benchmark test to my answer. Your\
    \ solution is about twice as fast as mine.\n<|/ c |>\n<| a dscore=1 |>\nI did\
    \ some benchmarking and found that your solution is about twice as fast as mine.\n\
    <code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpx0np7oyf.lua:30: unexpected symbol near '<'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      else\n        if strength > #strongest_extension\
    \ then\n          strongest_extension = extension\n        end\n      end\n  \
    \  end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9z8v4o16.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp9z8v4o16.lua:38: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local max_strength = -1\n    local max_extension = \"\"\n \
    \   for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > max_strength then\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. \".\" .. max_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3je44gii.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp3je44gii.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkjr746g1.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkjr746g1.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_diff = cap - sm\n\t\tif cap_diff > 0 then\n\t\t\tif strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n\t\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\t\tstrongest_extension = extension\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn string.sub(class_name, 1, string.len(class_name) - string.len(strongest_extension)\
    \ + 1) .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp44r826zh.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp44r826zh.lua:36: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq7ql3co2.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpq7ql3co2.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension)\n  return class_name .. '.'\
    \ .. table.concat(strongest_extension, '.')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptn06qtfc.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmptn06qtfc.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmbydpdey.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpmbydpdey.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      if strongest_extension[strength]\
    \ == nil then\n        strongest_extension[strength] = extension\n      else\n\
    \        local index = #strongest_extension\n        while index > 0 and strongest_extension[index\
    \ - 1] > strength do\n          index = index - 1\n        end\n        strongest_extension[index\
    \ + 1] = extension\n      end\n    end\n  end\n  local index = #strongest_extension\n\
    \  if index == 0 then\n    return class_name\n  else\n    return class_name ..\
    \ '.' .. strongest_extension[index]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7oy6w83_.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp7oy6w83_.lua:45: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      local max_strength\
    \ = -1\n      for _, extension in ipairs(strongest_extension) do\n         local\
    \ cap = string.upper(extension:sub(1, #extension))\n         local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n         local strength = cap - sm\n         if strength > max_strength\
    \ then\n            max_strength = strength\n         end\n      end\n      return\
    \ class_name .. '.' .. strongest_extension[max_strength + 1]\n   end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpok2_ocz1.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpok2_ocz1.lua:49: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension[strength] == nil\
    \ then\n        strongest_extension[strength] = extension\n      else\n      \
    \  local i = 1\n        while i <= strength do\n          local k = strength -\
    \ i\n          if strongest_extension[k] == nil then\n            strongest_extension[k]\
    \ = extension\n            break\n          else\n            i = i + 1\n    \
    \      end\n        end\n      end\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if strongest_extension_strength == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength_sorted\
    \ = {}\n    for _, strongest_extension_strength in ipairs(strongest_extension_strength)\
    \ do\n      table.insert(strongest_extension_strength_sorted, strongest_extension_strength)\n\
    \    end\n    table.sort(strongest_extension_strength_sorted)\n    return class_name\
    \ .. '.' .. strongest_extension_strength_sorted[1]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfmomzcs3.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpfmomzcs3.lua:55: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = \"\"\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - #max_extension) .. max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpts9_vrac.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpts9_vrac.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    cap_counter = cap_counter + cap\n    sm_counter = sm_counter + sm\n\
    \  end\n  local strength = cap_counter - sm_counter\n  if strength == 0 then\n\
    \    error(\"No extensions found\")\n  end\n  if cap_counter > sm_counter then\n\
    \    error(\"More extensions found than capitals\")\n  end\n  if cap_counter <\
    \ sm_counter then\n    error(\"More extensions found than lowercases\")\n  end\n\
    \  local cap_extensions = extensions:filter(function(extension)\n    return string.upper(extension:sub(1,\
    \ #extension)) == cap\n  end)\n  local sm_extensions = extensions:filter(function(extension)\n\
    \    return string.lower(extension:sub((#extension) + 1)) == sm\n  end)\n  if\
    \ #cap_extensions > #sm_extensions then\n    error(\"More extensions found than\
    \ capitals\")\n  end\n  if #cap_extensions < #sm_extensions then\n    error(\"\
    More extensions found than lowercases\")\n  end\n  for _, extension in ipairs(cap_extensions)\
    \ do\n    table.insert(strongest_extension, extension)\n  end\n  for _, extension\
    \ in ipairs(sm_extensions) do\n    table.insert(strongest_extension, extension)\n\
    \  end\n  table.sort(strongest_extension, function(a, b) return a:len() < b:len()\
    \ end)\n  return class_name .. \".\" .. strongest_extension[1]:sub(1, #strongest_extension[1])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppcarz3bp.lua:23:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmppcarz3bp.lua:61: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ lowercases = {}\n  for _, extension in ipairs(extensions) do\n    local capitals_count\
    \ = capitals[#capitals+1]\n    local lowercases_count = lowercases[#lowercases+1]\n\
    \    capitals[#capitals+1] = capitals_count\n    lowercases[#lowercases+1] = lowercases_count\n\
    \    capitals_count = 1\n    lowercases_count = 1\n    for _, c in ipairs(extension)\
    \ do\n      if capitals[c] >= capitals_count then\n        capitals[c] = capitals_count\n\
    \      elseif lowercases[c] >= lowercases_count then\n        lowercases[c] =\
    \ lowercases_count\n      else\n        capitals[c] = capitals_count\n       \
    \ lowercases[c] = lowercases_count\n      end\n    end\n  end\n  capitals[#capitals+1]\
    \ = capitals[#capitals]\n  lowercases[#lowercases+1] = lowercases[#lowercases]\n\
    \  capitals[#capitals+1] = capitals[#capitals]\n  lowercases[#lowercases+1] =\
    \ lowercases[#lowercases]\n  for _, extension in ipairs(extensions) do\n    for\
    \ _, c in ipairs(extension) do\n      if capitals[c] >= capitals[#capitals] then\n\
    \        capitals[c] = capitals[#capitals]\n      elseif lowercases[c] >= lowercases[#lowercases]\
    \ then\n        lowercases[c] = lowercases[#lowercases]\n      else\n        capitals[c]\
    \ = capitals[#capitals]\n        lowercases[c] = lowercases[#lowercases]\n   \
    \   end\n    end\n  end\n  capitals[#capitals+1] = capitals[#capitals]\n  lowercases[#lowercases+1]\
    \ = lowercases[#lowercases]\n  for _, extension in ipairs(extensions) do\n   \
    \ for _, c in ipairs(extension) do\n      if capitals[c] >= capitals[#capitals]\
    \ then\n        capitals[c] = capitals[#capitals]\n      elseif lowercases[c]\
    \ >= lowercases[#lowercases] then\n        lowercases[c] = lowercases[#lowercases]\n\
    \      else\n        capitals[c] = capitals[#capitals]\n        lowercases[c]\
    \ = lowercases[#lowercases]\n      end\n    end\n  end\n  capitals[#capitals+1]\
    \ = capitals[#capitals]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpgn7_4n_m.lua:84: 'end' expected (to close 'function' at\
    \ line 16) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn15gosip.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpn15gosip.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    for _, extension in ipairs(strongest) do\n      if extension > strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5agv7ims.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp5agv7ims.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeiu6lc66.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpeiu6lc66.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp4tgqu_g.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpp4tgqu_g.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ddq0qyy.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp7ddq0qyy.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    cap_extensions[#cap_extensions + 1] = extension:upper()\n  end\n  local\
    \ sm = #cap_extensions\n  local cap_extensions_sorted = cap_extensions:sort()\n\
    \  local cap_extensions_length = #cap_extensions\n  local cap_extensions_sorted\
    \ = cap_extensions_sorted:reverse()\n  local cap_extensions_length = cap_extensions_length\
    \ - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1, cap_extensions_length)\n\
    \  local cap_extensions_length = cap_extensions_length - 1\n  local cap_extensions_sorted\
    \ = cap_extensions_sorted:sub(1, cap_extensions_length)\n  local cap_extensions_length\
    \ = cap_extensions_length - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1,\
    \ cap_extensions_length)\n  local cap_extensions_length = cap_extensions_length\
    \ - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1, cap_extensions_length)\n\
    \  local cap_extensions_length = cap_extensions_length - 1\n  local cap_extensions_sorted\
    \ = cap_extensions_sorted:sub(1, cap_extensions_length)\n  local cap_extensions_length\
    \ = cap_extensions_length - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1,\
    \ cap_extensions_length)\n  local cap_extensions_length = cap_extensions_length\
    \ - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1, cap_extensions_length)\n\
    \  local cap_extensions_length = cap_extensions_length - 1\n  local cap_extensions_sorted\
    \ = cap_extensions_sorted:sub(1, cap_extensions_length)\n  local cap_extensions_length\
    \ = cap_extensions_length - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1,\
    \ cap_extensions_length)\n  local cap_extensions_length = cap_extensions_length\
    \ - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub(1, cap_extensions_length)\n\
    \  local cap_extensions_length = cap_extensions_length - 1\n  local cap_extensions_sorted\
    \ = cap_extensions_sorted:sub(1, cap_extensions_length)\n  local cap_extensions_length\
    \ = cap_extensions_length - 1\n  local cap_extensions_sorted = cap_extensions_sorted:sub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpcts20w1m.lua:49: function arguments expected near 'lu'\\\
    n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal strongest_extension_strength_counter = 0\n\tfor _, extension in\
    \ ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1, #extension))\n\t\t\
    local strength = cap - sm\n\t\tif strength > strongest_extension_strength then\n\
    \t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension_strength_counter\
    \ = 1\n\t\telseif strength == strongest_extension_strength then\n\t\t\tstrongest_extension_strength_counter\
    \ = strongest_extension_strength_counter + 1\n\t\tend\n\tend\n\tif strongest_extension_strength_counter\
    \ > 1 then\n\t\tstrongest_extension = class_name .. '.' .. extensions[1]\n\telse\n\
    \t\tstrongest_extension = class_name\n\tend\n\treturn strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg1jbc7v9.lua:23:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpg1jbc7v9.lua:42: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ - tonumber(a) - tonumber(b) end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE',\
    \ 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyhmaa2h1.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpyhmaa2h1.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local cap_extensions = {}\n    local sml_extensions = {}\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sml = string.lower(extension:sub(1, #extension))\n\
    \        cap_extensions[cap] = cap_extensions[cap] or {}\n        cap_extensions[cap][sml]\
    \ = -1\n        sml_extensions[sml] = sml_extensions[sml] or {}\n        sml_extensions[sml][cap]\
    \ = -1\n    end\n    local max_strength = -1\n    local max_extension\n    for\
    \ cap, extensions in pairs(cap_extensions) do\n        for sml, strength in pairs(extensions)\
    \ do\n            if strength > max_strength then\n                max_strength\
    \ = strength\n                max_extension = cap .. '.' .. sml\n            end\n\
    \        end\n    end\n    return max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj6vmp7hh.lua:43:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpj6vmp7hh.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - #strongest_extension) + strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzq71j4tg.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpzq71j4tg.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = nil\n   local max_strength = -1\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > max_strength then\n    \
    \     max_strength = strength\n         strongest_extension = extension\n    \
    \  end\n   end\n   return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkms850b1.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkms850b1.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = nil\n   local strongest_extension_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > strongest_extension_strength\
    \ then\n         strongest_extension_strength = strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr93o1ob9.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpr93o1ob9.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = \"\"\n  for\
    \ _, extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))..max_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx5vqibnz.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpx5vqibnz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extensions = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extensions, {extension,\
    \ strength})\n\t\tend\n\tend\n\ttable.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n\treturn class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg52l2n7a.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpg52l2n7a.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa9uwl81b.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpa9uwl81b.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    for _, extension in ipairs(strongest) do\n      if extension > strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvby1kz_1.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpvby1kz_1.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkx18273w.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkx18273w.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdscfa391.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpdscfa391.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = nil\n  local strength = -1\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local cap_diff\
    \ = cap - sm\n    if cap_diff > strength then\n      strength = cap_diff\n   \
    \   strongest = extension\n    end\n  end\n  return class_name .. '.' .. strongest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpik1duv0h.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpik1duv0h.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strongest[strength] == nil then\n      strongest[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension = strongest[1]\n  if\
    \ #strongest > 1 then\n    for _, extension in ipairs(strongest) do\n      if\
    \ extension > strongest_extension then\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkd1zjkop.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpkd1zjkop.lua:40: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplt2yw_4o.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmplt2yw_4o.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp7lec96d.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpp7lec96d.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp895ynrhl.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp895ynrhl.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph897dfr9.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmph897dfr9.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal max_strength = -1\n\tlocal max_extension\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n\t\tif strength >\
    \ max_strength then\n\t\t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\
    \t\tend\n\tend\n\treturn string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))..max_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdxlbbum6.lua:20:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpdxlbbum6.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n   local strongest_extension = nil\n   local max_strength = -1\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > max_strength\
    \ then\n         max_strength = strength\n         strongest_extension = extension\n\
    \      end\n   end\n   return class_name .. '.' .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4sq3mcxo.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp4sq3mcxo.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ lowercases = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  local capitals_count\
    \ = #capitals\n  local lowercases_count = #lowercases\n  local strength = capitals_count\
    \ - lowercases_count\n  if strength == 0 then\n    return class_name\n  elseif\
    \ strength == capitals_count then\n    return class_name .. '.' .. capitals[#capitals]\n\
    \  elseif strength == lowercases_count then\n    return class_name .. '.' .. lowercases[#lowercases]\n\
    \  else\n    local index = strength\n    while index > 0 do\n      local current_index\
    \ = index - 1\n      if capitals[current_index] == lowercases[current_index] then\n\
    \        index = current_index\n      else\n        break\n      end\n    end\n\
    \    return class_name .. '.' .. capitals[current_index]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd62j4aw6.lua:50:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi\"\\nstack traceback:\\n\\\
    t/tmp/tmpd62j4aw6.lua:50: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ smalls = {}\n  for _, extension in ipairs(extensions) do\n    local capitals_count\
    \ = #extension:gsub(\"^([A-Z])\", \"\")\n    local smalls_count = #extension:gsub(\"\
    ^([a-z])\", \"\")\n    capitals[#capitals + 1] = capitals_count\n    smalls[#smalls\
    \ + 1] = smalls_count\n  end\n  local max_capitals = #capitals\n  local max_smalls\
    \ = #smalls\n  local max_strength = -1\n  local max_extension = \"\"\n  for _,\
    \ extension in ipairs(extensions) do\n    local capitals_count = #extension:gsub(\"\
    ^([A-Z])\", \"\")\n    local smalls_count = #extension:gsub(\"^([a-z])\", \"\"\
    )\n    local strength = capitals_count - smalls_count\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      max_extension = extension\n    end\n\
    \  end\n  return class_name .. \".\" .. max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp332_meh3.lua:45:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.tEN\"\\nstack traceback:\\\
    n\\t/tmp/tmp332_meh3.lua:45: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      table.insert(strongest_extensions, extension)\n\
    \    else\n      if #strongest_extensions > 0 then\n        if strongest_extensions[#strongest_extensions]\
    \ == strength then\n          table.insert(strongest_extensions, extension)\n\
    \        else\n          table.insert(strongest_extensions, strength, extension)\n\
    \        end\n      else\n        table.insert(strongest_extensions, strength,\
    \ extension)\n      end\n    end\n  end\n  local strongest_extension = nil\n \
    \ if #strongest_extensions > 0 then\n    strongest_extension = strongest_extensions[#strongest_extensions]\n\
    \  end\n  return class_name .. '.' .. table.concat(extensions, '.')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb752glb4.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpb752glb4.lua:46: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local max_strength = -1\n \
    \ for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuj2us8zp.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpuj2us8zp.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = -1\n  local max_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = #extension:upper()\n   \
    \ local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3wmksolc.lua:34:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.tEN\"\\nstack traceback:\\\
    n\\t/tmp/tmp3wmksolc.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpylt7bqbc.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpylt7bqbc.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = {}\n  local\
    \ lowercases = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  local capitals_count\
    \ = #capitals\n  local lowercases_count = #lowercases\n  local strength = capitals_count\
    \ - lowercases_count\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local lc = string.lower(extension:sub(1,\
    \ #extension))\n    local cap_diff = capitals[capitals_count] - capitals[capitals_count\
    \ - 1]\n    local lc_diff = lowercases[lowercases_count] - lowercases[lowercases_count\
    \ - 1]\n    if cap_diff > lc_diff then\n      capitals[capitals_count] = cap\n\
    \      capitals[capitals_count - 1] = cap\n      capitals_count--\n    elseif\
    \ lc_diff > cap_diff then\n      lowercases[lowercases_count] = lc\n      lowercases[lowercases_count\
    \ - 1] = lc\n      lowercases_count--\n    elseif cap_diff == lc_diff then\n \
    \     capitals[capitals_count] = cap\n      capitals_count--\n    end\n  end\n\
    \  if capitals_count > 0 then\n    capitals[capitals_count] = nil\n  end\n  if\
    \ lowercases_count > 0 then\n    lowercases[lowercases_count] = nil\n  end\n \
    \ local cap_strength = capitals_count - lowercases_count\n  if cap_strength >\
    \ 0 then\n    strongest_extension[#strongest_extension + 1] = class_name .. '.'\
    \ .. capitals[cap_strength]\n  end\n  if lowercases_count > 0 then\n    strongest_extension[#strongest_extension\
    \ + 1] = class_name .. '.' .. lowercases[lowercases_count]\n  end\n  if cap_strength\
    \ == 0 then\n    strongest_extension[#strongest_extension + 1] = class_name\n\
    \  end\n  if lowercases_count == 0 then\n    strongest_extension[#strongest_extension\
    \ + 1] = class_name\n  end\n  return table.concat(strongest_extension, '.')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpcwtpoeed.lua:36: '=' expected near 'elseif'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_extensions = {}\n  local sml_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sml = string.lower(extension:sub(1, #extension))\n \
    \   cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sml]\
    \ = -1\n    sml_extensions[sml] = sml_extensions[sml] or {}\n    sml_extensions[sml][cap]\
    \ = -1\n  end\n  local max_strength = -1\n  local max_extension\n  for cap, extensions\
    \ in pairs(cap_extensions) do\n    for sml, strength in pairs(extensions) do\n\
    \      if strength > max_strength then\n        max_strength = strength\n    \
    \    max_extension = cap .. '.' .. sml\n      end\n    end\n  end\n  return max_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5x6u4n_p.lua:43:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5x6u4n_p.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  local max_strength = #strongest_extension\n \
    \ if max_strength == 1 then\n    return class_name .. '.' .. strongest_extension[1]\n\
    \  else\n    local max_strength_extensions = #strongest_extension\n    for _,\
    \ extension in ipairs(extensions) do\n      if max_strength_extensions == 1 then\n\
    \        return class_name .. '.' .. strongest_extension[1]\n      else\n    \
    \    if max_strength > 1 then\n          local max_strength_extension = #strongest_extension\n\
    \          for _, extension in ipairs(extensions) do\n            if max_strength_extension\
    \ == max_strength then\n              return class_name .. '.' .. strongest_extension[1]\n\
    \            else\n              max_strength_extension = max_strength_extension\
    \ - 1\n            end\n          end\n        end\n      end\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpid3xiilk.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpid3xiilk.lua:53: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpst8pewcl.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpst8pewcl.lua:37: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = nil\n\tlocal max_strength = -1\n\t\
    local max_extension = nil\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal\
    \ cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\
    \t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\
    \treturn string.sub(class_name, 1, #class_name-1) .. '.' .. max_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprq7fosdg.lua:23:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmprq7fosdg.lua:35: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = string.gsub(class_name,\
    \ '[A-Z]', '')\n  local lowercases = string.gsub(class_name, '[a-z]', '')\n  local\
    \ capitals_count = string.len(capitals)\n  local lowercases_count = string.len(lowercases)\n\
    \  local strength = capitals_count - lowercases_count\n  for _, extension in ipairs(extensions)\
    \ do\n    local lowercase_count = string.gsub(extension, '[a-z]', '')\n    local\
    \ lowercase_count = string.len(lowercase_count)\n    local lowercase_fraction\
    \ = lowercase_count / lowercases_count\n    local lowercase_fraction = math.floor(lowercase_fraction\
    \ * 100)\n    if lowercase_fraction > strength then\n      strongest_extension\
    \ = extension\n      strength = lowercase_fraction\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuxf407ix.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.123NoooneB321\"\\nstack\
    \ traceback:\\n\\t/tmp/tmpuxf407ix.lua:41: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  local capitals = string.gsub(class_name,\
    \ '[A-Z]', '') -- CAP\n  local smalls = string.gsub(class_name, '[a-z]', '') --\
    \ SM\n  local capitals_count = #capitals\n  local smalls_count = #smalls\n  local\
    \ capitals_sm = capitals_count - smalls_count\n  local smalls_sm = smalls_count\
    \ - capitals_count\n  local capitals_cap = capitals_count * capitals_count\n \
    \ local smalls_cap = smalls_count * smalls_count\n  local capitals_sm = capitals_sm\
    \ * capitals_sm\n  local smalls_sm = smalls_sm * smalls_sm\n  local capitals_cap\
    \ = capitals_cap * capitals_cap\n  local smalls_cap = smalls_cap * smalls_cap\n\
    \  local capitals_sm = capitals_sm * capitals_sm\n  local smalls_sm = smalls_sm\
    \ * smalls_sm\n  local capitals_cap = capitals_cap * capitals_cap\n  local smalls_cap\
    \ = smalls_cap * smalls_cap\n  local capitals_sm = capitals_sm * capitals_sm\n\
    \  local smalls_sm = smalls_sm * smalls_sm\n  local capitals_cap = capitals_cap\
    \ * capitals_cap\n  local smalls_cap = smalls_cap * smalls_cap\n  local capitals_sm\
    \ = capitals_sm * capitals_sm\n  local smalls_sm = smalls_sm * smalls_sm\n  local\
    \ capitals_cap = capitals_cap * capitals_cap\n  local smalls_cap = smalls_cap\
    \ * smalls_cap\n  local capitals_sm = capitals_sm * capitals_sm\n  local smalls_sm\
    \ = smalls_sm * smalls_sm\n  local capitals_cap = capitals_cap * capitals_cap\n\
    \  local smalls_cap = smalls_cap * smalls_cap\n  local capitals_sm = capitals_sm\
    \ * capitals_sm\n  local smalls_sm = smalls_sm * smalls_sm\n  local capitals_cap\
    \ = capitals_cap * capitals_cap\n  local smalls_cap = smalls_cap * smalls_cap\n\
    \  local capitals_sm = capitals_sm * capitals_sm\n  local smalls_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpe7z7r0gk.lua:67: 'end' expected (to close 'function' at\
    \ line 16) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_strength = cap - sm\n    if cap_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(strongest_extension)) + strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvjy01fn0.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpvjy01fn0.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension)\n  return class_name .. '.'\
    \ .. table.concat(strongest_extension, '.')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9qgkt6w.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpz9qgkt6w.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = {}\n\tlocal cap_counter = 0\n\tlocal\
    \ sm_counter = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap =\
    \ string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tcap_counter = cap_counter + cap:len()\n\t\tsm_counter = sm_counter\
    \ + sm:len()\n\tend\n\tlocal cap_strength = cap_counter - sm_counter\n\tlocal\
    \ strongest_extension_strength = cap_strength\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tcap_strength = cap_strength\
    \ - cap:len()\n\t\tsm_strength = sm_strength - sm:len()\n\t\tif cap_strength >\
    \ strongest_extension_strength then\n\t\t\tstrongest_extension_strength = cap_strength\n\
    \t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnonhiuh_.lua:32:\
    \ attempt to perform arithmetic on global 'sm_strength' (a nil value)\\nstack\
    \ traceback:\\n\\t/tmp/tmpnonhiuh_.lua:44: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      error(\"The extension '\" .. extension\
    \ .. \"' is not valid.\")\n    end\n    if strongest_extensions[strength] == nil\
    \ then\n      strongest_extensions[strength] = extension\n    else\n      if strongest_extensions[strength]\
    \ > extension then\n        strongest_extensions[strength] = extension\n     \
    \ end\n    end\n  end\n  local strongest_extension = nil\n  local max_strength\
    \ = -1\n  for _, strength in ipairs(strongest_extensions) do\n    if strength\
    \ > max_strength then\n      max_strength = strength\n      strongest_extension\
    \ = strongest_extensions[strength]\n    end\n  end\n  return class_name .. \"\
    .\" .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4xpn0x_a.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp4xpn0x_a.lua:47: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_strength, sm_strength = 1, 1\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    cap_strength\
    \ = cap_strength * cap\n    sm_strength = sm_strength * sm\n  end\n  return class_name\
    \ .. '.' .. extensions[math.floor(cap_strength - sm_strength)]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprawbb3ln.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmprawbb3ln.lua:30: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf2jjc34o.lua:34:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: \"Watashi.tEN\"\\nstack traceback:\\\
    n\\t/tmp/tmpf2jjc34o.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = {}\n\tlocal cap_counter = 0\n\tlocal\
    \ sm_counter = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap_counter\
    \ = cap_counter + #extension:upper()\n\t\tlocal sm_counter = sm_counter + #extension:lower()\n\
    \tend\n\tlocal cap_strength = cap_counter - sm_counter\n\tlocal strongest_extension_strength\
    \ = cap_strength\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap_counter\
    \ = cap_counter + #extension:upper()\n\t\tlocal sm_counter = sm_counter + #extension:lower()\n\
    \t\tlocal cap_strength = cap_counter - sm_counter\n\t\tif cap_strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = cap_strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ntoi9d5.lua:35:\
    \ attempt to concatenate local 'strongest_extension' (a table value)\\nstack traceback:\\\
    n\\t/tmp/tmp6ntoi9d5.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5sg0g8ll.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp5sg0g8ll.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local extension_strength =\
    \ nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if extension_strength\
    \ == nil then\n        extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif extension_strength > cap_diff then\n        extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppt5p71c6.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmppt5p71c6.lua:39: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      table.insert(strongest_extensions, extension)\n\
    \    else\n      if #strongest_extensions > 0 then\n        if strongest_extensions[#strongest_extensions]\
    \ == strength then\n          table.insert(strongest_extensions, extension)\n\
    \        else\n          table.insert(strongest_extensions, strength, extension)\n\
    \        end\n      else\n        table.insert(strongest_extensions, strength,\
    \ extension)\n      end\n    end\n  end\n  local strongest_extension = nil\n \
    \ local strongest_strength = -1\n  for _, strength, extension in ipairs(strongest_extensions)\
    \ do\n    if strength > strongest_strength then\n      strongest_extension = extension\n\
    \      strongest_strength = strength\n    end\n  end\n  return class_name .. '.'\
    \ .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp273euzuj.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp273euzuj.lua:50: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvmcpk03v.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpvmcpk03v.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptmo95qul.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmptmo95qul.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local cap_counter = 0\n  local sml_counter = 0\n  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sml\
    \ = string.lower(extension:sub(1, #extension))\n    local strength = cap - sml\n\
    \    if strength > max_strength then\n      max_strength = strength\n      max_extension\
    \ = extension\n    end\n    if cap > cap_counter then\n      cap_counter = cap\n\
    \    end\n    if sml > sml_counter then\n      sml_counter = sml\n    end\n  end\n\
    \  return class_name .. \".\" .. max_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmvmqaxu.lua:24:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmphmvmqaxu.lua:42: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest[strength] == nil then\n   \
    \     strongest[strength] = extension\n      else\n        local index = #strongest\n\
    \        while index > 0 and strongest[index] == nil do\n          index = index\
    \ - 1\n        end\n        strongest[index] = extension\n      end\n    end\n\
    \  end\n  local index = #strongest\n  while index > 0 and strongest[index] ==\
    \ nil do\n    index = index - 1\n  end\n  return class_name .. '.' .. strongest[index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz56t2ex2.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpz56t2ex2.lua:44: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local max_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptve0o9nl.lua:22:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmptve0o9nl.lua:34: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \      if #strongest_extension > 1 then\n        local first_extension = strongest_extension[1]\n\
    \        if strength == first_extension:len() then\n          table.insert(strongest_extension,\
    \ first_extension)\n        end\n      end\n    end\n  end\n  if #strongest_extension\
    \ == 1 then\n    return class_name .. '.' .. strongest_extension[1]\n  end\n \
    \ return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN',\
    \ 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp831_kj52.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp831_kj52.lua:41: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1fk33ps1.lua:21:\
    \ attempt to perform arithmetic on local 'cap' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmp1fk33ps1.lua:33: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
