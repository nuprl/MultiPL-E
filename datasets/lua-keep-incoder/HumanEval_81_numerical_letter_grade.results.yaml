name: HumanEval_81_numerical_letter_grade
language: lua
results:
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_sorted_length = #grades_sorted\n    local\
    \ grades_sorted_last = grades_sorted[grades_sorted_length-1]\n    local grades_sorted_first\
    \ = grades_sorted[1]\n    local grades_sorted_first_index = #grades_sorted - 1\n\
    \    local grades_sorted_last_index = grades_sorted_length - 1\n    local grades_sorted_first_index\
    \ = grades_sorted_first_index - 1\n    local grades_sorted_last_index = grades_sorted_last_index\
    \ - 1\n    local grades_sorted_first_index_previous = grades_sorted_first_index\
    \ - 1\n    local grades_sorted_last_index_previous = grades_sorted_last_index\
    \ - 1\n    local grades_sorted_first_index_next = grades_sorted_first_index +\
    \ 1\n    local grades_sorted_last_index_next = grades_sorted_last_index + 1\n\
    \    local grades_sorted_first_index_next_previous = grades_sorted_first_index\
    \ + 1\n    local grades_sorted_last_index_next_previous = grades_sorted_last_index\
    \ + 1\n    local grades_sorted_first_index_next_next_previous = grades_sorted_first_index\
    \ + 1\n    local grades_sorted_last_index_next_next_previous = grades_sorted_last_index\
    \ + 1\n    local grades_sorted_first_index_next_next_next_previous = grades_sorted_first_index\
    \ + 1\n    local grades_sorted_last_index_next_next_next_previous = grades_sorted_last_index\
    \ + 1\n    local grades_sorted_first_index_next_next_next_next_previous = grades_sorted_first_index\
    \ + 1\n    local grades_sorted_last_index_next_next_next_next_previous = grades_sorted_last_index\
    \ + 1\n    local grades_sorted_first_index_next_next_next_next_next_previous =\
    \ grades_sorted_first_index + 1\n    local grades_sorted_last_index_next_next_next_next_next_previous\
    \ = grades_sorted_last_index + 1\n    local grades_sorted_first_index_next_next_next_next_next_next_previous\
    \ = grades_sorted_first_index + 1\n    local grades_sorted_last_index_next_next_next_next_next_next_previous\
    \ = grades_sorted_last_index + 1\n    local grades_sorted_first_index_next_next_next_next_next_next_next_previous\
    \ = grades_sorted_first_index + 1\n    local grades_sorted_last_index_next_next_next_next_next_next_next_previous\
    \ = grades_sorted_last_index + 1\n    local grades_sorted_first_index_next_next_next_next_next_next_next_previous\
    \ = grades_sorted_first_index + 1\n    local grades_sorted_last_index_next_next_next_next_next_next_next_previous\
    \ = grades_sorted_last_index + 1\n    local grades_sorted_first_index_next_next_next_next_next_next_next_next_previous\
    \ = grades_sorted_first_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqyhmubx9.lua:64: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_length\
    \ = #grades\n  local grades_sum = 0\n  local grades_average = 0\n  local grades_average_index\
    \ = 0\n  local grades_average_sum = 0\n  local grades_average_average = 0\n  local\
    \ grades_average_average_index = 0\n  local grades_average_average_sum = 0\n \
    \ local grades_average_average_average = 0\n  local grades_average_average_average_index\
    \ = 0\n  local grades_average_average_average_sum = 0\n  local grades_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_index = 0\n  local grades_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average = 0\n  local grades_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_sum = 0\n  local\
    \ grades_average_average_average_average_average_average = 0\n  local grades_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_sum = 0\n\
    \  local grades_average_average_average_average_average_average_average = 0\n\
    \  local grades_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_index\
    \ = 0\n  local grades_average_average_average_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyjneo4jo.lua:76: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8hvxa4b7.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_copy\
    \ = grades\n  local grades_copy2 = {}\n  for i = 1, #grades_copy do\n    grades_copy2[i]\
    \ = grades_copy[i]\n  end\n  local grades_copy3 = {}\n  for i = 1, #grades_copy2\
    \ do\n    grades_copy3[i] = grades_copy2[i]\n  end\n  local grades_copy4 = {}\n\
    \  for i = 1, #grades_copy3 do\n    grades_copy4[i] = grades_copy3[i]\n  end\n\
    \  local grades_copy5 = {}\n  for i = 1, #grades_copy4 do\n    grades_copy5[i]\
    \ = grades_copy4[i]\n  end\n  local grades_copy6 = {}\n  for i = 1, #grades_copy5\
    \ do\n    grades_copy6[i] = grades_copy5[i]\n  end\n  local grades_copy7 = {}\n\
    \  for i = 1, #grades_copy6 do\n    grades_copy7[i] = grades_copy6[i]\n  end\n\
    \  local grades_copy8 = {}\n  for i = 1, #grades_copy7 do\n    grades_copy8[i]\
    \ = grades_copy7[i]\n  end\n  local grades_copy9 = {}\n  for i = 1, #grades_copy8\
    \ do\n    grades_copy9[i] = grades_copy8[i]\n  end\n  local grades_copy10 = {}\n\
    \  for i = 1, #grades_copy9 do\n    grades_copy10[i] = grades_copy9[i]\n  end\n\
    \  local grades_copy11 = {}\n  for i = 1, #grades_copy10 do\n    grades_copy11[i]\
    \ = grades_copy10[i]\n  end\n  local grades_copy12 = {}\n  for i = 1, #grades_copy11\
    \ do\n    grades_copy12[i] = grades_copy11[i]\n  end\n  local grades_copy13 =\
    \ {}\n  for i = 1, #grades_copy12 do\n    grades_copy13[i] = grades_copy12[i]\n\
    \  end\n  local grades_copy14 = {}\n  for i = 1, #grades_copy13 do\n    grades_copy14[i]\
    \ = grades_copy13[i]\n  end\n  local grades_copy15 = {}\n  for i = 1, #grades_copy14\
    \ do\n    grades_copy15[i] = grades_copy14[i]\n  end\n  local grades_copy16 =\
    \ {}\n  for i = 1, #grades_copy15 do\n    grades_copy16[i] = grades_copy15[i]\n\
    \  end\n  local grades_copy17 = {}\n  for i = 1, #grades_copy16 do\n    grades_copy17[i]\
    \ = grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp3950hbt.lua:99: 'end' expected (to close 'for' at line 85)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_copy\
    \ = grades\n    local grades_copy2 = {}\n    local grades_copy3 = {}\n    local\
    \ grades_copy4 = {}\n    local grades_copy5 = {}\n    local grades_copy6 = {}\n\
    \    local grades_copy7 = {}\n    local grades_copy8 = {}\n    local grades_copy9\
    \ = {}\n    local grades_copy10 = {}\n    local grades_copy11 = {}\n    local\
    \ grades_copy12 = {}\n    local grades_copy13 = {}\n    local grades_copy14 =\
    \ {}\n    local grades_copy15 = {}\n    local grades_copy16 = {}\n    local grades_copy17\
    \ = {}\n    local grades_copy18 = {}\n    local grades_copy19 = {}\n    local\
    \ grades_copy20 = {}\n    local grades_copy21 = {}\n    local grades_copy22 =\
    \ {}\n    local grades_copy23 = {}\n    local grades_copy24 = {}\n    local grades_copy25\
    \ = {}\n    local grades_copy26 = {}\n    local grades_copy27 = {}\n    local\
    \ grades_copy28 = {}\n    local grades_copy29 = {}\n    local grades_copy30 =\
    \ {}\n    local grades_copy31 = {}\n    local grades_copy32 = {}\n    local grades_copy33\
    \ = {}\n    local grades_copy34 = {}\n    local grades_copy35 = {}\n    local\
    \ grades_copy36 = {}\n    local grades_copy37 = {}\n    local grades_copy38 =\
    \ {}\n    local grades_copy39 = {}\n    local grades_copy40 = {}\n    local grades_copy41\
    \ = {}\n    local grades_copy42 = {}\n    local grades_copy43 = {}\n    local\
    \ grades_copy44 = {}\n    local grades_copy45 = {}\n    local grades_copy46 =\
    \ {}\n    local grades_copy47 = {}\n    local grades_copy48 = {}\n    local grades_copy49\
    \ = {}\n    local grades_copy50 = {}\n    local grades_copy51 = {}\n    local\
    \ grades_copy52 = {}\n    local grades_copy53 = {}\n    local grades_copy54 =\
    \ {}\n    local grades_copy55 = {}\n    local grades_copy56 = {}\n    local grades_copy57\
    \ = {}\n    local grades_copy58 = {}\n    local grades_copy59 = {}\n    local\
    \ grades_copy60 = {}\n    local grades_copy61 = {}\n    local grades_copy62 =\
    \ {}\n    local grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfhc79evv.lua:98: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted[grades_length / 2]\n  local grades_average_index = grades_length\
    \ - 1\n  local grades_average_index2 = grades_length - 2\n  local grades_average_index3\
    \ = grades_length - 3\n  local grades_average_index4 = grades_length - 4\n  local\
    \ grades_average_index5 = grades_length - 5\n  local grades_average_index6 = grades_length\
    \ - 6\n  local grades_average_index7 = grades_length - 7\n  local grades_average_index8\
    \ = grades_length - 8\n  local grades_average_index9 = grades_length - 9\n  local\
    \ grades_average_index10 = grades_length - 10\n  local grades_average_index11\
    \ = grades_length - 11\n  local grades_average_index12 = grades_length - 12\n\
    \  local grades_average_index13 = grades_length - 13\n  local grades_average_index14\
    \ = grades_length - 14\n  local grades_average_index15 = grades_length - 15\n\
    \  local grades_average_index16 = grades_length - 16\n  local grades_average_index17\
    \ = grades_length - 17\n  local grades_average_index18 = grades_length - 18\n\
    \  local grades_average_index19 = grades_length - 19\n  local grades_average_index20\
    \ = grades_length - 20\n  local grades_average_index21 = grades_length - 21\n\
    \  local grades_average_index22 = grades_length - 22\n  local grades_average_index23\
    \ = grades_length - 23\n  local grades_average_index24 = grades_length - 24\n\
    \  local grades_average_index25 = grades_length - 25\n  local grades_average_index26\
    \ = grades_length - 26\n  local grades_average_index27 = grades_length - 27\n\
    \  local grades_average_index28 = grades_length - 28\n  local grades_average_index29\
    \ = grades_length - 29\n  local grades_average_index30 = grades_length - 30\n\
    \  local grades_average_index31 = grades_length - 31\n  local grades_average_index32\
    \ = grades_length - 32\n  local grades_average_index33 = grades_length - 33\n\
    \  local grades_average_index34 = grades_length - 34\n  local grades_average_index35\
    \ = grades_length - 35\n  local grades_average_index36 = grades_length - 36\n\
    \  local grades_average_index37 = grades_length - 37\n  local grades_average_index38\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpirxsl3pn.lua:76: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum + grades[i]\n  end\n\
    \  local grades_avg = grades_sum / #grades\n  local grades_diff = 0\n  for i =\
    \ 1, #grades do\n    grades_diff = grades_diff + (grades[i] - grades_avg)\n  end\n\
    \  local grades_diff_avg = grades_diff / #grades\n  local grades_diff_max = grades_diff\
    \ / #grades\n  local grades_diff_min = grades_diff / #grades\n  local grades_diff_max_avg\
    \ = grades_diff_max / #grades\n  local grades_diff_min_avg = grades_diff_min /\
    \ #grades\n  local grades_diff_max_min_avg = grades_diff_max_avg / #grades\n \
    \ local grades_diff_min_max_avg = grades_diff_min_avg / #grades\n  local grades_diff_min_max_min_avg\
    \ = grades_diff_min_max_avg / #grades\n  local grades_diff_min_max_min_max_avg\
    \ = grades_diff_min_max_min_avg / #grades\n  local grades_diff_min_max_min_max_min_avg\
    \ = grades_diff_min_max_min_max_avg / #grades\n  local grades_diff_min_max_min_max_min_max_avg\
    \ = grades_diff_min_max_min_max_min_avg / #grades\n  local grades_diff_min_max_min_max_min_max_min_avg\
    \ = grades_diff_min_max_min_max_min_max_avg / #grades\n  local grades_diff_min_max_min_max_min_max_min_max_avg\
    \ = grades_diff_min_max_min_max_min_max_min_max_avg / #grades\n  local grades_diff_min_max_min_max_min_max_min_max_min_avg\
    \ = grades_diff_min_max_min_max_min_max_min_max_avg / #grades\n  local grades_diff_min_max_min_max_min_max_min_max_min_max_avg\
    \ = grades_diff_min_max_min_max_min_max_min_max_min_avg / #grades\n  local grades_diff_min_max_min_max_min_max_min_max_min_max_min_avg\
    \ = grades_diff_min_max_min_max_min_max_min_max_min_max_avg / #grades\n  local\
    \ grades_diff_min_max_min_max_min_max_min_max_min_max_min_avg = grades_diff_min_max_min_max_min_max_min_max_min_max_min_avg\
    \ / #grades\n  local grades_diff_min_max_min_max_min_max_min_max_min_max_min_max_avg\
    \ = grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3pwordq8.lua:62: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average_string = string.format(\"\
    %.2f\", grades_average)\n  local grades_average_string_length = string.len(grades_average_string)\n\
    \  local grades_average_string_length = grades_average_string_length - 1\n  local\
    \ grades_average_string_length = grades_average_string_length + 1\n  local grades_average_string_length\
    \ = grades_average_string_length + 1\n  local grades_average_string_length = grades_average_string_length\
    \ + 1\n  local grades_average_string_length = grades_average_string_length + 1\n\
    \  local grades_average_string_length = grades_average_string_length + 1\n  local\
    \ grades_average_string_length = grades_average_string_length + 1\n  local grades_average_string_length\
    \ = grades_average_string_length + 1\n  local grades_average_string_length = grades_average_string_length\
    \ + 1\n  local grades_average_string_length = grades_average_string_length + 1\n\
    \  local grades_average_string_length = grades_average_string_length + 1\n  local\
    \ grades_average_string_length = grades_average_string_length + 1\n  local grades_average_string_length\
    \ = grades_average_string_length + 1\n  local grades_average_string_length = grades_average_string_length\
    \ + 1\n  local grades_average_string_length = grades_average_string_length + 1\n\
    \  local grades_average_string_length = grades_average_string_length + 1\n  local\
    \ grades_average_string_length = grades_average_string_length + 1\n  local grades_average_string_length\
    \ = grades_average_string_length + 1\n  local grades_average_string_length = grades_average_string_length\
    \ + 1\n  local grades_average_string_length = grades_average_string_length + 1\n\
    \  local grades_average_string_length = grades_average_string_length + 1\n  local\
    \ grades_average_string_length = grades_average_string_length + 1\n  local grades_average_string_length\
    \ = grades_average_string_length + 1\n  local grades_average_string_length = grades_average_string_length\
    \ + 1\n  local grades_average_string_length = grades_average_string_length + 1\n\
    \  local grades_average_string_length = grades_average_string_length + 1\n  local\
    \ grades_average_string_length = grades_average_string_length + 1\n  local grades_average_string_length\
    \ = grades_average_string_length + 1\n  local grades_average_string_length = grades_average_string_length\
    \ + 1\n  local grades_average_string_length = grades_average_string_length + 1\n\
    \  local grades_average_string_length = grades_average_string_length + 1\n  local\
    \ grades_average_string_length = grades_average_string_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpok4fkqya.lua:72: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_count = grades_count + 1\n        grades_sum = grades_sum + grade\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = nil\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n   \
    \ elseif grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nhj6j9m.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmp8nhj6j9m.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted[grades_length / 2]\n    local grades_average_index = grades_length\
    \ - 1\n    local grades_average_index2 = grades_length - 2\n    local grades_average_index3\
    \ = grades_length - 3\n    local grades_average_index4 = grades_length - 4\n \
    \   local grades_average_index5 = grades_length - 5\n    local grades_average_index6\
    \ = grades_length - 6\n    local grades_average_index7 = grades_length - 7\n \
    \   local grades_average_index8 = grades_length - 8\n    local grades_average_index9\
    \ = grades_length - 9\n    local grades_average_index10 = grades_length - 10\n\
    \    local grades_average_index11 = grades_length - 11\n    local grades_average_index12\
    \ = grades_length - 12\n    local grades_average_index13 = grades_length - 13\n\
    \    local grades_average_index14 = grades_length - 14\n    local grades_average_index15\
    \ = grades_length - 15\n    local grades_average_index16 = grades_length - 16\n\
    \    local grades_average_index17 = grades_length - 17\n    local grades_average_index18\
    \ = grades_length - 18\n    local grades_average_index19 = grades_length - 19\n\
    \    local grades_average_index20 = grades_length - 20\n    local grades_average_index21\
    \ = grades_length - 21\n    local grades_average_index22 = grades_length - 22\n\
    \    local grades_average_index23 = grades_length - 23\n    local grades_average_index24\
    \ = grades_length - 24\n    local grades_average_index25 = grades_length - 25\n\
    \    local grades_average_index26 = grades_length - 26\n    local grades_average_index27\
    \ = grades_length - 27\n    local grades_average_index28 = grades_length - 28\n\
    \    local grades_average_index29 = grades_length - 29\n    local grades_average_index30\
    \ = grades_length - 30\n    local grades_average_index31 = grades_length - 31\n\
    \    local grades_average_index32 = grades_length - 32\n    local grades_average_index33\
    \ = grades_length - 33\n    local grades_average_index34 = grades_length - 34\n\
    \    local grades_average_index35 = grades_length - 35\n    local grades_average_index36\
    \ = grades_length - 36\n    local grades_average_index37 = grades_length - 37\n\
    \    local grades_average_index38\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpckkf8c5b.lua:76: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_rounded = round(grades_average)\n\
    \  local grades_average_rounded_length = math.floor(grades_average_rounded)\n\
    \  local grades_average_rounded_remainder = grades_average_rounded - grades_average_rounded_length\n\
    \  local grades_average_rounded_remainder_length = math.floor(grades_average_rounded_remainder)\n\
    \  local grades_average_rounded_remainder_remainder = grades_average_rounded_remainder\
    \ - grades_average_rounded_remainder_length\n  local grades_average_rounded_remainder_remainder_length\
    \ = math.floor(grades_average_rounded_remainder_remainder)\n  local grades_average_rounded_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder - grades_average_rounded_remainder_remainder_length\n\
    \  local grades_average_rounded_remainder_remainder_remainder_length = math.floor(grades_average_rounded_remainder_remainder_remainder)\n\
    \  local grades_average_rounded_remainder_remainder_remainder_remainder = grades_average_rounded_remainder_remainder_remainder\
    \ - grades_average_rounded_remainder_remainder_remainder_length\n  local grades_average_rounded_remainder_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder_remainder_remainder - grades_average_rounded_remainder_remainder_remainder_length\n\
    \  local grades_average_rounded_remainder_remainder_remainder_remainder_length\
    \ = math.floor(grades_average_rounded_remainder_remainder_remainder_remainder)\n\
    \  local grades_average_rounded_remainder_remainder_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder_remainder_remainder_remainder -\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_length\n  local\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_remainder = grades_average_rounded_remainder_remainder_remainder_remainder_remainder\
    \ - grades_average_rounded_remainder_remainder_remainder_remainder_length\n  local\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_remainder = grades_average_rounded_remainder_remainder_remainder_remainder_remainder\
    \ - grades_average_rounded_remainder_remainder_remainder_remainder_length\n  local\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder_remainder_remainder_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnp7a77b7.lua:53: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj6zsejei.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = grades_length - 1\n  local\
    \ grades_average_index2 = grades_length - 2\n  local grades_average_index3 = grades_length\
    \ - 3\n  local grades_average_index4 = grades_length - 4\n  local grades_average_index5\
    \ = grades_length - 5\n  local grades_average_index6 = grades_length - 6\n  local\
    \ grades_average_index7 = grades_length - 7\n  local grades_average_index8 = grades_length\
    \ - 8\n  local grades_average_index9 = grades_length - 9\n  local grades_average_index10\
    \ = grades_length - 10\n  local grades_average_index11 = grades_length - 11\n\
    \  local grades_average_index12 = grades_length - 12\n  local grades_average_index13\
    \ = grades_length - 13\n  local grades_average_index14 = grades_length - 14\n\
    \  local grades_average_index15 = grades_length - 15\n  local grades_average_index16\
    \ = grades_length - 16\n  local grades_average_index17 = grades_length - 17\n\
    \  local grades_average_index18 = grades_length - 18\n  local grades_average_index19\
    \ = grades_length - 19\n  local grades_average_index20 = grades_length - 20\n\
    \  local grades_average_index21 = grades_length - 21\n  local grades_average_index22\
    \ = grades_length - 22\n  local grades_average_index23 = grades_length - 23\n\
    \  local grades_average_index24 = grades_length - 24\n  local grades_average_index25\
    \ = grades_length - 25\n  local grades_average_index26 = grades_length - 26\n\
    \  local grades_average_index27 = grades_length - 27\n  local grades_average_index28\
    \ = grades_length - 28\n  local grades_average_index29 = grades_length - 29\n\
    \  local grades_average_index30 = grades_length - 30\n  local grades_average_index31\
    \ = grades_length - 31\n  local grades_average_index32 = grades_length - 32\n\
    \  local grades_average_index33 = grades_length - 33\n  local grades_average_index34\
    \ = grades_length - 34\n  local grades_average_index35 = grades_length - 35\n\
    \  local grades_average_index36 = grades_length - 36\n  local grades_average_index37\
    \ = grades_length - 37\n  local grades_average_index38 = grades_length - \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp78qsbulg.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    while grades_index < grades_length do\n\
    \        local grade = grades_sorted[grades_index]\n        local grade_index\
    \ = 1\n        local grades_letter = ''\n        while grade_index < grade do\n\
    \            grades_letter = grades_letter..'+'\n            grade_index = grade_index\
    \ + 1\n        end\n        grades_letters[grades_index] = grades_letter\n   \
    \     grades_index = grades_index + 1\n    end\n    return grades_letters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvorytgnz.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvorytgnz.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_average:round(1)\n\
    \  local grades_average = grades_average:round(1)\n  local grades_average = grades_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg7kv6yzh.lua:75: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / grades_length\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average + grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ + grades_average\n    local grades_average = grades_average / grades_length\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average + grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / grades_length\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average + grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ + grades_average\n    local grades_average = grades_average / grades_length\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average + grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / grades_length\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average + grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ + grades_average\n    local grades_average = grades_average / grades_length\n\
    \    local grades_average = grades_average * grades_average\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptigr4ojp.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for _, grade in ipairs(grades) do\n    grades_sum\
    \ = grades_sum + grade\n    grades_count = grades_count + 1\n  end\n  if grades_count\
    \ > 0 then\n    grades_avg = grades_sum / grades_count\n  else\n    grades_avg\
    \ = 0\n  end\n  local grades_letter = nil\n  if grades_avg >= 4.0 then\n    grades_letter\
    \ = 'A+'\n  elseif grades_avg > 3.7 then\n    grades_letter = 'A'\n  elseif grades_avg\
    \ > 3.3 then\n    grades_letter = 'A-'\n  elseif grades_avg > 3.0 then\n    grades_letter\
    \ = 'B+'\n  elseif grades_avg > 2.7 then\n    grades_letter = 'B'\n  elseif grades_avg\
    \ > 2.3 then\n    grades_letter = 'B-'\n  elseif grades_avg > 2.0 then\n    grades_letter\
    \ = 'C+'\n  elseif grades_avg > 1.7 then\n    grades_letter = 'C'\n  elseif grades_avg\
    \ > 1.3 then\n    grades_letter = 'C-'\n  elseif grades_avg > 1.0 then\n    grades_letter\
    \ = 'D+'\n  elseif grades_avg > 0.7 then\n    grades_letter = 'D'\n  elseif grades_avg\
    \ > 0.0 then\n    grades_letter = 'D-'\n  else\n    grades_letter = 'E'\n  end\n\
    \  return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtvmc1rh.lua:68:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpwtvmc1rh.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = grades_length - 1\n  local\
    \ grades_average_index2 = grades_length - 2\n  local grades_average_index3 = grades_length\
    \ - 3\n  local grades_average_index4 = grades_length - 4\n  local grades_average_index5\
    \ = grades_length - 5\n  local grades_average_index6 = grades_length - 6\n  local\
    \ grades_average_index7 = grades_length - 7\n  local grades_average_index8 = grades_length\
    \ - 8\n  local grades_average_index9 = grades_length - 9\n  local grades_average_index10\
    \ = grades_length - 10\n  local grades_average_index11 = grades_length - 11\n\
    \  local grades_average_index12 = grades_length - 12\n  local grades_average_index13\
    \ = grades_length - 13\n  local grades_average_index14 = grades_length - 14\n\
    \  local grades_average_index15 = grades_length - 15\n  local grades_average_index16\
    \ = grades_length - 16\n  local grades_average_index17 = grades_length - 17\n\
    \  local grades_average_index18 = grades_length - 18\n  local grades_average_index19\
    \ = grades_length - 19\n  local grades_average_index20 = grades_length - 20\n\
    \  local grades_average_index21 = grades_length - 21\n  local grades_average_index22\
    \ = grades_length - 22\n  local grades_average_index23 = grades_length - 23\n\
    \  local grades_average_index24 = grades_length - 24\n  local grades_average_index25\
    \ = grades_length - 25\n  local grades_average_index26 = grades_length - 26\n\
    \  local grades_average_index27 = grades_length - 27\n  local grades_average_index28\
    \ = grades_length - 28\n  local grades_average_index29 = grades_length - 29\n\
    \  local grades_average_index30 = grades_length - 30\n  local grades_average_index31\
    \ = grades_length - 31\n  local grades_average_index32 = grades_length - 32\n\
    \  local grades_average_index33 = grades_length - 33\n  local grades_average_index34\
    \ = grades_length - 34\n  local grades_average_index35 = grades_length - 35\n\
    \  local grades_average_index36 = grades_length - 36\n  local grades_average_index37\
    \ = grades_length - 37\n  local grades_average_index38 = grades_length - \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx8qda_sz.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in pairs(grades) do\n    \
    \    grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5er9ank.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpc5er9ank.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted / grades_length\n    local grades_average = grades_average:round()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4zt45vrn.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grade\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp45qz6jr1.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  local grades_average\
    \ = grades_sum / grades_count\n  local grades_letter = ''\n  if grades_average\
    \ >= 4.0 then\n    grades_letter = 'A+'\n  elseif grades_average >= 3.7 then\n\
    \    grades_letter = 'A'\n  elseif grades_average >= 3.3 then\n    grades_letter\
    \ = 'A-'\n  elseif grades_average >= 3.0 then\n    grades_letter = 'B+'\n  elseif\
    \ grades_average >= 2.7 then\n    grades_letter = 'B'\n  elseif grades_average\
    \ >= 2.3 then\n    grades_letter = 'B-'\n  elseif grades_average >= 2.0 then\n\
    \    grades_letter = 'C+'\n  elseif grades_average >= 1.7 then\n    grades_letter\
    \ = 'C'\n  elseif grades_average >= 1.3 then\n    grades_letter = 'C-'\n  elseif\
    \ grades_average >= 1.0 then\n    grades_letter = 'D+'\n  elseif grades_average\
    \ >= 0.7 then\n    grades_letter = 'D'\n  elseif grades_average >= 0.0 then\n\
    \    grades_letter = 'D-'\n  else\n    grades_letter = 'E'\n  end\n  return grades_letter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxeduwxip.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpxeduwxip.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_sorted_length = #grades_sorted\n  local\
    \ grades_sorted_index = grades_sorted_length - 1\n  local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_sorted_index = grades_sorted_index - 1\n  local grades_sorted_value =\
    \ grades_sorted[grades_sorted_index]\n  local grades_sorted_index = grades_sorted_index\
    \ - 1\n  local grades_sorted_value = grades_sorted[grades_sorted_index]\n  local\
    \ grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz09jd9td.lua:74: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grade\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk49cc53m.lua:87: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letter_count = {}\n  local\
    \ grades_letter_count_index = 1\n  local grades_letter_count_index2 = 0\n  local\
    \ grades_letter_count_index3 = 0\n  local grades_letter_count_index4 = 0\n  local\
    \ grades_letter_count_index5 = 0\n  local grades_letter_count_index6 = 0\n  local\
    \ grades_letter_count_index7 = 0\n  local grades_letter_count_index8 = 0\n  local\
    \ grades_letter_count_index9 = 0\n  local grades_letter_count_index10 = 0\n  local\
    \ grades_letter_count_index11 = 0\n  local grades_letter_count_index12 = 0\n \
    \ local grades_letter_count_index13 = 0\n  local grades_letter_count_index14 =\
    \ 0\n  local grades_letter_count_index15 = 0\n  local grades_letter_count_index16\
    \ = 0\n  local grades_letter_count_index17 = 0\n  local grades_letter_count_index18\
    \ = 0\n  local grades_letter_count_index19 = 0\n  local grades_letter_count_index20\
    \ = 0\n  local grades_letter_count_index21 = 0\n  local grades_letter_count_index22\
    \ = 0\n  local grades_letter_count_index23 = 0\n  local grades_letter_count_index24\
    \ = 0\n  local grades_letter_count_index25 = 0\n  local grades_letter_count_index26\
    \ = 0\n  local grades_letter_count_index27 = 0\n  local grades_letter_count_index28\
    \ = 0\n  local grades_letter_count_index29 = 0\n  local grades_letter_count_index30\
    \ = 0\n  local grades_letter_count_index31 = 0\n  local grades_letter_count_index32\
    \ = 0\n  local grades_letter_count_index33 = 0\n  local grades_letter_count_index34\
    \ = 0\n  local grades_letter_count_index35 = 0\n  local grades_letter_count_index36\
    \ = 0\n  local grades_letter_count_index37 = 0\n  local grades_letter_count_index38\
    \ = 0\n  local grades_letter_count_index39 = 0\n  local grades_letter_count_index40\
    \ = 0\n  local grades_letter_count_index41 = 0\n  local grades_letter_count_index42\
    \ = 0\n  local grades_letter_count_index43 = 0\n  local grades_letter_count_index44\
    \ = 0\n  local grades_letter_count_index45 = 0\n  local grades_letter_count_index46\
    \ = 0\n  local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkuz8nmax.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    local grades_letters_index = 1\n   \
    \ local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grade\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2te83cr_.lua:87: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g6kyq2f.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmp_g6kyq2f.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwu397uwt.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  for i = 1, grades_length do\n    local grade = grades_sorted[i]\n  \
    \  local letter = string.upper(string.sub(grade, 2, 1))\n    local grade_value\
    \ = tonumber(grade)\n    if grade_value <= 0 then\n      letter = 'E'\n    elseif\
    \ grade_value <= 3.0 then\n      letter = 'A'\n    elseif grade_value <= 3.3 then\n\
    \      letter = 'A-'\n    elseif grade_value <= 3.7 then\n      letter = 'B+'\n\
    \    elseif grade_value <= 4.0 then\n      letter = 'B'\n    elseif grade_value\
    \ <= 4.3 then\n      letter = 'B-'\n    elseif grade_value <= 4.7 then\n     \
    \ letter = 'C+'\n    elseif grade_value <= 5.0 then\n      letter = 'C'\n    elseif\
    \ grade_value <= 5.3 then\n      letter = 'C-'\n    elseif grade_value <= 5.7\
    \ then\n      letter = 'D+'\n    elseif grade_value <= 6.0 then\n      letter\
    \ = 'D'\n    elseif grade_value <= 6.3 then\n      letter = 'D-'\n    elseif grade_value\
    \ <= 6.7 then\n      letter = 'E'\n    else\n      letter = 'F'\n    end\n   \
    \ table.insert(letter_grades, letter)\n  end\n  return table.concat(letter_grades,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_jq_bni.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpy_jq_bni.lua:67: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = 0\n  local grades_average_sum\
    \ = 0\n  local grades_average_average = 0\n  local grades_average_average_sum\
    \ = 0\n  local grades_average_average_average = 0\n  local grades_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average = 0\n  local grades_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average = 0\n  local grades_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average = 0\n  local\
    \ grades_average_average_average_average_average_average_sum = 0\n  local grades_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfqly4t00.lua:72: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_sum = 0\n  local grades_count\
    \ = 0\n  local grades_letters = {}\n  for i = 1, grades_length do\n    grades_sum\
    \ = grades_sum + grades_sorted[i]\n    grades_count = grades_count + 1\n  end\n\
    \  local grades_average = grades_sum / grades_count\n  local grades_letter = ''\n\
    \  if grades_average >= 4.0 then\n    grades_letter = 'A+'\n  elseif grades_average\
    \ >= 3.7 then\n    grades_letter = 'A'\n  elseif grades_average >= 3.3 then\n\
    \    grades_letter = 'A-'\n  elseif grades_average >= 3.0 then\n    grades_letter\
    \ = 'B+'\n  elseif grades_average >= 2.7 then\n    grades_letter = 'B'\n  elseif\
    \ grades_average >= 2.3 then\n    grades_letter = 'B-'\n  elseif grades_average\
    \ >= 2.0 then\n    grades_letter = 'C+'\n  elseif grades_average >= 1.7 then\n\
    \    grades_letter = 'C'\n  elseif grades_average >= 1.3 then\n    grades_letter\
    \ = 'C-'\n  elseif grades_average >= 1.0 then\n    grades_letter = 'D+'\n  elseif\
    \ grades_average >= 0.7 then\n    grades_letter = 'D'\n  elseif grades_average\
    \ >= 0.0 then\n    grades_letter = 'D-'\n  else\n    grades_letter = 'E'\n  end\n\
    \  return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegwsh250.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpegwsh250.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptq4eh7hs.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted and grades_sorted[grades_length-1] or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph70op694.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grade\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4k4pdeun.lua:87: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_count = grades_count + 1\n        grades_sum = grades_sum + grade\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpampo9twt.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpampo9twt.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptvzqvqpi.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx0c_ik65.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0zwxai6w.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length and grades_sorted[grades_length / 2] or 0\n  local grades_letter\
    \ = grades_average and ('A+', 'B', 'C-', 'C', 'A-', 'D-', 'D', 'D+') or ''\n \
    \ \n  return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmwmls_3h.lua:26: ')' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    for _, grade in ipairs(grades) do\n        grades_sum = grades_sum\
    \ + grade\n    end\n    local grades_avg = grades_sum / #grades\n    local grades_diff\
    \ = 0\n    for _, grade in ipairs(grades) do\n        grades_diff = grades_diff\
    \ + (grade - grades_avg)\n    end\n    local grades_diff_ratio = grades_diff /\
    \ grades_avg\n    local grades_diff_sign = grades_diff_ratio > 0 and 1 or -1\n\
    \    local grades_diff_letter = grades_diff_sign * math.floor(grades_diff_ratio)\n\
    \    return grades_diff_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj9a_50s.lua:41:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: 0\nstack traceback:\n\
    \t/tmp/tmpxj9a_50s.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letter_count = {}\n  local\
    \ grades_letter_count_index = 1\n  local grades_letter_count_index2 = 0\n  local\
    \ grades_letter_count_index3 = 0\n  local grades_letter_count_index4 = 0\n  local\
    \ grades_letter_count_index5 = 0\n  local grades_letter_count_index6 = 0\n  local\
    \ grades_letter_count_index7 = 0\n  local grades_letter_count_index8 = 0\n  local\
    \ grades_letter_count_index9 = 0\n  local grades_letter_count_index10 = 0\n  local\
    \ grades_letter_count_index11 = 0\n  local grades_letter_count_index12 = 0\n \
    \ local grades_letter_count_index13 = 0\n  local grades_letter_count_index14 =\
    \ 0\n  local grades_letter_count_index15 = 0\n  local grades_letter_count_index16\
    \ = 0\n  local grades_letter_count_index17 = 0\n  local grades_letter_count_index18\
    \ = 0\n  local grades_letter_count_index19 = 0\n  local grades_letter_count_index20\
    \ = 0\n  local grades_letter_count_index21 = 0\n  local grades_letter_count_index22\
    \ = 0\n  local grades_letter_count_index23 = 0\n  local grades_letter_count_index24\
    \ = 0\n  local grades_letter_count_index25 = 0\n  local grades_letter_count_index26\
    \ = 0\n  local grades_letter_count_index27 = 0\n  local grades_letter_count_index28\
    \ = 0\n  local grades_letter_count_index29 = 0\n  local grades_letter_count_index30\
    \ = 0\n  local grades_letter_count_index31 = 0\n  local grades_letter_count_index32\
    \ = 0\n  local grades_letter_count_index33 = 0\n  local grades_letter_count_index34\
    \ = 0\n  local grades_letter_count_index35 = 0\n  local grades_letter_count_index36\
    \ = 0\n  local grades_letter_count_index37 = 0\n  local grades_letter_count_index38\
    \ = 0\n  local grades_letter_count_index39 = 0\n  local grades_letter_count_index40\
    \ = 0\n  local grades_letter_count_index41 = 0\n  local grades_letter_count_index42\
    \ = 0\n  local grades_letter_count_index43 = 0\n  local grades_letter_count_index44\
    \ = 0\n  local grades_letter_count_index45 = 0\n  local grades_letter_count_index46\
    \ = 0\n  local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7pm6lcnw.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  if grades_count >\
    \ 0 then\n    grades_sum = grades_sum / grades_count\n  end\n  local grades_letter\
    \ = ''\n  if grades_sum >= 4.0 then\n    grades_letter = 'A+'\n  elseif grades_sum\
    \ >= 3.7 then\n    grades_letter = 'A'\n  elseif grades_sum >= 3.3 then\n    grades_letter\
    \ = 'A-'\n  elseif grades_sum >= 3.0 then\n    grades_letter = 'B+'\n  elseif\
    \ grades_sum >= 2.7 then\n    grades_letter = 'B'\n  elseif grades_sum >= 2.3\
    \ then\n    grades_letter = 'B-'\n  elseif grades_sum >= 2.0 then\n    grades_letter\
    \ = 'C+'\n  elseif grades_sum >= 1.7 then\n    grades_letter = 'C'\n  elseif grades_sum\
    \ >= 1.3 then\n    grades_letter = 'C-'\n  elseif grades_sum >= 1.0 then\n   \
    \ grades_letter = 'D+'\n  elseif grades_sum >= 0.7 then\n    grades_letter = 'D'\n\
    \  elseif grades_sum >= 0.0 then\n    grades_letter = 'D-'\n  else\n    grades_letter\
    \ = 'E'\n  end\n  return grades_letter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuzf2g7u.lua:66:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpzuzf2g7u.lua:66: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezss6t2i.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpezss6t2i.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  local i = 1\n  while i <= grades_length do\n    local grade = grades_sorted[i]\n\
    \    local grade_index = i - 1\n    local grades_index = grade_index\n    local\
    \ grades_length = grades_length - 1\n    local grades_index = grades_index + 1\n\
    \    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - 1\n    local grades_index = grades_index\
    \ + 1\n    local grades_length = grades_length - \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbz8pqx68.lua:76: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8eotxwpc.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in pairs(grades) do\n    \
    \    grades_count = grades_count + 1\n        grades_sum = grades_sum + grade\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrj59ahl.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpxrj59ahl.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa\
    \ = grades[i]\n    local letter = nil\n    if gpa > 0 then\n      letter = \"\
    A+\"\n    elseif gpa < 0 then\n      letter = \"A-\"\n    elseif gpa <= 2.7 then\n\
    \      letter = \"B+\"\n    elseif gpa <= 2.3 then\n      letter = \"B\"\n   \
    \ elseif gpa <= 2.0 then\n      letter = \"B-\"\n    elseif gpa <= 1.7 then\n\
    \      letter = \"C+\"\n    elseif gpa <= 1.3 then\n      letter = \"C\"\n   \
    \ elseif gpa <= 1.0 then\n      letter = \"C-\"\n    elseif gpa <= 0.7 then\n\
    \      letter = \"D+\"\n    elseif gpa <= 0.0 then\n      letter = \"D\"\n   \
    \ else\n      letter = \"D-\"\n    end\n    grades_string = grades_string .. letter\n\
    \  end\n  return grades_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqo86kgs6.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+A+A+A+A+\"\nstack\
    \ traceback:\n\t/tmp/tmpqo86kgs6.lua:59: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average + grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average + grades_average\n \
    \ local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average +\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ + grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average + grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average + grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average + grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average + grades_average\n \
    \ local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average +\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ + grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average + grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grade\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpof4rl_1r.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  local grades_letters = {}\n  for i = 1, #grades\
    \ do\n    grades_sum = grades_sum + grades[i]\n    grades_count = grades_count\
    \ + 1\n  end\n  if grades_count > 0 then\n    grades_letters[#grades_letters +\
    \ 1] = grades_sum / grades_count\n  end\n  return grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdw_xrgt.lua:39:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {2.84}\nstack traceback:\n\
    \t/tmp/tmpkdw_xrgt.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  \n  if grades_count\
    \ > 0 then\n    local grades_average = grades_sum / grades_count\n    local grades_diff\
    \ = 0\n    for i = 1, #grades do\n      grades_diff = grades_diff + (grades[i]\
    \ - grades_average)\n    end\n    \n    local grades_diff_sign = 1\n    if grades_diff\
    \ < 0 then\n      grades_diff_sign = -1\n    end\n    \n    local grades_diff_abs_value\
    \ = grades_diff\n    if grades_diff > 0 then\n      grades_diff_abs_value = grades_diff\n\
    \    end\n    \n    local grades_diff_abs_value = grades_diff_abs_value * grades_diff_sign\n\
    \    \n    local grades_diff_abs_value = grades_diff_abs_value / 2\n    \n   \
    \ local grades_diff_abs_value = grades_diff_abs_value * grades_diff_sign\n   \
    \ \n    local grades_diff_abs_value = grades_diff_abs_value / 2\n    \n    local\
    \ grades_diff_abs_value = grades_diff_abs_value * grades_diff_sign\n    \n   \
    \ local grades_diff_abs_value = grades_diff_abs_value / 2\n    \n    local grades_diff_abs_value\
    \ = grades_diff_abs_value * grades_diff_sign\n    \n    local grades_diff_abs_value\
    \ = grades_diff_abs_value / 2\n    \n    local grades_diff_abs_value = grades_diff_abs_value\
    \ * grades_diff_sign\n    \n    local grades_diff_abs_value = grades_diff_abs_value\
    \ / 2\n    \n    local grades_diff_abs_value = grades_diff_abs_value * grades_diff_sign\n\
    \    \n    local grades_diff_abs_value = grades_diff_abs_value / 2\n    \n   \
    \ local grades_diff_abs_value = grades_diff_abs_value * grades_diff_sign\n   \
    \ \n    local grades_diff_abs_value = grades_diff_abs_value / 2\n    \n    local\
    \ grades_diff_abs_value = grades_diff_abs_value * grades_diff_sign\n    \n   \
    \ local grades_diff_abs_value = grades_diff_abs_value / 2\n    \n    local grades_diff_abs_value\
    \ = grades_diff_abs_value * grades_diff_sign\n    \n    local grades_diff_abs_value\
    \ = grades_diff_abs_value / 2\n    \n    local grades_diff_abs_value = grades_diff_abs_value\
    \ * grades_diff_sign\n    \n    local grades_diff_abs_value = grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3namzc27.lua:98: 'end' expected (to close 'if' at line 30)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = round(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = round(grades_average)\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = round(grades_average)\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = round(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = round(grades_average)\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = round(grades_average)\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = round(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = round(grades_average)\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = round(grades_average)\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = round(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_5hdhaqb.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for i = 1, #grades do\n        grades_sum\
    \ = grades_sum + grades[i]\n        grades_count = grades_count + 1\n    end\n\
    \    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaqcowji.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpcaqcowji.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    if grade >\
    \ 0 then\n      grades_string = grades_string .. \"A+\"\n    elseif grade < 0\
    \ then\n      grades_string = grades_string .. \"A-\"\n    elseif grade == 0 then\n\
    \      grades_string = grades_string .. \"E\"\n    else\n      grades_string =\
    \ grades_string .. \"B+\"\n    end\n  end\n  return grades_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzh5sc532.lua:42:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+A+A+A+A+\"\nstack\
    \ traceback:\n\t/tmp/tmpzh5sc532.lua:42: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grade\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplzfd84o7.lua:87: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv7_qfirc.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted and grades_sorted[grades_length/2] or 0\n  local grades_average\
    \ = grades_average + grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsdzazpdn.lua:75: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_string\
    \ = \"\"\n    for i = 1, #grades do\n        local grade = grades[i]\n       \
    \ local letter_grade = string.upper(string.sub(grade, 2, 1))\n        grades_string\
    \ = grades_string .. letter_grade\n    end\n    return grades_string\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyzqfb1u.lua:35:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"\"\nstack traceback:\n\
    \t/tmp/tmpiyzqfb1u.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local max_grade = grades[1]\n  local min_grade = grades[2]\n  local\
    \ grades_table = {}\n  local i = 0\n  local j = 0\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n  local grades_table_length = #grades_table\n  local grades_table_length\
    \ = #grades_table\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjrz2wrcg.lua:85: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa\
    \ = grades[i]\n    local letter_grade\n    if gpa > 3.0 then\n      letter_grade\
    \ = \"A+\"\n    elseif gpa > 2.7 then\n      letter_grade = \"A\"\n    elseif\
    \ gpa > 2.0 then\n      letter_grade = \"B+\"\n    elseif gpa > 1.7 then\n   \
    \   letter_grade = \"B\"\n    elseif gpa > 1.0 then\n      letter_grade = \"B-\"\
    \n    elseif gpa > 0.7 then\n      letter_grade = \"C+\"\n    elseif gpa > 0.3\
    \ then\n      letter_grade = \"C\"\n    elseif gpa > 0.0 then\n      letter_grade\
    \ = \"C-\"\n    elseif gpa > 0.0 then\n      letter_grade = \"D+\"\n    elseif\
    \ gpa > 0.0 then\n      letter_grade = \"D\"\n    elseif gpa > 0.0 then\n    \
    \  letter_grade = \"D-\"\n    elseif gpa > 0.0 then\n      letter_grade = \"E\"\
    \n    else\n      letter_grade = \"F\"\n    end\n    grades_string = grades_string\
    \ .. letter_grade\n  end\n  return grades_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01mp69l6.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+AB-BA+\"\nstack\
    \ traceback:\n\t/tmp/tmp01mp69l6.lua:63: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr1sypkqy.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcxt_clqs.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_avg = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_avg >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_avg >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_avg >=\
    \ 3.3 then\n        grades_letter = 'A-'\n    elseif grades_avg >= 3.0 then\n\
    \        grades_letter = 'B+'\n    elseif grades_avg >= 2.7 then\n        grades_letter\
    \ = 'B'\n    elseif grades_avg >= 2.3 then\n        grades_letter = 'B-'\n   \
    \ elseif grades_avg >= 2.0 then\n        grades_letter = 'C+'\n    elseif grades_avg\
    \ >= 1.7 then\n        grades_letter = 'C'\n    elseif grades_avg >= 1.3 then\n\
    \        grades_letter = 'C-'\n    elseif grades_avg >= 1.0 then\n        grades_letter\
    \ = 'D+'\n    elseif grades_avg >= 0.7 then\n        grades_letter = 'D'\n   \
    \ elseif grades_avg >= 0.0 then\n        grades_letter = 'D-'\n    else\n    \
    \    grades_letter = 'E'\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw867gp9.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpfw867gp9.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_count = grades_count + 1\n        grades_sum = grades_sum + grade\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmq1fxzr.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpzmq1fxzr.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg1z0kskx.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_length\
    \ = #grades\n  local grades_sum = 0\n  local grades_index = 0\n  local grades_sum_index\
    \ = 0\n  local grades_index2 = 0\n  local grades_sum_index2 = 0\n  local grades_index3\
    \ = 0\n  local grades_sum_index3 = 0\n  local grades_index4 = 0\n  local grades_sum_index4\
    \ = 0\n  local grades_index5 = 0\n  local grades_sum_index5 = 0\n  local grades_index6\
    \ = 0\n  local grades_sum_index6 = 0\n  local grades_index7 = 0\n  local grades_sum_index7\
    \ = 0\n  local grades_index8 = 0\n  local grades_sum_index8 = 0\n  local grades_index9\
    \ = 0\n  local grades_sum_index9 = 0\n  local grades_index10 = 0\n  local grades_sum_index10\
    \ = 0\n  local grades_index11 = 0\n  local grades_sum_index11 = 0\n  local grades_index12\
    \ = 0\n  local grades_sum_index12 = 0\n  local grades_index13 = 0\n  local grades_sum_index13\
    \ = 0\n  local grades_index14 = 0\n  local grades_sum_index14 = 0\n  local grades_index15\
    \ = 0\n  local grades_sum_index15 = 0\n  local grades_index16 = 0\n  local grades_sum_index16\
    \ = 0\n  local grades_index17 = 0\n  local grades_sum_index17 = 0\n  local grades_index18\
    \ = 0\n  local grades_sum_index18 = 0\n  local grades_index19 = 0\n  local grades_sum_index19\
    \ = 0\n  local grades_index20 = 0\n  local grades_sum_index20 = 0\n  local grades_index21\
    \ = 0\n  local grades_sum_index21 = 0\n  local grades_index22 = 0\n  local grades_sum_index22\
    \ = 0\n  local grades_index23 = 0\n  local grades_sum_index23 = 0\n  local grades_index24\
    \ = 0\n  local grades_sum_index24 = 0\n  local grades_index25 = 0\n  local grades_sum_index25\
    \ = 0\n  local grades_index26 = 0\n  local grades_sum_index26 = 0\n  local grades_index27\
    \ = 0\n  local grades_sum_index27 = 0\n  local grades_index28 = 0\n  local grades_sum_index28\
    \ = 0\n  local grades_index29 = 0\n  local grades_sum_index29 = 0\n  local grades_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9yhbpi5v.lua:96: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_sorted_length = #grades_sorted\n  local\
    \ grades_sorted_index = grades_sorted_length - 1\n  local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n  local grades_sorted_index_previous =\
    \ grades_sorted_index - 1\n  local grades_sorted_value_previous = grades_sorted[grades_sorted_index_previous]\n\
    \  local grades_sorted_index_next = grades_sorted_index + 1\n  local grades_sorted_value_next\
    \ = grades_sorted[grades_sorted_index_next]\n  local grades_sorted_index_previous_and_next\
    \ = grades_sorted_index_previous + 1\n  local grades_sorted_value_previous_and_next\
    \ = grades_sorted[grades_sorted_index_previous_and_next]\n  local grades_sorted_index_next_and_previous\
    \ = grades_sorted_index_next - 1\n  local grades_sorted_value_next_and_previous\
    \ = grades_sorted[grades_sorted_index_next_and_previous]\n  local grades_sorted_index_next_and_previous_and_next\
    \ = grades_sorted_index_next_and_previous + 1\n  local grades_sorted_value_next_and_previous_and_next\
    \ = grades_sorted[grades_sorted_index_next_and_previous_and_next]\n  local grades_sorted_index_previous_and_next_and_next\
    \ = grades_sorted_index_previous_and_next + 1\n  local grades_sorted_value_previous_and_next_and_next\
    \ = grades_sorted[grades_sorted_index_previous_and_next_and_next]\n  local grades_sorted_index_next_and_previous_and_next_and_previous\
    \ = grades_sorted_index_next_and_previous_and_next_and_previous + 1\n  local grades_sorted_value_next_and_previous_and_next_and_previous\
    \ = grades_sorted[grades_sorted_index_next_and_previous_and_next_and_previous]\n\
    \  local grades_sorted_index_next_and_previous_and_next_and_previous_and_next\
    \ = grades_sorted_index_next_and_previous_and_next_and_previous_and_next + 1\n\
    \  local grades_sorted_value_next_and_previous_and_next_and_previous_and_next\
    \ = grades_sorted[grades_sorted_index_next_and_previous_and_next_and_previous_and_next]\n\
    \  local grades_sorted_index_previous_and_next_and_next_and_previous_and_next_and_previous\
    \ = grades_sorted_index_next_and_previous_and_next_and_previous_and_next_and_previous_and_next\
    \ + 1\n  local grades_sorted_value_next_and_previous_and_next_and_previous_and_next_and_previous_and_next\
    \ = grades_sorted[grades_sorted_index_next_and_previous_and_next_and_previous_and_next_and_previous_and_next]\n\
    \  local grades_sorted_index_previous_and_next_and_next_and_previous_and_next_and_previous_and_next_and_previous\
    \ = grades_sorted_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxl5v7b1o.lua:58: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for i = 1, #grades do\n        grades_sum\
    \ = grades_sum + grades[i]\n        grades_count = grades_count + 1\n    end\n\
    \    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnud13764.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpnud13764.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp86xdfj1p.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / (grades_length - 1)\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_letters = {}\n    for i = 1, grades_length do\n      \
    \  grades_sum = grades_sum + grades_sorted[i]\n        grades_count = grades_count\
    \ + 1\n    end\n    local grades_average = grades_sum / grades_count\n    local\
    \ grades_letters_length = grades_length - 1\n    for i = 1, grades_letters_length\
    \ do\n        local grades_letter = string.sub(grades_sorted, i, i + 1)\n    \
    \    local grades_letter_grade = string.sub(grades_letter, 1, 1)\n        local\
    \ grades_letter_grade = grades_letter_grade .. string.sub(grades_letter, 2, 1)\n\
    \        local grades_letter_grade = grades_letter_grade .. string.sub(grades_letter,\
    \ 3, 1)\n        local grades_letter_grade = grades_letter_grade .. string.sub(grades_letter,\
    \ 4, 1)\n        grades_letters[grades_letter_grade] = grades_letters[grades_letter_grade]\
    \ or grades_letter_grade\n    end\n    local grades_letters_length = grades_length\
    \ - 1\n    for i = grades_letters_length, 1, -1 do\n        local grades_letter\
    \ = string.sub(grades_sorted, i, i + 1)\n        grades_letters[grades_letter]\
    \ = grades_letters[grades_letter] or grades_letter\n    end\n    return grades_letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh3lsrzh.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplh3lsrzh.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  for i = 1, grades_length do\n    local grade = grades_sorted[i]\n  \
    \  local letter_grade = \n      (grade >= 4.0 and 'A+') or\n      (grade > 3.7\
    \ and 'A') or\n      (grade > 3.3 and 'A-') or\n      (grade > 3.0 and 'B+') or\n\
    \      (grade > 2.7 and 'B') or\n      (grade > 2.3 and 'B-') or\n      (grade\
    \ > 2.0 and 'C+') or\n      (grade > 1.7 and 'C') or\n      (grade > 1.3 and 'C-')\
    \ or\n      (grade > 1.0 and 'D+') or\n      (grade > 0.7 and 'D') or\n      (grade\
    \ > 0.0 and 'D-') or\n      'E'\n    table.insert(letter_grades, letter_grade)\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhdbl205.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpjhdbl205.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_sorted_length = #grades_sorted\n    local\
    \ grades_sorted_first = grades_sorted[1]\n    local grades_sorted_last = grades_sorted[grades_sorted_length]\n\
    \    local grades_sorted_middle = grades_sorted[grades_sorted_length / 2]\n  \
    \  local grades_sorted_middle_difference = grades_sorted_middle - grades_sorted_first\n\
    \    local grades_sorted_middle_difference_negative = grades_sorted_middle_difference\
    \ < 0\n    local grades_sorted_middle_difference_positive = grades_sorted_middle_difference\
    \ > 0\n    local grades_sorted_middle_difference_zero = grades_sorted_middle_difference\
    \ == 0\n    local grades_sorted_middle_difference_positive_and_negative = grades_sorted_middle_difference_positive\
    \ and grades_sorted_middle_difference_negative\n    local grades_sorted_middle_difference_zero_and_negative\
    \ = grades_sorted_middle_difference_zero and grades_sorted_middle_difference_negative\n\
    \    local grades_sorted_middle_difference_positive_and_zero = grades_sorted_middle_difference_positive\
    \ and grades_sorted_middle_difference_zero\n    local grades_sorted_middle_difference_zero_and_positive\
    \ = grades_sorted_middle_difference_zero and grades_sorted_middle_difference_positive\n\
    \    local grades_sorted_middle_difference_positive_and_zero_and_negative = grades_sorted_middle_difference_positive_and_zero\
    \ and grades_sorted_middle_difference_negative\n    local grades_sorted_middle_difference_zero_and_positive_and_negative\
    \ = grades_sorted_middle_difference_zero_and_positive and grades_sorted_middle_difference_negative\n\
    \    local grades_sorted_middle_difference_zero_and_positive_and_zero = grades_sorted_middle_difference_zero_and_positive\
    \ and grades_sorted_middle_difference_zero\n    local grades_sorted_middle_difference_positive_and_zero_and_positive\
    \ = grades_sorted_middle_difference_positive_and_zero and grades_sorted_middle_difference_positive\n\
    \    local grades_sorted_middle_difference_positive_and_zero_and_negative = grades_sorted_middle_difference_positive_and_zero\
    \ and grades_sorted_middle_difference_negative\n    local grades_sorted_middle_difference_zero_and_positive_and_negative\
    \ = grades_sorted_middle_difference_zero_and_positive and grades_sorted_middle_difference_negative\n\
    \    local grades_sorted_middle_difference_zero_and_positive_and_zero = grades_sorted_middle_difference_zero_and_positive\
    \ and grades_sorted_middle_difference_zero\n    local grades_sorted_middle_difference_positive_and_zero_and_positive\
    \ = grades_sorted_middle_difference_positive_and_zero and grades_sorted_middle_difference_positive\n\
    \    local grades_sorted_middle_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq7m_u4mz.lua:57: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average + 50\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average + 50\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + 50\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ + 50\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average + 50\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + 50\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average + 50\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + 50\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ + 50\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average + 50\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + 50\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average + 50\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + 50\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ + 50\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average + 50\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average + 50\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average + 50\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average + 50\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ + 50\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average + 50\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjqtyeo23.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / (grades_length - 1)\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = grades_average\n    local grades_average = grades_average\n\
    \    local grades_average = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk_e1vr9o.lua:74: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_kc8v6vg.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_string\
    \ = \"\"\n    for i = 1, #grades do\n        local grade = grades[i]\n       \
    \ local gpa = grades[i]\n        if gpa > 3.0 then\n            grades_string\
    \ = grades_string .. \"A+\"\n        elseif gpa > 2.7 then\n            grades_string\
    \ = grades_string .. \"B+\"\n        elseif gpa > 2.0 then\n            grades_string\
    \ = grades_string .. \"C+\"\n        elseif gpa > 1.7 then\n            grades_string\
    \ = grades_string .. \"C\"\n        elseif gpa > 1.0 then\n            grades_string\
    \ = grades_string .. \"D+\"\n        elseif gpa > 0.7 then\n            grades_string\
    \ = grades_string .. \"D\"\n        elseif gpa > 0.0 then\n            grades_string\
    \ = grades_string .. \"D-\"\n        elseif gpa > 0.0 then\n            grades_string\
    \ = grades_string .. \"E\"\n        end\n    end\n    return grades_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpord2znse.lua:51:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+B+D+CA+\"\nstack\
    \ traceback:\n\t/tmp/tmpord2znse.lua:51: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  local grades_average\
    \ = grades_sum / grades_count\n  local grades_letter = ''\n  if grades_average\
    \ >= 4.0 then\n    grades_letter = 'A+'\n  elseif grades_average >= 3.7 then\n\
    \    grades_letter = 'A'\n  elseif grades_average >= 3.3 then\n    grades_letter\
    \ = 'A-'\n  elseif grades_average >= 3.0 then\n    grades_letter = 'B+'\n  elseif\
    \ grades_average >= 2.7 then\n    grades_letter = 'B'\n  elseif grades_average\
    \ >= 2.3 then\n    grades_letter = 'B-'\n  elseif grades_average >= 2.0 then\n\
    \    grades_letter = 'C+'\n  elseif grades_average >= 1.7 then\n    grades_letter\
    \ = 'C'\n  elseif grades_average >= 1.3 then\n    grades_letter = 'C-'\n  elseif\
    \ grades_average >= 1.0 then\n    grades_letter = 'D+'\n  elseif grades_average\
    \ >= 0.7 then\n    grades_letter = 'D'\n  elseif grades_average >= 0.0 then\n\
    \    grades_letter = 'D-'\n  else\n    grades_letter = 'E'\n  end\n  return grades_letter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa73qrca7.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpa73qrca7.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_sorted_length = #grades_sorted\n  local\
    \ grades_sorted_index = grades_sorted_length - 1\n  local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n  local grades_sorted_index_previous =\
    \ grades_sorted_index - 1\n  local grades_sorted_value_previous = grades_sorted[grades_sorted_index_previous]\n\
    \  local grades_sorted_index_next = grades_sorted_index + 1\n  local grades_sorted_value_next\
    \ = grades_sorted[grades_sorted_index_next]\n  local grades_sorted_index_next_previous\
    \ = grades_sorted_index_previous + 1\n  local grades_sorted_value_next_previous\
    \ = grades_sorted[grades_sorted_index_next_previous]\n  local grades_sorted_index_next_next\
    \ = grades_sorted_index_next + 1\n  local grades_sorted_value_next_next = grades_sorted[grades_sorted_index_next_next]\n\
    \  local grades_sorted_index_next_next_previous = grades_sorted_index_next_previous\
    \ + 1\n  local grades_sorted_value_next_next_previous = grades_sorted[grades_sorted_index_next_next_previous]\n\
    \  local grades_sorted_index_next_next_next = grades_sorted_index_next_next +\
    \ 1\n  local grades_sorted_value_next_next_next = grades_sorted[grades_sorted_index_next_next_next]\n\
    \  local grades_sorted_index_next_next_next_previous = grades_sorted_index_next_next_previous\
    \ + 1\n  local grades_sorted_value_next_next_next_previous = grades_sorted[grades_sorted_index_next_next_next_previous]\n\
    \  local grades_sorted_index_next_next_next_next = grades_sorted_index_next_next_next\
    \ + 1\n  local grades_sorted_value_next_next_next_next = grades_sorted[grades_sorted_index_next_next_next_next]\n\
    \  local grades_sorted_index_next_next_next_next_previous = grades_sorted_index_next_next_next_previous\
    \ + 1\n  local grades_sorted_value_next_next_next_next_previous = grades_sorted[grades_sorted_index_next_next_next_next_previous]\n\
    \  local grades_sorted_index_next_next_next_next_next = grades_sorted_index_next_next_next_next\
    \ + 1\n  local grades_sorted_value_next_next_next_next_next = grades_sorted[grades_sorted_index_next_next_next_next_next]\n\
    \  local grades_sorted_index_next_next_next_next_next_previous = grades_sorted_index_next_next_next_next_previous\
    \ + 1\n  local grades_sorted_value_next_next_next_next_next_previous = grades_sorted[grades_sorted_index_next_next_next_next_next_previous]\n\
    \  local grades_sorted_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl7vvlx0q.lua:62: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted[grades_length-1]\n    local grades_average_index = grades_length\
    \ - 1\n    local grades_average_index2 = grades_length - 2\n    local grades_average_index3\
    \ = grades_length - 3\n    local grades_average_index4 = grades_length - 4\n \
    \   local grades_average_index5 = grades_length - 5\n    local grades_average_index6\
    \ = grades_length - 6\n    local grades_average_index7 = grades_length - 7\n \
    \   local grades_average_index8 = grades_length - 8\n    local grades_average_index9\
    \ = grades_length - 9\n    local grades_average_index10 = grades_length - 10\n\
    \    local grades_average_index11 = grades_length - 11\n    local grades_average_index12\
    \ = grades_length - 12\n    local grades_average_index13 = grades_length - 13\n\
    \    local grades_average_index14 = grades_length - 14\n    local grades_average_index15\
    \ = grades_length - 15\n    local grades_average_index16 = grades_length - 16\n\
    \    local grades_average_index17 = grades_length - 17\n    local grades_average_index18\
    \ = grades_length - 18\n    local grades_average_index19 = grades_length - 19\n\
    \    local grades_average_index20 = grades_length - 20\n    local grades_average_index21\
    \ = grades_length - 21\n    local grades_average_index22 = grades_length - 22\n\
    \    local grades_average_index23 = grades_length - 23\n    local grades_average_index24\
    \ = grades_length - 24\n    local grades_average_index25 = grades_length - 25\n\
    \    local grades_average_index26 = grades_length - 26\n    local grades_average_index27\
    \ = grades_length - 27\n    local grades_average_index28 = grades_length - 28\n\
    \    local grades_average_index29 = grades_length - 29\n    local grades_average_index30\
    \ = grades_length - 30\n    local grades_average_index31 = grades_length - 31\n\
    \    local grades_average_index32 = grades_length - 32\n    local grades_average_index33\
    \ = grades_length - 33\n    local grades_average_index34 = grades_length - 34\n\
    \    local grades_average_index35 = grades_length - 35\n    local grades_average_index36\
    \ = grades_length - 36\n    local grades_average_index37 = grades_length - 37\n\
    \    local grades_average_index38 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj9h8o9r0.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_copy\
    \ = grades\n    local grades_copy2 = {}\n    local grades_copy3 = {}\n    local\
    \ grades_copy4 = {}\n    local grades_copy5 = {}\n    local grades_copy6 = {}\n\
    \    local grades_copy7 = {}\n    local grades_copy8 = {}\n    local grades_copy9\
    \ = {}\n    local grades_copy10 = {}\n    local grades_copy11 = {}\n    local\
    \ grades_copy12 = {}\n    local grades_copy13 = {}\n    local grades_copy14 =\
    \ {}\n    local grades_copy15 = {}\n    local grades_copy16 = {}\n    local grades_copy17\
    \ = {}\n    local grades_copy18 = {}\n    local grades_copy19 = {}\n    local\
    \ grades_copy20 = {}\n    local grades_copy21 = {}\n    local grades_copy22 =\
    \ {}\n    local grades_copy23 = {}\n    local grades_copy24 = {}\n    local grades_copy25\
    \ = {}\n    local grades_copy26 = {}\n    local grades_copy27 = {}\n    local\
    \ grades_copy28 = {}\n    local grades_copy29 = {}\n    local grades_copy30 =\
    \ {}\n    local grades_copy31 = {}\n    local grades_copy32 = {}\n    local grades_copy33\
    \ = {}\n    local grades_copy34 = {}\n    local grades_copy35 = {}\n    local\
    \ grades_copy36 = {}\n    local grades_copy37 = {}\n    local grades_copy38 =\
    \ {}\n    local grades_copy39 = {}\n    local grades_copy40 = {}\n    local grades_copy41\
    \ = {}\n    local grades_copy42 = {}\n    local grades_copy43 = {}\n    local\
    \ grades_copy44 = {}\n    local grades_copy45 = {}\n    local grades_copy46 =\
    \ {}\n    local grades_copy47 = {}\n    local grades_copy48 = {}\n    local grades_copy49\
    \ = {}\n    local grades_copy50 = {}\n    local grades_copy51 = {}\n    local\
    \ grades_copy52 = {}\n    local grades_copy53 = {}\n    local grades_copy54 =\
    \ {}\n    local grades_copy55 = {}\n    local grades_copy56 = {}\n    local grades_copy57\
    \ = {}\n    local grades_copy58 = {}\n    local grades_copy59 = {}\n    local\
    \ grades_copy60 = {}\n    local grades_copy61 = {}\n    local grades_copy62 =\
    \ {}\n    local grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4_0wlb6n.lua:98: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  local grades_index = 1\n  local grades_index_max = grades_length - 1\n\
    \  while grades_index <= grades_index_max do\n    local grade = grades_sorted[grades_index]\n\
    \    local grade_index = 1\n    local grade_index_max = grades_length - grade_index\
    \ - 1\n    while grade_index <= grade_index_max do\n      if grade < grades_sorted[grade_index\
    \ + 1] then\n        table.insert(letter_grades, grades_sorted[grade_index + 1]..'-')\n\
    \      elseif grade > grades_sorted[grade_index + 1] then\n        table.insert(letter_grades,\
    \ grades_sorted[grade_index]..'+')\n      else\n        table.insert(letter_grades,\
    \ grades_sorted[grade_index]..'')\n      end\n      grade_index = grade_index\
    \ + 1\n    end\n    grades_index = grades_index + 1\n  end\n  return table.concat(letter_grades,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1uhyet2.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpv1uhyet2.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted and grades_sorted[grades_length / 2] or 0\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwsmz27qa.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  local grades_sum2 = 0\n  local grades_count2\
    \ = 0\n  local grades_sum3 = 0\n  local grades_count3 = 0\n  local grades_sum4\
    \ = 0\n  local grades_count4 = 0\n  local grades_sum5 = 0\n  local grades_count5\
    \ = 0\n  local grades_sum6 = 0\n  local grades_count6 = 0\n  local grades_sum7\
    \ = 0\n  local grades_count7 = 0\n  local grades_sum8 = 0\n  local grades_count8\
    \ = 0\n  local grades_sum9 = 0\n  local grades_count9 = 0\n  local grades_sum10\
    \ = 0\n  local grades_count10 = 0\n  local grades_sum11 = 0\n  local grades_count11\
    \ = 0\n  local grades_sum12 = 0\n  local grades_count12 = 0\n  local grades_sum13\
    \ = 0\n  local grades_count13 = 0\n  local grades_sum14 = 0\n  local grades_count14\
    \ = 0\n  local grades_sum15 = 0\n  local grades_count15 = 0\n  local grades_sum16\
    \ = 0\n  local grades_count16 = 0\n  local grades_sum17 = 0\n  local grades_count17\
    \ = 0\n  local grades_sum18 = 0\n  local grades_count18 = 0\n  local grades_sum19\
    \ = 0\n  local grades_count19 = 0\n  local grades_sum20 = 0\n  local grades_count20\
    \ = 0\n  local grades_sum21 = 0\n  local grades_count21 = 0\n  local grades_sum22\
    \ = 0\n  local grades_count22 = 0\n  local grades_sum23 = 0\n  local grades_count23\
    \ = 0\n  local grades_sum24 = 0\n  local grades_count24 = 0\n  local grades_sum25\
    \ = 0\n  local grades_count25 = 0\n  local grades_sum26 = 0\n  local grades_count26\
    \ = 0\n  local grades_sum27 = 0\n  local grades_count27 = 0\n  local grades_sum28\
    \ = 0\n  local grades_count28 = 0\n  local grades_sum29 = 0\n  local grades_count29\
    \ = 0\n  local grades_sum30 = 0\n  local grades_count30 = 0\n  local grades_sum31\
    \ = 0\n  local grades_count31 = 0\n  local grades_sum32 = 0\n  local grades_count32\
    \ = 0\n  local grade\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbksg4sem.lua:100: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprabbnuu0.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa\
    \ = grades[i]\n    local letter_grade = \n      gpa > 3.0 and 'A+' \n      or\
    \ gpa > 2.0 and 'A'\n      or gpa > 1.7 and 'A-'\n      or gpa > 1.3 and 'B+'\n\
    \      or gpa > 0.7 and 'B'\n      or gpa > 0.0 and 'B-'\n      or gpa > -0.0\
    \ and 'C+'\n      or gpa > -1.0 and 'C'\n      or gpa > -1.7 and 'C-'\n      or\
    \ gpa > -2.0 and 'D+'\n      or gpa > -2.7 and 'D'\n      or gpa > -3.0 and 'D-'\n\
    \      or gpa > -3.7 and 'E'\n      or gpa > -4.0 and 'F'\n      or gpa > -4.7\
    \ and 'F'\n      or gpa > -5.0 and 'F'\n      or gpa > -5.7 and 'F'\n      or\
    \ gpa > -6.0 and 'F'\n      or gpa > -6.7 and 'F'\n      or gpa > -7.0 and 'F'\n\
    \      or gpa > -7.7 and 'F'\n      or gpa > -8.0 and 'F'\n      or gpa > -8.7\
    \ and 'F'\n      or gpa > -9.0 and 'F'\n      or gpa > -9.7 and 'F'\n      or\
    \ gpa > -10.0 and 'F'\n      or gpa > -10.7 and 'F'\n      or gpa > -11.0 and\
    \ 'F'\n      or gpa > -11.7 and 'F'\n      or gpa > -12.0 and 'F'\n      or gpa\
    \ > -12.7 and 'F'\n      or gpa > -13.0 and 'F'\n      or gpa > -13.7 and 'F'\n\
    \      or gpa > -14.0 and 'F'\n      or gpa > -14.7 and 'F'\n      or gpa > -15.0\
    \ and 'F'\n      or gpa > -15.7 and 'F'\n      or gpa > -16.0 and 'F'\n      or\
    \ gpa > -16.7 and 'F'\n      or gpa > -17.0 and 'F'\n      or \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphp5yd3m6.lua:69: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted[grades_length / 2]\n    local grades_average_index = grades_length\
    \ - 1\n    local grades_average_index2 = grades_length - 2\n    local grades_average_index3\
    \ = grades_length - 3\n    local grades_average_index4 = grades_length - 4\n \
    \   local grades_average_index5 = grades_length - 5\n    local grades_average_index6\
    \ = grades_length - 6\n    local grades_average_index7 = grades_length - 7\n \
    \   local grades_average_index8 = grades_length - 8\n    local grades_average_index9\
    \ = grades_length - 9\n    local grades_average_index10 = grades_length - 10\n\
    \    local grades_average_index11 = grades_length - 11\n    local grades_average_index12\
    \ = grades_length - 12\n    local grades_average_index13 = grades_length - 13\n\
    \    local grades_average_index14 = grades_length - 14\n    local grades_average_index15\
    \ = grades_length - 15\n    local grades_average_index16 = grades_length - 16\n\
    \    local grades_average_index17 = grades_length - 17\n    local grades_average_index18\
    \ = grades_length - 18\n    local grades_average_index19 = grades_length - 19\n\
    \    local grades_average_index20 = grades_length - 20\n    local grades_average_index21\
    \ = grades_length - 21\n    local grades_average_index22 = grades_length - 22\n\
    \    local grades_average_index23 = grades_length - 23\n    local grades_average_index24\
    \ = grades_length - 24\n    local grades_average_index25 = grades_length - 25\n\
    \    local grades_average_index26 = grades_length - 26\n    local grades_average_index27\
    \ = grades_length - 27\n    local grades_average_index28 = grades_length - 28\n\
    \    local grades_average_index29 = grades_length - 29\n    local grades_average_index30\
    \ = grades_length - 30\n    local grades_average_index31 = grades_length - 31\n\
    \    local grades_average_index32 = grades_length - 32\n    local grades_average_index33\
    \ = grades_length - 33\n    local grades_average_index34 = grades_length - 34\n\
    \    local grades_average_index35 = grades_length - 35\n    local grades_average_index36\
    \ = grades_length - 36\n    local grades_average_index37 = grades_length - 37\n\
    \    local grades_average_index38\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxjawdpq7.lua:76: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp59aigk95.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa =\
    \ grades[i]\n    local letter_grade = ''\n    if gpa > 3.0 then\n      letter_grade\
    \ = 'A+'\n    elseif gpa > 2.7 then\n      letter_grade = 'A'\n    elseif gpa\
    \ > 2.0 then\n      letter_grade = 'B+'\n    elseif gpa > 1.7 then\n      letter_grade\
    \ = 'B'\n    elseif gpa > 1.0 then\n      letter_grade = 'B-'\n    elseif gpa\
    \ > 0.7 then\n      letter_grade = 'C+'\n    elseif gpa > 0.3 then\n      letter_grade\
    \ = 'C'\n    elseif gpa > 0.0 then\n      letter_grade = 'C-'\n    elseif gpa\
    \ > 0.0 then\n      letter_grade = 'D+'\n    elseif gpa > 0.0 then\n      letter_grade\
    \ = 'D'\n    else\n      letter_grade = 'D-'\n    end\n    grades_table[i] = {gpa,\
    \ letter_grade}\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kbknru8.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4, \"A+\"}, {3,\
    \ \"A\"}, {1.7, \"B-\"}, {2, \"B\"}, {3.5, \"A+\"}}\nstack traceback:\n\t/tmp/tmp8kbknru8.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average + 100\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ 100\n  local grades_average = grades_average + 100\n  local grades_average =\
    \ grades_average / grades_length\n  local grades_average = grades_average * 100\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ + 100\n  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average + 100\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ 100\n  local grades_average = grades_average + 100\n  local grades_average =\
    \ grades_average / grades_length\n  local grades_average = grades_average * 100\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ + 100\n  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8qyy9g2h.lua:76: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  for i = 1, grades_length do\n    local grade = grades_sorted[i]\n  \
    \  local grade_string = string.format('%.1f', grade)\n    local letter_grade =\
    \ string.sub(grade_string, 1, 1)\n    letter_grades[#letter_grades+1] = letter_grade\n\
    \  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kwre5bo.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp5kwre5bo.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0ahgsjx.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpf0ahgsjx.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = 0\n  local grades_average_sum\
    \ = 0\n  local grades_average_difference = 0\n  local grades_average_difference_sum\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_average_difference_count\
    \ = 0\n  local grades_average_difference_count = 0\n  local grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmi5dal14.lua:92: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / (grades_length - 1)\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = math.floor(grades_average)\n    local grades_average\
    \ = grades_average + 50\n    local grades_average = grades_average / 100\n   \
    \ local grades_average = grades_average * 100\n    local grades_average = math.floor(grades_average)\n\
    \    local grades_average = grades_average + 50\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = math.floor(grades_average)\n    local grades_average = grades_average + 50\n\
    \    local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = math.floor(grades_average)\n    local grades_average\
    \ = grades_average + 50\n    local grades_average = grades_average / 100\n   \
    \ local grades_average = grades_average * 100\n    local grades_average = math.floor(grades_average)\n\
    \    local grades_average = grades_average + 50\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = math.floor(grades_average)\n    local grades_average = grades_average + 50\n\
    \    local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = math.floor(grades_average)\n    local grades_average\
    \ = grades_average + 50\n    local grades_average = grades_average / 100\n   \
    \ local grades_average = grades_average * 100\n    local grades_average = math.floor(grades_average)\n\
    \    local grades_average = grades_average + 50\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = math.floor(grades_average)\n    local grades_average = grades_average + 50\n\
    \    local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = math.floor(grades_average)\n    local grades_average\
    \ = grades_average + \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe4dt6rsq.lua:65: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  local grades_sum2 = 0\n  local grades_sum3\
    \ = 0\n  local grades_sum4 = 0\n  local grades_sum5 = 0\n  local grades_sum6 =\
    \ 0\n  local grades_sum7 = 0\n  local grades_sum8 = 0\n  local grades_sum9 = 0\n\
    \  local grades_sum10 = 0\n  local grades_sum11 = 0\n  local grades_sum12 = 0\n\
    \  local grades_sum13 = 0\n  local grades_sum14 = 0\n  local grades_sum15 = 0\n\
    \  local grades_sum16 = 0\n  local grades_sum17 = 0\n  local grades_sum18 = 0\n\
    \  local grades_sum19 = 0\n  local grades_sum20 = 0\n  local grades_sum21 = 0\n\
    \  local grades_sum22 = 0\n  local grades_sum23 = 0\n  local grades_sum24 = 0\n\
    \  local grades_sum25 = 0\n  local grades_sum26 = 0\n  local grades_sum27 = 0\n\
    \  local grades_sum28 = 0\n  local grades_sum29 = 0\n  local grades_sum30 = 0\n\
    \  local grades_sum31 = 0\n  local grades_sum32 = 0\n  local grades_sum33 = 0\n\
    \  local grades_sum34 = 0\n  local grades_sum35 = 0\n  local grades_sum36 = 0\n\
    \  local grades_sum37 = 0\n  local grades_sum38 = 0\n  local grades_sum39 = 0\n\
    \  local grades_sum40 = 0\n  local grades_sum41 = 0\n  local grades_sum42 = 0\n\
    \  local grades_sum43 = 0\n  local grades_sum44 = 0\n  local grades_sum45 = 0\n\
    \  local grades_sum46 = 0\n  local grades_sum47 = 0\n  local grades_sum48 = 0\n\
    \  local grades_sum49 = 0\n  local grades_sum50 = 0\n  local grades_sum51 = 0\n\
    \  local grades_sum52 = 0\n  local grades_sum53 = 0\n  local grades_sum54 = 0\n\
    \  local grades_sum55 = 0\n  local grades_sum56 = 0\n  local grades_sum57 = 0\n\
    \  local grades_sum58 = 0\n  local grades_sum59 = 0\n  local grades_sum60 = 0\n\
    \  local grades_sum61 = 0\n  local grades_sum62 = 0\n  local grades_sum63 = 0\n\
    \  local grade\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw8fxchs3.lua:100: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum + grades[i]\n  end\n\
    \  local grades_avg = grades_sum / #grades\n  local grades_diff = 0\n  for i =\
    \ 1, #grades do\n    grades_diff = grades_diff + (grades[i] - grades_avg)\n  end\n\
    \  local grades_diff_avg = grades_diff / #grades\n  local grades_diff_sqr = 0\n\
    \  for i = 1, #grades do\n    grades_diff_sqr = grades_diff_sqr + math.pow(grades[i]\
    \ - grades_avg, 2)\n  end\n  local grades_diff_sqr_avg = grades_diff_sqr / #grades\n\
    \  local grades_diff_sqr_max = grades_diff_sqr / math.max(#grades, 1)\n  local\
    \ grades_diff_sqr_min = grades_diff_sqr / math.min(#grades, 1)\n  local grades_diff_sqr_avg\
    \ = grades_diff_sqr / math.max(#grades, 1)\n  local grades_diff_sqr_avg = grades_diff_sqr\
    \ / math.min(#grades, 1)\n  local grades_diff_sqr_avg = grades_diff_sqr / math.max(#grades,\
    \ 1)\n  local grades_diff_sqr_avg = grades_diff_sqr / math.min(#grades, 1)\n \
    \ local grades_diff_sqr_avg = grades_diff_sqr / math.max(#grades, 1)\n  local\
    \ grades_diff_sqr_avg = grades_diff_sqr / math.min(#grades, 1)\n  local grades_diff_sqr_avg\
    \ = grades_diff_sqr / math.max(#grades, 1)\n  local grades_diff_sqr_avg = grades_diff_sqr\
    \ / math.min(#grades, 1)\n  local grades_diff_sqr_avg = grades_diff_sqr / math.max(#grades,\
    \ 1)\n  local grades_diff_sqr_avg = grades_diff_sqr / math.min(#grades, 1)\n \
    \ local grades_diff_sqr_avg = grades_diff_sqr / math.max(#grades, 1)\n  local\
    \ grades_diff_sqr_avg = grades_diff_sqr / math.min(#grades, 1)\n  local grades_diff_sqr_avg\
    \ = grades_diff_sqr / math.max(#grades, 1)\n  local grades_diff_sqr_avg = grades_diff_sqr\
    \ / math.min(#grades, 1)\n  local grades_diff_sqr_avg = grades_diff_sqr / math.max(#grades,\
    \ 1)\n  local grades_diff_sqr_avg = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps7a1zx3n.lua:56: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_string\
    \ = \"\"\n    for i = 1, #grades do\n        local grade = grades[i]\n       \
    \ if grade < 3.0 then\n            grades_string = grades_string .. \"A+\"\n \
    \       elseif grade < 3.7 then\n            grades_string = grades_string ..\
    \ \"A\"\n        elseif grade < 4.0 then\n            grades_string = grades_string\
    \ .. \"A-\"\n        elseif grade < 4.3 then\n            grades_string = grades_string\
    \ .. \"B+\"\n        elseif grade < 4.7 then\n            grades_string = grades_string\
    \ .. \"B\"\n        elseif grade < 5.0 then\n            grades_string = grades_string\
    \ .. \"B-\"\n        elseif grade < 5.3 then\n            grades_string = grades_string\
    \ .. \"C+\"\n        elseif grade < 5.7 then\n            grades_string = grades_string\
    \ .. \"C\"\n        elseif grade < 6.0 then\n            grades_string = grades_string\
    \ .. \"C-\"\n        elseif grade < 6.3 then\n            grades_string = grades_string\
    \ .. \"D+\"\n        elseif grade < 6.7 then\n            grades_string = grades_string\
    \ .. \"D\"\n        elseif grade < 7.0 then\n            grades_string = grades_string\
    \ .. \"D-\"\n        elseif grade < 7.3 then\n            grades_string = grades_string\
    \ .. \"E\"\n        else\n            grades_string = grades_string .. \"F\"\n\
    \        end\n    end\n    return grades_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp555c7dw.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B+AA+A+A\"\nstack\
    \ traceback:\n\t/tmp/tmpp555c7dw.lua:62: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ptc1z4g.lua:86: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx11chb94.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted and grades_sorted[grades_length / 2] or 0\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ 100\n  local grades_average = grades_average / 100\n  local grades_average =\
    \ grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2kfbasb_.lua:77: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa\
    \ = grades[i]\n    local letter_grade\n    if gpa > 3.0 then\n      letter_grade\
    \ = \"A+\"\n    elseif gpa > 2.7 then\n      letter_grade = \"A\"\n    elseif\
    \ gpa > 2.3 then\n      letter_grade = \"A-\"\n    elseif gpa > 2.0 then\n   \
    \   letter_grade = \"B+\"\n    elseif gpa > 1.7 then\n      letter_grade = \"\
    B\"\n    elseif gpa > 1.3 then\n      letter_grade = \"B-\"\n    elseif gpa >\
    \ 1.0 then\n      letter_grade = \"C+\"\n    elseif gpa > 0.7 then\n      letter_grade\
    \ = \"C\"\n    elseif gpa > 0.3 then\n      letter_grade = \"C-\"\n    elseif\
    \ gpa > 0.0 then\n      letter_grade = \"D+\"\n    elseif gpa > 0.0 then\n   \
    \   letter_grade = \"D\"\n    else\n      letter_grade = \"D-\"\n    end\n   \
    \ grades_string = grades_string .. letter_grade\n  end\n  return grades_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ky6i4bf.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+AB-BA+\"\nstack\
    \ traceback:\n\t/tmp/tmp9ky6i4bf.lua:61: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\n  local grades_average = grades_average * 100\n  local\
    \ grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average / 100\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average / 100\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkznaz11i.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp527hx2g3.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    if grade <\
    \ 3.0 then\n      grades_string = grades_string .. \"A-\"\n    elseif grade <\
    \ 3.7 then\n      grades_string = grades_string .. \"A-\"\n    elseif grade <\
    \ 4.0 then\n      grades_string = grades_string .. \"A+\"\n    elseif grade <\
    \ 4.7 then\n      grades_string = grades_string .. \"A+\"\n    elseif grade <\
    \ 5.0 then\n      grades_string = grades_string .. \"B+\"\n    elseif grade <\
    \ 5.7 then\n      grades_string = grades_string .. \"B+\"\n    elseif grade <\
    \ 6.0 then\n      grades_string = grades_string .. \"B\"\n    elseif grade < 6.7\
    \ then\n      grades_string = grades_string .. \"B\"\n    elseif grade < 7.0 then\n\
    \      grades_string = grades_string .. \"C+\"\n    elseif grade < 7.7 then\n\
    \      grades_string = grades_string .. \"C+\"\n    elseif grade < 8.0 then\n\
    \      grades_string = grades_string .. \"C\"\n    elseif grade < 8.7 then\n \
    \     grades_string = grades_string .. \"C\"\n    elseif grade < 9.0 then\n  \
    \    grades_string = grades_string .. \"D+\"\n    elseif grade < 9.7 then\n  \
    \    grades_string = grades_string .. \"D+\"\n    elseif grade < 10.0 then\n \
    \     grades_string = grades_string .. \"D\"\n    elseif grade < 10.7 then\n \
    \     grades_string = grades_string .. \"D\"\n    elseif grade < 11.0 then\n \
    \     grades_string = grades_string .. \"D-\"\n    elseif grade < 11.7 then\n\
    \      grades_string = grades_string .. \"D-\"\n    elseif grade < 12.0 then\n\
    \      grades_string = grades_string .. \"E\"\n    else\n      grades_string =\
    \ grades_string .. \"E\"\n    end\n  end\n  return grades_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlhhszga.lua:74:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+A-A-A-A-\"\nstack\
    \ traceback:\n\t/tmp/tmprlhhszga.lua:74: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_length\
    \ = #grades\n    local grades_average = sum(grades) / grades_length\n    local\
    \ grades_diff = {}\n    for i = 1, grades_length do\n        grades_diff[i] =\
    \ grades[i] - grades_average\n    end\n    local grades_diff_length = #grades_diff\n\
    \    local grades_diff_average = sum(grades_diff) / grades_diff_length\n    local\
    \ grades_diff_average = grades_diff_average / grades_length\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_average / 100\n    local grades_diff_average\
    \ = grades_diff_average * 100\n    local grades_diff_average = round(grades_diff_average)\n\
    \    local grades_diff_average = grades_diff_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmrp41nu5.lua:74: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    while grades_index < grades_length do\n\
    \        local grade = grades_sorted[grades_index]\n        if grade < 3.0 then\n\
    \            grades_letters[grades_index] = 'A+'\n        elseif grade < 4.0 then\n\
    \            grades_letters[grades_index] = 'A'\n        elseif grade < 5.0 then\n\
    \            grades_letters[grades_index] = 'A-'\n        elseif grade < 6.0 then\n\
    \            grades_letters[grades_index] = 'B+'\n        elseif grade < 7.0 then\n\
    \            grades_letters[grades_index] = 'B'\n        elseif grade < 8.0 then\n\
    \            grades_letters[grades_index] = 'B-'\n        elseif grade < 9.0 then\n\
    \            grades_letters[grades_index] = 'C+'\n        elseif grade < 10.0\
    \ then\n            grades_letters[grades_index] = 'C'\n        elseif grade <\
    \ 11.0 then\n            grades_letters[grades_index] = 'C-'\n        elseif grade\
    \ < 12.0 then\n            grades_letters[grades_index] = 'D+'\n        elseif\
    \ grade < 13.0 then\n            grades_letters[grades_index] = 'D'\n        elseif\
    \ grade < 14.0 then\n            grades_letters[grades_index] = 'D-'\n       \
    \ elseif grade < 15.0 then\n            grades_letters[grades_index] = 'E'\n \
    \       else\n            grades_letters[grades_index] = 'F'\n        end\n  \
    \      grades_index = grades_index + 1\n    end\n    return grades_letters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl0tvndd.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpdl0tvndd.lua:66: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted / grades_length\n    local grades_average_string = string.format(\"\
    %0.1f\", grades_average)\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \".\", \" \")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"%\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"-\", \"+\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"+\", \"-\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"%\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \".\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \" \", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"+\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"-\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \".\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"%\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"(\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \")\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"%\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"(\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \")\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \".\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \" \")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"+\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"-\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \".\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"%\", \"\")\n    local grades_average_string = string.gsub(grades_average_string,\
    \ \"(\", \"\")\n    local grades_average_string\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyqsy9xtu.lua:65: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    for _, grade in ipairs(grades) do\n        grades_sum = grades_sum\
    \ + grade\n    end\n    local grades_avg = grades_sum / #grades\n    local grades_diff\
    \ = 0\n    for _, grade in ipairs(grades) do\n        grades_diff = grades_diff\
    \ + (grade - grades_avg)\n    end\n    local grades_diff_ratio = grades_diff /\
    \ grades_avg\n    local grades_diff_ratio_rounded = round(grades_diff_ratio, 2)\n\
    \    local grades_diff_ratio_rounded_string = string.format(\"%.2f\", grades_diff_ratio_rounded)\n\
    \    local grades_diff_ratio_rounded_string_reversed = string.reverse(grades_diff_ratio_rounded_string)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed = string.reverse(grades_diff_ratio_rounded_string_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed = string.reverse(grades_diff_ratio_rounded_string_reversed_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed\
    \ = string.reverse(grades_diff_ratio_rounded_string_reversed_reversed_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed\
    \ = string.reverse(grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string.reverse(grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string.reverse(grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string.reverse(grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local grades_diff_ratio_rounded_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string.reverse(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4f1k4ycv.lua:44: ')' expected (to close '(' at line 43) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  local grades_average\
    \ = grades_sum / grades_count\n  local grades_letter = ''\n  if grades_average\
    \ >= 4.0 then\n    grades_letter = 'A+'\n  elseif grades_average >= 3.7 then\n\
    \    grades_letter = 'A'\n  elseif grades_average >= 3.3 then\n    grades_letter\
    \ = 'A-'\n  elseif grades_average >= 3.0 then\n    grades_letter = 'B+'\n  elseif\
    \ grades_average >= 2.7 then\n    grades_letter = 'B'\n  elseif grades_average\
    \ >= 2.3 then\n    grades_letter = 'B-'\n  elseif grades_average >= 2.0 then\n\
    \    grades_letter = 'C+'\n  elseif grades_average >= 1.7 then\n    grades_letter\
    \ = 'C'\n  elseif grades_average >= 1.3 then\n    grades_letter = 'C-'\n  elseif\
    \ grades_average >= 1.0 then\n    grades_letter = 'D+'\n  elseif grades_average\
    \ >= 0.7 then\n    grades_letter = 'D'\n  elseif grades_average >= 0.0 then\n\
    \    grades_letter = 'D-'\n  else\n    grades_letter = 'E'\n  end\n  return grades_letter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrta6ql9.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpzrta6ql9.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = 0\n  local grades_average_sum\
    \ = 0\n  local grades_average_average = 0\n  local grades_average_average_sum\
    \ = 0\n  local grades_average_average_average = 0\n  local grades_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average = 0\n  local grades_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average = 0\n  local grades_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average = 0\n  local\
    \ grades_average_average_average_average_average_average_sum = 0\n  local grades_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_sum\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_average_average_average_average_average\
    \ = 0\n  local grades_average_average_average_average_average_average_average_average_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt07js94_.lua:72: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letter_count = {}\n  local\
    \ grades_letter_count_index = 1\n  local grades_letter_count_index2 = 0\n  local\
    \ grades_letter_count_index3 = 0\n  local grades_letter_count_index4 = 0\n  local\
    \ grades_letter_count_index5 = 0\n  local grades_letter_count_index6 = 0\n  local\
    \ grades_letter_count_index7 = 0\n  local grades_letter_count_index8 = 0\n  local\
    \ grades_letter_count_index9 = 0\n  local grades_letter_count_index10 = 0\n  local\
    \ grades_letter_count_index11 = 0\n  local grades_letter_count_index12 = 0\n \
    \ local grades_letter_count_index13 = 0\n  local grades_letter_count_index14 =\
    \ 0\n  local grades_letter_count_index15 = 0\n  local grades_letter_count_index16\
    \ = 0\n  local grades_letter_count_index17 = 0\n  local grades_letter_count_index18\
    \ = 0\n  local grades_letter_count_index19 = 0\n  local grades_letter_count_index20\
    \ = 0\n  local grades_letter_count_index21 = 0\n  local grades_letter_count_index22\
    \ = 0\n  local grades_letter_count_index23 = 0\n  local grades_letter_count_index24\
    \ = 0\n  local grades_letter_count_index25 = 0\n  local grades_letter_count_index26\
    \ = 0\n  local grades_letter_count_index27 = 0\n  local grades_letter_count_index28\
    \ = 0\n  local grades_letter_count_index29 = 0\n  local grades_letter_count_index30\
    \ = 0\n  local grades_letter_count_index31 = 0\n  local grades_letter_count_index32\
    \ = 0\n  local grades_letter_count_index33 = 0\n  local grades_letter_count_index34\
    \ = 0\n  local grades_letter_count_index35 = 0\n  local grades_letter_count_index36\
    \ = 0\n  local grades_letter_count_index37 = 0\n  local grades_letter_count_index38\
    \ = 0\n  local grades_letter_count_index39 = 0\n  local grades_letter_count_index40\
    \ = 0\n  local grades_letter_count_index41 = 0\n  local grades_letter_count_index42\
    \ = 0\n  local grades_letter_count_index43 = 0\n  local grades_letter_count_index44\
    \ = 0\n  local grades_letter_count_index45 = 0\n  local grades_letter_count_index46\
    \ = 0\n  local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph5u26ov_.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  for i = 1, grades_length do\n    local grade = grades_sorted[i]\n  \
    \  local letter_grade = \n      ((grade >= 4.0 and 'A+') or\n       (grade > 3.7\
    \ and 'A') or\n       (grade > 3.3 and 'A-') or\n       (grade > 3.0 and 'B+')\
    \ or\n       (grade > 2.7 and 'B') or\n       (grade > 2.3 and 'B-') or\n    \
    \   (grade > 2.0 and 'C+') or\n       (grade > 1.7 and 'C') or\n       (grade\
    \ > 1.3 and 'C-') or\n       (grade > 1.0 and 'D+') or\n       (grade > 0.7 and\
    \ 'D') or\n       (grade > 0.0 and 'D-') or\n       'E')\n    table.insert(letter_grades,\
    \ letter_grade)\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kankhmd.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp6kankhmd.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * 100\n    local\
    \ grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5aplh8vj.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  local index = 1\n  while index < grades_length do\n    local grade =\
    \ grades_sorted[index]\n    local gpa = grades[1]\n    local letter_grade = nil\n\
    \    if gpa > 3.0 then\n      letter_grade = 'A+'\n    elseif gpa > 2.7 then\n\
    \      letter_grade = 'A'\n    elseif gpa > 2.0 then\n      letter_grade = 'B+'\n\
    \    elseif gpa > 1.7 then\n      letter_grade = 'B'\n    elseif gpa > 1.3 then\n\
    \      letter_grade = 'B-'\n    elseif gpa > 1.0 then\n      letter_grade = 'C+'\n\
    \    elseif gpa > 0.7 then\n      letter_grade = 'C'\n    elseif gpa > 0.3 then\n\
    \      letter_grade = 'C-'\n    elseif gpa > 0.0 then\n      letter_grade = 'D+'\n\
    \    elseif gpa > 0.0 then\n      letter_grade = 'D'\n    else\n      letter_grade\
    \ = 'E'\n    end\n    table.insert(letter_grades, letter_grade)\n    index = index\
    \ + 1\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a58f52r.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp2a58f52r.lua:63: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letters_index = 1\n  local\
    \ grades_letters_length = grades_length\n  local grades_letter_count = 1\n  local\
    \ grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n  local grades_letter_count_length = grades_length\n\
    \  local grades_letter_count_index = 1\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4_37nafj.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_sum = 0\n    local grades_count = 0\n\
    \    local grades_letters = {}\n    local grades_letter_grades = {}\n    local\
    \ grades_letter_grades_length = grades_length\n    local grades_letter_grades_average\
    \ = grades_letter_grades_length / 2\n    local grades_letter_grades_sum = 0\n\
    \    local grades_letter_grades_count = 0\n    local grades_letter_grades_letters\
    \ = {}\n    local grades_letter_grades_letter_grades = {}\n    local grades_letter_grades_letter_grades_length\
    \ = grades_letter_grades_length\n    local grades_letter_grades_letter_grades_average\
    \ = grades_letter_grades_letter_grades_length / 2\n    local grades_letter_grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_letter_grades_count = 0\n    local grades_letter_grades_letter_grades_letters\
    \ = {}\n    local grades_letter_grades_letter_grades_letter_grades = {}\n    local\
    \ grades_letter_grades_letter_grades_letter_grades_length = grades_letter_grades_letter_grades_length\n\
    \    local grades_letter_grades_letter_grades_letter_grades_average = grades_letter_grades_letter_grades_letter_grades_length\
    \ / 2\n    local grades_letter_grades_letter_grades_letter_grades_sum = 0\n  \
    \  local grades_letter_grades_letter_grades_letter_grades_count = 0\n    local\
    \ grades_letter_grades_letter_grades_letter_grades_letters = {}\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades\
    \ = {}\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades_length\
    \ = grades_letter_grades_letter_grades_letter_grades_length\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades_average\
    \ = grades_letter_grades_letter_grades_letter_grades_letter_grades_length / 2\n\
    \    local grades_letter_grades_letter_grades_letter_grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades_count\
    \ = 0\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades_letters\
    \ = {}\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades\
    \ = {}\n    local grades_letter_grades_letter_grades_letter_grades_letter_grades_letter_grades_length\
    \ = grades_letter_grades_letter_grade\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnrgl1oiv.lua:67: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average + grades_average\
    \ * 0.5\n  local grades_average = grades_average + grades_average * 0.5\n  local\
    \ grades_average = grades_average + grades_average * 0.5\n  local grades_average\
    \ = grades_average + grades_average * 0.5\n  local grades_average = grades_average\
    \ + grades_average * 0.5\n  local grades_average = grades_average + grades_average\
    \ * 0.5\n  local grades_average = grades_average + grades_average * 0.5\n  local\
    \ grades_average = grades_average + grades_average * 0.5\n  local grades_average\
    \ = grades_average + grades_average * 0.5\n  local grades_average = grades_average\
    \ + grades_average * 0.5\n  local grades_average = grades_average + grades_average\
    \ * 0.5\n  local grades_average = grades_average + grades_average * 0.5\n  local\
    \ grades_average = grades_average + grades_average * 0.5\n  local grades_average\
    \ = grades_average + grades_average * 0.5\n  local grades_average = grades_average\
    \ + grades_average * 0.5\n  local grades_average = grades_average + grades_average\
    \ * 0.5\n  local grades_average = grades_average + grades_average * 0.5\n  local\
    \ grades_average = grades_average + grades_average * 0.5\n  local grades_average\
    \ = grades_average + grades_average * 0.5\n  local grades_average = grades_average\
    \ + grades_average * 0.5\n  local grades_average = grades_average + grades_average\
    \ * 0.5\n  local grades_average = grades_average + grades_average * 0.5\n  local\
    \ grades_average = grades_average + grades_average * 0.5\n  local grades_average\
    \ = grades_average + grades_average * 0.5\n  local grades_average = grades_average\
    \ + grades_average * 0.5\n  local grades_average = grades_average + grades_average\
    \ * 0.5\n  local grades_average = grades_average + grades_average * 0.5\n  local\
    \ grades_average = grades_average + grades_average * 0.5\n  local grades_average\
    \ = grades_average + grades_average * 0.5\n  local grades_average = grades_average\
    \ + grades_average * 0.5\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuyxvc24a.lua:68: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  \n  if grades_count\
    \ > 0 then\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    local grades_letter_count = 0\n    local grades_letter_sum = 0\n \
    \   for i = 1, #grades do\n      grades_letter_sum = grades_letter_sum + grades[i]\n\
    \      if grades_letter_sum > grades_average then\n        grades_letter = grades_letter\
    \ + tostring(grades[i] + 64)\n        grades_letter_count = grades_letter_count\
    \ + 1\n      end\n    end\n    \n    if grades_letter_count > 0 then\n      grades_letter\
    \ = grades_letter + tostring(grades_average - 64)\n    end\n    return grades_letter\n\
    \  else\n    return 'E'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h5i3azn.lua:38:\
    \ attempt to perform arithmetic on local 'grades_letter' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmp6h5i3azn.lua:55: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_sorted_reverse = table.sort(grades_sorted)\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n\
    \  local grades_sorted_reverse = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse\
    \ = grades_sorted_reverse:reverse()\n  local grades_sorted_reverse = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpat_1_ztx.lua:58: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_string\
    \ = \"\"\n    for i = 1, #grades do\n        local grade = grades[i]\n       \
    \ local grade_string = string.gsub(grade, \".\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"-\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"+\", \" \")\n        grade_string = string.gsub(grade_string, \"/\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"*\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"(\", \" \")\n        grade_string = string.gsub(grade_string, \")\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n        grade_string = string.gsub(grade_string, \"%\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n        grade_string = string.gsub(grade_string, \"%\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n        grade_string = string.gsub(grade_string, \"%\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n        grade_string = string.gsub(grade_string, \"%\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n        grade_string = string.gsub(grade_string, \"%\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n        grade_string = string.gsub(grade_string, \"%\", \" \"\
    )\n        grade_string = string.gsub(grade_string, \"%\", \" \")\n        grade_string\
    \ = string.gsub(grade_string, \"%\", \" \")\n        grade_string = string.gsub(grade_string,\
    \ \"%\", \" \")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaejhh95b.lua:74: 'end' expected (to close 'for' at line 24)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    while grades_index < grades_length do\n\
    \        local grade = grades_sorted[grades_index]\n        local grade_index\
    \ = grades_index\n        while grade_index < grades_length do\n            if\
    \ grades_sorted[grade_index] == grade then\n                grades_letters[grades_index]\
    \ = grade\n                grades_index = grade_index + 1\n                break\n\
    \            elseif grades_sorted[grade_index] > grade then\n                grades_index\
    \ = grade_index + 1\n            else\n                grades_index = grades_index\
    \ + 1\n            end\n        end\n    end\n    return grades_letters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhzbv675.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnhzbv675.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  for _, grade in ipairs(grades) do\n    grades_sum = grades_sum + grade\n\
    \  end\n  local grades_avg = grades_sum / #grades\n  local grades_diff = 0\n \
    \ for _, grade in ipairs(grades) do\n    grades_diff = grades_diff + (grade -\
    \ grades_avg)\n  end\n  local grades_diff_avg = grades_diff / #grades\n  local\
    \ grades_diff_max = grades_diff / #grades\n  local grades_diff_min = grades_diff\
    \ / #grades\n  local grades_diff_max_avg = grades_diff_max / #grades\n  local\
    \ grades_diff_min_avg = grades_diff_min / #grades\n  local grades_diff_max_max_avg\
    \ = grades_diff_max_avg / #grades\n  local grades_diff_min_max_avg = grades_diff_min_avg\
    \ / #grades\n  local grades_diff_max_min_avg = grades_diff_max_avg / #grades\n\
    \  local grades_diff_min_min_avg = grades_diff_min_avg / #grades\n  local grades_diff_max_min_max_avg\
    \ = grades_diff_max_min_avg / #grades\n  local grades_diff_min_min_max_avg = grades_diff_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_avg = grades_diff_min_min_avg / #grades\n\
    \  local grades_diff_min_min_min_max_avg = grades_diff_min_min_max_avg / #grades\n\
    \  local grades_diff_min_min_min_max_avg = grades_diff_min_min_min_max_avg / #grades\n\
    \  local grades_diff_min_min_min_min_max_avg = grades_diff_min_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_min_max_avg = grades_diff_min_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_min_max_avg = grades_diff_min_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_min_max_avg = grades_diff_min_min_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_min_max_avg = grades_diff_min_min_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_min_max_avg = grades_diff_min_min_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_min_min_max_avg = grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2fd7bra4.lua:65: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_copy\
    \ = grades\n  local grades_copy2 = {}\n  local grades_copy3 = {}\n  local grades_copy4\
    \ = {}\n  local grades_copy5 = {}\n  local grades_copy6 = {}\n  local grades_copy7\
    \ = {}\n  local grades_copy8 = {}\n  local grades_copy9 = {}\n  local grades_copy10\
    \ = {}\n  local grades_copy11 = {}\n  local grades_copy12 = {}\n  local grades_copy13\
    \ = {}\n  local grades_copy14 = {}\n  local grades_copy15 = {}\n  local grades_copy16\
    \ = {}\n  local grades_copy17 = {}\n  local grades_copy18 = {}\n  local grades_copy19\
    \ = {}\n  local grades_copy20 = {}\n  local grades_copy21 = {}\n  local grades_copy22\
    \ = {}\n  local grades_copy23 = {}\n  local grades_copy24 = {}\n  local grades_copy25\
    \ = {}\n  local grades_copy26 = {}\n  local grades_copy27 = {}\n  local grades_copy28\
    \ = {}\n  local grades_copy29 = {}\n  local grades_copy30 = {}\n  local grades_copy31\
    \ = {}\n  local grades_copy32 = {}\n  local grades_copy33 = {}\n  local grades_copy34\
    \ = {}\n  local grades_copy35 = {}\n  local grades_copy36 = {}\n  local grades_copy37\
    \ = {}\n  local grades_copy38 = {}\n  local grades_copy39 = {}\n  local grades_copy40\
    \ = {}\n  local grades_copy41 = {}\n  local grades_copy42 = {}\n  local grades_copy43\
    \ = {}\n  local grades_copy44 = {}\n  local grades_copy45 = {}\n  local grades_copy46\
    \ = {}\n  local grades_copy47 = {}\n  local grades_copy48 = {}\n  local grades_copy49\
    \ = {}\n  local grades_copy50 = {}\n  local grades_copy51 = {}\n  local grades_copy52\
    \ = {}\n  local grades_copy53 = {}\n  local grades_copy54 = {}\n  local grades_copy55\
    \ = {}\n  local grades_copy56 = {}\n  local grades_copy57 = {}\n  local grades_copy58\
    \ = {}\n  local grades_copy59 = {}\n  local grades_copy60 = {}\n  local grades_copy61\
    \ = {}\n  local grades_copy62 = {}\n  local grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpahbhg5hf.lua:98: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  local grades_letters = {}\n  for i = 1, #grades\
    \ do\n    grades_sum = grades_sum + grades[i]\n    grades_count = grades_count\
    \ + 1\n    if grades_count == 1 then\n      grades_letters[i] = 'A+'\n    elseif\
    \ grades_count > 1 then\n      grades_letters[i] = 'A'\n    elseif grades_count\
    \ == 1 then\n      grades_letters[i] = 'B+'\n    elseif grades_count > 1 then\n\
    \      grades_letters[i] = 'B'\n    elseif grades_count == 1 then\n      grades_letters[i]\
    \ = 'C+'\n    elseif grades_count > 1 then\n      grades_letters[i] = 'C'\n  \
    \  elseif grades_count == 1 then\n      grades_letters[i] = 'D+'\n    elseif grades_count\
    \ > 1 then\n      grades_letters[i] = 'D'\n    elseif grades_count == 1 then\n\
    \      grades_letters[i] = 'D-'\n    elseif grades_count > 1 then\n      grades_letters[i]\
    \ = 'D'\n    elseif grades_count == 1 then\n      grades_letters[i] = 'E'\n  \
    \  end\n  end\n  return grades_letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wu1e_5h.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A\", \"\
    A\", \"A\", \"A\"}\nstack traceback:\n\t/tmp/tmp9wu1e_5h.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted / grades_length\n    local grades_average = grades_average:round()\n\
    \    local grades_average = grades_average:tostring()\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len()-1)\n    local grades_average =\
    \ grades_average:sub(1, grades_average:len()-1)\n    local grades_average = grades_average:sub(1,\
    \ grades_average:len()-1)\n    local grades_average = grades_average:sub(1, grades_average:len()-1)\n\
    \    local grades_average = grades_average:sub(1, grades_average:len()-1)\n  \
    \  local grades_average = grades_average:sub(1, grades_average:len()-1)\n    local\
    \ grades_average = grades_average:sub(1, grades_average:len()-1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len()-1)\n    local grades_average =\
    \ grades_average:sub(1, grades_average:len()-1)\n    local grades_average = grades_average:sub(1,\
    \ grades_average:len()-1)\n    local grades_average = grades_average:sub(1, grades_average:len()-1)\n\
    \    local grades_average = grades_average:sub(1, grades_average:len()-1)\n  \
    \  local grades_average = grades_average:sub(1, grades_average:len()-1)\n    local\
    \ grades_average = grades_average:sub(1, grades_average:len()-1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len()-1)\n    local grades_average =\
    \ grades_average:sub(1, grades_average:len()-1)\n    local grades_average = grades_average:sub(1,\
    \ grades_average:len()-1)\n    local grades_average = grades_average:sub(1, grades_average:len()-1)\n\
    \    local grades_average = grades_average:sub(1, grades_average:len()-1)\n  \
    \  local grades_average = grades_average:sub(1, grades_average:len()-1)\n    local\
    \ grades_average = grades_average:sub(1, grades_average:len()-1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len()-1)\n    local grades_average =\
    \ grades_average:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpawxmjaba.lua:51: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    local grades_letter_count = {}\n   \
    \ local grades_letter_count_index = 1\n    local grades_letter_count_index2 =\
    \ 0\n    local grades_letter_count_index3 = 0\n    local grades_letter_count_index4\
    \ = 0\n    local grades_letter_count_index5 = 0\n    local grades_letter_count_index6\
    \ = 0\n    local grades_letter_count_index7 = 0\n    local grades_letter_count_index8\
    \ = 0\n    local grades_letter_count_index9 = 0\n    local grades_letter_count_index10\
    \ = 0\n    local grades_letter_count_index11 = 0\n    local grades_letter_count_index12\
    \ = 0\n    local grades_letter_count_index13 = 0\n    local grades_letter_count_index14\
    \ = 0\n    local grades_letter_count_index15 = 0\n    local grades_letter_count_index16\
    \ = 0\n    local grades_letter_count_index17 = 0\n    local grades_letter_count_index18\
    \ = 0\n    local grades_letter_count_index19 = 0\n    local grades_letter_count_index20\
    \ = 0\n    local grades_letter_count_index21 = 0\n    local grades_letter_count_index22\
    \ = 0\n    local grades_letter_count_index23 = 0\n    local grades_letter_count_index24\
    \ = 0\n    local grades_letter_count_index25 = 0\n    local grades_letter_count_index26\
    \ = 0\n    local grades_letter_count_index27 = 0\n    local grades_letter_count_index28\
    \ = 0\n    local grades_letter_count_index29 = 0\n    local grades_letter_count_index30\
    \ = 0\n    local grades_letter_count_index31 = 0\n    local grades_letter_count_index32\
    \ = 0\n    local grades_letter_count_index33 = 0\n    local grades_letter_count_index34\
    \ = 0\n    local grades_letter_count_index35 = 0\n    local grades_letter_count_index36\
    \ = 0\n    local grades_letter_count_index37 = 0\n    local grades_letter_count_index38\
    \ = 0\n    local grades_letter_count_index39 = 0\n    local grades_letter_count_index40\
    \ = 0\n    local grades_letter_count_index41 = 0\n    local grades_letter_count_index42\
    \ = 0\n    local grades_letter_count_index43 = 0\n    local grades_letter_count_index44\
    \ = 0\n    local grades_letter_count_index45 = 0\n    local grades_letter_count_index46\
    \ = 0\n    local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4s9gq1bj.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    for i = 1, #grades do\n        grades_sum = grades_sum + grades[i]\n\
    \    end\n    local grades_average = grades_sum / #grades\n    local grades_difference\
    \ = grades_average - grades[1]\n    local grades_letter_grade = ''\n    if grades_difference\
    \ < 0 then\n        grades_letter_grade = 'D-'\n    elseif grades_difference >\
    \ 0 then\n        grades_letter_grade = 'D+'\n    elseif grades_difference ==\
    \ 0 then\n        grades_letter_grade = 'D'\n    else\n        grades_letter_grade\
    \ = 'E'\n    end\n    return grades_letter_grade\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ffdusmv.lua:45:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"D-\"\nstack traceback:\n\
    \t/tmp/tmp6ffdusmv.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  for i = 1, grades_length do\n    local grade = grades_sorted[i]\n  \
    \  local letter = string.sub(grade, 2, 1)\n    if grade > 0 then\n      table.insert(letter_grades,\
    \ letter)\n    end\n  end\n  return table.concat(letter_grades, \"\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofpdgl0e.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpofpdgl0e.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp26wy2stp.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2nkyr70z.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  local grades_letters = {}\n  for i = 1, #grades\
    \ do\n    grades_sum = grades_sum + grades[i]\n    grades_count = grades_count\
    \ + 1\n  end\n  if grades_count > 0 then\n    grades_letters[#grades_letters +\
    \ 1] = grades_sum / grades_count\n  end\n  return grades_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxeflqvx.lua:39:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {2.84}\nstack traceback:\n\
    \t/tmp/tmphxeflqvx.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local letter_grade\
    \ = ''\n    if gpa > 3.0 then\n        grades_table[1] = 'A+'\n    elseif gpa\
    \ > 2.7 then\n        grades_table[1] = 'A'\n    elseif gpa > 2.0 then\n     \
    \   grades_table[1] = 'B+'\n    elseif gpa > 1.7 then\n        grades_table[1]\
    \ = 'B'\n    elseif gpa > 1.0 then\n        grades_table[1] = 'C+'\n    elseif\
    \ gpa > 0.7 then\n        grades_table[1] = 'C'\n    elseif gpa > 0.0 then\n \
    \       grades_table[1] = 'D+'\n    elseif gpa > 0.0 then\n        grades_table[1]\
    \ = 'D'\n    elseif gpa > 0.0 then\n        grades_table[1] = 'D-'\n    elseif\
    \ gpa > 0.0 then\n        grades_table[1] = 'E'\n    end\n    if grade > 3.0 then\n\
    \        grades_table[2] = 'A+'\n    elseif grade > 2.7 then\n        grades_table[2]\
    \ = 'A'\n    elseif grade > 2.0 then\n        grades_table[2] = 'B+'\n    elseif\
    \ grade > 1.7 then\n        grades_table[2] = 'B'\n    elseif grade > 1.0 then\n\
    \        grades_table[2] = 'C+'\n    elseif grade > 0.7 then\n        grades_table[2]\
    \ = 'C'\n    elseif grade > 0.0 then\n        grades_table[2] = 'D+'\n    elseif\
    \ grade > 0.0 then\n        grades_table[2] = 'D'\n    elseif grade > 0.0 then\n\
    \        grades_table[2] = 'D-'\n    elseif grade > 0.0 then\n        grades_table[2]\
    \ = 'E'\n    end\n    if grade > 3.0 then\n        grades_table[3] = 'A+'\n  \
    \  elseif grade > 2.7 then\n        grades_table[3] = 'A'\n    elseif grade >\
    \ 2.0 then\n        grades_table[3] = 'B+'\n    elseif grade > 1.7 then\n    \
    \    grades_table[3] = 'B'\n    elseif grade > 1.0 then\n        grades_table[3]\
    \ = 'C+'\n    elseif grade > 0.7 then\n        grades_table[3] = 'C'\n    elseif\
    \ grade > 0.0 then\n        grades_table[3] = 'D+'\n    elseif grade > 0.0 then\n\
    \        grades_table\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcjclpz53.lua:85: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted and grades_sorted[grades_length/2] or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average or 0\n  local\
    \ grades_average = grades_average or 0\n  local grades_average = grades_average\
    \ or 0\n  local grades_average = grades_average or 0\n  local grades_average =\
    \ grades_average or 0\n  local grades_average = grades_average or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average or 0\n  local\
    \ grades_average = grades_average or 0\n  local grades_average = grades_average\
    \ or 0\n  local grades_average = grades_average or 0\n  local grades_average =\
    \ grades_average or 0\n  local grades_average = grades_average or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average or 0\n  local\
    \ grades_average = grades_average or 0\n  local grades_average = grades_average\
    \ or 0\n  local grades_average = grades_average or 0\n  local grades_average =\
    \ grades_average or 0\n  local grades_average = grades_average or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average or 0\n  local\
    \ grades_average = grades_average or 0\n  local grades_average = grades_average\
    \ or 0\n  local grades_average = grades_average or 0\n  local grades_average =\
    \ grades_average or 0\n  local grades_average = grades_average or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average or 0\n  local\
    \ grades_average = grades_average or 0\n  local grades_average = grades_average\
    \ or 0\n  local grades_average = grades_average or 0\n  local grades_average =\
    \ grades_average or 0\n  local grades_average = grades_average or 0\n  local grades_average\
    \ = grades_average or 0\n  local grades_average = grades_average or 0\n  local\
    \ grades_average = grades_average or 0\n  local grades_average = grades_average\
    \ or 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp55oimju_.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  local grades_average\
    \ = grades_sum / grades_count\n  local grades_letter = ''\n  if grades_average\
    \ >= 4.0 then\n    grades_letter = 'A+'\n  elseif grades_average >= 3.7 then\n\
    \    grades_letter = 'A'\n  elseif grades_average >= 3.3 then\n    grades_letter\
    \ = 'A-'\n  elseif grades_average >= 3.0 then\n    grades_letter = 'B+'\n  elseif\
    \ grades_average >= 2.7 then\n    grades_letter = 'B'\n  elseif grades_average\
    \ >= 2.3 then\n    grades_letter = 'B-'\n  elseif grades_average >= 2.0 then\n\
    \    grades_letter = 'C+'\n  elseif grades_average >= 1.7 then\n    grades_letter\
    \ = 'C'\n  elseif grades_average >= 1.3 then\n    grades_letter = 'C-'\n  elseif\
    \ grades_average >= 1.0 then\n    grades_letter = 'D+'\n  elseif grades_average\
    \ >= 0.7 then\n    grades_letter = 'D'\n  elseif grades_average >= 0.0 then\n\
    \    grades_letter = 'D-'\n  else\n    grades_letter = 'E'\n  end\n  return grades_letter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ctfo9w.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmph2ctfo9w.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted and grades_sorted[grades_length/2] or 0\n  local grades_average\
    \ = grades_average and grades_average/grades_length\n  local grades_average =\
    \ grades_average and grades_average*100\n  local grades_average = grades_average\
    \ and grades_average/100\n  local grades_average = grades_average and grades_average*10\n\
    \  local grades_average = grades_average and grades_average/10\n  local grades_average\
    \ = grades_average and grades_average*1\n  local grades_average = grades_average\
    \ and grades_average/1\n  local grades_average = grades_average and grades_average*0.5\n\
    \  local grades_average = grades_average and grades_average/0.5\n  local grades_average\
    \ = grades_average and grades_average*0.25\n  local grades_average = grades_average\
    \ and grades_average/0.25\n  local grades_average = grades_average and grades_average*0.125\n\
    \  local grades_average = grades_average and grades_average/0.125\n  local grades_average\
    \ = grades_average and grades_average*0.0625\n  local grades_average = grades_average\
    \ and grades_average/0.0625\n  local grades_average = grades_average and grades_average*0.03125\n\
    \  local grades_average = grades_average and grades_average/0.03125\n  local grades_average\
    \ = grades_average and grades_average*0.0078125\n  local grades_average = grades_average\
    \ and grades_average/0.0078125\n  local grades_average = grades_average and grades_average*0.00390625\n\
    \  local grades_average = grades_average and grades_average/0.00390625\n  local\
    \ grades_average = grades_average and grades_average*0.001953125\n  local grades_average\
    \ = grades_average and grades_average/0.001953125\n  local grades_average = grades_average\
    \ and grades_average*0.0009765625\n  local grades_average = grades_average and\
    \ grades_average/0.0009765625\n  local grades_average = grades_average and grades_average*0.00064453125\n\
    \  local grades_average = grades_average and grades_average/0.00064\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5poatfmi.lua:65: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted[grades_length / 2]\n  local grades_average_index = grades_length\
    \ - 1\n  local grades_average_next = grades_sorted[grades_average_index]\n  local\
    \ grades_average_next_index = grades_average_index - 1\n  local grades_average_next_next\
    \ = grades_sorted[grades_average_next_index]\n  local grades_average_next_next_index\
    \ = grades_average_next_index - 1\n  local grades_average_next_next_next = grades_sorted[grades_average_next_next_index]\n\
    \  local grades_average_next_next_next_index = grades_average_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next = grades_sorted[grades_average_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_index = grades_average_next_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next_next = grades_sorted[grades_average_next_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_next_index = grades_average_next_next_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next_next_next = grades_sorted[grades_average_next_next_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_next_next_index = grades_average_next_next_next_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next_next_next_next = grades_sorted[grades_average_next_next_next_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_next_next_next_index = grades_average_next_next_next_next_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next_next_next_next_next = grades_sorted[grades_average_next_next_next_next_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_next_next_next_next_index = grades_average_next_next_next_next_next_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next_next_next_next_next_next = grades_sorted[grades_average_next_next_next_next_next_next_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_next_next_next_next_next_index = grades_average_next_next_next_next_next_next_next_next_next_index\
    \ - 1\n  local grades_average_next_next_next_next_next_next_next_next_next_next\
    \ = grades_sorted[grades_average_next_next_next_next_next_next_next_next_next_index]\n\
    \  local grades_average_next_next_next_next_next_next_next_next_next_next_index\
    \ = grades_average_next_next_next_next_next_next_next_next_next_next_next_index\
    \ - 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6hfox_i6.lua:60: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average * grades_average\n \
    \ local grades_average = grades_average * grades_average\n  local grade\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92v6qbai.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwoegp1i1.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average_rounded = round(grades_average)\n\
    \    local grades_average_rounded_length = math.floor(grades_average_rounded)\n\
    \    local grades_average_rounded_remainder = grades_average_rounded - grades_average_rounded_length\n\
    \    local grades_average_rounded_remainder_length = math.floor(grades_average_rounded_remainder)\n\
    \    local grades_average_rounded_remainder_remainder = grades_average_rounded_remainder\
    \ - grades_average_rounded_remainder_length\n    local grades_average_rounded_remainder_remainder_length\
    \ = math.floor(grades_average_rounded_remainder_remainder)\n    local grades_average_rounded_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder - grades_average_rounded_remainder_remainder_length\n\
    \    local grades_average_rounded_remainder_remainder_remainder_length = math.floor(grades_average_rounded_remainder_remainder_remainder)\n\
    \    local grades_average_rounded_remainder_remainder_remainder_remainder = grades_average_rounded_remainder_remainder_remainder\
    \ - grades_average_rounded_remainder_remainder_remainder_length\n    local grades_average_rounded_remainder_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder_remainder_remainder - grades_average_rounded_remainder_remainder_remainder_length\n\
    \    local grades_average_rounded_remainder_remainder_remainder_remainder = grades_average_rounded_remainder_remainder_remainder_remainder\
    \ - grades_average_rounded_remainder_remainder_remainder_remainder\n    local\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_length = math.floor(grades_average_rounded_remainder_remainder_remainder_remainder)\n\
    \    local grades_average_rounded_remainder_remainder_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder_remainder_remainder_remainder -\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_length\n    local\
    \ grades_average_rounded_remainder_remainder_remainder_remainder_remainder = grades_average_rounded_remainder_remainder_remainder_remainder_remainder\
    \ - grades_average_rounded_remainder_remainder_remainder_remainder_length\n  \
    \  local grades_average_rounded_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = grades_average_rounded_remainder_remainder_remainder_remainder_remainder_remainder\
    \ - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvolpdarg.lua:41: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_rounded = math.floor(grades_average)\n\
    \  local grades_average_rounded_plus = grades_average_rounded + 1\n  local grades_average_rounded_minus\
    \ = grades_average_rounded - 1\n  local grades_average_rounded_plus_and_minus\
    \ = grades_average_rounded + 0.5\n  local grades_average_rounded_plus_and_minus_plus\
    \ = grades_average_rounded + 1.5\n  local grades_average_rounded_plus_and_minus_minus\
    \ = grades_average_rounded - 0.5\n  local grades_average_rounded_minus_and_plus\
    \ = grades_average_rounded - 1.5\n  local grades_average_rounded_minus_and_minus_plus\
    \ = grades_average_rounded - 0.5\n  local grades_average_rounded_plus_and_minus_minus_plus\
    \ = grades_average_rounded + 1.5\n  local grades_average_rounded_minus_and_minus_minus_plus\
    \ = grades_average_rounded - 1.5\n  local grades_average_rounded_plus_and_minus_minus_minus_plus\
    \ = grades_average_rounded + 0.5\n  local grades_average_rounded_minus_and_minus_minus_minus_plus\
    \ = grades_average_rounded - 0.5\n  local grades_average_rounded_plus_and_minus_minus_minus_minus_plus\
    \ = grades_average_rounded + 1.5\n  local grades_average_rounded_minus_and_minus_minus_minus_minus_plus\
    \ = grades_average_rounded - 1.5\n  local grades_average_rounded_plus_and_minus_minus_minus_minus_minus_plus\
    \ = grades_average_rounded + 0.5\n  local grades_average_rounded_minus_and_minus_minus_minus_minus_minus_s\
    \ = grades_average_rounded - 0.5\n  local grades_average_rounded_plus_and_minus_minus_minus_minus_minus_minus_s\
    \ = grades_average_rounded + 1.5\n  local grades_average_rounded_minus_and_minus_minus_minus_minus_minus_minus_s\
    \ = grades_average_rounded - 1.5\n  local grades_average_rounded_plus_and_minus_minus_minus_minus_minus_minus_s\
    \ = grades_average_rounded + 0.5\n  local grades_average_rounded_minus_and_minus_minus_minus_minus_minus_minus_s\
    \ = grades_average_rounded - 0.5\n  local grades_average_rounded_plus_and_minus_minus_minus_minus_minus_minus_minus_s\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuzkgeh89.lua:47: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppenor5_1.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / (grades_length - 1)\n    local grades_average = grades_average:round()\n\
    \    local grades_average = grades_average:tostring()\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, grades_average:len() - 1)\n    local grades_average\
    \ = grades_average:sub(1, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgiy2owi_.lua:52: ')' expected (to close '(' at line 51) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeb2cjmhd.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_rounded = math.floor(grades_average)\n\
    \  local grades_average_rounded_mod = grades_average_rounded % 2\n  local grades_average_rounded_mod_2\
    \ = grades_average_rounded % 4\n  local grades_average_rounded_mod_4 = grades_average_rounded\
    \ % 8\n  local grades_average_rounded_mod_8 = grades_average_rounded % 16\n  local\
    \ grades_average_rounded_mod_16 = grades_average_rounded % 32\n  local grades_average_rounded_mod_32\
    \ = grades_average_rounded % 64\n  local grades_average_rounded_mod_64 = grades_average_rounded\
    \ % 128\n  local grades_average_rounded_mod_128 = grades_average_rounded % 256\n\
    \  local grades_average_rounded_mod_256 = grades_average_rounded % 512\n  local\
    \ grades_average_rounded_mod_512 = grades_average_rounded % 1024\n  local grades_average_rounded_mod_1024\
    \ = grades_average_rounded % 2048\n  local grades_average_rounded_mod_2048 = grades_average_rounded\
    \ % 4096\n  local grades_average_rounded_mod_4096 = grades_average_rounded % 8192\n\
    \  local grades_average_rounded_mod_8192 = grades_average_rounded % 16384\n  local\
    \ grades_average_rounded_mod_16384 = grades_average_rounded % 32768\n  local grades_average_rounded_mod_32768\
    \ = grades_average_rounded % 65536\n  local grades_average_rounded_mod_65536 =\
    \ grades_average_rounded % 131072\n  local grades_average_rounded_mod_131072 =\
    \ grades_average_rounded % 262144\n  local grades_average_rounded_mod_262144 =\
    \ grades_average_rounded % 524288\n  local grades_average_rounded_mod_524288 =\
    \ grades_average_rounded % 1048576\n  local grades_average_rounded_mod_1048576\
    \ = grades_average_rounded % 2097152\n  local grades_average_rounded_mod_2097152\
    \ = grades_average_rounded % 4194304\n  local grades_average_rounded_mod_4194304\
    \ = grades_average_rounded % 8388608\n  local grades_average_rounded_mod_8388608\
    \ = grades_average_rounded % 16777216\n  local grades_average_rounded_mod_16777216\
    \ = grades_average_rounded % 33554432\n  local grades_average_rounded_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp49w9ncwb.lua:65: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letter_count = {}\n  local\
    \ grades_letter_count_index = 1\n  local grades_letter_count_index2 = 0\n  local\
    \ grades_letter_count_index3 = 0\n  local grades_letter_count_index4 = 0\n  local\
    \ grades_letter_count_index5 = 0\n  local grades_letter_count_index6 = 0\n  local\
    \ grades_letter_count_index7 = 0\n  local grades_letter_count_index8 = 0\n  local\
    \ grades_letter_count_index9 = 0\n  local grades_letter_count_index10 = 0\n  local\
    \ grades_letter_count_index11 = 0\n  local grades_letter_count_index12 = 0\n \
    \ local grades_letter_count_index13 = 0\n  local grades_letter_count_index14 =\
    \ 0\n  local grades_letter_count_index15 = 0\n  local grades_letter_count_index16\
    \ = 0\n  local grades_letter_count_index17 = 0\n  local grades_letter_count_index18\
    \ = 0\n  local grades_letter_count_index19 = 0\n  local grades_letter_count_index20\
    \ = 0\n  local grades_letter_count_index21 = 0\n  local grades_letter_count_index22\
    \ = 0\n  local grades_letter_count_index23 = 0\n  local grades_letter_count_index24\
    \ = 0\n  local grades_letter_count_index25 = 0\n  local grades_letter_count_index26\
    \ = 0\n  local grades_letter_count_index27 = 0\n  local grades_letter_count_index28\
    \ = 0\n  local grades_letter_count_index29 = 0\n  local grades_letter_count_index30\
    \ = 0\n  local grades_letter_count_index31 = 0\n  local grades_letter_count_index32\
    \ = 0\n  local grades_letter_count_index33 = 0\n  local grades_letter_count_index34\
    \ = 0\n  local grades_letter_count_index35 = 0\n  local grades_letter_count_index36\
    \ = 0\n  local grades_letter_count_index37 = 0\n  local grades_letter_count_index38\
    \ = 0\n  local grades_letter_count_index39 = 0\n  local grades_letter_count_index40\
    \ = 0\n  local grades_letter_count_index41 = 0\n  local grades_letter_count_index42\
    \ = 0\n  local grades_letter_count_index43 = 0\n  local grades_letter_count_index44\
    \ = 0\n  local grades_letter_count_index45 = 0\n  local grades_letter_count_index46\
    \ = 0\n  local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg8ljxw6g.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpged6kwyy.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = nil\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n   \
    \ elseif grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y0t9wlh.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmp8y0t9wlh.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  if grades_count >\
    \ 0 then\n    grades_sum = grades_sum / grades_count\n  end\n  local grades_letter\
    \ = ''\n  if grades_sum > 4.0 then\n    grades_letter = 'A+'\n  elseif grades_sum\
    \ > 3.7 then\n    grades_letter = 'A'\n  elseif grades_sum > 3.3 then\n    grades_letter\
    \ = 'A-'\n  elseif grades_sum > 3.0 then\n    grades_letter = 'B+'\n  elseif grades_sum\
    \ > 2.7 then\n    grades_letter = 'B'\n  elseif grades_sum > 2.3 then\n    grades_letter\
    \ = 'B-'\n  elseif grades_sum > 2.0 then\n    grades_letter = 'C+'\n  elseif grades_sum\
    \ > 1.7 then\n    grades_letter = 'C'\n  elseif grades_sum > 1.3 then\n    grades_letter\
    \ = 'C-'\n  elseif grades_sum > 1.0 then\n    grades_letter = 'D+'\n  elseif grades_sum\
    \ > 0.7 then\n    grades_letter = 'D'\n  elseif grades_sum > 0.0 then\n    grades_letter\
    \ = 'D-'\n  else\n    grades_letter = 'E'\n  end\n  return grades_letter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkinoisa.lua:66:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpqkinoisa.lua:66: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    for _, grade in ipairs(grades) do\n        grades_sum = grades_sum\
    \ + grade\n    end\n    local grades_avg = grades_sum / #grades\n    local grades_diff\
    \ = 0\n    for _, grade in ipairs(grades) do\n        grades_diff = grades_diff\
    \ + (grade - grades_avg)\n    end\n    local grades_diff_avg = grades_diff / #grades\n\
    \    local grades_diff_avg2 = grades_diff_avg * grades_diff_avg\n    local grades_diff_avg3\
    \ = grades_diff_avg2 * grades_diff_avg\n    local grades_diff_avg4 = grades_diff_avg3\
    \ * grades_diff_avg\n    local grades_diff_avg5 = grades_diff_avg4 * grades_diff_avg\n\
    \    local grades_diff_avg6 = grades_diff_avg5 * grades_diff_avg\n    local grades_diff_avg7\
    \ = grades_diff_avg6 * grades_diff_avg\n    local grades_diff_avg8 = grades_diff_avg7\
    \ * grades_diff_avg\n    local grades_diff_avg9 = grades_diff_avg8 * grades_diff_avg\n\
    \    local grades_diff_avg10 = grades_diff_avg9 * grades_diff_avg\n    local grades_diff_avg11\
    \ = grades_diff_avg10 * grades_diff_avg\n    local grades_diff_avg12 = grades_diff_avg11\
    \ * grades_diff_avg\n    local grades_diff_avg13 = grades_diff_avg12 * grades_diff_avg\n\
    \    local grades_diff_avg14 = grades_diff_avg13 * grades_diff_avg\n    local\
    \ grades_diff_avg15 = grades_diff_avg14 * grades_diff_avg\n    local grades_diff_avg16\
    \ = grades_diff_avg15 * grades_diff_avg\n    local grades_diff_avg17 = grades_diff_avg16\
    \ * grades_diff_avg\n    local grades_diff_avg18 = grades_diff_avg17 * grades_diff_avg\n\
    \    local grades_diff_avg19 = grades_diff_avg18 * grades_diff_avg\n    local\
    \ grades_diff_avg20 = grades_diff_avg19 * grades_diff_avg\n    local grades_diff_avg21\
    \ = grades_diff_avg20 * grades_diff_avg\n    local grades_diff_avg22 = grades_diff_avg21\
    \ * grades_diff_avg\n    local grades_diff_avg23 = grades_diff_avg22 * grades_diff_avg\n\
    \    local grades_diff_avg24 = grades_diff_avg23 * grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6u2a4i5q.lua:68: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for _, grade in ipairs(grades) do\n    grades_sum\
    \ = grades_sum + grade\n    grades_count = grades_count + 1\n  end\n  if grades_count\
    \ > 0 then\n    grades_sum = grades_sum / grades_count\n  end\n  local grades_letters\
    \ = {\n    ['A+'] = 4.0,\n    ['A'] = 3.7,\n    ['A-'] = 3.3,\n    ['B+'] = 3.0,\n\
    \    ['B'] = 2.7,\n    ['B-'] = 2.3,\n    ['C+'] = 2.0,\n    ['C'] = 1.7,\n  \
    \  ['C-'] = 1.3,\n    ['D+'] = 1.0,\n    ['D'] = 0.7,\n    ['D-'] = 0.0,\n   \
    \ ['E'] = 0.0\n  }\n  local grades_letter = grades_letters[grades_sum]\n  if grades_letter\
    \ == nil then\n    grades_letter = 'E'\n  end\n  return grades_letter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0chcmoo.lua:57:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"E\"\nstack traceback:\n\
    \t/tmp/tmp_0chcmoo.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average = grades_average:round()\n\
    \  local grades_average = grades_average:float()\n  local grades_average = grades_average:tostring()\n\
    \  local grades_average = grades_average:sub(1, grades_average:len())\n  local\
    \ grades_average = grades_average:sub(1, grades_average:len())\n  local grades_average\
    \ = grades_average:sub(1, grades_average:len())\n  local grades_average = grades_average:sub(1,\
    \ grades_average:len())\n  local grades_average = grades_average:sub(1, grades_average:len())\n\
    \  local grades_average = grades_average:sub(1, grades_average:len())\n  local\
    \ grades_average = grades_average:sub(1, grades_average:len())\n  local grades_average\
    \ = grades_average:sub(1, grades_average:len())\n  local grades_average = grades_average:sub(1,\
    \ grades_average:len())\n  local grades_average = grades_average:sub(1, grades_average:len())\n\
    \  local grades_average = grades_average:sub(1, grades_average:len())\n  local\
    \ grades_average = grades_average:sub(1, grades_average:len())\n  local grades_average\
    \ = grades_average:sub(1, grades_average:len())\n  local grades_average = grades_average:sub(1,\
    \ grades_average:len())\n  local grades_average = grades_average:sub(1, grades_average:len())\n\
    \  local grades_average = grades_average:sub(1, grades_average:len())\n  local\
    \ grades_average = grades_average:sub(1, grades_average:len())\n  local grades_average\
    \ = grades_average:sub(1, grades_average:len())\n  local grades_average = grades_average:sub(1,\
    \ grades_average:len())\n  local grades_average = grades_average:sub(1, grades_average:len())\n\
    \  local grades_average = grades_average:sub(1, grades_average:len())\n  local\
    \ grades_average = grades_average:sub(1, grades_average:len())\n  local grades_average\
    \ = grades_average:sub(1, grades_average:len())\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp01rb47hv.lua:65: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  local grades_letters = {}\n  for i = 1, #grades\
    \ do\n    grades_sum = grades_sum + grades[i]\n    grades_count = grades_count\
    \ + 1\n    if grades_count == 1 then\n      grades_letters[#grades_letters + 1]\
    \ = grades[i]\n    else\n      grades_letters[#grades_letters + 1] = grades[i]\n\
    \      grades_letters[#grades_letters + 1] = grades_sum / grades_count\n    end\n\
    \  end\n  return grades_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn959b8z.lua:42:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4, 3, 3.5, 1.7, 2.9,\
    \ 2, 2.675, 3.5, 2.84}\nstack traceback:\n\t/tmp/tmpzn959b8z.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average + 100\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ 100\n  local grades_average = grades_average + 100\n  local grades_average =\
    \ grades_average / grades_length\n  local grades_average = grades_average * 100\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ + 100\n  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_average + 100\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ 100\n  local grades_average = grades_average + 100\n  local grades_average =\
    \ grades_average / grades_length\n  local grades_average = grades_average * 100\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * 100\n  local grades_average = grades_average\
    \ + 100\n  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * 100\n  local grades_average = grades_average + 100\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = grades_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp26evs4ef.lua:76: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptjz402_w.lua:74: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_copy\
    \ = grades\n  local grades_copy = grades_copy:gsub(\"%w+\", \"\")\n  local grades_copy\
    \ = grades_copy:gsub(\"%w+%w+\", \"\")\n  local grades_copy = grades_copy:gsub(\"\
    %w+%w+%w+\", \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+\", \"\
    \")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+\", \"\")\n  local\
    \ grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+\", \"\")\n  local grades_copy\
    \ = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+\", \"\")\n  local grades_copy = grades_copy:gsub(\"\
    %w+%w+%w+%w+%w+%w+%w+%w+\", \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:gsub(\"%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+%w+\"\
    , \"\")\n  local grades_copy = grades_copy:g\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnf2bwgmy.lua:41: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_count = grades_count\
    \ + 1\n    grades_sum = grades_sum + grades[i]\n  end\n  local grades_average\
    \ = grades_sum / grades_count\n  local grades_letter_grade = ''\n  if grades_average\
    \ <= 4.0 then\n    grades_letter_grade = 'A+'\n  elseif grades_average <= 3.7\
    \ then\n    grades_letter_grade = 'A'\n  elseif grades_average <= 3.3 then\n \
    \   grades_letter_grade = 'A-'\n  elseif grades_average <= 3.0 then\n    grades_letter_grade\
    \ = 'B+'\n  elseif grades_average <= 2.7 then\n    grades_letter_grade = 'B'\n\
    \  elseif grades_average <= 2.3 then\n    grades_letter_grade = 'B-'\n  elseif\
    \ grades_average <= 2.0 then\n    grades_letter_grade = 'C+'\n  elseif grades_average\
    \ <= 1.7 then\n    grades_letter_grade = 'C'\n  elseif grades_average <= 1.3 then\n\
    \    grades_letter_grade = 'C-'\n  elseif grades_average <= 1.0 then\n    grades_letter_grade\
    \ = 'D+'\n  elseif grades_average <= 0.7 then\n    grades_letter_grade = 'D'\n\
    \  elseif grades_average <= 0.0 then\n    grades_letter_grade = 'D-'\n  else\n\
    \    grades_letter_grade = 'E'\n  end\n  return grades_letter_grade\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4h2l55k.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+\"\nstack traceback:\n\
    \t/tmp/tmpc4h2l55k.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_811pmz9.lua:86: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_index\
    \ = 1\n  local grades_letters = {}\n  local grades_letter_count = {}\n  local\
    \ grades_letter_count_index = 1\n  local grades_letter_count_index2 = 0\n  local\
    \ grades_letter_count_index3 = 0\n  local grades_letter_count_index4 = 0\n  local\
    \ grades_letter_count_index5 = 0\n  local grades_letter_count_index6 = 0\n  local\
    \ grades_letter_count_index7 = 0\n  local grades_letter_count_index8 = 0\n  local\
    \ grades_letter_count_index9 = 0\n  local grades_letter_count_index10 = 0\n  local\
    \ grades_letter_count_index11 = 0\n  local grades_letter_count_index12 = 0\n \
    \ local grades_letter_count_index13 = 0\n  local grades_letter_count_index14 =\
    \ 0\n  local grades_letter_count_index15 = 0\n  local grades_letter_count_index16\
    \ = 0\n  local grades_letter_count_index17 = 0\n  local grades_letter_count_index18\
    \ = 0\n  local grades_letter_count_index19 = 0\n  local grades_letter_count_index20\
    \ = 0\n  local grades_letter_count_index21 = 0\n  local grades_letter_count_index22\
    \ = 0\n  local grades_letter_count_index23 = 0\n  local grades_letter_count_index24\
    \ = 0\n  local grades_letter_count_index25 = 0\n  local grades_letter_count_index26\
    \ = 0\n  local grades_letter_count_index27 = 0\n  local grades_letter_count_index28\
    \ = 0\n  local grades_letter_count_index29 = 0\n  local grades_letter_count_index30\
    \ = 0\n  local grades_letter_count_index31 = 0\n  local grades_letter_count_index32\
    \ = 0\n  local grades_letter_count_index33 = 0\n  local grades_letter_count_index34\
    \ = 0\n  local grades_letter_count_index35 = 0\n  local grades_letter_count_index36\
    \ = 0\n  local grades_letter_count_index37 = 0\n  local grades_letter_count_index38\
    \ = 0\n  local grades_letter_count_index39 = 0\n  local grades_letter_count_index40\
    \ = 0\n  local grades_letter_count_index41 = 0\n  local grades_letter_count_index42\
    \ = 0\n  local grades_letter_count_index43 = 0\n  local grades_letter_count_index44\
    \ = 0\n  local grades_letter_count_index45 = 0\n  local grades_letter_count_index46\
    \ = 0\n  local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpka18mxtk.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp24iosp6p.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_length\
    \ = #grades\n    local grades_sum = 0\n    local grades_average = 0\n    local\
    \ grades_letter_grades = {}\n    local grades_letter_grades_length = grades_length\n\
    \    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\n    local grades_letter_grades_sum\
    \ = 0\n    local grades_letter_grades_average = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnmujlhax.lua:87: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_copy\
    \ = grades\n  local grades_copy2 = {}\n  local grades_copy3 = {}\n  local grades_copy4\
    \ = {}\n  local grades_copy5 = {}\n  local grades_copy6 = {}\n  local grades_copy7\
    \ = {}\n  local grades_copy8 = {}\n  local grades_copy9 = {}\n  local grades_copy10\
    \ = {}\n  local grades_copy11 = {}\n  local grades_copy12 = {}\n  local grades_copy13\
    \ = {}\n  local grades_copy14 = {}\n  local grades_copy15 = {}\n  local grades_copy16\
    \ = {}\n  local grades_copy17 = {}\n  local grades_copy18 = {}\n  local grades_copy19\
    \ = {}\n  local grades_copy20 = {}\n  local grades_copy21 = {}\n  local grades_copy22\
    \ = {}\n  local grades_copy23 = {}\n  local grades_copy24 = {}\n  local grades_copy25\
    \ = {}\n  local grades_copy26 = {}\n  local grades_copy27 = {}\n  local grades_copy28\
    \ = {}\n  local grades_copy29 = {}\n  local grades_copy30 = {}\n  local grades_copy31\
    \ = {}\n  local grades_copy32 = {}\n  local grades_copy33 = {}\n  local grades_copy34\
    \ = {}\n  local grades_copy35 = {}\n  local grades_copy36 = {}\n  local grades_copy37\
    \ = {}\n  local grades_copy38 = {}\n  local grades_copy39 = {}\n  local grades_copy40\
    \ = {}\n  local grades_copy41 = {}\n  local grades_copy42 = {}\n  local grades_copy43\
    \ = {}\n  local grades_copy44 = {}\n  local grades_copy45 = {}\n  local grades_copy46\
    \ = {}\n  local grades_copy47 = {}\n  local grades_copy48 = {}\n  local grades_copy49\
    \ = {}\n  local grades_copy50 = {}\n  local grades_copy51 = {}\n  local grades_copy52\
    \ = {}\n  local grades_copy53 = {}\n  local grades_copy54 = {}\n  local grades_copy55\
    \ = {}\n  local grades_copy56 = {}\n  local grades_copy57 = {}\n  local grades_copy58\
    \ = {}\n  local grades_copy59 = {}\n  local grades_copy60 = {}\n  local grades_copy61\
    \ = {}\n  local grades_copy62 = {}\n  local grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsnaahqxo.lua:98: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_rounded = math.floor(grades_average)\n\
    \  local grades_average_rounded_with_zeros = \n    grades_average_rounded + math.floor(grades_average\
    \ - grades_average_rounded)\n  local grades_average_rounded_with_zeros_length\
    \ = \n    math.floor(grades_average_rounded_with_zeros)\n  local grades_average_rounded_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length + math.floor(grades_average_rounded_with_zeros\
    \ - grades_average_rounded_with_zeros_length)\n  local grades_average_rounded_with_zeros_length_with_zeros_length\
    \ = \n    math.floor(grades_average_rounded_with_zeros_length_with_zeros)\n  local\
    \ grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros = \n \
    \   grades_average_rounded_with_zeros_length_with_zeros + math.floor(grades_average_rounded_with_zeros_length_with_zeros\
    \ - grades_average_rounded_with_zeros_length_with_zeros)\n  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length\
    \ = \n    math.floor(grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros)\n\
    \  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros\
    \ + math.floor(grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros\
    \ - grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros)\n \
    \ local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length\
    \ = \n    math.floor(grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros)\n\
    \  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ + math.floor(grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ - grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros)\n\
    \  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9lb4seq1.lua:58: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = grades_length - 1\n  local\
    \ grades_average_index2 = grades_length - 2\n  local grades_average_index3 = grades_length\
    \ - 3\n  local grades_average_index4 = grades_length - 4\n  local grades_average_index5\
    \ = grades_length - 5\n  local grades_average_index6 = grades_length - 6\n  local\
    \ grades_average_index7 = grades_length - 7\n  local grades_average_index8 = grades_length\
    \ - 8\n  local grades_average_index9 = grades_length - 9\n  local grades_average_index10\
    \ = grades_length - 10\n  local grades_average_index11 = grades_length - 11\n\
    \  local grades_average_index12 = grades_length - 12\n  local grades_average_index13\
    \ = grades_length - 13\n  local grades_average_index14 = grades_length - 14\n\
    \  local grades_average_index15 = grades_length - 15\n  local grades_average_index16\
    \ = grades_length - 16\n  local grades_average_index17 = grades_length - 17\n\
    \  local grades_average_index18 = grades_length - 18\n  local grades_average_index19\
    \ = grades_length - 19\n  local grades_average_index20 = grades_length - 20\n\
    \  local grades_average_index21 = grades_length - 21\n  local grades_average_index22\
    \ = grades_length - 22\n  local grades_average_index23 = grades_length - 23\n\
    \  local grades_average_index24 = grades_length - 24\n  local grades_average_index25\
    \ = grades_length - 25\n  local grades_average_index26 = grades_length - 26\n\
    \  local grades_average_index27 = grades_length - 27\n  local grades_average_index28\
    \ = grades_length - 28\n  local grades_average_index29 = grades_length - 29\n\
    \  local grades_average_index30 = grades_length - 30\n  local grades_average_index31\
    \ = grades_length - 31\n  local grades_average_index32 = grades_length - 32\n\
    \  local grades_average_index33 = grades_length - 33\n  local grades_average_index34\
    \ = grades_length - 34\n  local grades_average_index35 = grades_length - 35\n\
    \  local grades_average_index36 = grades_length - 36\n  local grades_average_index37\
    \ = grades_length - 37\n  local grades_average_index38 = grades_length - \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp15j5k40l.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplujrxthi.lua:74: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1pq4oeup.lua:86: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9dl95x1z.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp05c5bmg_.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    while grades_index < grades_length do\n\
    \        local grade = grades_sorted[grades_index]\n        local grade_index\
    \ = grades_index - 1\n        local grades_letter = nil\n        local grades_letter_previous\
    \ = nil\n        while grade_index >= 0 do\n            local grades_letter_current\
    \ = grades_sorted[grade_index]\n            if grade < grades_letter_current then\n\
    \                grades_letter = grades_letter_previous\n                grades_letters[grades_letter]\
    \ = grade\n                grades_index = grade_index - 1\n                grades_letter_previous\
    \ = grades_letter_current\n                break\n            else\n         \
    \       grades_letter = grades_letter_previous\n                grades_letters[grades_letter]\
    \ = grade\n                grades_index = grade_index - 1\n                grades_letter_previous\
    \ = grades_letter_current\n            end\n        end\n    end\n    return grades_letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptefmfe84.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmptefmfe84.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted[grades_length-1]\n    local grades_average_index = grades_length\
    \ - 1\n    local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grades_average_length = grades_length - 1\n    local grades_average_length\
    \ = grades_length - 1\n    local grades_average_length = grades_length - 1\n \
    \   local grade\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpet61n9wa.lua:82: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted / grades_length\n    local grades_average = grades_average:round()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplg_a66tm.lua:78: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmoi6c17u.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    if grades_count > 0 then\n        local grades_average = grades_sum\
    \ / grades_count\n        local grades_letter = ''\n        if grades_average\
    \ >= 4.0 then\n            grades_letter = 'A+'\n        elseif grades_average\
    \ >= 3.7 then\n            grades_letter = 'A'\n        elseif grades_average\
    \ >= 3.3 then\n            grades_letter = 'A-'\n        elseif grades_average\
    \ >= 3.0 then\n            grades_letter = 'B+'\n        elseif grades_average\
    \ >= 2.7 then\n            grades_letter = 'B'\n        elseif grades_average\
    \ >= 2.3 then\n            grades_letter = 'B-'\n        elseif grades_average\
    \ >= 2.0 then\n            grades_letter = 'C+'\n        elseif grades_average\
    \ >= 1.7 then\n            grades_letter = 'C'\n        elseif grades_average\
    \ >= 1.3 then\n            grades_letter = 'C-'\n        elseif grades_average\
    \ >= 1.0 then\n            grades_letter = 'D+'\n        elseif grades_average\
    \ >= 0.7 then\n            grades_letter = 'D'\n        elseif grades_average\
    \ >= 0.0 then\n            grades_letter = 'D-'\n        else\n            grades_letter\
    \ = 'E'\n        end\n        return grades_letter\n    else\n        return 'E'\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsts5_51o.lua:68:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpsts5_51o.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    local grades_letter_count = {}\n   \
    \ local grades_letter_count_index = 1\n    local grades_letter_count_index2 =\
    \ 0\n    local grades_letter_count_index3 = 0\n    local grades_letter_count_index4\
    \ = 0\n    local grades_letter_count_index5 = 0\n    local grades_letter_count_index6\
    \ = 0\n    local grades_letter_count_index7 = 0\n    local grades_letter_count_index8\
    \ = 0\n    local grades_letter_count_index9 = 0\n    local grades_letter_count_index10\
    \ = 0\n    local grades_letter_count_index11 = 0\n    local grades_letter_count_index12\
    \ = 0\n    local grades_letter_count_index13 = 0\n    local grades_letter_count_index14\
    \ = 0\n    local grades_letter_count_index15 = 0\n    local grades_letter_count_index16\
    \ = 0\n    local grades_letter_count_index17 = 0\n    local grades_letter_count_index18\
    \ = 0\n    local grades_letter_count_index19 = 0\n    local grades_letter_count_index20\
    \ = 0\n    local grades_letter_count_index21 = 0\n    local grades_letter_count_index22\
    \ = 0\n    local grades_letter_count_index23 = 0\n    local grades_letter_count_index24\
    \ = 0\n    local grades_letter_count_index25 = 0\n    local grades_letter_count_index26\
    \ = 0\n    local grades_letter_count_index27 = 0\n    local grades_letter_count_index28\
    \ = 0\n    local grades_letter_count_index29 = 0\n    local grades_letter_count_index30\
    \ = 0\n    local grades_letter_count_index31 = 0\n    local grades_letter_count_index32\
    \ = 0\n    local grades_letter_count_index33 = 0\n    local grades_letter_count_index34\
    \ = 0\n    local grades_letter_count_index35 = 0\n    local grades_letter_count_index36\
    \ = 0\n    local grades_letter_count_index37 = 0\n    local grades_letter_count_index38\
    \ = 0\n    local grades_letter_count_index39 = 0\n    local grades_letter_count_index40\
    \ = 0\n    local grades_letter_count_index41 = 0\n    local grades_letter_count_index42\
    \ = 0\n    local grades_letter_count_index43 = 0\n    local grades_letter_count_index44\
    \ = 0\n    local grades_letter_count_index45 = 0\n    local grades_letter_count_index46\
    \ = 0\n    local grades_letter_count_index47 = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3ur9iurq.lua:88: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted[grades_length-1]\n    local grades_average_index = grades_length\
    \ - 1\n    local grades_average_index2 = grades_length - 2\n    local grades_average_index3\
    \ = grades_length - 3\n    local grades_average_index4 = grades_length - 4\n \
    \   local grades_average_index5 = grades_length - 5\n    local grades_average_index6\
    \ = grades_length - 6\n    local grades_average_index7 = grades_length - 7\n \
    \   local grades_average_index8 = grades_length - 8\n    local grades_average_index9\
    \ = grades_length - 9\n    local grades_average_index10 = grades_length - 10\n\
    \    local grades_average_index11 = grades_length - 11\n    local grades_average_index12\
    \ = grades_length - 12\n    local grades_average_index13 = grades_length - 13\n\
    \    local grades_average_index14 = grades_length - 14\n    local grades_average_index15\
    \ = grades_length - 15\n    local grades_average_index16 = grades_length - 16\n\
    \    local grades_average_index17 = grades_length - 17\n    local grades_average_index18\
    \ = grades_length - 18\n    local grades_average_index19 = grades_length - 19\n\
    \    local grades_average_index20 = grades_length - 20\n    local grades_average_index21\
    \ = grades_length - 21\n    local grades_average_index22 = grades_length - 22\n\
    \    local grades_average_index23 = grades_length - 23\n    local grades_average_index24\
    \ = grades_length - 24\n    local grades_average_index25 = grades_length - 25\n\
    \    local grades_average_index26 = grades_length - 26\n    local grades_average_index27\
    \ = grades_length - 27\n    local grades_average_index28 = grades_length - 28\n\
    \    local grades_average_index29 = grades_length - 29\n    local grades_average_index30\
    \ = grades_length - 30\n    local grades_average_index31 = grades_length - 31\n\
    \    local grades_average_index32 = grades_length - 32\n    local grades_average_index33\
    \ = grades_length - 33\n    local grades_average_index34 = grades_length - 34\n\
    \    local grades_average_index35 = grades_length - 35\n    local grades_average_index36\
    \ = grades_length - 36\n    local grades_average_index37 = grades_length - 37\n\
    \    local grades_average_index38 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqwltt51o.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / (grades_length - 1)\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = math.floor(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = math.floor(grades_average)\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = math.floor(grades_average)\n  local grades_average = grades_average + 100\n\
    \  local grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = math.floor(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = math.floor(grades_average)\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = math.floor(grades_average)\n  local grades_average = grades_average + 100\n\
    \  local grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = math.floor(grades_average)\n  local grades_average\
    \ = grades_average + 100\n  local grades_average = grades_average / 100\n  local\
    \ grades_average = grades_average * 100\n  local grades_average = math.floor(grades_average)\n\
    \  local grades_average = grades_average + 100\n  local grades_average = grades_average\
    \ / 100\n  local grades_average = grades_average * 100\n  local grades_average\
    \ = math.floor(grades_average)\n  local grades_average = grades_average + 100\n\
    \  local grades_average = grades_average / 100\n  local grades_average = grades_average\
    \ * 100\n  local grades_average = math.floor(grades_average)\n  local grades_average\
    \ = grades_average + \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph7h3cq2i.lua:65: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3yfto4fp.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average:round(2)\n  \
    \  local grades_average = grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3kt68786.lua:66: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdhd14s6d.lua:86: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzielfxe3.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpip6k2f24.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3kfkl7k9.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted and grades_sorted[grades_length / 2] or 0\n    local grades_average\
    \ = grades_average / grades_length\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average + 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average + 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average + 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ + 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average + 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average + 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average + 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average + 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ + 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average + 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average + 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average + 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average + 100\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8l_46k2o.lua:77: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  for _, grade in ipairs(grades) do\n    grades_sum = grades_sum + grade\n\
    \  end\n  local grades_avg = grades_sum / #grades\n  local grades_diff = 0\n \
    \ for _, grade in ipairs(grades) do\n    grades_diff = grades_diff + (grade -\
    \ grades_avg)\n  end\n  local grades_diff_avg = grades_diff / #grades\n  local\
    \ grades_diff_max = grades_diff / #grades\n  local grades_diff_min = grades_diff\
    \ / #grades\n  local grades_diff_max_avg = grades_diff_max / #grades\n  local\
    \ grades_diff_min_avg = grades_diff_min / #grades\n  local grades_diff_max_max_avg\
    \ = grades_diff_max_avg / #grades\n  local grades_diff_min_max_avg = grades_diff_min_avg\
    \ / #grades\n  local grades_diff_max_min_avg = grades_diff_max_avg / #grades\n\
    \  local grades_diff_min_min_avg = grades_diff_min_avg / #grades\n  local grades_diff_max_min_min_avg\
    \ = grades_diff_max_min_avg / #grades\n  local grades_diff_min_max_min_avg = grades_diff_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_max_avg = grades_diff_min_min_avg / #grades\n\
    \  local grades_diff_max_min_min_max_avg = grades_diff_max_min_min_avg / #grades\n\
    \  local grades_diff_min_max_min_max_avg = grades_diff_min_max_min_avg / #grades\n\
    \  local grades_diff_min_min_max_min_max_avg = grades_diff_max_min_min_max_avg\
    \ / #grades\n  local grades_diff_max_min_min_max_min_avg = grades_diff_min_max_min_max_avg\
    \ / #grades\n  local grades_diff_min_max_min_min_max_avg = grades_diff_max_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_min_max_min_max_min_avg = grades_diff_max_min_min_max_min_avg\
    \ / #grades\n  local grades_diff_max_min_min_min_max_min_avg = grades_diff_min_max_min_min_max_avg\
    \ / #grades\n  local grades_diff_min_max_min_min_max_min_avg = grades_diff_max_min_min_min_max_min_avg\
    \ / #grades\n  local grades_diff_max_min_min_min_max_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ir5fq4t.lua:65: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_count = grades_count + 1\n        grades_sum = grades_sum + grade\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = ''\n    if grades_average >= 4.0 then\n        grades_letter = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter = 'A-'\n    elseif grades_average >= 3.0\
    \ then\n        grades_letter = 'B+'\n    elseif grades_average >= 2.7 then\n\
    \        grades_letter = 'B'\n    elseif grades_average >= 2.3 then\n        grades_letter\
    \ = 'B-'\n    elseif grades_average >= 2.0 then\n        grades_letter = 'C+'\n\
    \    elseif grades_average >= 1.7 then\n        grades_letter = 'C'\n    elseif\
    \ grades_average >= 1.3 then\n        grades_letter = 'C-'\n    elseif grades_average\
    \ >= 1.0 then\n        grades_letter = 'D+'\n    elseif grades_average >= 0.7\
    \ then\n        grades_letter = 'D'\n    elseif grades_average >= 0.0 then\n \
    \       grades_letter = 'D-'\n    else\n        grades_letter = 'E'\n    end\n\
    \    return grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02k0uyma.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmp02k0uyma.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_sorted and grades_sorted[grades_length / 2] or 0\n  local grades_letters\
    \ = {\n    ['A+'] = grades_average + 4,\n    ['A'] = grades_average + 3,\n   \
    \ ['A-'] = grades_average + 2,\n    ['B+'] = grades_average + 3,\n    ['B'] =\
    \ grades_average + 2,\n    ['B-'] = grades_average + 1,\n    ['C+'] = grades_average\
    \ + 2,\n    ['C'] = grades_average + 1,\n    ['C-'] = grades_average + 0,\n  \
    \  ['D+'] = grades_average + 1,\n    ['D'] = grades_average + 0,\n    ['D-'] =\
    \ grades_average - 1,\n    ['E'] = grades_average - 1\n  }\n  local grades_letters_sorted\
    \ = table.sort(grades_letters)\n  local grades_letters_length = #grades_letters_sorted\n\
    \  local grades_letters_average = grades_letters_sorted and grades_letters_sorted[grades_letters_length\
    \ / 2] or 0\n  local grades_letters_letters = {\n    ['A+'] = grades_letters_average\
    \ + 4,\n    ['A'] = grades_letters_average + 3,\n    ['A-'] = grades_letters_average\
    \ + 2,\n    ['B+'] = grades_letters_average + 3,\n    ['B'] = grades_letters_average\
    \ + 2,\n    ['B-'] = grades_letters_average + 1,\n    ['C+'] = grades_letters_average\
    \ + 2,\n    ['C'] = grades_letters_average + 1,\n    ['C-'] = grades_letters_average\
    \ + 0,\n    ['D+'] = grades_letters_average + 1,\n    ['D'] = grades_letters_average\
    \ + 0,\n    ['D-'] = grades_letters_average - 1,\n    ['E'] = grades_letters_average\
    \ - 1\n  }\n  local grades_letters_letters_sorted = table.sort(grades_letters_letters)\n\
    \  local grades_letters_letters_length = #grades_letters_letters_sorted\n  local\
    \ grades_letters_letters_average = grades_letters_letters_sorted and grades_letters_letters_sorted[grades_letters_letters_length\
    \ / 2] or 0\n  local grades_letters_letters_letters = {\n    ['A+'] = grades_letters_letters_average\
    \ + 4,\n    ['A'] = grades_letters_letters_average + 3,\n    ['A-'] = grades_letters_letters_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpric0rek0.lua:66: '}' expected (to close '{' at line 62) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdsom7zqx.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_sum = 0\n    local grades_count = 0\n    local grades_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnm9arxqb.lua:114: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = grades_length - 1\n  local\
    \ grades_average_index2 = grades_length - 2\n  local grades_average_index3 = grades_length\
    \ - 3\n  local grades_average_index4 = grades_length - 4\n  local grades_average_index5\
    \ = grades_length - 5\n  local grades_average_index6 = grades_length - 6\n  local\
    \ grades_average_index7 = grades_length - 7\n  local grades_average_index8 = grades_length\
    \ - 8\n  local grades_average_index9 = grades_length - 9\n  local grades_average_index10\
    \ = grades_length - 10\n  local grades_average_index11 = grades_length - 11\n\
    \  local grades_average_index12 = grades_length - 12\n  local grades_average_index13\
    \ = grades_length - 13\n  local grades_average_index14 = grades_length - 14\n\
    \  local grades_average_index15 = grades_length - 15\n  local grades_average_index16\
    \ = grades_length - 16\n  local grades_average_index17 = grades_length - 17\n\
    \  local grades_average_index18 = grades_length - 18\n  local grades_average_index19\
    \ = grades_length - 19\n  local grades_average_index20 = grades_length - 20\n\
    \  local grades_average_index21 = grades_length - 21\n  local grades_average_index22\
    \ = grades_length - 22\n  local grades_average_index23 = grades_length - 23\n\
    \  local grades_average_index24 = grades_length - 24\n  local grades_average_index25\
    \ = grades_length - 25\n  local grades_average_index26 = grades_length - 26\n\
    \  local grades_average_index27 = grades_length - 27\n  local grades_average_index28\
    \ = grades_length - 28\n  local grades_average_index29 = grades_length - 29\n\
    \  local grades_average_index30 = grades_length - 30\n  local grades_average_index31\
    \ = grades_length - 31\n  local grades_average_index32 = grades_length - 32\n\
    \  local grades_average_index33 = grades_length - 33\n  local grades_average_index34\
    \ = grades_length - 34\n  local grades_average_index35 = grades_length - 35\n\
    \  local grades_average_index36 = grades_length - 36\n  local grades_average_index37\
    \ = grades_length - 37\n  local grades_average_index38 = grades_length - \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphqb6gmih.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n   local grades_sorted\
    \ = table.sort(grades)\n   local grades_length = #grades_sorted\n   local grades_average\
    \ = grades_sorted[grades_length-1]\n   local grades_letter = nil\n   if grades_average\
    \ >= 4.0 then\n      grades_letter = 'A+'\n   elseif grades_average >= 3.7 then\n\
    \      grades_letter = 'A'\n   elseif grades_average >= 3.3 then\n      grades_letter\
    \ = 'A-'\n   elseif grades_average >= 3.0 then\n      grades_letter = 'B+'\n \
    \  elseif grades_average >= 2.7 then\n      grades_letter = 'B'\n   elseif grades_average\
    \ >= 2.3 then\n      grades_letter = 'B-'\n   elseif grades_average >= 2.0 then\n\
    \      grades_letter = 'C+'\n   elseif grades_average >= 1.7 then\n      grades_letter\
    \ = 'C'\n   elseif grades_average >= 1.3 then\n      grades_letter = 'C-'\n  \
    \ elseif grades_average >= 1.0 then\n      grades_letter = 'D+'\n   elseif grades_average\
    \ >= 0.7 then\n      grades_letter = 'D'\n   elseif grades_average >= 0.0 then\n\
    \      grades_letter = 'D-'\n   else\n      grades_letter = 'E'\n   end\n   return\
    \ grades_letter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86ugv17v.lua:24:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp86ugv17v.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n   local grades_sorted\
    \ = table.sort(grades)\n   local grades_length = #grades_sorted\n   local grades_average\
    \ = grades_length / 2\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grades_average\
    \ = grades_average * grades_average\n   local grades_average = grades_average\
    \ / grades_length\n   local grades_average = grades_average * grades_average\n\
    \   local grades_average = grades_average / grades_length\n   local grade\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprpx01d8f.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_copy\
    \ = grades\n    local grades_copy2 = {}\n    local grades_copy3 = {}\n    local\
    \ grades_copy4 = {}\n    local grades_copy5 = {}\n    local grades_copy6 = {}\n\
    \    local grades_copy7 = {}\n    local grades_copy8 = {}\n    local grades_copy9\
    \ = {}\n    local grades_copy10 = {}\n    local grades_copy11 = {}\n    local\
    \ grades_copy12 = {}\n    local grades_copy13 = {}\n    local grades_copy14 =\
    \ {}\n    local grades_copy15 = {}\n    local grades_copy16 = {}\n    local grades_copy17\
    \ = {}\n    local grades_copy18 = {}\n    local grades_copy19 = {}\n    local\
    \ grades_copy20 = {}\n    local grades_copy21 = {}\n    local grades_copy22 =\
    \ {}\n    local grades_copy23 = {}\n    local grades_copy24 = {}\n    local grades_copy25\
    \ = {}\n    local grades_copy26 = {}\n    local grades_copy27 = {}\n    local\
    \ grades_copy28 = {}\n    local grades_copy29 = {}\n    local grades_copy30 =\
    \ {}\n    local grades_copy31 = {}\n    local grades_copy32 = {}\n    local grades_copy33\
    \ = {}\n    local grades_copy34 = {}\n    local grades_copy35 = {}\n    local\
    \ grades_copy36 = {}\n    local grades_copy37 = {}\n    local grades_copy38 =\
    \ {}\n    local grades_copy39 = {}\n    local grades_copy40 = {}\n    local grades_copy41\
    \ = {}\n    local grades_copy42 = {}\n    local grades_copy43 = {}\n    local\
    \ grades_copy44 = {}\n    local grades_copy45 = {}\n    local grades_copy46 =\
    \ {}\n    local grades_copy47 = {}\n    local grades_copy48 = {}\n    local grades_copy49\
    \ = {}\n    local grades_copy50 = {}\n    local grades_copy51 = {}\n    local\
    \ grades_copy52 = {}\n    local grades_copy53 = {}\n    local grades_copy54 =\
    \ {}\n    local grades_copy55 = {}\n    local grades_copy56 = {}\n    local grades_copy57\
    \ = {}\n    local grades_copy58 = {}\n    local grades_copy59 = {}\n    local\
    \ grades_copy60 = {}\n    local grades_copy61 = {}\n    local grades_copy62 =\
    \ {}\n    local grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr_ngdzkq.lua:98: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_copy\
    \ = grades\n  local grades_copy2 = {}\n  local grades_copy3 = {}\n  local grades_copy4\
    \ = {}\n  local grades_copy5 = {}\n  local grades_copy6 = {}\n  local grades_copy7\
    \ = {}\n  local grades_copy8 = {}\n  local grades_copy9 = {}\n  local grades_copy10\
    \ = {}\n  local grades_copy11 = {}\n  local grades_copy12 = {}\n  local grades_copy13\
    \ = {}\n  local grades_copy14 = {}\n  local grades_copy15 = {}\n  local grades_copy16\
    \ = {}\n  local grades_copy17 = {}\n  local grades_copy18 = {}\n  local grades_copy19\
    \ = {}\n  local grades_copy20 = {}\n  local grades_copy21 = {}\n  local grades_copy22\
    \ = {}\n  local grades_copy23 = {}\n  local grades_copy24 = {}\n  local grades_copy25\
    \ = {}\n  local grades_copy26 = {}\n  local grades_copy27 = {}\n  local grades_copy28\
    \ = {}\n  local grades_copy29 = {}\n  local grades_copy30 = {}\n  local grades_copy31\
    \ = {}\n  local grades_copy32 = {}\n  local grades_copy33 = {}\n  local grades_copy34\
    \ = {}\n  local grades_copy35 = {}\n  local grades_copy36 = {}\n  local grades_copy37\
    \ = {}\n  local grades_copy38 = {}\n  local grades_copy39 = {}\n  local grades_copy40\
    \ = {}\n  local grades_copy41 = {}\n  local grades_copy42 = {}\n  local grades_copy43\
    \ = {}\n  local grades_copy44 = {}\n  local grades_copy45 = {}\n  local grades_copy46\
    \ = {}\n  local grades_copy47 = {}\n  local grades_copy48 = {}\n  local grades_copy49\
    \ = {}\n  local grades_copy50 = {}\n  local grades_copy51 = {}\n  local grades_copy52\
    \ = {}\n  local grades_copy53 = {}\n  local grades_copy54 = {}\n  local grades_copy55\
    \ = {}\n  local grades_copy56 = {}\n  local grades_copy57 = {}\n  local grades_copy58\
    \ = {}\n  local grades_copy59 = {}\n  local grades_copy60 = {}\n  local grades_copy61\
    \ = {}\n  local grades_copy62 = {}\n  local grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpta59y2se.lua:98: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  local grades_count = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum\
    \ + grades[i]\n    grades_count = grades_count + 1\n  end\n  local grades_average\
    \ = grades_sum / grades_count\n  local grades_letter = ''\n  local grades_letter_count\
    \ = 0\n  for i = 1, #grades do\n    local grades_letter_grade = grades_average\
    \ - grades[i]\n    if grades_letter_grade >= 0 then\n      grades_letter = grades_letter..'A+'\n\
    \    elseif grades_letter_grade < 0 then\n      grades_letter = grades_letter..'A-'\n\
    \    else\n      grades_letter = grades_letter..'B+'\n    end\n    grades_letter_count\
    \ = grades_letter_count + 1\n  end\n  return grades_letter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdufo_idc.lua:49:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A-A-A+A+A-\"\nstack\
    \ traceback:\n\t/tmp/tmpdufo_idc.lua:49: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_index = 0\n  local grades_average_index2\
    \ = 0\n  local grades_average_index3 = 0\n  local grades_average_index4 = 0\n\
    \  local grades_average_index5 = 0\n  local grades_average_index6 = 0\n  local\
    \ grades_average_index7 = 0\n  local grades_average_index8 = 0\n  local grades_average_index9\
    \ = 0\n  local grades_average_index10 = 0\n  local grades_average_index11 = 0\n\
    \  local grades_average_index12 = 0\n  local grades_average_index13 = 0\n  local\
    \ grades_average_index14 = 0\n  local grades_average_index15 = 0\n  local grades_average_index16\
    \ = 0\n  local grades_average_index17 = 0\n  local grades_average_index18 = 0\n\
    \  local grades_average_index19 = 0\n  local grades_average_index20 = 0\n  local\
    \ grades_average_index21 = 0\n  local grades_average_index22 = 0\n  local grades_average_index23\
    \ = 0\n  local grades_average_index24 = 0\n  local grades_average_index25 = 0\n\
    \  local grades_average_index26 = 0\n  local grades_average_index27 = 0\n  local\
    \ grades_average_index28 = 0\n  local grades_average_index29 = 0\n  local grades_average_index30\
    \ = 0\n  local grades_average_index31 = 0\n  local grades_average_index32 = 0\n\
    \  local grades_average_index33 = 0\n  local grades_average_index34 = 0\n  local\
    \ grades_average_index35 = 0\n  local grades_average_index36 = 0\n  local grades_average_index37\
    \ = 0\n  local grades_average_index38 = 0\n  local grades_average_index39 = 0\n\
    \  local grades_average_index40 = 0\n  local grades_average_index41 = 0\n  local\
    \ grades_average_index42 = 0\n  local grades_average_index43 = 0\n  local grades_average_index44\
    \ = 0\n  local grades_average_index45 = 0\n  local grades_average_index46 = 0\n\
    \  local grades_average_index47 = 0\n  local grades_average_index48 = 0\n  local\
    \ grades_average_index49 = 0\n  local grades_average_index50 = 0\n  local grades_average_index51\
    \ = 0\n  local grades_average_index52 = 0\n  local grades_average_index53 = 0\n\
    \  local grade\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpidlo9uiw.lua:92: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  local grades_count = 0\n  for i = 1, #grades do\n    local grade =\
    \ grades[i]\n    local grade_string = string.format(\"%g\", grade)\n    if grade\
    \ < 4.0 then\n      grades_count = grades_count + 1\n      grades_string = grades_string\
    \ .. \"+\" \n    elseif grade < 3.7 then\n      grades_count = grades_count +\
    \ 1\n      grades_string = grades_string .. \"A\" \n    elseif grade < 3.3 then\n\
    \      grades_count = grades_count + 1\n      grades_string = grades_string ..\
    \ \"A-\" \n    elseif grade < 3.0 then\n      grades_count = grades_count + 1\n\
    \      grades_string = grades_string .. \"B+\" \n    elseif grade < 2.7 then\n\
    \      grades_count = grades_count + 1\n      grades_string = grades_string ..\
    \ \"B\" \n    elseif grade < 2.3 then\n      grades_count = grades_count + 1\n\
    \      grades_string = grades_string .. \"B-\" \n    elseif grade < 2.0 then\n\
    \      grades_count = grades_count + 1\n      grades_string = grades_string ..\
    \ \"C+\" \n    elseif grade < 1.7 then\n      grades_count = grades_count + 1\n\
    \      grades_string = grades_string .. \"C\" \n    elseif grade < 1.3 then\n\
    \      grades_count = grades_count + 1\n      grades_string = grades_string ..\
    \ \"C-\" \n    elseif grade < 1.0 then\n      grades_count = grades_count + 1\n\
    \      grades_string = grades_string .. \"D+\" \n    elseif grade < 0.7 then\n\
    \      grades_count = grades_count + 1\n      grades_string = grades_string ..\
    \ \"D\" \n    elseif grade < 0.0 then\n      grades_count = grades_count + 1\n\
    \      grades_string = grades_string .. \"D-\" \n    else\n      grades_count\
    \ = grades_count + 1\n      grades_string = grades_string .. \"E\" \n    end\n\
    \  end\n  if grades_count == 0 then\n    grades_string = \"E\"\n  end\n  return\
    \ grades_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg1s0hs6.lua:78:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"E++++\"\nstack traceback:\n\
    \t/tmp/tmpzg1s0hs6.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_length\
    \ = #grades\n  local grades_average = grades_length / 2\n  local grades_sum =\
    \ 0\n  local grades_count = 0\n  local grades_letters = {}\n  for i = 1, grades_length\
    \ do\n    grades_sum = grades_sum + grades[i]\n    grades_count = grades_count\
    \ + 1\n  end\n  local grades_average = grades_sum / grades_count\n  for i = 1,\
    \ grades_length do\n    local grade = grades[i]\n    if grade >= grades_average\
    \ then\n      grades_letters[i] = 'A+'\n    elseif grade >= grades_average - 0.7\
    \ then\n      grades_letters[i] = 'D+'\n    elseif grade >= grades_average - 0.3\
    \ then\n      grades_letters[i] = 'C+'\n    elseif grade >= grades_average - 0.1\
    \ then\n      grades_letters[i] = 'B+'\n    elseif grade >= grades_average - 0.07\
    \ then\n      grades_letters[i] = 'B'\n    elseif grade >= grades_average - 0.03\
    \ then\n      grades_letters[i] = 'A-'\n    elseif grade >= grades_average - 0.01\
    \ then\n      grades_letters[i] = 'A'\n    elseif grade >= grades_average - 0.007\
    \ then\n      grades_letters[i] = 'D'\n    elseif grade >= grades_average - 0.003\
    \ then\n      grades_letters[i] = 'C'\n    elseif grade >= grades_average - 0.001\
    \ then\n      grades_letters[i] = 'B-'\n    elseif grade >= grades_average - 0.0007\
    \ then\n      grades_letters[i] = 'B'\n    elseif grade >= grades_average - 0.0003\
    \ then\n      grades_letters[i] = 'A-'\n    elseif grade >= grades_average - 0.0001\
    \ then\n      grades_letters[i] = 'A'\n    elseif grade >= grades_average - 0.00007\
    \ then\n      grades_letters[i] = 'D-'\n    elseif grade >= grades_average - 0.00003\
    \ then\n      grades_letters[i] = 'C'\n    elseif grade >= grades_average - 0.00001\
    \ then\n      grades_letters[i] = 'B'\n    elseif grade >= grades_average - 0.000003\
    \ then\n      grades_letters[i] = 'A-'\n    elseif grade >= grades_average - 0.000001\
    \ then\n      grades_letters[i] = 'A'\n    elseif grade >= grades_average - 0.0000007\
    \ then\n      grades_letters[i] = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptglcd783.lua:73: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average\n    local grades_average\
    \ = grades_average / 2\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmmi0_35r.lua:74: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sum\
    \ = 0\n  for i = 1, #grades do\n    grades_sum = grades_sum + grades[i]\n  end\n\
    \  local grades_avg = grades_sum / #grades\n  local grades_diff = 0\n  for i =\
    \ 1, #grades do\n    grades_diff = grades_diff + (grades[i] - grades_avg)\n  end\n\
    \  local grades_diff_avg = grades_diff / #grades\n  local grades_diff_max = grades_diff\
    \ / #grades\n  local grades_diff_min = grades_diff / #grades\n  local grades_diff_avg\
    \ = grades_diff / #grades\n  local grades_diff_max = grades_diff / #grades\n \
    \ local grades_diff_min = grades_diff / #grades\n  local grades_diff_avg = grades_diff\
    \ / #grades\n  local grades_diff_max = grades_diff / #grades\n  local grades_diff_min\
    \ = grades_diff / #grades\n  local grades_diff_avg = grades_diff / #grades\n \
    \ local grades_diff_max = grades_diff / #grades\n  local grades_diff_min = grades_diff\
    \ / #grades\n  local grades_diff_avg = grades_diff / #grades\n  local grades_diff_max\
    \ = grades_diff / #grades\n  local grades_diff_min = grades_diff / #grades\n \
    \ local grades_diff_avg = grades_diff / #grades\n  local grades_diff_max = grades_diff\
    \ / #grades\n  local grades_diff_min = grades_diff / #grades\n  local grades_diff_avg\
    \ = grades_diff / #grades\n  local grades_diff_max = grades_diff / #grades\n \
    \ local grades_diff_min = grades_diff / #grades\n  local grades_diff_avg = grades_diff\
    \ / #grades\n  local grades_diff_max = grades_diff / #grades\n  local grades_diff_min\
    \ = grades_diff / #grades\n  local grades_diff_avg = grades_diff / #grades\n \
    \ local grades_diff_max = grades_diff / #grades\n  local grades_diff_min = grades_diff\
    \ / #grades\n  local grades_diff_avg = grades_diff / #grades\n  local grades_diff_max\
    \ = grades_diff / #grades\n  local grades_diff_min = grades_diff / #grades\n \
    \ local grades_diff_avg = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp896way3a.lua:63: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa\
    \ = grades[i]\n    if gpa > 3.0 then\n      grades_string = grades_string .. \"\
    A+\"\n    elseif gpa > 2.7 then\n      grades_string = grades_string .. \"B+\"\
    \n    elseif gpa > 2.0 then\n      grades_string = grades_string .. \"C+\"\n \
    \   elseif gpa > 1.7 then\n      grades_string = grades_string .. \"C\"\n    elseif\
    \ gpa > 1.0 then\n      grades_string = grades_string .. \"D+\"\n    elseif gpa\
    \ > 0.7 then\n      grades_string = grades_string .. \"D\"\n    elseif gpa > 0.0\
    \ then\n      grades_string = grades_string .. \"D-\"\n    elseif gpa > 0.0 then\n\
    \      grades_string = grades_string .. \"E\"\n    end\n  end\n  return grades_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfb4jetn.lua:51:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+B+D+CA+\"\nstack\
    \ traceback:\n\t/tmp/tmpdfb4jetn.lua:51: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_sorted_length = #grades_sorted\n  local\
    \ grades_sorted_last = grades_sorted[grades_sorted_length-1]\n  local grades_sorted_first\
    \ = grades_sorted[1]\n  local grades_sorted_first_index = #grades_sorted - 1\n\
    \  local grades_sorted_last_index = grades_sorted_length - 1\n  local grades_sorted_first_index_plus_one\
    \ = grades_sorted_first_index + 1\n  local grades_sorted_last_index_minus_one\
    \ = grades_sorted_last_index - 1\n  local grades_sorted_first_index_minus_one\
    \ = grades_sorted_first_index - 1\n  local grades_sorted_first_index_plus_one_minus_one\
    \ = grades_sorted_first_index_plus_one - 1\n  local grades_sorted_last_index_minus_one_minus_one\
    \ = grades_sorted_last_index_minus_one + 1\n  local grades_sorted_first_index_minus_one_minus_one_minus_one\
    \ = grades_sorted_first_index_minus_one_minus_one + 1\n  local grades_sorted_first_index_plus_one_minus_one_minus_one_minus_one\
    \ = grades_sorted_first_index_plus_one_minus_one_minus_one + 1\n  local grades_sorted_last_index_plus_one_minus_one_minus_one_minus_one_minus_one\
    \ = grades_sorted_last_index_plus_one_minus_one_minus_one_minus_one + 1\n  local\
    \ grades_sorted_first_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = grades_sorted_first_index_plus_one_minus_one_minus_one_minus_one_minus_one\
    \ + 1\n  local grades_sorted_last_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = grades_sorted_last_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ + 1\n  local grades_sorted_first_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = grades_sorted_first_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ + 1\n  local grades_sorted_last_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = grades_sorted_last_index_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ + 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp588lm_e_.lua:54: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grades_average = grades_average\
    \ * grades_average\n  local grades_average = grades_average / grades_length\n\
    \  local grades_average = grades_average * grades_average\n  local grades_average\
    \ = grades_average / grades_length\n  local grades_average = grades_average *\
    \ grades_average\n  local grades_average = grades_average / grades_length\n  local\
    \ grades_average = grades_average * grades_average\n  local grades_average = grades_average\
    \ / grades_length\n  local grades_average = grades_average * grades_average\n\
    \  local grades_average = grades_average / grades_length\n  local grades_average\
    \ = grades_average * grades_average\n  local grades_average = grades_average /\
    \ grades_length\n  local grades_average = grades_average * grades_average\n  local\
    \ grades_average = grades_average / grades_length\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsk6gfsfv.lua:73: 'end' expected (to close 'function' at line\
    \ 22) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-',\
    \ 'C', 'A-']\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_rounded = math.floor(grades_average)\n\
    \  local grades_average_rounded_with_zeros = \n    grades_average_rounded < 0\
    \ and \"-\" or \n    grades_average_rounded > 0 and \"+\" or \n    grades_average_rounded\
    \ == 0 and \"E\"\n  local grades_average_rounded_with_zeros_length = \n    grades_average_rounded_with_zeros:len()\n\
    \  local grades_average_rounded_with_zeros_length_with_zeros = \n    grades_average_rounded_with_zeros_length\
    \ < 1 and \"0\" or \n    grades_average_rounded_with_zeros_length > 1 and \"1\"\
    \ or \"0\"\n  local grades_average_rounded_with_zeros_length_with_zeros_length\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros:len()\n  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length < 1 and \"\
    0\" or \n    grades_average_rounded_with_zeros_length_with_zeros_length > 1 and\
    \ \"1\" or \"0\"\n  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros:len()\n\
    \  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length\
    \ < 1 and \"0\" or \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length\
    \ > 1 and \"1\" or \"0\"\n  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length\
    \ < 1 and \"0\" or \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length\
    \ > 1 and \"1\" or \"0\"\n  local grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros\
    \ = \n    grades_average_rounded_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length_with_zeros_length\
    \ < 1 and \"0\" or \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_gfobfud.lua:51: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
