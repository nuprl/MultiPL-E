name: HumanEval_56_correct_bracketing
language: lua
results:
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      if brackets[i]\
    \ == \"<\" then\n         if brackets[i+1] == \"<\" then\n            return false\n\
    \         else\n            return true\n         end\n      elseif brackets[i]\
    \ == \">\" then\n         if brackets[i+1] == \">\" then\n            return false\n\
    \         else\n            return true\n         end\n      end\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxmsm24a.lua:32:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpfxmsm24a.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n   local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n   for i =\
    \ 1, #opening_brackets do\n      if not opening_brackets[i]:sub(1, 1) == \"<\"\
    \ then\n         return false\n      end\n      if not closing_brackets[i]:sub(1,\
    \ 1) == \">\" then\n         return false\n      end\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6orxg3ht.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6orxg3ht.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4onfhfl9.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp4onfhfl9.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp4onfhfl9.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35_mrdip.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp35_mrdip.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07vkmwmf.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp07vkmwmf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdegaivj.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppdegaivj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfi8n9mh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyfi8n9mh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1_nise2.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1_nise2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzm2r75h.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjzm2r75h.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = 1\n  local closing_brackets_index = 1\n  while\
    \ opening_brackets_index < opening_brackets_count do\n    local opening_bracket\
    \ = opening_brackets:sub(opening_brackets_index, opening_brackets_index)\n   \
    \ local closing_bracket = closing_brackets:sub(closing_brackets_index, closing_brackets_index)\n\
    \    if opening_bracket ~= closing_bracket then\n      return false\n    end\n\
    \    opening_brackets_index = opening_brackets_index + 1\n    closing_brackets_index\
    \ = closing_brackets_index + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbu04ve3.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcbu04ve3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_count_with_closing = opening_brackets_count + closing_brackets_count\n\
    \  local opening_brackets_count_with_opening = opening_brackets_count - closing_brackets_count\n\
    \  local opening_brackets_count_with_opening_and_closing = opening_brackets_count_with_opening\
    \ + opening_brackets_count_with_closing\n  return opening_brackets_count_with_opening_and_closing\
    \ == opening_brackets_count_with_opening\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclqf12oa.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpclqf12oa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"<\", \"\")\n\
    \  local closing = brackets:gsub(\">\", \"\")\n  local opening_count = opening:gsub(\"\
    (%S+)\", function(a)\n    return #a ~= 1 and #a ~= #closing and #a ~= #opening\
    \ + 1\n  end)\n  return opening_count == #brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2_0_8mj.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf2_0_8mj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"[\", \"\")\n  brackets = brackets:gsub(\"]\",\
    \ \"\")\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"\
    }\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8wvidkfm.lua:56: unfinished string near '\">'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"}\",\
    \ \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzj8o7uz3.lua:57: ')' expected (to close '(' at line 56) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ==\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi49wmdjr.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi49wmdjr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fhcjh1h.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fhcjh1h.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ==\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz4k2c2p.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplz4k2c2p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s2spa78.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5s2spa78.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_table = { }\n  local closing_brackets_table = { }\n\
    \  for i = 1, opening_brackets_count do\n    opening_brackets_table[opening_brackets:sub(i,\
    \ i)] = true\n  end\n  for i = 1, closing_brackets_count do\n    closing_brackets_table[closing_brackets:sub(i,\
    \ i)] = true\n  end\n  for i = 1, opening_brackets_count do\n    if not opening_brackets_table[i]\
    \ then\n      return false\n    end\n  end\n  for i = 1, closing_brackets_count\
    \ do\n    if not closing_brackets_table[i] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxm5bvt2.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjxm5bvt2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\"):gsub(\"(<)$\", \"\"):gsub(\"(<)\", \"\")\n  local closing_brackets = brackets:gsub(\"\
    (>)$\", \"\"):gsub(\"(>)\", \"\")\n  return opening_brackets:len() == closing_brackets:len()\
    \ and opening_brackets:all() == \"<\" and closing_brackets:all() == \">\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0cgn999.lua:14:\
    \ attempt to call method 'all' (a nil value)\nstack traceback:\n\t/tmp/tmpu0cgn999.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  return opening:sub(1, #opening\
    \ - #closing) == closing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ivs_fz_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ivs_fz_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  local opening_brackets_map = { }\n  local closing_brackets_map = { }\n\
    \  for i = 1, opening_brackets_count do\n    opening_brackets_map[opening_brackets:sub(i,\
    \ i)] = true\n  end\n  for i = 1, closing_brackets_count do\n    closing_brackets_map[closing_brackets:sub(i,\
    \ i)] = true\n  end\n  for i = 1, opening_brackets_count do\n    if not opening_brackets_map[opening_brackets:sub(i,\
    \ i)] then\n      return false\n    end\n  end\n  for i = 1, closing_brackets_count\
    \ do\n    if not closing_brackets_map[closing_brackets:sub(i, i)] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqls40x6m.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqls40x6m.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening == \"<\" then\n         if closing ~= \">\" then\n            return\
    \ false\n         end\n      elseif opening == \">\" then\n         if closing\
    \ ~= \"<\" then\n            return false\n         end\n      end\n   end\n \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz9s09th.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprz9s09th.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfub2p8au.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfub2p8au.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:sub(1, opening_brackets_count)\n\
    \  local closing_brackets_index = closing_brackets:sub(1, closing_brackets_count)\n\
    \  local opening_brackets_index_count = opening_brackets_index:len()\n  local\
    \ closing_brackets_index_count = closing_brackets_index:len()\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count - 1\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count + 1\n  local closing_brackets_index_count_min\
    \ = closing_brackets_index_count - 1\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index_count + 1\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count_min - 1\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count_max + 1\n  local closing_brackets_index_count_min\
    \ = closing_brackets_index_count_min - 1\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index_count_max + 1\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count_min - 1\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count_max + 1\n  local closing_brackets_index_count_min\
    \ = closing_brackets_index_count_min - 1\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index_count_max + 1\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count_min - 1\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count_max + 1\n  local closing_brackets_index_count_min\
    \ = closing_brackets_index_count_min - 1\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index_count_max + 1\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count_min \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf3y1xn70.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening ~= closing then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxci9dj2.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfxci9dj2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46kvsif5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp46kvsif5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv_2iwnx.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmv_2iwnx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbycugzo.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgbycugzo.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgybd11kr.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgybd11kr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] != closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm7ib6jnx.lua:15: 'then' expected near '!'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56l3zckx.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp56l3zckx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  if opening_brackets_count ~= closing_brackets:len()\
    \ then\n    return false\n  end\n  for i = 1, opening_brackets_count do\n    local\
    \ opening_bracket = opening_brackets:sub(i, i)\n    local closing_bracket = closing_brackets:sub(i,\
    \ i)\n    if opening_bracket ~= closing_bracket then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenyjhkie.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpenyjhkie.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qk1g46x.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3qk1g46x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtrd0h74.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvtrd0h74.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwffkc87.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdwffkc87.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index:len()\n\
    \  local closing_brackets_index_count = closing_brackets_index:len()\n  local\
    \ opening_brackets_index_count_min = opening_brackets_index_count < closing_brackets_index_count\n\
    \  local opening_brackets_index_count_max = opening_brackets_index_count > closing_brackets_index_count\n\
    \  local opening_brackets_index_count_equal = opening_brackets_index_count ==\
    \ closing_brackets_index_count\n  local opening_brackets_index_count_greater =\
    \ opening_brackets_index_count > closing_brackets_index_count\n  local opening_brackets_index_count_less\
    \ = opening_brackets_index_count < closing_brackets_index_count\n  local opening_brackets_index_count_greater_or_equal\
    \ = opening_brackets_index_count >= closing_brackets_index_count\n  local opening_brackets_index_count_less_or_equal\
    \ = opening_brackets_index_count <= closing_brackets_index_count\n  local opening_brackets_index_count_not_equal\
    \ = opening_brackets_index_count ~= closing_brackets_index_count\n  local opening_brackets_index_count_not_greater\
    \ = opening_brackets_index_count ~> closing_brackets_index_count\n  local opening_brackets_index_count_not_less\
    \ = opening_brackets_index_count ~< closing_brackets_index_count\n  local opening_brackets_index_count_not_greater_or_equal\
    \ = opening_brackets_index_count ~>= closing_brackets_index_count\n  local opening_brackets_index_count_not_less_or_equal\
    \ = opening_brackets_index_count ~<= closing_brackets_index_count\n  local opening\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphe9jn5i3.lua:28: unexpected symbol near '~'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ~=\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtj19t10.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjtj19t10.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jgswkns.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_jgswkns.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zqb4fsr.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8zqb4fsr.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\"[\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"]\")\n  local opening_brackets_index_next = opening_brackets_index\
    \ + 1\n  local closing_brackets_index_next = closing_brackets_index + 1\n  while\
    \ opening_brackets_index < opening_brackets_count do\n    if opening_brackets_index_next\
    \ == opening_brackets_count then\n      opening_brackets_index_next = 0\n    end\n\
    \    if opening_brackets[opening_brackets_index] == closing_brackets[opening_brackets_index_next]\
    \ then\n      opening_brackets_index = opening_brackets_index_next\n      opening_brackets_index_next\
    \ = opening_brackets_index_next + 1\n    else\n      return false\n    end\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnr18jg_.lua:16:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpjnr18jg_.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpjnr18jg_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"<\", \"\")\n\
    \  local closing = brackets:gsub(\">\", \"\")\n  return opening:len() == closing:len()\
    \ and opening:sub(1, opening:len() - closing:len()) == closing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmzy1fpo.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgmzy1fpo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6h23euq.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo6h23euq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #open_brackets do\n    if open_brackets[i] ~= close_brackets[i] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuc110t2v.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuc110t2v.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ==\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetzg45o.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphetzg45o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] ~= closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gbetuif.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_gbetuif.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"<\")\n  local closing_brackets = brackets:gsub(\"<>+\", \">\")\n  return opening_brackets:sub(1,\
    \ 1):sub(1, 1):sub(1, 1) == closing_brackets\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3y7xbl0.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr3y7xbl0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = 1\n  local closing_brackets_index = 1\n  local\
    \ opening_brackets_char = opening_brackets[1]\n  local closing_brackets_char =\
    \ closing_brackets[1]\n  while opening_brackets_index < opening_brackets_count\
    \ do\n    if opening_brackets_char == opening_brackets[opening_brackets_index]\
    \ then\n      opening_brackets_index = opening_brackets_index + 1\n      opening_brackets_char\
    \ = opening_brackets[opening_brackets_index]\n    else\n      return false\n \
    \   end\n  end\n  while closing_brackets_index < closing_brackets_count do\n \
    \   if closing_brackets_char == closing_brackets[closing_brackets_index] then\n\
    \      closing_brackets_index = closing_brackets_index + 1\n      closing_brackets_char\
    \ = closing_brackets[closing_brackets_index]\n    else\n      return false\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1sqb_25.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr1sqb_25.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4usxxa1.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf4usxxa1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening = opening_brackets:sub(i, i)\n    local\
    \ closing = closing_brackets:sub(i, i)\n    if opening ~= closing then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv9wu54i.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphv9wu54i.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y5gd5xc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5y5gd5xc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ssoeuq6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4ssoeuq6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:sub(1, opening_brackets_count)\n\
    \  local closing_brackets_index = closing_brackets:sub(1, closing_brackets_count)\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets_index == closing_brackets_index\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cr40uf2.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1cr40uf2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  local closing_brackets_index_count = closing_brackets_index\n  while opening_brackets_index_count\
    \ ~= closing_brackets_index_count do\n    opening_brackets_index_count = opening_brackets_index:len()\n\
    \    closing_brackets_index_count = closing_brackets_index:len()\n    opening_brackets_index\
    \ = opening_brackets_index:find(\">\")\n    closing_brackets_index = closing_brackets_index:find(\"\
    <\")\n  end\n  return opening_brackets_index_count == closing_brackets_index_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfahncjhh.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfahncjhh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]$\", \"\")\n  return opening:len() ==\
    \ closing:len() and opening:sub(1, opening:len()) == closing:sub(1, closing:len())\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvqtq4ig.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptvqtq4ig.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  local opening_brackets_pairs = opening_brackets:gsub(\"(%w+)(%w+)\"\
    , function(_, opening, closing)\n    return opening:lower() == closing:lower()\n\
    \  end)\n  local closing_brackets_pairs = closing_brackets:gsub(\"(%w+)(%w+)\"\
    , function(_, opening, closing)\n    return opening:lower() == closing:lower()\n\
    \  end)\n  for _, opening_brackets_pair in ipairs(opening_brackets_pairs) do\n\
    \    local opening_bracket = opening_brackets_pair:sub(1, 1)\n    local closing_bracket\
    \ = closing_brackets_pair:sub(1, 1)\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqq2dnqk.lua:25:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpoqq2dnqk.lua:25: in function 'candidate'\n\t/tmp/tmpoqq2dnqk.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  if opening_brackets_index == nil then\n    opening_brackets_index = opening_brackets_count\n\
    \  end\n  if closing_brackets_index == nil then\n    closing_brackets_index =\
    \ closing_brackets_count\n  end\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  if opening_brackets_index_count == 0 then\n    opening_brackets_index_count\
    \ = opening_brackets_count\n  end\n  local opening_brackets_index_count_2 = opening_brackets_index_count\
    \ - 1\n  local opening_brackets_index_count_3 = opening_brackets_index_count_2\
    \ - 1\n  local opening_brackets_index_count_4 = opening_brackets_index_count_3\
    \ - 1\n  local opening_brackets_index_count_5 = opening_brackets_index_count_4\
    \ - 1\n  local opening_brackets_index_count_6 = opening_brackets_index_count_5\
    \ - 1\n  local opening_brackets_index_count_7 = opening_brackets_index_count_6\
    \ - 1\n  local opening_brackets_index_count_8 = opening_brackets_index_count_7\
    \ - 1\n  local opening_brackets_index_count_9 = opening_brackets_index_count_8\
    \ - 1\n  local opening_brackets_index_count_10 = opening_brackets_index_count_9\
    \ - 1\n  local opening_brackets_index_count_11 = opening_brackets_index_count_10\
    \ - 1\n  local opening_brackets_index_count_12 = opening_brackets_index_count_11\
    \ - 1\n  local opening_brackets_index_count_13 = opening_brackets_index_count_12\
    \ - 1\n  local opening_brackets_index_count_14 = opening_brackets_index_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9mw45skw.lua:60: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda7f9k_h.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpda7f9k_h.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"[\", \"\")\n  brackets = brackets:gsub(\"]\",\
    \ \"\")\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"\
    }\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp014asd_y.lua:62: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"<\", \"\")\n\
    \  local closing = brackets:gsub(\">\", \"\")\n  local opening_brackets = opening:gsub(\"\
    (%w+)(%w+)\", function(a, b, c) return a .. b .. c end)\n  local closing_brackets\
    \ = closing:gsub(\"(%w+)(%w+)\", function(a, b, c) return a .. b .. c end)\n \
    \ return opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3zgekx5.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk3zgekx5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqo6wynf.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqo6wynf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  local open_brackets_count\
    \ = open_brackets:len()\n  local close_brackets_count = close_brackets:len()\n\
    \  local open_brackets_index = open_brackets:find(\">\")\n  local close_brackets_index\
    \ = close_brackets:find(\"<\")\n  local open_brackets_index_count = open_brackets_index\n\
    \  if open_brackets_index == nil then\n    open_brackets_index = open_brackets_count\n\
    \  end\n  if close_brackets_index == nil then\n    close_brackets_index = close_brackets_count\n\
    \  end\n  if open_brackets_index > close_brackets_index then\n    return false\n\
    \  end\n  for i = 1, open_brackets_count do\n    if open_brackets_index == i then\n\
    \      open_brackets_index = open_brackets_index - 1\n      close_brackets_index\
    \ = close_brackets_index + 1\n      break\n    end\n  end\n  if open_brackets_index\
    \ == open_brackets_count then\n    return true\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzpys0qq.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptzpys0qq.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ysw5pfa.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp2ysw5pfa.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp2ysw5pfa.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2dmibmr.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmps2dmibmr.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmps2dmibmr.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ local opening_brackets = brackets:gsub(\"^<\", \"\")\n  local closing_brackets\
    \ = brackets:gsub(\"^>\", \"\")\n  return opening_brackets:len() == closing_brackets:len()\
    \ and\n         opening_brackets:gsub(\"^\", \"\") == closing_brackets:gsub(\"\
    ^\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1le2nosa.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1le2nosa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  if opening_brackets_count ~= closing_brackets:len()\
    \ then\n    return false\n  end\n  for i = 1, opening_brackets_count do\n    if\
    \ opening_brackets[i] ~= closing_brackets[i] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsqov2t0.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxsqov2t0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = 1\n  local closing_brackets_index = 1\n  local\
    \ opening_brackets_last_index = opening_brackets_count - 1\n  local closing_brackets_last_index\
    \ = closing_brackets_count - 1\n  while opening_brackets_index < opening_brackets_count\
    \ do\n    if opening_brackets_last_index == 0 then\n      return false\n    end\n\
    \    if opening_brackets[opening_brackets_index] == opening_brackets[opening_brackets_last_index]\
    \ then\n      opening_brackets_index = opening_brackets_index + 1\n      opening_brackets_last_index\
    \ = opening_brackets_last_index - 1\n    else\n      return false\n    end\n \
    \ end\n  while closing_brackets_index < closing_brackets_count do\n    if closing_brackets_last_index\
    \ == 0 then\n      return false\n    end\n    if closing_brackets[closing_brackets_index]\
    \ == closing_brackets[closing_brackets_last_index] then\n      closing_brackets_index\
    \ = closing_brackets_index + 1\n      closing_brackets_last_index = closing_brackets_last_index\
    \ - 1\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd4ki6oz.lua:52:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcd4ki6oz.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwbwyqzr.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpqwbwyqzr.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpqwbwyqzr.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvn_3yw_h.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvn_3yw_h.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = 1\n  local closing_brackets_index = 1\n  while\
    \ opening_brackets_index < opening_brackets_count do\n    if opening_brackets[opening_brackets_index]\
    \ ~= closing_brackets[closing_brackets_index] then\n      return false\n    end\n\
    \    opening_brackets_index = opening_brackets_index + 1\n    closing_brackets_index\
    \ = closing_brackets_index + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjjn567l.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnjjn567l.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwichqmh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwwichqmh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq0_usyn.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq0_usyn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphny4ajnf.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphny4ajnf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"}\",\
    \ \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgat0a7is.lua:57: ')' expected (to close '(' at line 56) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets_count - 1\n  local closing_brackets_index\
    \ = closing_brackets_count - 1\n  while opening_brackets_index >= 0 do\n    local\
    \ opening_bracket = opening_brackets:sub(opening_brackets_index, 1)\n    local\
    \ closing_bracket = closing_brackets:sub(closing_brackets_index, 1)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n    opening_brackets_index\
    \ = opening_brackets_index - 1\n    closing_brackets_index = closing_brackets_index\
    \ - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_qkpe1c.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp_qkpe1c.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmze_ug4s.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmze_ug4s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrnqibvx.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsrnqibvx.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  \
    \  local opening_brackets_count = opening_brackets:len()\n    local closing_brackets_count\
    \ = closing_brackets:len()\n    local opening_brackets_index = 1\n    local closing_brackets_index\
    \ = 1\n    while opening_brackets_index < opening_brackets_count do\n        local\
    \ opening_bracket = opening_brackets:sub(opening_brackets_index, opening_brackets_index)\n\
    \        if opening_bracket:sub(1, 1) == \"<\" then\n            opening_brackets_index\
    \ = opening_brackets_index + 1\n        elseif opening_bracket:sub(1, 1) == \"\
    >\" then\n            opening_brackets_index = opening_brackets_index + 1\n  \
    \          closing_brackets_index = closing_brackets_index + 1\n        else\n\
    \            return false\n        end\n    end\n    while closing_brackets_index\
    \ < closing_brackets_count do\n        local closing_bracket = closing_brackets:sub(closing_brackets_index,\
    \ closing_brackets_index)\n        if closing_bracket:sub(1, 1) == \"<\" then\n\
    \            closing_brackets_index = closing_brackets_index + 1\n        elseif\
    \ closing_bracket:sub(1, 1) == \">\" then\n            closing_brackets_index\
    \ = closing_brackets_index + 1\n            opening_brackets_index = opening_brackets_index\
    \ + 1\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wta4e5j.lua:50:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1wta4e5j.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi4a9vrf.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxi4a9vrf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<(%W)>\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%(%W)>\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len() and\n         opening_brackets:sub(1,\
    \ opening_brackets:len()) ~= closing_brackets:sub(1, closing_brackets:len())\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa59__z8w.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa59__z8w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets_count - 1\n  local closing_brackets_index\
    \ = closing_brackets_count - 1\n  while opening_brackets_index >= 0 do\n    if\
    \ opening_brackets[opening_brackets_index] ~= closing_brackets[closing_brackets_index]\
    \ then\n      return false\n    end\n    opening_brackets_index = opening_brackets_index\
    \ - 1\n    closing_brackets_index = closing_brackets_index - 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzfgk8qr.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnzfgk8qr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1534hzva.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1534hzva.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2o12sgp.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi2o12sgp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] ~= closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqdt30ka.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqdt30ka.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ~=\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe12p5ri.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppe12p5ri.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhprv9_v.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkhprv9_v.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdn4200t.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsdn4200t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index2 = opening_brackets:find(\"\
    <<\")\n  local closing_brackets_index2 = closing_brackets:find(\">>\")\n  local\
    \ opening_brackets_index3 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index3\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index4 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index4 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index5 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index5\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index6 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index6 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index7 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index7\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index8 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index8 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index9 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index9\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index10 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index10 = closing_brackets:find(\">>>>\")\n \
    \ local opening_brackets_index11 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index11\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index12 = opening_brackets:find(\"\
    <<\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn4mrbd06.lua:38: unfinished string near '\"<<'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_db4_4w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn_db4_4w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pci9yqz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9pci9yqz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpire7jhrq.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpire7jhrq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjko_tglw.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjko_tglw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:sub(1, opening_brackets_count)\n\
    \  local closing_brackets_index = closing_brackets:sub(1, closing_brackets_count)\n\
    \  local opening_brackets_index_count = opening_brackets_index:len()\n  local\
    \ closing_brackets_index_count = closing_brackets_index:len()\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count + 1\n  local closing_brackets_index_count_min\
    \ = closing_brackets_index_count + 1\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count + closing_brackets_index_count_min\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index_count + opening_brackets_index_count_min\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index_count + closing_brackets_index_count_max\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4l1n93e3.lua:52: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  if opening_brackets_index == nil then\n    opening_brackets_index = opening_brackets_count\n\
    \  end\n  if closing_brackets_index == nil then\n    closing_brackets_index =\
    \ closing_brackets_count\n  end\n  if opening_brackets_index == nil then\n   \
    \ opening_brackets_index = opening_brackets_count\n  end\n  if closing_brackets_index\
    \ == nil then\n    closing_brackets_index = closing_brackets_count\n  end\n  if\
    \ opening_brackets_index == nil then\n    opening_brackets_index = opening_brackets_count\n\
    \  end\n  if closing_brackets_index == nil then\n    closing_brackets_index =\
    \ closing_brackets_count\n  end\n  if opening_brackets_index == nil then\n   \
    \ opening_brackets_index = opening_brackets_count\n  end\n  if closing_brackets_index\
    \ == nil then\n    closing_brackets_index = closing_brackets_count\n  end\n  if\
    \ opening_brackets_index == nil then\n    opening_brackets_index = opening_brackets_count\n\
    \  end\n  if closing_brackets_index == nil then\n    closing_brackets_index =\
    \ closing_brackets_count\n  end\n  if opening_brackets_index == nil then\n   \
    \ opening_brackets_index = opening_brackets_count\n  end\n  if closing_brackets_index\
    \ == nil then\n    closing_brackets_index = closing_brackets_count\n  end\n  if\
    \ opening_brackets_index == nil then\n    opening_brackets_index = opening_brackets_count\n\
    \  end\n  if closing_brackets_index == nil then\n    closing_bra\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplt0jgyjx.lua:60: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  for i = 1, #opening do\n\
    \    local open = opening[i]\n    local close = closing[i]\n    if open:sub(1,\
    \ 1) == \"<\" and close:sub(1, 1) == \">\" then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3luq1dde.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3luq1dde.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl99mec4c.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl99mec4c.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl6lqn3v.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpyl6lqn3v.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpyl6lqn3v.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpponyjvoh.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpponyjvoh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_map = { }\n  local closing_brackets_map = { }\n  for\
    \ i = 1, opening_brackets_count do\n    opening_brackets_map[opening_brackets:sub(i,\
    \ i)] = true\n  end\n  for i = 1, closing_brackets_count do\n    closing_brackets_map[closing_brackets:sub(i,\
    \ i)] = true\n  end\n  for i = 1, opening_brackets_count do\n    if not opening_brackets_map[opening_brackets:sub(i,\
    \ i)] then\n      return false\n    end\n  end\n  for i = 1, closing_brackets_count\
    \ do\n    if not closing_brackets_map[closing_brackets:sub(i, i)] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvjnit8p.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbvjnit8p.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"[<>]\", \"\")\n\
    \    brackets = brackets:gsub(\"^\", \"\")\n    brackets = brackets:gsub(\"$\"\
    , \"\")\n    brackets = brackets:gsub(\"{\", \"\")\n    brackets = brackets:gsub(\"\
    }\", \"\")\n    brackets = brackets:gsub(\"<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\"\
    >>>\", \"\")\n    brackets = brackets:gsub(\"<<<\", \"\")\n    brackets = brackets:gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8g94kh9l.lua:57: ')' expected (to close '(' at line 56) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptejckoxa.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptejckoxa.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqthdwg6z.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqthdwg6z.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri74bv3j.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpri74bv3j.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  \
    \  local opening_brackets_count = opening_brackets:len()\n    local closing_brackets_count\
    \ = closing_brackets:len()\n    if opening_brackets_count ~= closing_brackets_count\
    \ then\n        return false\n    end\n    local opening_brackets_table = opening_brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets_table = closing_brackets:gsub(\"[<>]\"\
    , \"\")\n    local opening_brackets_table_count = opening_brackets_table:len()\n\
    \    local closing_brackets_table_count = closing_brackets_table:len()\n    if\
    \ opening_brackets_table_count ~= closing_brackets_table_count then\n        return\
    \ false\n    end\n    local opening_brackets_table_pairs = opening_brackets_table:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets_table_pairs = closing_brackets_table:gsub(\"\
    [<>]\", \"\")\n    local opening_brackets_table_pairs_count = opening_brackets_table_pairs:len()\n\
    \    local closing_brackets_table_pairs_count = closing_brackets_table_pairs:len()\n\
    \    if opening_brackets_table_pairs_count ~= closing_brackets_table_pairs_count\
    \ then\n        return false\n    end\n    local opening_brackets_table_pairs_table\
    \ = opening_brackets_table_pairs:gsub(\"[<>]\", \"\")\n    local closing_brackets_table_pairs_table\
    \ = closing_brackets_table_pairs:gsub(\"[<>]\", \"\")\n    local opening_brackets_table_pairs_table_count\
    \ = opening_brackets_table_pairs_table:len()\n    local closing_brackets_table_pairs_table_count\
    \ = closing_brackets_table_pairs_table:len()\n    if opening_brackets_table_pairs_table_count\
    \ ~= closing_brackets_table_pairs_table_count then\n        return false\n   \
    \ end\n    local opening_brackets_table_pairs_table_pairs = opening_brackets_table_pairs_table:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets_table_pairs_table_pairs = closing_brackets_table_pairs_table:gsub(\"\
    [<>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp91zg9i62.lua:41: unfinished string near '\"[<>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbic8gigy.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbic8gigy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  if opening_brackets_count ~= closing_brackets:len()\
    \ then\n    return false\n  end\n  for i = 1, opening_brackets_count do\n    local\
    \ opening_bracket = opening_brackets:sub(i, i)\n    local closing_bracket = closing_brackets:sub(i,\
    \ i)\n    if opening_bracket ~= closing_bracket then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7m3ai9n.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn7m3ai9n.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] != closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9r_r6zpa.lua:15: 'then' expected near '!'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  for i = 1, #opening do\n\
    \    if opening[i] ~= closing[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphomqomlo.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphomqomlo.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnzqpzu2.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpfnzqpzu2.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpfnzqpzu2.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    <(%W)>\", \"%1\")\n    local closing_brackets = brackets:gsub(\"%(%W)>\", \"%1\"\
    )\n    return opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuh0ktoze.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuh0ktoze.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\"<\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\">\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  if opening_brackets_index == nil then\n    opening_brackets_index = opening_brackets_count\n\
    \  end\n  if closing_brackets_index == nil then\n    closing_brackets_index =\
    \ closing_brackets_count\n  end\n  if opening_brackets_index_count == 0 then\n\
    \    return true\n  elseif opening_brackets_index_count ~= opening_brackets_count\
    \ then\n    return false\n  end\n  if closing_brackets_index_count == 0 then\n\
    \    return true\n  elseif closing_brackets_index_count ~= closing_brackets_count\
    \ then\n    return false\n  end\n  local opening_brackets_index_value = opening_brackets_index\n\
    \  local closing_brackets_index_value = closing_brackets_index\n  while opening_brackets_index_value\
    \ ~= nil do\n    if opening_brackets[opening_brackets_index_value] ~= closing_brackets[closing_brackets_index_value]\
    \ then\n      return false\n    end\n    opening_brackets_index_value = opening_brackets_index\
    \ + opening_brackets_index_value\n    closing_brackets_index_value = closing_brackets_index\
    \ + closing_brackets_index_value\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8u9ja3o.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd8u9ja3o.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  \
    \  for i = 1, #opening_brackets do\n        if opening_brackets[i] ~= closing_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ue4tv8r.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ue4tv8r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y9l3lxq.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7y9l3lxq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"<(%W)\", function(a,\
    \ b) return \"<\" end)\n  local closing = brackets:gsub(\">(%W)\", function(a,\
    \ b) return \">\" end)\n  return opening:len() == closing:len() and opening:sub(1,\
    \ opening:len() - closing:len()) == closing\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvapj1yfr.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvapj1yfr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkagqg3q2.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkagqg3q2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"}\",\
    \ \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_49kezan.lua:57: ')' expected (to close '(' at line 56) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  local closing_brackets_index_count = closing_brackets_index\n  while opening_brackets_index_count\
    \ > 0 do\n    opening_brackets_index_count = opening_brackets_index_count - 1\n\
    \    closing_brackets_index_count = closing_brackets_index_count + 1\n  end\n\
    \  while closing_brackets_index_count < opening_brackets_count do\n    opening_brackets_index_count\
    \ = opening_brackets_index_count + 1\n    closing_brackets_index_count = closing_brackets_index_count\
    \ + 1\n  end\n  while opening_brackets_index_count < opening_brackets_count do\n\
    \    opening_brackets_index_count = opening_brackets_index_count + 1\n    closing_brackets_index_count\
    \ = closing_brackets_index_count + 1\n  end\n  while closing_brackets_index_count\
    \ > 0 do\n    opening_brackets_index_count = opening_brackets_index_count - 1\n\
    \    closing_brackets_index_count = closing_brackets_index_count - 1\n  end\n\
    \  return opening_brackets_index_count == 0 and closing_brackets_index_count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqzee46o.lua:20:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqqzee46o.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7aq2yl0j.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp7aq2yl0j.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp7aq2yl0j.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"(<)\", \"<\")\n  brackets = brackets:gsub(\"(>)\"\
    , \">\")\n  brackets = brackets:gsub(\"(<<)\", \"<<\")\n  brackets = brackets:gsub(\"\
    (>>)\", \">>\")\n  return brackets:sub(1, 1) == \"<\" and brackets:sub(2, 1) ==\
    \ \"<\" and brackets:sub(3, 1) == \"<\" and brackets:sub(4, 1) == \"<\" and brackets:sub(5,\
    \ 1) == \"<\" and brackets:sub(6, 1) == \"<\" and brackets:sub(7, 1) == \"<\"\
    \ and brackets:sub(8, 1) == \"<\" and brackets:sub(9, 1) == \"<\" and brackets:sub(10,\
    \ 1) == \"<\" and brackets:sub(11, 1) == \"<\" and brackets:sub(12, 1) == \"<\"\
    \ and brackets:sub(13, 1) == \"<\" and brackets:sub(14, 1) == \"<\" and brackets:sub(15,\
    \ 1) == \"<\" and brackets:sub(16, 1) == \"<\" and brackets:sub(17, 1) == \"<\"\
    \ and brackets:sub(18, 1) == \"<\" and brackets:sub(19, 1) == \"<\" and brackets:sub(20,\
    \ 1) == \"<\" and brackets:sub(21, 1) == \"<\" and brackets:sub(22, 1) == \"<\"\
    \ and brackets:sub(23, 1) == \"<\" and brackets:sub(24, 1) == \"<\" and brackets:sub(25,\
    \ 1) == \"<\" and brackets:sub(26, 1) == \"<\" and brackets:sub(27, 1) == \"<\"\
    \ and brackets:sub(28, 1) == \"<\" and brackets:sub(29, 1) == \"<\" and brackets:sub(30,\
    \ 1) == \"<\" and brackets:sub(31, 1) == \"<\" and brackets:sub(32, 1) == \"<\"\
    \ and brackets:sub(33, 1) == \"<\" and brackets:sub(34, 1) == \"<\" and brackets:sub(35,\
    \ 1) == \"<\" and brackets:sub(36, 1) == \"<\" and brackets:sub(37, 1) == \"<\"\
    \ and brackets:sub(38, 1) == \"<\" and brackets:sub(39, 1) == \"<\" and brackets:sub(40,\
    \ 1) == \"<\" and brackets:sub(41, 1) == \"<\" and brackets:sub(42, 1) == \"<\"\
    \ and brackets:sub(43, 1) == \"<\" and brackets:sub(44, 1) == \"<\" and brackets:sub(45,\
    \ 1) == \"<\" and brackets:sub(46, 1) == \"<\" and brackets:sub(47, 1) == \"<\"\
    \ and brackets:sub(48, 1) == \"<\" and brackets:sub(49, 1) == \"<\" and brackets:sub(50,\
    \ 1) == \"<\" and brackets:sub(51, 1) == \"<\" and brackets:sub(52, 1) == \"<\"\
    \ and brackets:sub(53, 1) == \"<\" and brackets:sub(54, 1) == \"<\" and brackets:sub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr_8e6y4y.lua:18: ')' expected (to close '(' at line 17) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"[\", \"\")\n  brackets = brackets:gsub(\"]\",\
    \ \"\")\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"\
    }\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    >\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpga39h35o.lua:80: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ for i = 1, #brackets do\n    if brackets[i]:sub(1, 1) == \"<\" then\n      return\
    \ false\n    end\n    if brackets[i]:sub(1, 1) == \">\" then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdv7s20g.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxdv7s20g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qchf6ro.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp0qchf6ro.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp0qchf6ro.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ~=\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8qfphe0.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_8qfphe0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i:len(i)] == closing_brackets[i:len(i)]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55ourbvx.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp55ourbvx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\"<\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\">\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  local closing_brackets_index_count = closing_brackets_index\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index\n  local closing_brackets_index_count_min = closing_brackets_index\n\
    \  local opening_brackets_index_count_max = opening_brackets_index\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index\n  local opening_brackets_index_count_min = opening_brackets_index\n\
    \  local closing_brackets_index_count_min = closing_brackets_index\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index\n  local closing_brackets_index_count_max = closing_brackets_index\n\
    \  while opening_brackets_index_count_min < opening_brackets_count and\n    closing_brackets_index_count_min\
    \ < closing_brackets_count do\n    opening_brackets_index_count_min = opening_brackets_index_count_min\
    \ + 1\n    closing_brackets_index_count_min = closing_brackets_index_count_min\
    \ + 1\n  end\n  while opening_brackets_index_count_max > opening_brackets_count\
    \ and\n    closing_brackets_index_count_max > closing_brackets_count do\n    opening_brackets_index_count_max\
    \ = opening_brackets_index_count_max - 1\n    closing_brackets_index_count_max\
    \ = closing_brackets_index_count_max - 1\n  end\n  if opening_brackets_index_count_min\
    \ == opening_brackets_count and\n    closing_brackets_index_count_min == closing_brackets_count\
    \ then\n    return true\n  elseif opening_brackets_index_count_max == opening_brackets_count\
    \ and\n    closing_bra\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg1mr2usa.lua:43: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  if opening_brackets_index_count > 0 then\n    opening_brackets_index = opening_brackets_index\
    \ + 1\n  end\n  if closing_brackets_index_count > 0 then\n    closing_brackets_index\
    \ = closing_brackets_index - 1\n  end\n  if opening_brackets_index_count ~= closing_brackets_index_count\
    \ then\n    return false\n  end\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  local opening_brackets_index = opening_brackets_index + 1\n  local closing_brackets_index_count\
    \ = closing_brackets_index\n  local closing_brackets_index = closing_brackets_index\
    \ - 1\n  while opening_brackets_index_count ~= closing_brackets_index_count do\n\
    \    if opening_brackets_index > closing_brackets_index then\n      return false\n\
    \    end\n    opening_brackets_index = opening_brackets_index + 1\n    closing_brackets_index\
    \ = closing_brackets_index - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakm1nunt.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpakm1nunt.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ local opening_brackets = brackets:gsub(\"(<)\", \"%1\"):gsub(\"(>)\", \"%1\"\
    )\n  local closing_brackets = brackets:gsub(\"(<)\", \"%2\"):gsub(\"(>)\", \"\
    %2\")\n  return opening_brackets:len() == closing_brackets:len() and\n       \
    \  opening_brackets:gsub(\"%1\", \"(\"):gsub(\"%2\", \")\") == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn1hlobe.lua:16:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcn1hlobe.lua:16: in function\
    \ 'candidate'\n\t/tmp/tmpcn1hlobe.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  \
    \  local opening_brackets_count = opening_brackets:len()\n    local closing_brackets_count\
    \ = closing_brackets:len()\n    local opening_brackets_index = opening_brackets:find(\"\
    [\")\n    local closing_brackets_index = closing_brackets:find(\"]\")\n    local\
    \ opening_brackets_index2 = opening_brackets:find(\"{\")\n    local closing_brackets_index2\
    \ = closing_brackets:find(\"}\")\n    local opening_brackets_index3 = opening_brackets:find(\"\
    (\")\n    local closing_brackets_index3 = closing_brackets:find(\")\")\n    local\
    \ opening_brackets_index4 = opening_brackets:find(\"...\")\n    local closing_brackets_index4\
    \ = closing_brackets:find(\"...\")\n    local opening_brackets_index5 = opening_brackets:find(\"\
    ...\")\n    local closing_brackets_index5 = closing_brackets:find(\"...\")\n \
    \   local opening_brackets_index6 = opening_brackets:find(\"...\")\n    local\
    \ closing_brackets_index6 = closing_brackets:find(\"...\")\n    local opening_brackets_index7\
    \ = opening_brackets:find(\"...\")\n    local closing_brackets_index7 = closing_brackets:find(\"\
    ...\")\n    local opening_brackets_index8 = opening_brackets:find(\"...\")\n \
    \   local closing_brackets_index8 = closing_brackets:find(\"...\")\n    local\
    \ opening_brackets_index9 = opening_brackets:find(\"...\")\n    local closing_brackets_index9\
    \ = closing_brackets:find(\"...\")\n    local opening_brackets_index10 = opening_brackets:find(\"\
    ...\")\n    local closing_brackets_index10 = closing_brackets:find(\"...\")\n\
    \    local opening_brackets_index11 = opening_brackets:find(\"...\")\n    local\
    \ closing_brackets_index11 = closing_brackets:find(\"...\")\n    local opening_brackets_index12\
    \ = opening_brackets:find(\"...\")\n    local closing_brackets_index12 = closing_brackets:find(\"\
    ...\")\n    local opening_brackets_index13\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9mj2tio8.lua:59: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ==\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hqulrko.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9hqulrko.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index2 = opening_brackets:find(\"\
    <<\")\n  local closing_brackets_index2 = closing_brackets:find(\">>\")\n  local\
    \ opening_brackets_index3 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index3\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index4 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index4 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index5 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index5\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index6 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index6 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index7 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index7\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index8 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index8 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index9 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index9\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index10 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index10 = closing_brackets:find(\">>>>\")\n \
    \ local opening_brackets_index11 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index11\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index12 = opening_brackets:find(\"\
    <<\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv__e3fbf.lua:38: unfinished string near '\"<<'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"<<>>\", \"\")\n  brackets = brackets:gsub(\"<<<\"\
    , \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\">\", \"\")\n  brackets = brackets:gsub(\"\
    <<\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphukh_zow.lua:81: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #open_brackets do\n    if open_brackets[i] ~= close_brackets[i] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg1zxu6w.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcg1zxu6w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dnvnsxi.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1dnvnsxi.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"}\",\
    \ \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4xa67c5i.lua:57: ')' expected (to close '(' at line 56) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsqmv6ko.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpzsqmv6ko.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpzsqmv6ko.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(1,\
    \ i)\n    local closing_bracket = closing_brackets:sub(1, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd128oia8.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd128oia8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp368bph7v.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp368bph7v.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  local open_brackets_count\
    \ = open_brackets:len()\n  local close_brackets_count = close_brackets:len()\n\
    \  local open_brackets_index = open_brackets:find(\">\")\n  local close_brackets_index\
    \ = close_brackets:find(\"<\")\n  local open_brackets_index2 = open_brackets:find(\"\
    <<\")\n  local close_brackets_index2 = close_brackets:find(\">>\")\n  local open_brackets_index3\
    \ = open_brackets:find(\"<<<\")\n  local close_brackets_index3 = close_brackets:find(\"\
    >>>>\")\n  local open_brackets_index4 = open_brackets:find(\"<<<\")\n  local close_brackets_index4\
    \ = close_brackets:find(\">>>>\")\n  local open_brackets_index5 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index5 = close_brackets:find(\">>>>\")\n  local\
    \ open_brackets_index6 = open_brackets:find(\"<<<\")\n  local close_brackets_index6\
    \ = close_brackets:find(\">>>>\")\n  local open_brackets_index7 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index7 = close_brackets:find(\">>>>\")\n  local\
    \ open_brackets_index8 = open_brackets:find(\"<<<\")\n  local close_brackets_index8\
    \ = close_brackets:find(\">>>>\")\n  local open_brackets_index9 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index9 = close_brackets:find(\">>>>\")\n  local\
    \ open_brackets_index10 = open_brackets:find(\"<<<\")\n  local close_brackets_index10\
    \ = close_brackets:find(\">>>>\")\n  local open_brackets_index11 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index11 = close_brackets:find(\">>>>\")\n  local\
    \ open_brackets_index12 = open_brackets:find(\"<<<\")\n  local close_brackets_index12\
    \ = close_brackets:find(\">>>>\")\n  local open_bracket\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf_5ptqn4.lua:59: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%[<>]+\", \"[<>]\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t32ep19.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1t32ep19.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index2 = opening_brackets:find(\"\
    <<\")\n  local closing_brackets_index2 = closing_brackets:find(\">>\")\n  local\
    \ opening_brackets_index3 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index3\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index4 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index4 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index5 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index5\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index6 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index6 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index7 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index7\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index8 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index8 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index9 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index9\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index10 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index10 = closing_brackets:find(\">>>>\")\n \
    \ local opening_brackets_index11 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index11\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index12 = opening_brackets:find(\"\
    <<\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppbr6hpc1.lua:38: unfinished string near '\"<<'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  if opening_brackets_count ~= closing_brackets:len()\
    \ then\n    return false\n  end\n  for i = 1, opening_brackets_count do\n    local\
    \ opening_bracket = opening_brackets:sub(i, i)\n    local closing_bracket = closing_brackets:sub(i,\
    \ i)\n    if opening_bracket ~= closing_bracket then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponx4ogv6.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmponx4ogv6.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  local closing_brackets_index_count = closing_brackets_index\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index\n  local closing_brackets_index_count_min = closing_brackets_index\n\
    \  local opening_brackets_index_count_max = opening_brackets_index\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index\n  while opening_brackets_index_count_min < opening_brackets_index_count_max\
    \ do\n    opening_brackets_index_count_min = opening_brackets_index_count_min\
    \ + 1\n    opening_brackets_index_count = opening_brackets_index_count + 1\n \
    \ end\n  while closing_brackets_index_count_min < closing_brackets_index_count_max\
    \ do\n    closing_brackets_index_count_min = closing_brackets_index_count_min\
    \ + 1\n    closing_brackets_index_count = closing_brackets_index_count + 1\n \
    \ end\n  if opening_brackets_index_count_min == opening_brackets_index_count_max\
    \ then\n    return opening_brackets_count == closing_brackets_count\n  else\n\
    \    return opening_brackets_count ~= closing_brackets_count\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjlf71_4.lua:24:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpjjlf71_4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\"[\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"]\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  if opening_brackets_count == 0 then\n    return true\n  end\n  if opening_brackets_count\
    \ == 1 then\n    if opening_brackets_index ~= closing_brackets_index then\n  \
    \    return false\n    end\n  end\n  if opening_brackets_count == 2 then\n   \
    \ if opening_brackets_index == closing_brackets_index then\n      if opening_brackets_index\
    \ == 1 then\n        return true\n      else\n        return false\n      end\n\
    \    end\n  end\n  if opening_brackets_count == 3 then\n    if opening_brackets_index\
    \ == closing_brackets_index then\n      if opening_brackets_index == 1 then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \ end\n  if opening_brackets_count == 4 then\n    if opening_brackets_index ==\
    \ closing_brackets_index then\n      if opening_brackets_index == 1 then\n   \
    \     return true\n      else\n        return false\n      end\n    end\n  end\n\
    \  if opening_brackets_count == 5 then\n    if opening_brackets_index == closing_brackets_index\
    \ then\n      if opening_brackets_index == 1 then\n        return true\n     \
    \ else\n        return false\n      end\n    end\n  end\n  if opening_brackets_count\
    \ == 6 then\n    if opening_brackets_index == closing_brackets_index then\n  \
    \    if opening_brackets_index == 1 then\n        return true\n      else\n  \
    \      return false\n      end\n    end\n  end\n  if opening_brackets_count ==\
    \ 7 then\n    if opening_brackets_index == closing_brackets_index then\n     \
    \ if opening_brackets_index == 1 then\n        return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp54msocp0.lua:79: 'end' expected (to close 'if' at line 77)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6d9tf1_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz6d9tf1_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplet11d90.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplet11d90.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #open_brackets do\n    if open_brackets[i] ~= close_brackets[i] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mde2gsh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1mde2gsh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"^\", \"\")\n  brackets = brackets:gsub(\"$\", \"\"\
    )\n  brackets = brackets:gsub(\"[\", \"\")\n  brackets = brackets:gsub(\"]\",\
    \ \"\")\n  brackets = brackets:gsub(\"{\", \"\")\n  brackets = brackets:gsub(\"\
    }\", \"\")\n  brackets = brackets:gsub(\"<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >>>\", \"\")\n  brackets = brackets:gsub(\"<<<\", \"\")\n  brackets = brackets:gsub(\"\
    >\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5md1g4zz.lua:56: unfinished string near '\">'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] ~= closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_243slij.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_243slij.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:sub(1, opening_brackets_count-1)\n\
    \  local closing_brackets_index = closing_brackets:sub(1, closing_brackets_count-1)\n\
    \  local opening_brackets_char = opening_brackets_index:sub(1, 1)\n  local closing_brackets_char\
    \ = closing_brackets_index:sub(1, 1)\n  local opening_brackets_char_count = opening_brackets_char:len()\n\
    \  local closing_brackets_char_count = closing_brackets_char:len()\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_index\
    \ = opening_brackets_char:sub(1, 1)\n  local closing_brackets_char_count_index\
    \ = closing_brackets_char:sub(1, 1)\n  local opening_brackets_char_count_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplsct7feg.lua:55: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening ~= closing then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1mjn19l.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi1mjn19l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1, 1) == closing_brackets:sub(1,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjykpr88v.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjykpr88v.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv930grca.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv930grca.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index2 = opening_brackets:find(\"\
    <<\")\n  local closing_brackets_index2 = closing_brackets:find(\">>\")\n  local\
    \ opening_brackets_index3 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index3\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index4 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index4 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index5 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index5\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index6 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index6 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index7 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index7\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index8 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index8 = closing_brackets:find(\">>>>\")\n  local\
    \ opening_brackets_index9 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index9\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index10 = opening_brackets:find(\"\
    <<<\")\n  local closing_brackets_index10 = closing_brackets:find(\">>>>\")\n \
    \ local opening_brackets_index11 = opening_brackets:find(\"<<<\")\n  local closing_brackets_index11\
    \ = closing_brackets:find(\">>>>\")\n  local opening_brackets_index12 = opening_brackets:find(\"\
    <<\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpglx79m9l.lua:38: unfinished string near '\"<<'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  for i = 1, #opening do\n\
    \    local open = opening[i]\n    local close = closing[i]\n    if open:sub(1,\
    \ 1) == \"<\" then\n      local open2 = open:sub(2)\n      if open2:sub(1, 1)\
    \ == \"<\" then\n        local open3 = open2:sub(2)\n        if open3:sub(1, 1)\
    \ == \"<\" then\n          local open4 = open3:sub(2)\n          if open4:sub(1,\
    \ 1) == \"<\" then\n            local open5 = open4:sub(2)\n            if open5:sub(1,\
    \ 1) == \"<\" then\n              local open6 = open5:sub(2)\n              if\
    \ open6:sub(1, 1) == \"<\" then\n                local open7 = open6:sub(2)\n\
    \                if open7:sub(1, 1) == \"<\" then\n                  return false\n\
    \                end\n              end\n            end\n          end\n    \
    \    end\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvaya9ri.lua:49:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppvaya9ri.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets_count - 1\n  local closing_brackets_index\
    \ = closing_brackets_count - 1\n  while opening_brackets_index >= 0 do\n    local\
    \ opening_bracket = opening_brackets:sub(opening_brackets_index, 1)\n    local\
    \ closing_bracket = closing_brackets:sub(closing_brackets_index, 1)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n    opening_brackets_index\
    \ = opening_brackets_index - 1\n    closing_brackets_index = closing_brackets_index\
    \ - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw88o4v80.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw88o4v80.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening == \"<\" then\n         if closing ~= \">\" then\n            return\
    \ false\n         end\n      elseif opening == \">\" then\n         if closing\
    \ ~= \"<\" then\n            return false\n         end\n      else\n        \
    \ return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6sx7ttq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps6sx7ttq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening ~= closing then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qp_tt32.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9qp_tt32.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h5kz802.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp0h5kz802.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp0h5kz802.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos1d2hso.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpos1d2hso.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpos1d2hso.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.017 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  local opening_count = opening:gsub(\"\
    [^<>]+\", function() return 1 end):gsub(\"^0+\", \"\")\n  local closing_count\
    \ = closing:gsub(\"[^<>]+\", function() return 1 end):gsub(\"^0+\", \"\")\n  return\
    \ opening_count == closing_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wgfris5.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0wgfris5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fuc0jjz.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1fuc0jjz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  \
    \  local opening_brackets_count = opening_brackets:len()\n    local closing_brackets_count\
    \ = closing_brackets:len()\n    if opening_brackets_count ~= closing_brackets_count\
    \ then\n        return false\n    end\n    local opening_brackets_table = opening_brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets_table = closing_brackets:gsub(\"[<>]\"\
    , \"\")\n    local opening_brackets_table_count = opening_brackets_table:len()\n\
    \    local closing_brackets_table_count = closing_brackets_table:len()\n    if\
    \ opening_brackets_table_count ~= closing_brackets_table_count then\n        return\
    \ false\n    end\n    local opening_brackets_table_sorted = opening_brackets_table:sort()\n\
    \    local closing_brackets_table_sorted = closing_brackets_table:sort()\n   \
    \ local opening_brackets_table_sorted_count = opening_brackets_table_sorted:len()\n\
    \    local closing_brackets_table_sorted_count = closing_brackets_table_sorted:len()\n\
    \    if opening_brackets_table_sorted_count ~= closing_brackets_table_sorted_count\
    \ then\n        return false\n    end\n    local opening_brackets_table_sorted_sorted\
    \ = opening_brackets_table_sorted:sort()\n    local closing_brackets_table_sorted_sorted\
    \ = closing_brackets_table_sorted:sort()\n    local opening_brackets_table_sorted_sorted_count\
    \ = opening_brackets_table_sorted_sorted:len()\n    local closing_brackets_table_sorted_sorted_count\
    \ = closing_brackets_table_sorted_sorted:len()\n    if opening_brackets_table_sorted_sorted_count\
    \ ~= closing_brackets_table_sorted_sorted_count then\n        return false\n \
    \   end\n    local opening_brackets_table_sorted_sorted_sorted = opening_brackets_table_sorted_sorted:sort()\n\
    \    local closing_brackets_table_sorted_sorted_sorted = closing_brackets_table_sorted_sorted:sort()\n\
    \    local opening_brackets_table_sorted_sorted_sorted_count = opening_brackets_table_sorted_sorted_sorted:len()\n\
    \    local closing_b\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvyu8od1w.lua:62: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  local open_brackets_count\
    \ = open_brackets:len()\n  local close_brackets_count = close_brackets:len()\n\
    \  local open_brackets_index = open_brackets:find(\"<\")\n  local close_brackets_index\
    \ = close_brackets:find(\">\")\n  local open_brackets_index2 = open_brackets:find(\"\
    <<\")\n  local close_brackets_index2 = close_brackets:find(\">>\")\n  local open_brackets_index3\
    \ = open_brackets:find(\"<<<\")\n  local close_brackets_index3 = close_brackets:find(\"\
    >>>\")\n  local open_brackets_index4 = open_brackets:find(\"<<<\")\n  local close_brackets_index4\
    \ = close_brackets:find(\">>>\")\n  local open_brackets_index5 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index5 = close_brackets:find(\">>>\")\n  local\
    \ open_brackets_index6 = open_brackets:find(\"<<<\")\n  local close_brackets_index6\
    \ = close_brackets:find(\">>>\")\n  local open_brackets_index7 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index7 = close_brackets:find(\">>>\")\n  local\
    \ open_brackets_index8 = open_brackets:find(\"<<<\")\n  local close_brackets_index8\
    \ = close_brackets:find(\">>>\")\n  local open_brackets_index9 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index9 = close_brackets:find(\">>>\")\n  local\
    \ open_brackets_index10 = open_brackets:find(\"<<<\")\n  local close_brackets_index10\
    \ = close_brackets:find(\">>>\")\n  local open_brackets_index11 = open_brackets:find(\"\
    <<<\")\n  local close_brackets_index11 = close_brackets:find(\">>>\")\n  local\
    \ open_brackets_index12 = open_brackets:find(\"<<<\")\n  local close_brackets_index12\
    \ = close_brackets:find(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbg07ofvi.lua:40: ')' expected (to close '(' at line 39) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub(\"[<>]\", \"\"\
    ) == closing_brackets:gsub(\"[<>]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b7q61pv.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4b7q61pv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo6hw06y.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfo6hw06y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  local opening_count = opening:gsub(\"\
    [^<>]+\", function() return 1 end):gsub(\"[^<>]+\", function() return -1 end)\n\
    \  local closing_count = closing:gsub(\"[^<>]+\", function() return 1 end):gsub(\"\
    [^<>]+\", function() return -1 end)\n  return opening_count == closing_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3ky1tj9.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm3ky1tj9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xu6oql7.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0xu6oql7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyw5lybh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxyw5lybh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  if opening_brackets_count ~= closing_brackets:len()\
    \ then\n    return false\n  end\n  for i = 1, opening_brackets_count do\n    local\
    \ opening_bracket = opening_brackets:sub(i, i)\n    local closing_bracket = closing_brackets:sub(i,\
    \ i)\n    if opening_bracket ~= closing_bracket then\n      return false\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbyy8sms.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdbyy8sms.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n     \
    \ if opening == \"<\" then\n         if closing == \"<\" then\n            return\
    \ true\n         else\n            return false\n         end\n      elseif opening\
    \ == \">\" then\n         if closing == \">\" then\n            return true\n\
    \         else\n            return false\n         end\n      else\n         return\
    \ false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wokqh6j.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6wokqh6j.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n    local\
    \ closing_bracket = closing_brackets[i]\n    if opening_bracket ~= closing_bracket\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss98ux4z.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpss98ux4z.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxji35hf.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdxji35hf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ap912l3.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ap912l3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  for i = 1, #opening do\n\
    \    local open = opening[i]\n    local close = closing[i]\n    if open ~= close\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgceq7du7.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgceq7du7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]+$\", \"\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp304u43vt.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp304u43vt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"<\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\">\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  local opening_brackets_table = opening_brackets:gsub(\"(%w+)(%w+)\"\
    , function(_, _1, _2)\n    return \"<\" .. _1 .. _2 .. \">\"\n  end)\n  local\
    \ closing_brackets_table = closing_brackets:gsub(\"(%w+)(%w+)\", function(_, _1,\
    \ _2)\n    return \">\" .. _1 .. _2 .. \"<\"\n  end)\n  local opening_brackets_table_size\
    \ = opening_brackets_table:len()\n  local closing_brackets_table_size = closing_brackets_table:len()\n\
    \  if opening_brackets_table_size ~= closing_brackets_table_size then\n    return\
    \ false\n  end\n  local opening_brackets_table_sorted = opening_brackets_table:sort()\n\
    \  local closing_brackets_table_sorted = closing_brackets_table:sort()\n  for\
    \ i = 1, opening_brackets_table_size do\n    if opening_brackets_table_sorted[i]\
    \ ~= closing_brackets_table_sorted[i] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnwvb889.lua:30:\
    \ attempt to call method 'sort' (a nil value)\nstack traceback:\n\t/tmp/tmpwnwvb889.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoankkcs4.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoankkcs4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ~=\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03m1a592.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp03m1a592.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  if opening_brackets_count ~= closing_brackets_count then\n    return false\n\
    \  end\n  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5jl46y3.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv5jl46y3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]+\"\
    , \"%1\")\n  local closing_brackets = brackets:gsub(\"%1[<>]+\", \"%1\")\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5rjn2ze.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpo5rjn2ze.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpo5rjn2ze.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ brackets = brackets:gsub(\"<<>>\", \"\")\n  brackets = brackets:gsub(\"<<<\"\
    , \"\")\n  brackets = brackets:gsub(\">>\", \"\")\n  brackets = brackets:gsub(\"\
    <<\", \"\")\n  brackets = brackets:gsub(\">>\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <<\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  brackets = brackets:gsub(\"\
    <\", \"\")\n  brackets = brackets:gsub(\"<\", \"\")\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyh3hno6n.lua:81: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\">\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\"<\")\n  local opening_brackets_index_count = opening_brackets_index\n\
    \  local closing_brackets_index_count = closing_brackets_index\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index\n  local closing_brackets_index_count_min = closing_brackets_index\n\
    \  local opening_brackets_index_count_max = opening_brackets_index\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index\n  local opening_brackets_index_count_min = opening_brackets_index\n\
    \  local closing_brackets_index_count_min = closing_brackets_index\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index\n  local closing_brackets_index_count_max = closing_brackets_index\n\
    \  local opening_brackets_index_count_min = opening_brackets_index\n  local closing_brackets_index_count_min\
    \ = closing_brackets_index\n  local opening_brackets_index_count_max = opening_brackets_index\n\
    \  local closing_brackets_index_count_max = closing_brackets_index\n  local opening_brackets_index_count_min\
    \ = opening_brackets_index\n  local closing_brackets_index_count_min = closing_brackets_index\n\
    \  local opening_brackets_index_count_max = opening_brackets_index\n  local closing_brackets_index_count_max\
    \ = closing_brackets_index\n  local opening_brackets_index_count_min = opening_brackets_index\n\
    \  local closing_brackets_index_count_min = closing_brackets_index\n  local opening_brackets_index_count_max\
    \ = opening_brackets_index\n  local closing_brackets_index_count_max = closing_brackets_index\n\
    \  local opening_brackets_index_count_min = opening\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyf969km2.lua:59: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"[<>]\", \"\")\n\
    \    for i = 1, #brackets do\n        if brackets[i]:sub(1, 1) == \"<\" then\n\
    \            if brackets[i]:sub(2, 2) ~= \">\" then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9wfw0ez.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm9wfw0ez.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = opening_brackets:find(\"<\")\n  local closing_brackets_index\
    \ = closing_brackets:find(\">\")\n  local opening_brackets_index_next = opening_brackets_index\
    \ + opening_brackets_count\n  local closing_brackets_index_next = closing_brackets_index\
    \ + closing_brackets_count\n  local opening_brackets_index_previous = opening_brackets_index\
    \ - 1\n  local closing_brackets_index_previous = closing_brackets_index - 1\n\
    \  local opening_brackets_index_next = opening_brackets_index + 1\n  local closing_brackets_index_next\
    \ = closing_brackets_index + 1\n  local opening_brackets_index_previous = opening_brackets_index\
    \ - 1\n  local closing_brackets_index_previous = closing_brackets_index - 1\n\
    \  local opening_brackets_index_next = opening_brackets_index + 1\n  local closing_brackets_index_next\
    \ = closing_brackets_index + 1\n  local opening_brackets_index_previous = opening_brackets_index\
    \ - 1\n  local closing_brackets_index_previous = closing_brackets_index - 1\n\
    \  local opening_brackets_index_next = opening_brackets_index + 1\n  local closing_brackets_index_next\
    \ = closing_brackets_index + 1\n  local opening_brackets_index_previous = opening_brackets_index\
    \ - 1\n  local closing_brackets_index_previous = closing_brackets_index - 1\n\
    \  local opening_brackets_index_next = opening_brackets_index + 1\n  local closing_brackets_index_next\
    \ = closing_brackets_index + 1\n  local opening_brackets_index_previous = opening_brackets_index\
    \ - 1\n  local closing_brackets_index_previous = closing_brackets_index - 1\n\
    \  local opening_brackets_index_next = opening_brackets_index + 1\n  local closing_brackets_index_next\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_ivmro_5.lua:40: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  for i = 1,\
    \ #opening_brackets do\n    if opening_brackets[i]:sub(1, 1) == \"<\" then\n \
    \     local opening_bracket = opening_brackets[i]\n      local closing_bracket\
    \ = closing_brackets[i]\n      if opening_bracket ~= closing_bracket then\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_xa3nnm.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu_xa3nnm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(1,\
    \ i)\n    local closing_bracket = closing_brackets:sub(1, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmvf_pba.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmvf_pba.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local opening_brackets = brackets:gsub(\"\
    [<>]\", \"\")\n    local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  \
    \  local opening_brackets_count = opening_brackets:len()\n    local closing_brackets_count\
    \ = closing_brackets:len()\n    if opening_brackets_count ~= closing_brackets_count\
    \ then\n        return false\n    end\n    for i = 1, opening_brackets_count do\n\
    \        if opening_brackets[i] ~= closing_brackets[i] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjapgpee.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgjapgpee.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d4mp0e2.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9d4mp0e2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local open_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local close_brackets = brackets:gsub(\"[<>]\", \"\")\n  local open_brackets_count\
    \ = open_brackets:len()\n  local close_brackets_count = close_brackets:len()\n\
    \  local open_brackets_index = open_brackets:find(\">\")\n  local close_brackets_index\
    \ = close_brackets:find(\"<\")\n  local open_brackets_index_count = open_brackets_index\n\
    \  local close_brackets_index_count = close_brackets_index\n  local open_brackets_index_count_max\
    \ = open_brackets_index\n  local close_brackets_index_count_max = close_brackets_index\n\
    \  while open_brackets_index_count_max > 0 do\n    open_brackets_index_count_max\
    \ = open_brackets_index_count_max - 1\n    open_brackets_index = open_brackets_index\
    \ + open_brackets_count + 1\n    open_brackets_index_count = open_brackets_index\
    \ - open_brackets_count + 1\n  end\n  while close_brackets_index_count_max > 0\
    \ do\n    close_brackets_index_count_max = close_brackets_index_count_max - 1\n\
    \    close_brackets_index = close_brackets_index + close_brackets_count + 1\n\
    \    close_brackets_index_count = close_brackets_index - close_brackets_count\
    \ + 1\n  end\n  local open_brackets_index_count_min = open_brackets_index\n  local\
    \ close_brackets_index_count_min = close_brackets_index\n  while open_brackets_index_count_min\
    \ < open_brackets_index_count_max do\n    open_brackets_index_count_min = open_brackets_index_count_min\
    \ + 1\n    open_brackets_index = open_brackets_index + open_brackets_count + 1\n\
    \    open_brackets_index_count = open_brackets_index - open_brackets_count + 1\n\
    \  end\n  while close_brackets_index_count_min < close_brackets_index_count_max\
    \ do\n    close_brackets_index_count_min = close_brackets_index_count_min + 1\n\
    \    close_brackets_index = close_brackets_index + close_brackets_count + 1\n\
    \    close_brackets_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptyb2vj0y.lua:43: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening = brackets:gsub(\"[<>]\", \"\"\
    )\n  local closing = brackets:gsub(\"[<>]\", \"\")\n  for i = 1, #opening do\n\
    \    if opening[i] ~= closing[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7ojph90.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr7ojph90.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb39mri01.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb39mri01.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n   for i = 1, #brackets do\n      local opening\
    \ = brackets[i]\n      local closing = brackets[i+1]\n      if opening ~= \">\"\
    \ and opening ~= \"<\" then\n         return false\n      end\n      if closing\
    \ ~= \">\" and closing ~= \"<\" then\n         return false\n      end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlomeqd9.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxlomeqd9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ==\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zmyg9yl.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2zmyg9yl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ~=\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7z08n9t.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl7z08n9t.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo73iy_4e.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo73iy_4e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  brackets = brackets:gsub(\"[<>]\", \"\")\n \
    \ local opening = brackets:sub(1, 1)\n  local closing = brackets:sub(2, 2)\n \
    \ return opening and closing and opening == closing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyfvo2cs.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiyfvo2cs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i) ==\
    \ closing_brackets:sub(i, i) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptm4okpfu.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptm4okpfu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    local closing_bracket = closing_brackets:sub(i, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gkla1fa.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9gkla1fa.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n  local opening_brackets = brackets:gsub(\"[<>]\"\
    , \"\")\n  local closing_brackets = brackets:gsub(\"[<>]\", \"\")\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = 1\n  local closing_brackets_index = 1\n  while\
    \ opening_brackets_index < opening_brackets_count do\n    local opening_bracket\
    \ = opening_brackets:sub(opening_brackets_index, opening_brackets_index)\n   \
    \ local closing_bracket = closing_brackets:sub(closing_brackets_index, closing_brackets_index)\n\
    \    if opening_bracket ~= closing_bracket then\n      return false\n    end\n\
    \    opening_brackets_index = opening_brackets_index + 1\n    closing_brackets_index\
    \ = closing_brackets_index + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbahqbr0v.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbahqbr0v.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    brackets = brackets:gsub(\"[<>]\", \"\")\n\
    \    local opening_brackets = brackets:gsub(\"^<\", \"\")\n    local closing_brackets\
    \ = brackets:gsub(\"^>\", \"\")\n    return opening_brackets:len() == closing_brackets:len()\
    \ and opening_brackets:len() == #opening_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1dhromn.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1dhromn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
