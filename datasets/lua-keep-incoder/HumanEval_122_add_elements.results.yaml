name: HumanEval_122_add_elements
language: lua
results:
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9kb8dkk.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpo9kb8dkk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5d16quj.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpu5d16quj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqo00o0m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpoqo00o0m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcgn0ll8.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmprcgn0ll8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliclizuk.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpliclizuk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvrx6jnf.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmplvrx6jnf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0zqgn0j.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpy0zqgn0j.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1asz2ze2.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp1asz2ze2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7n1mq1g.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpa7n1mq1g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplposo0rl.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmplposo0rl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkh5v3ai.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpjkh5v3ai.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukamd3yu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpukamd3yu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_fpsitw.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp1_fpsitw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwmeacui.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpdwmeacui.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvb7end4.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpxvb7end4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrhvo0bn.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpqrhvo0bn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtbwzknq.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpdtbwzknq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i7eqggo.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp9i7eqggo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl37dbh1.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbl37dbh1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0i2dewl.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp_0i2dewl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tkr303z.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2tkr303z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbtomvpb.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpdbtomvpb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_bm0p8q.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmps_bm0p8q.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvihper1l.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpvihper1l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dzwh7vd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2dzwh7vd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnukuzci6.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpnukuzci6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmo45lva.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpwmo45lva.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl72l1wo.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmprl72l1wo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap3sza79.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpap3sza79.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7xchsrtv.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja95raza.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpja95raza.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu9grhlv.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpeu9grhlv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66cxsfi7.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp66cxsfi7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vb4pdpc.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp3vb4pdpc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse10u6td.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpse10u6td.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1n5s053w.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp1n5s053w.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso_62o_k.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpso_62o_k.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tbs4x0f.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp6tbs4x0f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eeinhp1.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp5eeinhp1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv4__8x0.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpmv4__8x0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa9whbtq.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpoa9whbtq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmivmnf8_.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpmivmnf8_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58jng19r.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp58jng19r.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lot77mw.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4lot77mw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql7ukrhq.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpql7ukrhq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw56_nzbj.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpw56_nzbj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6s4bqjz.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpw6s4bqjz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7xuc1ir.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpw7xuc1ir.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbekkyq46.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbekkyq46.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnajp_ly2.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpnajp_ly2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8zp_zzo.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpu8zp_zzo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmy0on6w.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmphmy0on6w.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeib_hpa3.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpeib_hpa3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6iiq73.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpvb6iiq73.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneuytzzr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpneuytzzr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdalm6e_0.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpdalm6e_0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tezsfta.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp0tezsfta.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pzpuyl5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4pzpuyl5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppow9flz6.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmppow9flz6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsaucnhl.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmprsaucnhl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bdxpxrw.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp8bdxpxrw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanass_32.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpanass_32.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4u3717qu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4u3717qu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5dfutrb.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpa5dfutrb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5vg_zgt.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp5vg_zgt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzxolnhj.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpxzxolnhj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscjusyrl.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpscjusyrl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt58jsbr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpzt58jsbr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yp6qgbw.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2yp6qgbw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ta2mcze.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp_ta2mcze.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhnosovn.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpnhnosovn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7ix1pe9.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpo7ix1pe9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgui8vjn6.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpgui8vjn6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wtysmjl.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7wtysmjl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kjbv8ls.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp6kjbv8ls.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ewrlzet.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp5ewrlzet.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzc1a9qr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpjzc1a9qr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyvjkey3.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpkyvjkey3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9e77tt5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpf9e77tt5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3lqqli.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpim3lqqli.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum4_8o9c.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpum4_8o9c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaheit0nt.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpaheit0nt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo_5v_qr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbo_5v_qr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uzq7t35.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp0uzq7t35.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73a1l17c.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp73a1l17c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkx0a4ynt.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpko07lxti.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1spzmnwp.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp1spzmnwp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb4fqdao.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmphb4fqdao.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5009potp.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp5009potp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwukxvugq.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpwukxvugq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk6eqzsmb.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6z9yi82.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp6z9yi82.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasuak2ct.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpasuak2ct.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9uf299e.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpj9uf299e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fr76gvd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp8fr76gvd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s7x7iun.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp9s7x7iun.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0j44n7i1.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11_kb085.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp11_kb085.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzoc4nsh7.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpzoc4nsh7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmsf10o4.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmplmsf10o4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1z4_c66_.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp1z4_c66_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case: k is 0 or\
    \ 1\n  if k == 0 or k == 1 then\n    return arr[k]\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz4pi09n0.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gsosnj5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gsosnj5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpju98at_1.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpju98at_1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3n54ac2.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpi3n54ac2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgnqq0jr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbgnqq0jr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0_p2m6k.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpj0_p2m6k.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82t33eup.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp82t33eup.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpzy7drq.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbpzy7drq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13t8stad.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp13t8stad.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5e_kk04.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpz5e_kk04.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvcc8o58.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpqvcc8o58.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkopla4uj.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpkopla4uj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e8z0w58.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4e8z0w58.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfv0c0s8.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbfv0c0s8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqzn9h5r.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpmqzn9h5r.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubw_suql.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpubw_suql.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fiiodoy.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4fiiodoy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\n  -- Recursive case\n  if k > 1 then\n   \
    \ return add_elements(arr:sub(1, k - 1), k - 1) + arr[k]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wxb6vpa.lua:16:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp7wxb6vpa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36qw_8k8.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp36qw_8k8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0gpn743.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpj0gpn743.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrkz5p5v.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmphrkz5p5v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_s3kcgs.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp3_s3kcgs.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_vyk0fo.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpl_vyk0fo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr99nfujc.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpr99nfujc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq6x7dhn.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpfq6x7dhn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5385zy1.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpc5385zy1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80_mlu9f.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp80_mlu9f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5zz1gfu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpu5zz1gfu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_pwv2it.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpi_pwv2it.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73xt6ksm.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp73xt6ksm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyar_zk2z.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2123184i.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2123184i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz7yrwg9.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpfz7yrwg9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpqvf99q.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpkpqvf99q.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvypbwg4.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpcvypbwg4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ns886lz.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp6ns886lz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3twszra1.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp3twszra1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybe7ormi.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpybe7ormi.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4j4_tli.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpi4j4_tli.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8juqgogw.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp8juqgogw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm5on5pf.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmprm5on5pf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfr_3s8y.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpmfr_3s8y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuanclbnr.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlmzz1v0.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpqlmzz1v0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrmidtdm.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpdrmidtdm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iisttxi.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp3iisttxi.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqfvh_rct.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa306nu1d.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpa306nu1d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq6k3xos.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpqq6k3xos.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rb1mmab.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4rb1mmab.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp6fzckg.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpnp6fzckg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39m6qki4.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp39m6qki4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_j5jvzb.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpv_j5jvzb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qwg9253.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp3qwg9253.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmvwlb4b.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpgmvwlb4b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq2spcwm.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpwq2spcwm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcypyelob.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpcypyelob.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yzrys9o.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp9yzrys9o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hiqq9yv.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp9hiqq9yv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpellghqpb.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpellghqpb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nyx0_je.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp6nyx0_je.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjctz6q7.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpxjctz6q7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r9e81n6.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp4r9e81n6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgjp9tw7.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpwgjp9tw7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7g97jnt.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpd7g97jnt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmlewqdo.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpmmlewqdo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriaoscjd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpriaoscjd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph2o6btq.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpph2o6btq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_929_lkp.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp_929_lkp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzic7xvm.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpxzic7xvm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptv79cf5t.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmptv79cf5t.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfnu_gqr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpxfnu_gqr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtfpanfd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpmtfpanfd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uhwhbld.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp3uhwhbld.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa416vr65.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpa416vr65.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz67z1w0a.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpz67z1w0a.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzpstvp3.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpjzpstvp3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptryncah5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmptryncah5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqph6npbe.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpqph6npbe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd8dx354.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmptd8dx354.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0drqzg5o.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp0drqzg5o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a6b_lyr.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp8a6b_lyr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4r7773zt.lua:25: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpijspgw.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpvpijspgw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5upittzd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp5upittzd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h754n71.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp8h754n71.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp135d077l.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp135d077l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxysgy5gu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpxysgy5gu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrpqoiqu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpdrpqoiqu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwh9n1w4.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpkwh9n1w4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdk41lkm.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpbdk41lkm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctjg40dy.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpctjg40dy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xjx9sf_.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp6xjx9sf_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvo_4bfv.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpfvo_4bfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyjf_j9b.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpgyjf_j9b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiop1az5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpoiop1az5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj88x6grm.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpj88x6grm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllxvzfdx.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpllxvzfdx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
