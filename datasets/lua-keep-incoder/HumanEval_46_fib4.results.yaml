name: HumanEval_46_fib4
language: lua
results:
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp227l_o_s.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp227l_o_s.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaomcyu0i.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpaomcyu0i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  elseif\
    \ n == 4 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mopleao.lua:35:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7mopleao.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qv4_whp.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp9qv4_whp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizvi6i3b.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpizvi6i3b.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rc_e2sa.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp0rc_e2sa.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsde5y9ys.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpsde5y9ys.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpsde5y9ys.lua:18: in function 'fib4'\n\t/tmp/tmpsde5y9ys.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpsde5y9ys.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmkdapba.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpmmkdapba.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q4kgy6l.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp0q4kgy6l.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp0q4kgy6l.lua:18: in function 'fib4'\n\t/tmp/tmp0q4kgy6l.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp0q4kgy6l.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaftwkb6.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpzaftwkb6.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjo_ggtr.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpxjo_ggtr.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hzjiehk.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp0hzjiehk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return 0\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41zb4oi6.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp41zb4oi6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5edezmf.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpa5edezmf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuvsy70i.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpuuvsy70i.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgsp1yxc.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpcgsp1yxc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcuhm8i6.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpvcuhm8i6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b1vehoh.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp2b1vehoh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uls54_e.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp3uls54_e.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvu84gvh.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpnvu84gvh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f846vj2.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp6f846vj2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyaccpzv.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpgyaccpzv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh3cugqm.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmplh3cugqm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a93l5q7.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp9a93l5q7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdc6yl20.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpmdc6yl20.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpmdc6yl20.lua:18: in function 'fib4'\n\t/tmp/tmpmdc6yl20.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpmdc6yl20.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0neylbc.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmps0neylbc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ljse8gj.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp5ljse8gj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwojkuanf.lua:30:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmpwojkuanf.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphk052yat.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmphk052yat.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhq9t3ub.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpyhq9t3ub.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoknn5tk3.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpoknn5tk3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j5n9czm.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp2j5n9czm.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvxrqwca.lua:30:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmplvxrqwca.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpork0trxu.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpork0trxu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  else\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaz19b03.lua:33:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpzaz19b03.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqtf3y36.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpvqtf3y36.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9d_ykbm.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpf9d_ykbm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2s7ohsv.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpd2s7ohsv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbimjgpc.lua:29:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmplbimjgpc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbbss6qx.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpxbbss6qx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zqqvb_d.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp_zqqvb_d.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqe12ezv1.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpqe12ezv1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4m7gt48.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpq4m7gt48.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpq4m7gt48.lua:18: in function 'fib4'\n\t/tmp/tmpq4m7gt48.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpq4m7gt48.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwifler2p.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpwifler2p.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return 0\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8w3u2q1.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpj8w3u2q1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  elseif n < 4 then\n    return 1\n  else\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27n_kv9h.lua:33:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp27n_kv9h.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jxk3hxw.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp8jxk3hxw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d2k334u.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp2d2k334u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  elseif n < 4 then\n    return 1\n  else\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4w2jlnf.lua:33:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmpn4w2jlnf.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0_ymxhv.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp_0_ymxhv.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf_u4kon.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdf_u4kon.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpow5u4pxt.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpow5u4pxt.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpow5u4pxt.lua:18: in function 'fib4'\n\t/tmp/tmpow5u4pxt.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpow5u4pxt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprao3i1bg.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmprao3i1bg.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufjwha5c.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpufjwha5c.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1zoqbyy.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpm1zoqbyy.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx82o64db.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpx82o64db.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcen69en.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdcen69en.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh3bwqzz.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpmh3bwqzz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavwd9xce.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpavwd9xce.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fzepyg4.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp6fzepyg4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ty13bon.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp1ty13bon.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes9eqavw.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpes9eqavw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gd9k61f.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp0gd9k61f.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3idw0jd.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpa3idw0jd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  elseif\
    \ n == 4 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt12af8d.lua:35:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkt12af8d.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0aka9dt.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpb0aka9dt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_7k7b2u.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpe_7k7b2u.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpe_7k7b2u.lua:18: in function 'fib4'\n\t/tmp/tmpe_7k7b2u.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpe_7k7b2u.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6aqenpy.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpk6aqenpy.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t0dcx3l.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp6t0dcx3l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45lrpncd.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp45lrpncd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl052jl7.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdl052jl7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wk48y7y.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp9wk48y7y.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  elseif n < 4 then\n    return 1\n  else\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9eyk7h2g.lua:33:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp9eyk7h2g.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz50ckvd.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpkz50ckvd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt1oe468.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpnt1oe468.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnifn18y.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpwnifn18y.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  else\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbjtutxf.lua:33:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpnbjtutxf.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiz2ufwk.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpbiz2ufwk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0dnu3ay.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpa0dnu3ay.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvrqojez.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpfvrqojez.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0edj7x84.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp0edj7x84.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx2ztchd.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpfx2ztchd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvnbygzc.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmphvnbygzc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo79uletw.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpo79uletw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3gkua41.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpg3gkua41.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2ftbtmr.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpq2ftbtmr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zsi97cx.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp7zsi97cx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqat469u.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmptqat469u.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xupkk1e.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp3xupkk1e.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp796oitjp.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp796oitjp.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsj960827.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpsj960827.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wfyjrk5.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp7wfyjrk5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxqgu5vh.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpjxqgu5vh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2dre9ii.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpp2dre9ii.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i_vpcj5.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8i_vpcj5.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp8i_vpcj5.lua:18: in function 'fib4'\n\t/tmp/tmp8i_vpcj5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp8i_vpcj5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuniz63s.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpnuniz63s.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpnuniz63s.lua:18: in function 'fib4'\n\t/tmp/tmpnuniz63s.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpnuniz63s.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51cfwvb5.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp51cfwvb5.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp51cfwvb5.lua:18: in function 'fib4'\n\t/tmp/tmp51cfwvb5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp51cfwvb5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw3qsulu.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpqw3qsulu.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpru0m3f.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpvpru0m3f.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2al1eqkb.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp2al1eqkb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwyiperv.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpkwyiperv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9drvcy62.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp9drvcy62.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp934m7mar.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp934m7mar.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzpdkaug.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpkzpdkaug.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  elseif n < 4 then\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) + fib4(n-5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_if6mfi.lua:33:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpx_if6mfi.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_x9lb31.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpa_x9lb31.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeht8yb8_.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpeht8yb8_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljv_im88.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpljv_im88.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92tdtdqr.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp92tdtdqr.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp92tdtdqr.lua:18: in function 'fib4'\n\t/tmp/tmp92tdtdqr.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp92tdtdqr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvktctdf.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpjvktctdf.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpjvktctdf.lua:18: in function 'fib4'\n\t/tmp/tmpjvktctdf.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpjvktctdf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy5xud5r.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpqy5xud5r.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuowq7dw.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpkuowq7dw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a2j5j7n.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp2a2j5j7n.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zdznywc.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_zdznywc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_13yz1kn.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_13yz1kn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e2kidq5.lua:29:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmp7e2kidq5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yo5zk3a.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp6yo5zk3a.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrwli4li.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmphrwli4li.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh_mcrx6.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpjh_mcrx6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v7l34s7.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp7v7l34s7.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp7v7l34s7.lua:18: in function 'fib4'\n\t/tmp/tmp7v7l34s7.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp7v7l34s7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4rqrjts.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpq4rqrjts.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqf_4hwx.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdqf_4hwx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfztkka0a.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpfztkka0a.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t13fkvn.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp1t13fkvn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5joyh44.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpw5joyh44.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyzaqz8f.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpfyzaqz8f.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdak_0osj.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdak_0osj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopevwlbv.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpopevwlbv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjthv98d5.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpjthv98d5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpcok6x4.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmphpcok6x4.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48spqif8.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp48spqif8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojn4z6wj.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpojn4z6wj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1r3blsns.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp1r3blsns.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjzp631t.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmprjzp631t.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjk8om7x.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpjjk8om7x.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xnotlwc.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp7xnotlwc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4utz7ynl.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp4utz7ynl.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxvyrb39.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpzxvyrb39.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tmmprwb.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp5tmmprwb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotojfpwv.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpotojfpwv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v32907p.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp2v32907p.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  elseif\
    \ n == 4 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4giw69b5.lua:35:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4giw69b5.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8q9nx8h.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpz8q9nx8h.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokbr2lj8.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpokbr2lj8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8k10ere.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpf8k10ere.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkvf3b3_.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmptkvf3b3_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprp1q9z97.lua:29:\
    \ expected: 4, actual: 8\nstack traceback:\n\t/tmp/tmprp1q9z97.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_suf48l.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpv_suf48l.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmpv_suf48l.lua:18: in function 'fib4'\n\t/tmp/tmpv_suf48l.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpv_suf48l.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ao6zsv1.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_ao6zsv1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg52y_6y.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpjg52y_6y.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lmm8w6k.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp4lmm8w6k.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslha8_nr.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpslha8_nr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk_c63hd.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpkk_c63hd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyjxp7rb.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpcyjxp7rb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqj0trmuz.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpqj0trmuz.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt717cnce.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpt717cnce.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny6pv6tv.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpny6pv6tv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptuolrq4y.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmptuolrq4y.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbp3fnew.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpkbp3fnew.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvol1wvr.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpwvol1wvr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy894pt_v.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpy894pt_v.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgagr1t1n.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpgagr1t1n.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1928azu7.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp1928azu7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehprcrzo.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpehprcrzo.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r34y2ha.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp8r34y2ha.lua:17:\
    \ in function 'fib4'\n\t/tmp/tmp8r34y2ha.lua:17: in function 'candidate'\n\t/tmp/tmp8r34y2ha.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 0\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  else\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib4\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 28)\n\
    \    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12), 386)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15s13_i6.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp15s13_i6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyw6l9a0.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmplyw6l9a0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_1t3qbl.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpd_1t3qbl.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwp90awd.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpfwp90awd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2da5bjz.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpy2da5bjz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.009 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2y50jx_.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpi2y50jx_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1l1xcil.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpn1l1xcil.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  elseif n < 4 then\n    return 1\n  else\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e1kaa3c.lua:33:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp5e1kaa3c.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6v5_9jh.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpc6v5_9jh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ok6jm7g.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp8ok6jm7g.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kndizbc.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_kndizbc.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jyccy6a.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp0jyccy6a.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp0jyccy6a.lua:18: in function 'fib4'\n\t/tmp/tmp0jyccy6a.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp0jyccy6a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jk0wbls.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp7jk0wbls.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxei0m3r_.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpxei0m3r_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxab6356.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpaxab6356.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7p98clz.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_7p98clz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gzmvriw.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp6gzmvriw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return 0\n  elseif\
    \ n == 4 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_5oky58.lua:35:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmps_5oky58.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4w8mwx_.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpy4w8mwx_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj_9_nof.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpoj_9_nof.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoutpn9.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpkxoutpn9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then return 0\
    \ end\n  if n < 3 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp613p9jem.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp613p9jem.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd9dz7xj.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpdd9dz7xj.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n < 4 then\n    return n\n  end\n  return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjccsjuu.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpgjccsjuu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4s9yt_v.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp_4s9yt_v.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunaqsnci.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpunaqsnci.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7bnsie0h.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp7bnsie0h.lua:18:\
    \ in function 'fib4'\n\t/tmp/tmp7bnsie0h.lua:18: in function 'fib4'\n\t/tmp/tmp7bnsie0h.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp7bnsie0h.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8l6kgvf5.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp8l6kgvf5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ziyqo1o.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp3ziyqo1o.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fib4\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 28)\n    lu.assertEquals(candidate(10),\
    \ 104)\n    lu.assertEquals(candidate(12), 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmpcug1c.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpvmpcug1c.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzcei8h4.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmpyzcei8h4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then return nil\
    \ end\n  if n < 4 then return n end\n  return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgumpf3br.lua:23:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmpgumpf3br.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 0 then\n    return\
    \ 0\n  elseif n < 1 then\n    return 1\n  elseif n < 2 then\n    return 2\n  elseif\
    \ n < 3 then\n    return 0\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fpsrtui.lua:31:\
    \ expected: 4, actual: 11\nstack traceback:\n\t/tmp/tmp8fpsrtui.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n-- fib4(0) -> 0\n-- fib4(1) -> 0\n-- fib4(2) ->\
    \ 2\n-- fib4(3) -> 0\n-- fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    -- Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n-- >>> fib4(5)\n-- 4\n-- >>> fib4(6)\n\
    -- 8\n-- >>> fib4(7)\n-- 14\nlocal function fib4(n)\n  if n < 1 then\n    return\
    \ 0\n  elseif n < 4 then\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib4\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 28)\n    lu.assertEquals(candidate(10), 104)\n    lu.assertEquals(candidate(12),\
    \ 386)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e35qpc3.lua:27:\
    \ expected: 4, actual: 12\nstack traceback:\n\t/tmp/tmp8e35qpc3.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
