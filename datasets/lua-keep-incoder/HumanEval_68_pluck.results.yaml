name: HumanEval_68_pluck
language: lua
results:
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5but3_8f.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp5but3_8f.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = nil\n  local smallest_index = nil\n  local plucked_value = nil\n  local plucked_index\
    \ = nil\n  for i = 1, #arr do\n    if arr[i] < smallest_value then\n      smallest_value\
    \ = arr[i]\n      smallest_index = i\n    end\n    if arr[i] == smallest_value\
    \ then\n      if smallest_index == nil then\n        plucked_value = arr[i]\n\
    \        plucked_index = i\n      else\n        if arr[i] < plucked_value then\n\
    \          plucked_value = arr[i]\n          plucked_index = i\n        end\n\
    \      end\n    end\n  end\n  if plucked_value == nil then\n    return nil\n \
    \ end\n  return [plucked_value, plucked_index]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpew74b9g0.lua:51: unexpected symbol near '['\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local index = 1\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            if smalest_value < arr[i] then\n\
    \                smalest_value = arr[i]\n                smalest_index = index\n\
    \            end\n            index = index + 1\n        end\n    end\n    if\
    \ smalest_value == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9kdi169.lua:48:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmph9kdi169.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    local index\
    \ = 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1]\
    \ = arr[i]\n            if evens[#evens] <= smalest_value then\n             \
    \   smalest_value = evens[#evens]\n                smalest_index = index\n   \
    \         end\n        end\n        index = index + 1\n    end\n    if #evens\
    \ == 0 then\n        return nil\n    end\n    if smalest_value == 0 then\n   \
    \     return nil\n    end\n    local smalest_even = evens[#evens]\n    local smalest_index\
    \ = smalest_index\n    for i = #evens, 1, -1 do\n        if evens[i] < smalest_even\
    \ then\n            smalest_even = evens[i]\n            smalest_index = i\n \
    \       end\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcf2rm5xx.lua:61:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpcf2rm5xx.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7181kdan.lua:45: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpb37yhvxp.lua:45: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smalest_value = arr[1]\n  local smallest_index = 2\n  for i = 2, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if arr[i] < smalest_value then\n    \
    \    smalest_value = arr[i]\n        smallest_index = i\n      end\n    end\n\
    \  end\n  -- Return the smallest even value and its index\n  return smalest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponusxkaa.lua:49:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmponusxkaa.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if smallest_value == nil then\n            smallest_value = node\n\
    \            smallest_index = index\n        elseif smallest_value < node then\n\
    \            smallest_value = node\n            smallest_index = index\n     \
    \   end\n        index = index + 1\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp41owty6x.lua:49:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp41owty6x.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index\n    for i = 1, #arr do\n        if arr[i]\
    \ == smalest_node then\n            smalest_node_index = i\n        end\n    end\n\
    \    return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnlk2bv6v.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpnlk2bv6v.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    table.insert(results, smallest_value,\
    \ smallest_index)\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp93w_eslc.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp93w_eslc.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[smalest_value] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif evens[smalest_value]\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if #evens == 0 then\n      \
    \  return nil\n    end\n    local smalest_even = evens[smalest_value]\n    local\
    \ smalest_even_index = smalest_index\n    for i = 1, #evens do\n        if evens[i]\
    \ < smalest_even then\n            smalest_even = evens[i]\n            smalest_even_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_even_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_0e44xzi.lua:59:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp_0e44xzi.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    local even_values = {}\n    for _, node in\
    \ ipairs(arr) do\n        if node.value % 2 == 0 then\n            even_values[node.value]\
    \ = true\n        end\n    end\n    for _, node in ipairs(arr) do\n        if\
    \ even_values[node.value] then\n            if smalest_value == nil then\n   \
    \             smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n            elseif smalest_value < node.value\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = node.index\n                smalest_node = node\n            end\n       \
    \ end\n    end\n    if smalest_value == nil then\n        return nil\n    end\n\
    \    return smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphw8ar1rp.lua:30:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmphw8ar1rp.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value < arr[i] then\n    \
    \    smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n \
    \ end\n  if smalest_value == 0 then\n    return nil\n  end\n  local smalest_node_index\
    \ = 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value\
    \ < arr[i] then\n        smalest_value = arr[i]\n        smalest_index = i\n \
    \     elseif smalest_value == arr[i] then\n        smalest_node_index = smalest_index\n\
    \      end\n    end\n  end\n  return smalest_value, smalest_node_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqonvgctt.lua:58:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpqonvgctt.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      evens[#evens+1] = arr[i]\n      if evens[#evens]\
    \ <= smalest_value then\n        smalest_value = evens[#evens]\n        smalest_index\
    \ = i\n      end\n    end\n  end\n  if #evens == 0 then\n    return nil\n  end\n\
    \  local index = #evens\n  local value = evens[index]\n  while index > 0 do\n\
    \    index = index - 1\n    value = evens[index]\n  end\n  return [value, smalest_index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpgqvl85m3.lua:48: unexpected symbol near '['\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index\n    local result\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    if smallest_index == #arr then\n\
    \        return smallest_value, smallest_index\n    end\n    local smallest_value_index\
    \ = nil\n    local smallest_value_index\n    for i = 1, #arr do\n        if arr[i]\
    \ == smallest_value then\n            if smallest_value_index == nil then\n  \
    \              smallest_value_index = i\n            else\n                if\
    \ smallest_value_index < i then\n                    smallest_value_index = i\n\
    \                end\n            end\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return nil\n    end\n    result = smallest_value, smallest_value_index\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwx0kdf8q.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpwx0kdf8q.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyl06n3aj.lua:43:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpyl06n3aj.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value == nil or arr[i] < smalest_value then\n        \
    \        smalest_value, smalest_index = arr[i], i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqjto37_.lua:44:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpaqjto37_.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_node_index = i\n        end\n\
    \    end\n    return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ajkiz5a.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp4ajkiz5a.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {}\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      even[#even+1] = arr[i]\n      if even[#even]\
    \ == smalest_value then\n        smalest_index = i\n      else\n        smalest_value\
    \ = even[#even]\n        smalest_index = i\n      end\n    end\n  end\n  if #even\
    \ == 0 then\n    return nil\n  end\n  local index = smalest_index\n  local value\
    \ = smalest_value\n  local new_arr = {}\n  for i = 1, #even do\n    if even[i]\
    \ ~= value then\n      new_arr[#new_arr+1] = even[i]\n      value = even[i]\n\
    \    end\n  end\n  return new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf14zab15.lua:59:\
    \ expected: {2, 1}\\nactual: {4, 2}\\nstack traceback:\\n\\t/tmp/tmpf14zab15.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    local smalest_index\
    \ = nil\n    local smalest_value = nil\n    local smalest_even_value = nil\n \
    \   local smalest_even_index = nil\n    local smalest_index = nil\n    local smalest_value\
    \ = nil\n    local smalest_even_value = nil\n    local smalest_even_index = nil\n\
    \    local smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smalest_index = nil\n \
    \   local smalest_value = nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    local smalest_index\
    \ = nil\n    local smalest_value = nil\n    local smalest_even_value = nil\n \
    \   local smalest_even_index = nil\n    local smalest_index = nil\n    local smalest_value\
    \ = nil\n    local smalest_even_value = nil\n    local smalest_even_index = nil\n\
    \    local smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smalest_index = nil\n \
    \   local smalest_value = nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    local smalest_index\
    \ = nil\n    local smalest_value = nil\n    local smalest_even_value = nil\n \
    \   local smalest_even_index = nil\n    local smalest_index = nil\n    local smalest_value\
    \ = nil\n    local smalest_even_value = nil\n    local smalest_even_index = nil\n\
    \    local smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smale\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpgut_tw0p.lua:101: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n        smalest_node = arr[i]\n      elseif\
    \ smalest_value < arr[i] then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n        smalest_node = arr[i]\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return nil\n  end\n  return smalest_node, smalest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvpf9c635.lua:52:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpvpf9c635.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for i, v in ipairs(arr) do\n        if\
    \ v < min_value then\n            min_value = v\n            min_idx = i\n   \
    \     end\n    end\n    if min_value == math.inf then\n        return nil\n  \
    \  end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2461_txq.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp2461_txq.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node_index = 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value == arr[i] then\n                smalest_node_index\
    \ = i\n            end\n        end\n    end\n    return smalest_value, smalest_index,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpexsu562l.lua:58:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpexsu562l.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even_values\
    \ = {}\n    local smallest_values = {}\n    local smallest_index = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            even_values[#even_values\
    \ + 1] = arr[i]\n        else\n            smallest_values[#smallest_values +\
    \ 1] = arr[i]\n            smallest_index[#smallest_index + 1] = i\n        end\n\
    \    end\n    local smallest_value = #smallest_values\n    if smallest_value ==\
    \ 0 then\n        return nil\n    end\n    local smallest_index = #smallest_index\n\
    \    local smallest_even_value = #even_values\n    if smallest_value == smallest_even_value\
    \ then\n        return smallest_values[smallest_index]\n    end\n    if smallest_value\
    \ == 1 then\n        return smallest_values[smallest_index - 1]\n    end\n   \
    \ local smallest_even_index = #smallest_values\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_values\n    local smallest_even_index = #smallest_index\n    local smallest_even_value\
    \ = #even_value\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp11qz_mys.lua:96: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_index2 = 0\n    for i =\
    \ 1, #arr do\n        if arr[i] > smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n        end\n    end\n    for i = 1,\
    \ #arr do\n        if arr[i] > smalest_value then\n            smalest_value =\
    \ arr[i]\n            smalest_index2 = i\n        end\n    end\n    if smalest_index2\
    \ == smalest_index then\n        return smalest_value, smalest_index\n    else\n\
    \        return smalest_value, smalest_index2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0j0q7_0a.lua:52:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp0j0q7_0a.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_value = nil\n    local\
    \ smallest_index_value = nil\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            if smallest_even_value==nil or arr[i] < smallest_even_value\n\
    \            then\n                smallest_even_value = arr[i]\n            \
    \    smallest_index_value = i\n            end\n        else\n            if smallest_index==nil\
    \ or smallest_index_value < i\n            then\n                smallest_index\
    \ = i\n                smallest_value = arr[i]\n            end\n        end\n\
    \    end\n    if smallest_even_value==nil or smallest_index_value == nil\n   \
    \ then\n        return nil\n    end\n    return smallest_value, smallest_index_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdnhbcsev.lua:56:\
    \ expected: {2, 1}\\nactual: 3\\nstack traceback:\\n\\t/tmp/tmpdnhbcsev.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if arr[i] < smalest_value then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp93n1x_1g.lua:46:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp93n1x_1g.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for _,\
    \ v in ipairs(arr) do\n        if smallest_value < v then\n            smallest_value\
    \ = v\n            smallest_index = v\n        end\n    end\n    table.insert(results,\
    \ smallest_value, smallest_index)\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp851i5bop.lua:43:\
    \ expected: {2, 1}\\nactual: {4=4}\\nstack traceback:\\n\\t/tmp/tmp851i5bop.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local index = min_value_index\n    local value = min_value\n\
    \    local result = {value, index}\n    while index > 0 do\n        local next_value\
    \ = arr[index - 1]\n        if next_value % 2 == 0 then\n            arr[index]\
    \ = next_value\n            index = index - 1\n        else\n            arr[index]\
    \ = next_value + 1\n            index = index - 1\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsd3ygwc5.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpsd3ygwc5.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  local smalest_node\
    \ = {}\n  smalest_node.value = smalest_value\n  smalest_node.index = smalest_index\n\
    \  return smalest_node\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn9zud2jz.lua:53:\
    \ expected: {2, 1}\\nactual: {index=1, value=4}\\nstack traceback:\\n\\t/tmp/tmpn9zud2jz.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] < smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2ifocqb.lua:44:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpi2ifocqb.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    local smalest_index\
    \ = nil\n    local smalest_value = nil\n    local smalest_even_value = nil\n \
    \   local smalest_even_index = nil\n    local smalest_index = nil\n    local smalest_value\
    \ = nil\n    local smalest_even_value = nil\n    local smalest_even_index = nil\n\
    \    local smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smalest_index = nil\n \
    \   local smalest_value = nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    local smalest_index\
    \ = nil\n    local smalest_value = nil\n    local smalest_even_value = nil\n \
    \   local smalest_even_index = nil\n    local smalest_index = nil\n    local smalest_value\
    \ = nil\n    local smalest_even_value = nil\n    local smalest_even_index = nil\n\
    \    local smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smalest_index = nil\n \
    \   local smalest_value = nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    local smalest_index\
    \ = nil\n    local smalest_value = nil\n    local smalest_even_value = nil\n \
    \   local smalest_even_index = nil\n    local smalest_index = nil\n    local smalest_value\
    \ = nil\n    local smalest_even_value = nil\n    local smalest_even_index = nil\n\
    \    local smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smale\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpb8p291zv.lua:101: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    local index\
    \ = 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens\
    \ + 1] = arr[i]\n            if evens[#evens] <= smalest_value then\n        \
    \        smalest_value = evens[#evens]\n                smalest_index = index\n\
    \            end\n            index = index + 1\n        end\n    end\n    if\
    \ #evens == 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplnp9z5u3.lua:50:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmplnp9z5u3.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local results = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value_even = smallest_value\
    \ % 2\n    if smallest_value_even == 0 then\n        results[1] = smallest_index\n\
    \    else\n        local smallest_value_odd = smallest_value % 2 + 1\n       \
    \ for i = 2, #results do\n            if results[i] < smallest_value_odd then\n\
    \                results[i] = smallest_index\n            end\n        end\n \
    \   end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo9m8a7bk.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpo9m8a7bk.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value = nil, nil, nil\n    for _, node in ipairs(arr)\
    \ do\n        if smallest_even_value == nil then\n            smallest_even_value\
    \ = node.value\n            smalest_value = node.value\n            smalest_index\
    \ = node.index\n        elseif smallest_even_value < node.value then\n       \
    \     smallest_even_value = node.value\n            smalest_value = node.value\n\
    \            smalest_index = node.index\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    local result = {smallest_even_value}\n\
    \    if smalest_index == nil then\n        return result\n    end\n    local index\
    \ = smalest_index\n    while index > 1 do\n        local next_index = index -\
    \ 1\n        if arr[index].value == arr[index + 1].value then\n            index\
    \ = next_index\n        else\n            break\n        end\n    end\n    table.insert(result,\
    \ index)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4kh1su_h.lua:30:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmp4kh1su_h.lua:62:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpgw94znrc.lua:45: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value\
    \ = math.inf\n  local min_index = 0\n  local results = {}\n  for i = 1, #arr do\n\
    \    if arr[i] < min_value then\n      min_value = arr[i]\n      min_index = i\n\
    \    end\n  end\n  if min_value == math.inf then\n    return nil\n  end\n  table.insert(results,\
    \ min_value, min_index)\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprxcg6ird.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmprxcg6ird.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v ~= 0 then\n            even_values[v] = true\n        end\n\
    \    end\n    for _, v in ipairs(even_values) do\n        if smalest_value ~=\
    \ nil and smalest_value < v then\n            smalest_value = v\n            smalest_index\
    \ = smalest_index + 1\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkcsp40gu.lua:49:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpkcsp40gu.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  local smalest_node_index\n\
    \  for _, node in ipairs(arr) do\n    if node.value % 2 == 0 then\n      if smalest_value\
    \ == 0 then\n        smalest_value = node.value\n        smalest_index = node.index\n\
    \        smalest_node = node\n        smalest_node_index = node.index\n      elseif\
    \ smalest_value < node.value then\n        smalest_value = node.value\n      \
    \  smalest_index = node.index\n        smalest_node = node\n        smalest_node_index\
    \ = node.index\n      end\n    end\n  end\n  if smalest_value == 0 then\n    return\
    \ nil\n  end\n  return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp20s5p5sg.lua:32:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmp20s5p5sg.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n\
    \            if v <= smalest_value then\n                smalest_value = v\n \
    \               smalest_index = v\n            elseif v < smalest_value then\n\
    \                smalest_value = v\n                smalest_index = smalest_index\
    \ + 1\n            end\n        end\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyp_ffq7f.lua:45:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpyp_ffq7f.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == 0 then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n                smalest_node_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ayyjms3.lua:55:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp1ayyjms3.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- base case\n  if #arr == 1 then\n\
    \    return arr[1]\n  end\n  -- base case\n  if #arr == 2 then\n    if arr[1]\
    \ % 2 == 0 then\n      return arr[1]\n    else\n      return arr[1] + 1\n    end\n\
    \  end\n  -- base case\n  if #arr == 3 then\n    if arr[1] % 2 == 0 and arr[2]\
    \ % 2 == 0 then\n      return arr[1]\n    else\n      if arr[1] % 2 == 0 then\n\
    \        return arr[1] + 1\n      else\n        return arr[2] + 1\n      end\n\
    \    end\n  end\n  -- base case\n  if #arr == 4 then\n    if arr[1] % 2 == 0 and\
    \ arr[2] % 2 == 0 and arr[3] % 2 == 0 then\n      return arr[1]\n    else\n  \
    \    if arr[1] % 2 == 0 then\n        return arr[1] + 1\n      else\n        if\
    \ arr[2] % 2 == 0 then\n          return arr[2] + 1\n        else\n          if\
    \ arr[3] % 2 == 0 then\n            return arr[3] + 1\n          else\n      \
    \      return nil\n          end\n        end\n      end\n    end\n  end\n  --\
    \ base case\n  if #arr == 5 then\n    if arr[1] % 2 == 0 and arr[2] % 2 == 0 and\
    \ arr[3] % 2 == 0 and arr[4] % 2 == 0 then\n      return arr[1]\n    else\n  \
    \    if arr[1] % 2 == 0 then\n        return arr[1] + 1\n      else\n        if\
    \ arr[2] % 2 == 0 then\n          return arr[2] + 1\n        else\n          if\
    \ arr[3] % 2 == 0 then\n            return arr[3] + 1\n          else\n      \
    \      if arr[4] % 2 == 0 then\n              return arr[4] + 1\n            else\n\
    \              return nil\n            end\n          end\n        end\n     \
    \ end\n    end\n  end\n  -- base case\n  if #arr == 6 then\n    if arr[1] % 2\
    \ == 0 and arr[2] % 2 == 0 and arr[3] % 2 == 0 and arr[4] % 2 == 0 and arr[5]\
    \ % 2 == 0 then\n      return arr[1]\n    else\n      if arr[1] % 2 == 0 then\n\
    \        return arr[1] + 1\n      else\n        if arr[2] % 2 == 0 then\n    \
    \      return arr[2] + 1\n        else\n          if arr[3] % 2 == 0 then\n  \
    \          return arr[3] + 1\n          else\n            if arr[4] % 2 == 0 then\n\
    \              return arr[4] + 1\n            else\n              if arr[5] %\
    \ 2 == 0 then\n                return arr[5] + 1\n              else\n       \
    \         return nil\n              end\n            end\n          end\n    \
    \    end\n      end\n    end\n  end\n  -- base case\n  if #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3ufnou_e.lua:129: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value == 0 then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8z3p95zc.lua:48:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp8z3p95zc.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] = arr[i]\n\
    \            if arr[i] > smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if #even_values == 0\
    \ then\n        return nil\n    end\n    local index = #even_values\n    local\
    \ value = even_values[index]\n    local new_arr = {}\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            if arr[i] > value then\n       \
    \         value = arr[i]\n                index = i\n            end\n       \
    \ end\n    end\n    new_arr[index] = value\n    return new_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0835rb2a.lua:58:\
    \ expected: {2, 1}\\nactual: {4}\\nstack traceback:\\n\\t/tmp/tmp0835rb2a.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    for i = 2, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_b3kqpdm.lua:41:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp_b3kqpdm.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 then\n            if smalest_value == 0 then\n   \
    \             smalest_value = arr[i]\n                smalest_index = i\n    \
    \        elseif smalest_value < arr[i] then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            end\n        end\n    end\n  \
    \  if smalest_value == 0 then\n        return nil\n    end\n    local smalest_node_index\
    \ = 1\n    local smalest_node_val = smalest_value\n    while smalest_node_index\
    \ <= #arr do\n        if arr[smalest_node_index] % 2 == 0 then\n            if\
    \ smalest_node_val < arr[smalest_node_index] then\n                smalest_node_val\
    \ = arr[smalest_node_index]\n                smalest_node_index = smalest_node_index\n\
    \            end\n        end\n        smalest_node_index = smalest_node_index\
    \ + 1\n    end\n    return smalest_node_val, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe98t6k7e.lua:61:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpe98t6k7e.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = 0, 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if smalest_value < arr[i] then\n        smalest_value, smalest_index = arr[i],\
    \ i\n      end\n    end\n  end\n  if smalest_value == 0 then\n    return nil\n\
    \  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpplzzj6u5.lua:44:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpplzzj6u5.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if smallest_value == nil then\n            smallest_value = node\n\
    \            smallest_index = index\n        elseif smallest_value < node then\n\
    \            smallest_value = node\n            smallest_index = index\n     \
    \   end\n        index = index + 1\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqg3s2j56.lua:49:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpqg3s2j56.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3sajjgs6.lua:45: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index = 1\n    for i = 2, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_node_index = i\n        end\n\
    \    end\n    if smalest_node_index == 1 then\n        return smalest_node\n \
    \   else\n        return smalest_node, smalest_node_index\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_j8x3_1.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp3_j8x3_1.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ smalest_even = evens[#evens]\n    local smalest_index = smalest_index\n    for\
    \ i = #evens, 1, -1 do\n        if evens[i] < smalest_even then\n            smalest_even\
    \ = evens[i]\n            smalest_index = i\n        end\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0a_dr1eo.lua:56:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp0a_dr1eo.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_idx = min_idx\n\
    \    for idx, value in ipairs(arr) do\n        if value == smalest_value then\n\
    \            smalest_idx = idx\n        end\n    end\n    return smalest_value,\
    \ smalest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1pu8n_7u.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp1pu8n_7u.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      evens[#evens+1] = arr[i]\n      if evens[#evens]\
    \ <= smalest_value then\n        smalest_value = evens[#evens]\n        smalest_index\
    \ = i\n      end\n    end\n  end\n  if #evens == 0 then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuyu3k18.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpwuyu3k18.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for index, node in ipairs(arr) do\n        if smalest_value == 0 then\n \
    \           smalest_value = node\n            smalest_index = index\n        \
    \    smalest_node = node\n            smalest_node_index = index\n        elseif\
    \ node == smalest_value then\n            if smalest_index == 0 then\n       \
    \         smalest_value = node\n                smalest_index = index\n      \
    \          smalest_node = node\n                smalest_node_index = index\n \
    \           elseif smalest_index > index then\n                smalest_value =\
    \ node\n                smalest_index = index\n                smalest_node =\
    \ node\n                smalest_node_index = index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqlo_8fh.lua:60:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpuqlo_8fh.lua:60:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[smalest_value] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif evens[smalest_value]\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if #evens == 0 then\n      \
    \  return nil\n    end\n    if evens[smalest_value] == nil then\n        return\
    \ nil\n    end\n    local index = #evens\n    for i = 1, #evens do\n        if\
    \ evens[i] < smalest_value then\n            index = i\n        end\n    end\n\
    \    return smalest_value, smalest_index, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3xoudjfu.lua:60:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp3xoudjfu.lua:60:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n    local smallest_value_index_index = 1\n    local smallest_value_index_index\
    \ = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpd1g13fni.lua:99: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_even_value = nil\n\
    \    local smallest_even_index = nil\n    for _, v in ipairs(arr) do\n       \
    \ if smallest_value == nil then\n            smallest_value = v\n            smallest_index\
    \ = v\n            smallest_even_value = v\n            smallest_even_index =\
    \ v\n        elseif smallest_value == v then\n            if smallest_even_value\
    \ == nil then\n                smallest_even_value = v\n                smallest_even_index\
    \ = v\n            elseif smallest_even_value == v then\n                if smallest_even_index\
    \ == nil then\n                    smallest_even_index = v\n                elseif\
    \ smallest_even_index < v then\n                    smallest_even_index = v\n\
    \                end\n            end\n        elseif smallest_even_value == v\
    \ then\n            if smallest_even_index == nil then\n                smallest_even_index\
    \ = v\n            elseif smallest_even_index < v then\n                smallest_even_index\
    \ = v\n            end\n        end\n    end\n    if smallest_even_index == nil\
    \ then\n        return nil\n    end\n    local result = {smallest_even_index,\
    \ smallest_even_value}\n    for _, v in ipairs(arr) do\n        if v == smallest_even_index\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuboxe4h0.lua:71:\
    \ expected: {2, 1}\\nactual: {4, 4, 4}\\nstack traceback:\\n\\t/tmp/tmpuboxe4h0.lua:71:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_value_and_index = nil\n    local\
    \ smalest_index_and_value = nil\n    for _, node in ipairs(arr) do\n        if\
    \ smalest_value == nil then\n            smalest_value = node\n            smalest_index\
    \ = node\n            smalest_value_and_index = {node, node}\n            smalest_index_and_value\
    \ = {node, node}\n        elseif smalest_value == node then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index % 2 == 0 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index > 0 then\n            smalest_value_and_index[1] =\
    \ node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 0 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 1 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 2 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 3 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 4 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 5 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 6 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 7 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif smalest_value\
    \ == node and smalest_index == 8 then\n            smalest_value_and_index[1]\
    \ = node\n            smalest_index_and_value[1] = node\n        elseif sm\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmproiipkie.lua:73: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[smalest_value] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif evens[smalest_value]\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if #evens == 0 then\n      \
    \  return nil\n    end\n    local smalest_even = evens[smalest_value]\n    local\
    \ smalest_even_index = smalest_index\n    for i = 1, #evens do\n        if evens[i]\
    \ < smalest_even then\n            smalest_even = evens[i]\n            smalest_even_index\
    \ = i\n        end\n    end\n    return smalest_even, smalest_even_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbieboglo.lua:59:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpbieboglo.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, i, result)\n        if i == #arr then\n            return result\n\
    \        end\n        if arr[i] % 2 == 0 then\n            local index = i\n \
    \           local value = arr[i]\n            local index = i\n            while\
    \ arr[index] % 2 == 0 do\n                index = index + 1\n            end\n\
    \            if index == i then\n                return helper(arr, i, result)\n\
    \            else\n                return helper(arr, index, result)\n       \
    \     end\n        end\n        return helper(arr, i + 1, result)\n    end\n \
    \   return helper(arr, 1, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5mj9hs9j.lua:52:\
    \ expected: {2, 1}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp5mj9hs9j.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index = 1\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_node_index = i\n        end\n\
    \    end\n    return smalest_value, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphicdtic3.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmphicdtic3.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- sort arr\n  table.sort(arr)\n\
    \  -- find smallest even value\n  local smallest_even_value = arr[1]\n  -- find\
    \ smallest index\n  local smallest_index = 1\n  for i = 2, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      if smallest_even_value < arr[i] then\n        smallest_even_value\
    \ = arr[i]\n        smallest_index = i\n      end\n    end\n  end\n  return smallest_even_value,smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq9bugbcr.lua:51:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpq9bugbcr.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for index, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smalest_value == 0 then\n                smalest_value = node.value\n\
    \                smalest_index = index\n                smalest_node = node\n\
    \                smalest_node_index = index\n            elseif smalest_value\
    \ < node.value then\n                smalest_value = node.value\n            \
    \    smalest_index = index\n                smalest_node = node\n            \
    \    smalest_node_index = index\n            end\n        end\n    end\n    if\
    \ smalest_value == 0 then\n        return nil\n    end\n    local smalest_node_value\
    \ = smalest_node.value\n    local smalest_node_index = smalest_node_index\n  \
    \  for index, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n  \
    \          if node.value == smalest_node_value then\n                smalest_node_index\
    \ = index\n            end\n        end\n    end\n    return smalest_node, smalest_node_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11xfi3ae.lua:32:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmp11xfi3ae.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil or smalest_value < arr[i] then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            end\n        end\n    end\n  \
    \  if smalest_value == nil then\n        return nil\n    end\n    local index\
    \ = #arr\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n          \
    \  if smalest_value == arr[i] then\n                index = i\n            end\n\
    \        end\n    end\n    return smalest_value, smalest_index, index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkzk_od7l.lua:55:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpkzk_od7l.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ index = #evens\n    for i = 1, #evens do\n        if evens[i] < smalest_value\
    \ then\n            index = i\n            smalest_value = evens[i]\n        end\n\
    \    end\n    return smalest_value, smalest_index, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplkcfi0pe.lua:55:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmplkcfi0pe.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] > 0 then\n            if smallest_value == 0\
    \ then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            elseif smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    local\
    \ index = smallest_index\n    local value = smallest_value\n    while true do\n\
    \        if arr[index] % 2 == 0 then\n            if smallest_value == 0 then\n\
    \                smallest_value = arr[index]\n                smallest_index =\
    \ index\n            elseif smallest_value < arr[index] then\n               \
    \ smallest_value = arr[index]\n                smallest_index = index\n      \
    \      end\n        end\n        index = index - 1\n        if index == -1 then\n\
    \            break\n        end\n    end\n    results[1] = smallest_value\n  \
    \  results[2] = smallest_index\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnzxhh55q.lua:47:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpnzxhh55q.lua:69: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local pluck_val = min_value\n    local pluck_val_index = min_value_index\n\
    \    for i = 1, #arr do\n        if arr[i] == pluck_val then\n            pluck_val_index\
    \ = i\n        end\n    end\n    return { pluck_val, pluck_val_index }\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcgqf1vf8.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpcgqf1vf8.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] > 0 then\n            if smallest_value < arr[i]\
    \ then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    table.insert(results, smallest_value, smallest_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2t2o_eje.lua:48:\
    \ expected: {2, 1}\\nactual: {4=1}\\nstack traceback:\\n\\t/tmp/tmp2t2o_eje.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_even_value = 0\n    local\
    \ smalest_even_index = 0\n    local smalest_even_index_count = 0\n    local smalest_even_index_count_max\
    \ = 0\n    local smalest_even_index_count_max_index = 0\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            if smalest_even_value  == 0 then\n\
    \                smalest_even_value = arr[i]\n                smalest_even_index\
    \ = i\n                smalest_even_index_count = 0\n                smalest_even_index_count_max\
    \ = 0\n                smalest_even_index_count_max_index = 0\n            elseif\
    \ smalest_even_value  < arr[i] then\n                smalest_even_value = arr[i]\n\
    \                smalest_even_index = i\n                smalest_even_index_count\
    \ = smalest_even_index_count + 1\n                if smalest_even_index_count\
    \ > smalest_even_index_count_max then\n                    smalest_even_index_count_max\
    \ = smalest_even_index_count\n                    smalest_even_index_count_max_index\
    \ = smalest_even_index_count_max_index\n                end\n            end\n\
    \        else\n            if smalest_value == 0 then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_even_index_count_max\
    \ > 0 then\n        return smalest_value, smalest_even_index_max_index\n    else\n\
    \        return smalest_value, smalest_index\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp37mjxxgq.lua:71:\
    \ expected: {2, 1}\\nactual: 3\\nstack traceback:\\n\\t/tmp/tmp37mjxxgq.lua:71:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smalest_value = math.min(arr)\n  -- Find the index of the smallest even\
    \ value\n  local smalest_index = nil\n  for index, value in pairs(arr) do\n  \
    \  if value == smalest_value then\n      smalest_index = index\n    end\n  end\n\
    \  -- Return the smallest even value\n  return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_6r328j8.lua:32:\
    \ bad argument #1 to 'min' (number expected, got table)\\nstack traceback:\\n\\\
    t/tmp/tmp_6r328j8.lua:32: in function 'candidate'\\n\\t/tmp/tmp_6r328j8.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] = arr[i]\n\
    \            if arr[i] > smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if #even_values == 0\
    \ then\n        return nil\n    end\n    local index = #even_values\n    local\
    \ value = even_values[index]\n    local index = index - 1\n    while index > 0\
    \ do\n        if even_values[index] % 2 == 0 then\n            even_values[index]\
    \ = even_values[index] - 1\n            if even_values[index] % 2 == 0 then\n\
    \                even_values[index] = even_values[index] + 1\n               \
    \ if even_values[index] % 2 == 0 then\n                    even_values[index]\
    \ = even_values[index] - 1\n                    if even_values[index] % 2 == 0\
    \ then\n                        even_values[index] = even_values[index] + 1\n\
    \                        if even_values[index] % 2 == 0 then\n               \
    \             even_values[index] = even_values[index] - 1\n                  \
    \          if even_values[index] % 2 == 0 then\n                             \
    \   even_values[index] = even_values[index] + 1\n                            \
    \    if even_values[index] % 2 == 0 then\n                                   \
    \ even_values[index] = even_values[index] - 1\n                              \
    \      if even_values[index] % 2 == 0 then\n                                 \
    \       even_values[index] = even_values[index] + 1\n                        \
    \                if even_values[index] % 2 == 0 then\n                       \
    \                     even_values[index] = even_values[index] - 1\n          \
    \                                  if even_values[index] % 2 == 0 then\n     \
    \                                           even_values[index] = even_values[index]\
    \ + 1\n                                                if even_values[index] %\
    \ 2 == 0 then\n                                                    even_values[index]\
    \ = even_values[index] - 1\n                                                 \
    \   if even_values[index] % 2 == 0 then\n                                    \
    \                    even_values[index] = even_values[index] + 1\n           \
    \                                             if even_values[index] % 2 == 0 then\n\
    \                                                            even_values[index]\
    \ = even_values[index] - 1\n                                                 \
    \           if even_values[index] % 2 == 0 then\n                            \
    \                                    even_values[index] = even_values[index] +\
    \ 1\n                                                                if even_values[index]\
    \ % 2 == 0 then\n                                                            \
    \        even_values[index] = even_values[index] - 1\n                       \
    \                                             if even_values[index] % 2 == 0 then\n\
    \                                                                        even_values[index]\
    \ = even_values[index] + 1\n                                                 \
    \                   end\n                                                    \
    \            end\n                                                           \
    \ end\n                                                        end\n         \
    \                                           end\n                            \
    \                    end\n                                            end\n  \
    \                                      end\n                                 \
    \   end\n                                end\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp99s0a2yo.lua:106: 'end' expected (to close 'while' at line\
    \ 43) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    if smalest_index == #arr then\n        return smalest_node\n   \
    \ end\n    local smalest_node_index = 1\n    while smalest_node_index <= #arr\
    \ do\n        if arr[smalest_index] % 2 == 0 then\n            smalest_node =\
    \ arr[smalest_index]\n            smalest_node_index = smalest_index\n       \
    \ end\n        smalest_index = smalest_index + 1\n    end\n    return smalest_node\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8r_lyrwk.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp8r_lyrwk.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphmmbl1r7.lua:99: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local index = 1\n\
    \  local smalest_value = arr[1]\n  local smalest_index = 1\n  for i = 2, #arr\
    \ do\n    if arr[i] < smalest_value then\n      smalest_value = arr[i]\n     \
    \ smalest_index = index\n    end\n    index = index + 1\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmifglacd.lua:43:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpmifglacd.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] < smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyamnmqn1.lua:44:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpyamnmqn1.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] < smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5f3ed6u.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpa5f3ed6u.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpzmq77mwv.lua:99: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            even[#even+1] = arr[i]\n\
    \            if even[#even] < smalest_value then\n                smalest_value\
    \ = even[#even]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #even == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3n62e1_.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpf3n62e1_.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    local smalest_value_node\n    local smalest_index_node\n\
    \    local smalest_node_node\n    local smalest_value_node_index\n    local smalest_index_node_index\n\
    \    local smalest_node_node_index\n    local smalest_value_node_value\n    local\
    \ smalest_index_node_value\n    local smalest_node_node_value\n    local smalest_value_node_index\n\
    \    local smalest_index_node_index\n    local smalest_node_node_index\n    local\
    \ smalest_value_node_value\n    local smalest_index_node_value\n    local smalest_node_node_value\n\
    \    local smalest_value_node_index\n    local smalest_index_node_index\n    local\
    \ smalest_node_node_index\n    local smalest_value_node_value\n    local smalest_index_node_value\n\
    \    local smalest_node_node_value\n    local smalest_value_node_index\n    local\
    \ smalest_index_node_index\n    local smalest_node_node_index\n    local smalest_value_node_value\n\
    \    local smalest_index_node_value\n    local smalest_node_node_value\n    local\
    \ smalest_value_node_index\n    local smalest_index_node_index\n    local smalest_node_node_index\n\
    \    local smalest_value_node_value\n    local smalest_index_node_value\n    local\
    \ smalest_node_node_value\n    local smalest_value_node_index\n    local smalest_index_node_index\n\
    \    local smalest_node_node_index\n    local smalest_value_node_value\n    local\
    \ smalest_index_node_value\n    local smalest_node_node_value\n    local smalest_value_node_index\n\
    \    local smalest_index_node_index\n    local smalest_node_node_index\n    local\
    \ smalest_value_node_value\n    local smalest_index_node_value\n    local smalest_node_node_value\n\
    \    local smalest_value_node_index\n    local smalest_index_node_index\n    local\
    \ smalest_node_node_index\n    local smalest_value_node_value\n    local smalest_index_node_value\n\
    \    local smalest_node_node_value\n    local smalest_value_node_index\n    local\
    \ smalest_index_node_index\n    local smalest_node_node_index\n    local smalest_value_node_value\n\
    \    local smalest_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpee4vdyyz.lua:98: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_value = 0\n    local smalest_value_count = 0\n    local smalest_value_index\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if\
    \ smalest_value == nil then\n                smalest_value = arr[i]\n        \
    \        smalest_index = i\n                smalest_value_count = 0\n        \
    \        smalest_value_index = i\n            elseif smalest_value < arr[i] then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_value_count = smalest_value_count + 1\n            elseif\
    \ smalest_value == arr[i] and smalest_value_count > smalest_value_count then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_value_count = smalest_value_count + 1\n            end\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    if smalest_value_count == 0 then\n        return nil\n    end\n\
    \    if smalest_value_count == 1 then\n        return smalest_index, smalest_value\n\
    \    end\n    local smalest_value_index = #arr\n    for i = 1, #arr do\n     \
    \   if arr[i] % 2 == 0 then\n            if smalest_value == arr[i] then\n   \
    \             smalest_value_index = i\n            end\n        end\n    end\n\
    \    return smalest_index, smalest_value_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ncb38cj.lua:74:\
    \ expected: {2, 1}\\nactual: 1\\nstack traceback:\\n\\t/tmp/tmp0ncb38cj.lua:74:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even_values\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            even_values[#even_values\
    \ + 1] = arr[i]\n            if arr[i] < smallest_value then\n               \
    \ smallest_value = arr[i]\n                smallest_index = i\n            end\n\
    \        end\n    end\n    if #even_values == 0 then\n        return nil\n   \
    \ end\n    local smallest_even_value, smallest_even_index = smallest_value, smallest_index\n\
    \    for i = 1, #even_values do\n        if even_values[i] < smallest_even_value\
    \ then\n            smallest_even_value, smallest_even_index = even_values[i],\
    \ i\n        end\n    end\n    return smallest_even_value, smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5j36k_lk.lua:54:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmp5j36k_lk.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    for i = 2, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6h_8di2q.lua:41:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp6h_8di2q.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_even_value = 0\n    local\
    \ smalest_even_index = 0\n    local smalest_even_index_count = 0\n    local smalest_even_index_count_max\
    \ = 0\n    local smalest_even_index_count_max_index = 0\n    local smalest_even_index_count_max_value\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if\
    \ smalest_even_value  == 0 then\n                smalest_even_value = arr[i]\n\
    \                smalest_even_index = i\n                smalest_even_index_count\
    \ = 0\n            elseif smalest_even_value  > arr[i] then\n                smalest_even_value\
    \ = arr[i]\n                smalest_even_index = i\n                smalest_even_index_count\
    \ = smalest_even_index_count + 1\n            end\n        else\n            if\
    \ smalest_even_value  == 0 then\n                smalest_even_value = arr[i]\n\
    \                smalest_even_index = i\n                smalest_even_index_count\
    \ = 0\n            elseif smalest_even_value  < arr[i] then\n                smalest_even_value\
    \ = arr[i]\n                smalest_even_index = i\n                smalest_even_index_count\
    \ = smalest_even_index_count + 1\n            end\n        end\n    end\n    if\
    \ smalest_even_index_count > smalest_even_index_count_max then\n        smalest_even_index_count_max\
    \ = smalest_even_index_count\n        smalest_even_index_count_max_index = smalest_even_index\n\
    \        smalest_even_index_count_max_value = smalest_even_value\n    end\n  \
    \  if smalest_even_index_count > smalest_even_index_count_max_index then\n   \
    \     smalest_even_index_count_max_index = smalest_even_index\n        smalest_even_index_count_max_value\
    \ = smalest_even_value\n    end\n    if smalest_even_index_count == smalest_even_index_count_max\
    \ then\n        if smalest_even_index_count_max_value % 2 == 0 then\n        \
    \    smalest_value = smalest_even_index_count_max_value\n        else\n      \
    \      smalest_value = smalest_even_index_count_max_value + 1\n        end\n \
    \   else\n        if smalest_even_index_count_max_value % 2 == 0 then\n      \
    \      smalest_value = smalest_even_index_count_max_value + 1\n        else\n\
    \            smalest_value = smalest_even_index_count_max_value + 1\n        end\n\
    \    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi5d1_waf.lua:86:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpi5d1_waf.lua:86:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] < smalest_value then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            end\n        end\n    end\n  \
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplpemwozn.lua:42:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmplpemwozn.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {}\n\
    \  local smalest_value = nil\n  local smalest_index = nil\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value == nil then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == nil then\n    return nil\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzhj_piwv.lua:50:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpzhj_piwv.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n                smalest_node_val = node.value\n                smalest_node_index\
    \ = node.index\n            elseif smalest_value < node.value then\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n                smalest_node_val = node.value\n\
    \                smalest_node_index = node.index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_node_val, smalest_index, smalest_node_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgn6xdyh2.lua:33:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpgn6xdyh2.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_value = nil\n    local\
    \ smallest_index = nil\n    local i = 0\n    while i < #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n        i = i + 1\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgsj9ew0r.lua:33:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpgsj9ew0r.lua:53: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local index = 1\n    local smalest_even_value\
    \ = 0\n    local smalest_even_node = 0\n    local smalest_even_node_index = 0\n\
    \    local smalest_even_node_even_value = 0\n    local smalest_even_node_even_index\
    \ = 0\n    local smalest_even_node_even_index_index = 0\n    local smalest_even_node_even_index_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_value = 0\n    local\
    \ smalest_even_node_even_index_value_even_index = 0\n    local smalest_even_node_even_index_value_even_index_index\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value = 0\n   \
    \ local smalest_even_node_even_index_value_even_index_value_even_value = 0\n \
    \   local smalest_even_node_even_index_value_even_index_value_even_index = 0\n\
    \    local smalest_even_node_even_index_value_even_index_value_even_index_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value\
    \ = 0\n    local smalest_even_node_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_index_value_even_value\
    \ = 0\n    local smalest_even_node_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpw3bgu035.lua:70: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = 0, 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if smalest_value < arr[i] then\n        smalest_value, smalest_index = arr[i],\
    \ i\n      end\n    end\n  end\n  return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3lx7lyn.lua:41:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpb3lx7lyn.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbwob39a7.lua:43:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpbwob39a7.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = nil\n  local smalest_index = nil\n  for i = 1, #arr do\n    if arr[i] % 2\
    \ == 0 then\n      if smalest_value == nil then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      elseif smalest_value < arr[i] then\n       \
    \ smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n  end\n\
    \  if smalest_value == nil then\n    return nil\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5v0u4syt.lua:49:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp5v0u4syt.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\n\
    \    local smalest_index\n    local smalest_index_value\n    local smalest_index_value_index\n\
    \    local smalest_index_value_index2\n    local smalest_index_value_index3\n\
    \    local smalest_index_value_index4\n    local smalest_index_value_index5\n\
    \    local smalest_index_value_index6\n    local smalest_index_value_index7\n\
    \    local smalest_index_value_index8\n    local smalest_index_value_index9\n\
    \    local smalest_index_value_index10\n    local smalest_index_value_index11\n\
    \    local smalest_index_value_index12\n    local smalest_index_value_index13\n\
    \    local smalest_index_value_index14\n    local smalest_index_value_index15\n\
    \    local smalest_index_value_index16\n    local smalest_index_value_index17\n\
    \    local smalest_index_value_index18\n    local smalest_index_value_index19\n\
    \    local smalest_index_value_index20\n    local smalest_index_value_index21\n\
    \    local smalest_index_value_index22\n    local smalest_index_value_index23\n\
    \    local smalest_index_value_index24\n    local smalest_index_value_index25\n\
    \    local smalest_index_value_index26\n    local smalest_index_value_index27\n\
    \    local smalest_index_value_index28\n    local smalest_index_value_index29\n\
    \    local smalest_index_value_index30\n    local smalest_index_value_index31\n\
    \    local smalest_index_value_index32\n    local smalest_index_value_index33\n\
    \    local smalest_index_value_index34\n    local smalest_index_value_index35\n\
    \    local smalest_index_value_index36\n    local smalest_index_value_index37\n\
    \    local smalest_index_value_index38\n    local smalest_index_value_index39\n\
    \    local smalest_index_value_index40\n    local smalest_index_value_index41\n\
    \    local smalest_index_value_index42\n    local smalest_index_value_index43\n\
    \    local smalest_index_value_index44\n    local smalest_index_value_index45\n\
    \    local smalest_index_value_index46\n    local smalest_index_value_index47\n\
    \    local smalest_index_value_index48\n    local smalest_index_value_index49\n\
    \    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpc_r3x62k.lua:94: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = nil\n  local smalest_index = nil\n  local smalest_index = 0\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value == nil then\n \
    \       smalest_value = arr[i]\n        smalest_index = i\n      elseif smalest_value\
    \ < arr[i] then\n        smalest_value = arr[i]\n        smalest_index = i\n \
    \     end\n    end\n  end\n  if smalest_value == nil then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdkekuoe3.lua:50:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpdkekuoe3.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaxfq1yw1.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpaxfq1yw1.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local index = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            table.insert(even, arr[i])\n            table.insert(index,\
    \ i)\n        end\n    end\n    if #even == 0 then\n        return nil\n    end\n\
    \    local smallest = table.min(even)\n    local smallest_index = index[#index\
    \ + 1]\n    if smallest % 2 == 0 then\n        return smallest, smallest_index\n\
    \    else\n        local smallest_even = table.min(even)\n        local smallest_even_i\
    \ = index[#index + 1]\n        if smallest_even % 2 == 0 then\n            return\
    \ smallest_even, smallest_even_i\n        else\n            return nil\n     \
    \   end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1dgb9esd.lua:38:\
    \ attempt to call field 'min' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1dgb9esd.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local index = 1\n  for i = 1, #arr do\n  \
    \  if arr[i] > smalest_value then\n      smalest_value = arr[i]\n      smalest_index\
    \ = index\n    end\n    index = index + 1\n  end\n  if smalest_value == 0 then\n\
    \    return nil\n  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ahp4xll.lua:46:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp8ahp4xll.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    if smalest_value == math.inf then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxmrezs9h.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpxmrezs9h.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value\n    local index = 1\n    for _, node in\
    \ ipairs(arr) do\n        if node.value % 2 == 0 then\n            if smallest_even_value\
    \ == nil then\n                smallest_even_value = node.value\n            \
    \    smalest_value = node.value\n                smalest_index = index\n     \
    \       elseif smallest_even_value < node.value then\n                smallest_even_value\
    \ = node.value\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smallest_even_value == nil then\n        return nil\n    end\n    if smallest_even_value\
    \ == smalest_value then\n        return smalest_index, smalest_value\n    end\n\
    \    return smallest_even_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfbbzvluy.lua:30:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpfbbzvluy.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value < arr[i] then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbndobbpl.lua:44:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpbndobbpl.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    local smalest_node_index = 1\n  \
    \  local smalest_node_index2 = 0\n    local smalest_node_index3 = 0\n    local\
    \ smalest_node_index4 = 0\n    local smalest_node_index5 = 0\n    local smalest_node_index6\
    \ = 0\n    local smalest_node_index7 = 0\n    local smalest_node_index8 = 0\n\
    \    local smalest_node_index9 = 0\n    local smalest_node_index10 = 0\n    local\
    \ smalest_node_index11 = 0\n    local smalest_node_index12 = 0\n    local smalest_node_index13\
    \ = 0\n    local smalest_node_index14 = 0\n    local smalest_node_index15 = 0\n\
    \    local smalest_node_index16 = 0\n    local smalest_node_index17 = 0\n    local\
    \ smalest_node_index18 = 0\n    local smalest_node_index19 = 0\n    local smalest_node_index20\
    \ = 0\n    local smalest_node_index21 = 0\n    local smalest_node_index22 = 0\n\
    \    local smalest_node_index23 = 0\n    local smalest_node_index24 = 0\n    local\
    \ smalest_node_index25 = 0\n    local smalest_node_index26 = 0\n    local smalest_node_index27\
    \ = 0\n    local smalest_node_index28 = 0\n    local smalest_node_index29 = 0\n\
    \    local smalest_node_index30 = 0\n    local smalest_node_index31 = 0\n    local\
    \ smalest_node_index32 = 0\n    local smalest_node_index33 = 0\n    local smalest_node_index34\
    \ = 0\n    local smalest_node_index35 = 0\n    local smalest_node_index36 = 0\n\
    \    local smalest_node_index37 = 0\n    local smalest_node_index38 = 0\n    local\
    \ smalest_node_index39 = 0\n    local smalest_node_index40 = 0\n    local smalest_node_index41\
    \ = 0\n    local smalest_node_index42 = 0\n    local smalest_node_index43 = 0\n\
    \    local smalest_node_index44 = 0\n    local smalest_node_index45 = 0\n    local\
    \ smalest_node_index46 = 0\n    local smalest_node_index47 = 0\n    local smalest_node_index48\
    \ = 0\n    local smalest_node_index49 = 0\n    local smalest_node\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpv8u1r06h.lua:93: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    return index, min\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpha0l67dc.lua:27:\
    \ bad argument #1 to 'min' (number expected, got table)\\nstack traceback:\\n\\\
    t/tmp/tmpha0l67dc.lua:27: in function 'candidate'\\n\\t/tmp/tmpha0l67dc.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_node = arr[i]\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n            end\n        end\n \
    \   end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp79u6zs4z.lua:52:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp79u6zs4z.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] > 0 then\n            if smallest_value < arr[i]\
    \ then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    local index = smallest_index\n    while index\
    \ > 0 and arr[index] % 2 == 0 do\n        index = index - 1\n    end\n    results[smallest_value]\
    \ = index\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3qqceshc.lua:52:\
    \ expected: {2, 1}\\nactual: {4=0}\\nstack traceback:\\n\\t/tmp/tmp3qqceshc.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = nil, nil\n  local smalest_even_value = nil\n  local smalest_even_index\
    \ = nil\n  for i, v in ipairs(arr) do\n    if smalest_value == nil then\n    \
    \  smalest_value = v\n      smalest_index = i\n      smalest_even_value = v %\
    \ 2 == 0\n      smalest_even_index = i\n    elseif smalest_value == v % 2 == 0\
    \ then\n      if smalest_even_value == nil then\n        smalest_even_value =\
    \ v\n        smalest_even_index = i\n      elseif smalest_even_value == v % 2\
    \ then\n        if smalest_index == nil then\n          smalest_index = i\n  \
    \      end\n      end\n    end\n  end\n  if smalest_value == nil then\n    return\
    \ nil\n  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp17wphwfm.lua:56:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp17wphwfm.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_value = arr[i]\n         \
    \   smalest_index = i\n        end\n    end\n    if smalest_value == math.inf\
    \ then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3mv71wg6.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp3mv71wg6.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn1p6x2du.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpn1p6x2du.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for i = 1, #arr do\n        local node = arr[i]\n\
    \        if node.value % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = node.value\n                smalest_index = i\n\
    \                smalest_node = node\n                smalest_node_val = node.value\n\
    \                smalest_node_index = i\n            elseif smalest_value < node.value\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = i\n                smalest_node = node\n                smalest_node_val =\
    \ node.value\n                smalest_node_index = i\n            end\n      \
    \  end\n    end\n    if smalest_value == 0 then\n        return nil\n    end\n\
    \    local smalest_node_index = smalest_index\n    local smalest_node_val = smalest_node.value\n\
    \    local smalest_node_val_even = smalest_node_val % 2 == 0\n    local smalest_node_val_odd\
    \ = smalest_node_val % 2 ~= 0\n    if smalest_node_val_even then\n        smalest_node_index\
    \ = smalest_index\n        smalest_node_val = smalest_node.value\n        smalest_node_val_even\
    \ = smalest_node_val % 2 == 0\n        smalest_node_val_odd = smalest_node_val\
    \ % 2 ~= 0\n    end\n    if smalest_node_val_odd then\n        smalest_node_index\
    \ = smalest_index\n        smalest_node_val = smalest_node.value\n        smalest_node_val_even\
    \ = smalest_node_val % 2 == 0\n        smalest_node_val_odd = smalest_node_val\
    \ % 2 ~= 0\n    end\n    if smalest_node_val_even then\n        smalest_node_index\
    \ = smalest_index\n        smalest_node_val = smalest_node.value\n        smalest_node_val_even\
    \ = smalest_node_val % 2 == 0\n        smalest_node_val_odd = smalest_node_val\
    \ % 2 ~= 0\n    end\n    if smalest_node_val_odd then\n        smalest_node_index\
    \ = smalest_index\n        smalest_node_val = smalest_node.value\n        smalest_node_val_even\
    \ = smalest_node_val % 2 == 0\n        smalest_node_val_odd = smalest_node_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpm78epid5.lua:94: 'end' expected (to close 'if' at line\
    \ 75) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_idx = min_idx\n\
    \    for idx, value in ipairs(arr) do\n        if value == smalest_value then\n\
    \            if idx < smalest_idx then\n                smalest_value = value\n\
    \                smalest_idx = idx\n            end\n        end\n    end\n  \
    \  return smalest_value, smalest_idx\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfvjhx89.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmppfvjhx89.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    table.insert(results, min_value, min_value_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvypqg5oj.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpvypqg5oj.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    if smalest_value == math.inf then\n\
    \        return nil\n    end\n    local smalest_value_with_even_value = smalest_value\
    \ % 2\n    local smalest_value_with_even_index = smalest_index\n    for i = 1,\
    \ #arr do\n        if arr[i] == smalest_value_with_even_value then\n         \
    \   smalest_value_with_even_index = i\n        end\n    end\n    return smalest_value_with_even_index,\
    \ smalest_value_with_even_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7bc04iyo.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp7bc04iyo.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n                smalest_node_val = node.value\n                smalest_node_index\
    \ = node.index\n            elseif smalest_value < node.value then\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n                smalest_node_val = node.value\n\
    \                smalest_node_index = node.index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node_index\n    if smalest_index == 0 then\n        smalest_node_index\
    \ = smalest_node.index\n    else\n        smalest_node_index = smalest_index\n\
    \    end\n    return smalest_node_val, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02kpxkxf.lua:33:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmp02kpxkxf.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgw4oz1x8.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpgw4oz1x8.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_node = arr[i]\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n            end\n        end\n \
    \   end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ejf9_2o.lua:52:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp3ejf9_2o.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            if smalest_value\
    \ == 0 then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    smalest_node\
    \ = smalest_index\n    smalest_node_index = smalest_index\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 then\n            if smalest_value == arr[i] then\n\
    \                smalest_node = i\n                smalest_node_index = i\n  \
    \          end\n        end\n    end\n    if smalest_node == 0 then\n        return\
    \ nil\n    end\n    local smalest_node_value = arr[smalest_node]\n    local smalest_node_index\
    \ = smalest_node\n    for i = 1, #arr do\n        if arr[i] > 0 then\n       \
    \     if smalest_value == arr[i] then\n                smalest_node_index = i\n\
    \            end\n        end\n    end\n    if smalest_node_index == 0 then\n\
    \        return nil\n    end\n    local smalest_node_value = arr[smalest_node_index]\n\
    \    local smalest_node_index = smalest_node_index\n    for i = 1, #arr do\n \
    \       if arr[i] > 0 then\n            if smalest_value == arr[i] then\n    \
    \            smalest_node_index = i\n            end\n        end\n    end\n \
    \   if smalest_node_index == 0 then\n        return nil\n    end\n    local smalest_node_value\
    \ = arr[smalest_node_index]\n    local smalest_node_index = smalest_node_index\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            if smalest_value\
    \ == arr[i] then\n                smalest_node_index = i\n            end\n  \
    \      end\n    end\n    if smalest_node_index == 0 then\n        return nil\n\
    \    end\n    local smalest_node_value = arr[smalest_node_index]\n    local smalest_node_index\
    \ = smalest_node_index\n    for i = 1, #arr do\n        if arr[i] > 0 then\n \
    \           if smalest_value == arr[i] then\n                smalest_node_index\
    \ = i\n            end\n        end\n    end\n    if smalest_node_index == 0 \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpn_659y_4.lua:104: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_node = arr[i]\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n            end\n        end\n \
    \   end\n    if smalest_value == 0 then\n        return nil\n    end\n    if smalest_index\
    \ == #arr then\n        return smalest_node\n    end\n    local smalest_nodes\
    \ = []\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            table.insert(smalest_nodes,\
    \ arr[i])\n        end\n    end\n    table.sort(smalest_nodes)\n    return smalest_node\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9mvell72.lua:49: unexpected symbol near '['\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == 0 then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n                smalest_node = node\n\
    \                smalest_node_index = node.index\n            elseif smalest_value\
    \ < node.value then\n                smalest_value = node.value\n            \
    \    smalest_index = node.index\n                smalest_node = node\n       \
    \         smalest_node_index = node.index\n            end\n        end\n    end\n\
    \    if smalest_value == 0 then\n        return nil\n    end\n    return smalest_node,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpurav8bb4.lua:32:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpurav8bb4.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  local smalest_node\
    \ = {}\n  smalest_node[1] = smalest_value\n  smalest_node[2] = smalest_index\n\
    \  return smalest_node\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5kt0s_75.lua:53:\
    \ expected: {2, 1}\\nactual: {4, 1}\\nstack traceback:\\n\\t/tmp/tmp5kt0s_75.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplma1eqp3.lua:50:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmplma1eqp3.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = #arr\n    local smalest_value\n    local smalest_index\n  \
    \  for i = 1, #arr do\n        if arr[i] < min then\n            min = arr[i]\n\
    \            index = i\n        end\n    end\n    if min % 2 == 0 then\n     \
    \   smalest_value = min\n        smalest_index = index\n    else\n        smalest_value\
    \ = min - 1\n        smalest_index = index - 1\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq3c1z1cl.lua:27:\
    \ bad argument #1 to 'min' (number expected, got table)\\nstack traceback:\\n\\\
    t/tmp/tmpq3c1z1cl.lua:27: in function 'candidate'\\n\\t/tmp/tmpq3c1z1cl.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_index = 0\n    local results = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    table.insert(results, min_value, min_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4pqvs511.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp4pqvs511.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\
    \ in the array\n  local smallest_even_value = arr[1]\n  -- Find the smallest index\n\
    \  local smallest_index = 1\n  for i = 2, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smallest_even_value < arr[i] then\n        smallest_even_value = arr[i]\n\
    \        smallest_index = i\n      end\n    end\n  end\n  -- Return the smallest\
    \ even value and its index\n  return smallest_even_value,smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_g__xgp.lua:50:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpf_g__xgp.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_index2 = 0\n    local smalest_index3\
    \ = 0\n    local smalest_index4 = 0\n    local smalest_index5 = 0\n    local smalest_index6\
    \ = 0\n    local smalest_index7 = 0\n    local smalest_index8 = 0\n    local smalest_index9\
    \ = 0\n    local smalest_index10 = 0\n    local smalest_index11 = 0\n    local\
    \ smalest_index12 = 0\n    local smalest_index13 = 0\n    local smalest_index14\
    \ = 0\n    local smalest_index15 = 0\n    local smalest_index16 = 0\n    local\
    \ smalest_index17 = 0\n    local smalest_index18 = 0\n    local smalest_index19\
    \ = 0\n    local smalest_index20 = 0\n    local smalest_index21 = 0\n    local\
    \ smalest_index22 = 0\n    local smalest_index23 = 0\n    local smalest_index24\
    \ = 0\n    local smalest_index25 = 0\n    local smalest_index26 = 0\n    local\
    \ smalest_index27 = 0\n    local smalest_index28 = 0\n    local smalest_index29\
    \ = 0\n    local smalest_index30 = 0\n    local smalest_index31 = 0\n    local\
    \ smalest_index32 = 0\n    local smalest_index33 = 0\n    local smalest_index34\
    \ = 0\n    local smalest_index35 = 0\n    local smalest_index36 = 0\n    local\
    \ smalest_index37 = 0\n    local smalest_index38 = 0\n    local smalest_index39\
    \ = 0\n    local smalest_index40 = 0\n    local smalest_index41 = 0\n    local\
    \ smalest_index42 = 0\n    local smalest_index43 = 0\n    local smalest_index44\
    \ = 0\n    local smalest_index45 = 0\n    local smalest_index46 = 0\n    local\
    \ smalest_index47 = 0\n    local smalest_index48 = 0\n    local smalest_index49\
    \ = 0\n    local smalest_index50 = 0\n    local smalest_index51 = 0\n    local\
    \ smalest_index52 = 0\n    local smalest_index53 = 0\n    local smalest_index54\
    \ = 0\n    local smalest_index55 = 0\n    local smalest_index56 = 0\n    \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpg_ygnxls.lua:99: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  local smalest_node\n  for i = 1, #arr\
    \ do\n    if arr[i] < smalest_value then\n      smalest_value = arr[i]\n     \
    \ smalest_index = i\n      smalest_node = arr[i]\n    end\n  end\n  if smalest_value\
    \ == math.inf then\n    return nil\n  end\n  local smalest_node_index = 1\n  local\
    \ smalest_node_val = smalest_node\n  for i = 2, #arr do\n    if arr[i] < smalest_node_val\
    \ then\n      smalest_node_index = i\n      smalest_node_val = arr[i]\n    end\n\
    \  end\n  return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4u3d4brb.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp4u3d4brb.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens + 1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ index = #evens\n    local value = evens[#evens]\n    local smalest_value_and_index\
    \ = smalest_value, smalest_index\n    for i = 1, #evens do\n        if evens[i]\
    \ < value then\n            value = evens[i]\n            index = i\n        \
    \    smalest_value_and_index = smalest_value, smalest_index\n        end\n   \
    \ end\n    return smalest_value_and_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnpdd0i3b.lua:58:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpnpdd0i3b.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_node = arr[i]\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n            end\n        end\n \
    \   end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ result\n    if smalest_index == #arr then\n        result = smalest_node\n \
    \   else\n        result = {smalest_value, smalest_index}\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcv048vnv.lua:58:\
    \ expected: {2, 1}\\nactual: {4, 1}\\nstack traceback:\\n\\t/tmp/tmpcv048vnv.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4w9wwh3l.lua:46:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp4w9wwh3l.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local index = 1\n    for _, v in ipairs(arr) do\n\
    \        if smallest_value == nil then\n            smallest_value = v\n     \
    \       smallest_index = index\n        elseif smallest_value < v then\n     \
    \       smallest_value = v\n            smallest_index = index\n        end\n\
    \        index = index + 1\n    end\n    if smallest_value == nil then\n     \
    \   return nil\n    end\n    local smalest_value = smallest_value\n    local smalest_index\
    \ = smallest_index\n    for _, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_index = smalest_index + 1\n        end\n    end\n\
    \    if smalest_index == 1 then\n        return smalest_value, smalest_index\n\
    \    else\n        return smalest_value, smalest_index\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03jmg7uw.lua:60:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp03jmg7uw.lua:60:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value\n    local even_values = {}\n    local index\
    \ = 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            even_values[#even_values + 1] = node.value\n            if smallest_even_value\
    \ == nil then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            elseif smallest_even_value < node.value then\n        \
    \        smalest_value = node.value\n                smalest_index = index\n \
    \           end\n        end\n        index = index + 1\n    end\n    if #even_values\
    \ == 0 then\n        return nil\n    end\n    local smallest_even_index = #even_values\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smallest_even_value == nil then\n                smallest_even_value\
    \ = node.value\n                smallest_even_index = index\n            elseif\
    \ smallest_even_value < node.value then\n                smallest_even_value =\
    \ node.value\n                smallest_even_index = index\n            end\n \
    \       end\n        index = index + 1\n    end\n    if smallest_even_value ==\
    \ nil then\n        return nil\n    end\n    return smallest_even_index, smallest_even_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjspr9guz.lua:31:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpjspr9guz.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if node.value < smalest_value then\n            \
    \    smalest_value, smalest_index = node.value, 1\n            else\n        \
    \        if node.value == smalest_value then\n                    smalest_index\
    \ = smalest_index + 1\n                end\n            end\n        end\n   \
    \ end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy966kzwu.lua:29:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpy966kzwu.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value\
    \ = math.inf\n  local min_value_index = nil\n  for i = 1, #arr do\n    if arr[i]\
    \ < min_value then\n      min_value = arr[i]\n      min_value_index = i\n    end\n\
    \  end\n  if min_value_index == nil then\n    return nil\n  end\n  local smalest_value\
    \ = min_value\n  local smalest_value_index = min_value_index\n  for i = 1, #arr\
    \ do\n    if arr[i] == smalest_value then\n      smalest_value_index = i\n   \
    \ end\n  end\n  return smalest_value, smalest_value_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_7i5_42h.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp_7i5_42h.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    if smalest_value == math.inf then\n\
    \        return nil\n    end\n    local smalest_value_and_index = { smalest_value,\
    \ smalest_index }\n    local smalest_value_and_index_index_map = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value_and_index_index_map[arr[i]]\
    \ = i\n        end\n    end\n    local smalest_value_and_index_index_map_sorted\
    \ = {}\n    for i = 1, #smalest_value_and_index_index_map do\n        table.insert(smalest_value_and_index_index_map_sorted,\
    \ smalest_value_and_index_index_map[i])\n    end\n    table.sort(smalest_value_and_index_index_map_sorted)\n\
    \    local smalest_value_and_index_index_map_sorted_sorted = {}\n    for i = 1,\
    \ #smalest_value_and_index_index_map_sorted do\n        table.insert(smalest_value_and_index_index_map_sorted_sorted,\
    \ smalest_value_and_index_index_map_sorted[i])\n    end\n    local smalest_value_and_index_index_map_sorted_sorted_index\
    \ = 1\n    for i = 1, #smalest_value_and_index_index_map_sorted_sorted do\n  \
    \      if smalest_value_and_index_index_map_sorted_sorted_index == smalest_value_and_index_index_map_sorted_sorted[i]\
    \ then\n            smalest_value_and_index_index_map_sorted_sorted_index = i\
    \ + 1\n        end\n    end\n    if smalest_value_and_index_index_map_sorted_sorted_index\
    \ == #smalest_value_and_index_index_map_sorted_sorted then\n        return smalest_value_and_index_index_map_sorted_sorted[1]\n\
    \    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprwr8tr0s.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmprwr8tr0s.lua:70:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smalest_value = arr[1]\n  local smalest_index = 1\n  for i = 2, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value < arr[i] then\n    \
    \    smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n \
    \ end\n  -- Return the smallest even value\n  return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9bfy_it.lua:49:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpv9bfy_it.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local results = {}\n    for _,\
    \ v in ipairs(arr) do\n        if v < min_value then\n            min_value =\
    \ v\n            min_value_index = nil\n        end\n        if v == min_value\
    \ then\n            if min_value_index == nil then\n                min_value_index\
    \ = #results\n            end\n            results[min_value_index] = v\n    \
    \    end\n    end\n    if min_value_index == nil then\n        return nil\n  \
    \  end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0mj4q_no.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp0mj4q_no.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if node.value < smalest_value then\n            \
    \    smalest_value, smalest_index = node.value, 1\n            else\n        \
    \        smalest_value = node.value\n                smalest_index = smalest_index\
    \ + 1\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe35mi4so.lua:29:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpe35mi4so.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    local index\
    \ = 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens\
    \ + 1] = arr[i]\n            if evens[#evens] <= smalest_value then\n        \
    \        smalest_value = evens[#evens]\n                smalest_index = index\n\
    \            end\n        end\n        index = index + 1\n    end\n    if #evens\
    \ == 0 then\n        return nil\n    end\n    if smalest_value == 0 then\n   \
    \     return nil\n    end\n    return smalest_value, smalest_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5a_ov84q.lua:53:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp5a_ov84q.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] > smalest_value then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            end\n        end\n    end\n  \
    \  if smalest_value == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4nfff_g.lua:45:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpd4nfff_g.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            even[#even+1] = arr[i]\n\
    \            if even[#even] < smalest_value then\n                smalest_value\
    \ = even[#even]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #even == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpynl2cdbo.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpynl2cdbo.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    local\
    \ index = 1\n    for _, node in ipairs(arr) do\n        if smallest_value == 0\
    \ then\n            smallest_value = node\n            smallest_index = index\n\
    \        elseif smallest_value < node then\n            smallest_value = node\n\
    \            smallest_index = index\n        end\n        index = index + 1\n\
    \    end\n    results[1] = smallest_value\n    results[2] = smallest_index\n \
    \   return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllnnstd8.lua:49:\
    \ expected: {2, 1}\\nactual: {4, 1}\\nstack traceback:\\n\\t/tmp/tmpllnnstd8.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    if\
    \ smalest_value == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0bgi1_0q.lua:51:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp0bgi1_0q.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            elseif smalest_value < node.value then\n              \
    \  smalest_value = node.value\n                smalest_index = index\n       \
    \     end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpefkkbnck.lua:30:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmpefkkbnck.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    local smalest_even_value = 1\n  \
    \  local smalest_even_index = 1\n    local smalest_even_index_index = 1\n    for\
    \ i = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n        end\n        if arr[i] % 2\
    \ == 0 then\n            if smalest_even_value < arr[i] then\n               \
    \ smalest_even_value = arr[i]\n                smalest_even_index = i\n      \
    \          smalest_even_index_index = i\n            end\n        end\n    end\n\
    \    if smalest_even_value == 1 then\n        return smalest_even_index, smalest_even_index_index\n\
    \    else\n        return smalest_index, smalest_even_index_index\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmp7sqhek.lua:55:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpmp7sqhek.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local even_values\
    \ = {}\n  local smallest_values = {}\n  local smallest_index = {}\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      table.insert(even_values, arr[i])\n\
    \      table.insert(smallest_values, arr[i])\n      table.insert(smallest_index,\
    \ i)\n    end\n  end\n  if #even_values == 0 then\n    return nil\n  end\n  table.sort(even_values)\n\
    \  local smallest_value = even_values[1]\n  local smallest_index = smallest_index[1]\n\
    \  for i = 2, #even_values do\n    if even_values[i] < smallest_value then\n \
    \     smallest_value = even_values[i]\n      smallest_index = smallest_index[i]\n\
    \    end\n  end\n  return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6nionqee.lua:55:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp6nionqee.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens + 1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ index = #evens\n    local value = evens[index]\n    local new_arr = {}\n   \
    \ for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if arr[i] <=\
    \ value then\n                index = i\n                value = arr[i]\n    \
    \        end\n        end\n    end\n    new_arr[1] = value\n    new_arr[2] = index\n\
    \    return new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdev9ikp3.lua:61:\
    \ expected: {2, 1}\\nactual: {2, 2}\\nstack traceback:\\n\\t/tmp/tmpdev9ikp3.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = nil, nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smalest_value == nil then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n      elseif smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  if smalest_value == nil\
    \ then\n    return nil\n  end\n  return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_ivnsf9.lua:48:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp3_ivnsf9.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_index_value = nil\n\
    \    local index_of_smallest_value = nil\n    local index_of_smallest_index =\
    \ nil\n    for _, node in ipairs(arr) do\n        if smallest_value == nil then\n\
    \            smallest_value = node\n            smallest_index = node\n      \
    \      smallest_index_value = node\n            index_of_smallest_value = node\n\
    \            index_of_smallest_index = node\n        elseif smallest_value < node\
    \ then\n            smallest_value = node\n            smallest_index = node\n\
    \            smallest_index_value = node\n            index_of_smallest_value\
    \ = node\n            index_of_smallest_index = node\n        elseif smallest_value\
    \ == node then\n            if smallest_index_value < node then\n            \
    \    smallest_index_value = node\n                index_of_smallest_value = node\n\
    \            elseif smallest_index_value == node then\n                if index_of_smallest_value\
    \ < node then\n                    index_of_smallest_value = node\n          \
    \      end\n            end\n        end\n    end\n    if smallest_value == nil\
    \ then\n        return nil\n    end\n    if smallest_index_value == nil then\n\
    \        return smallest_index\n    end\n    if index_of_smallest_value == nil\
    \ then\n        return smallest_index_value\n    end\n    if index_of_smallest_value\
    \ == smallest_index_value then\n        return smallest_index_value\n    end\n\
    \    return smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphgbfp7e9.lua:74:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmphgbfp7e9.lua:74:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_val = smalest_node\n                smalest_node_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_val = smalest_node\n                smalest_node_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    if smalest_index == #arr then\n        return\
    \ smalest_node\n    end\n    if smalest_node_val % 2 == 0 then\n        return\
    \ smalest_node_val, smalest_node_index\n    else\n        return smalest_node_val,\
    \ smalest_index\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxhcipp_b.lua:65:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpxhcipp_b.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_val = smalest_node\n                smalest_node_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_val = smalest_node\n                smalest_node_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    if smalest_index == #arr then\n        return\
    \ smalest_node\n    end\n    if smalest_node_val % 2 == 0 then\n        return\
    \ smalest_node_val, smalest_node_index\n    else\n        return smalest_node_val,\
    \ smalest_index\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyhv7fubg.lua:65:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpyhv7fubg.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local index = {}\n    local smalest_value = 0\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            even[arr[i]] = true\n          \
    \  if even[smalest_value] == nil then\n                smalest_value = arr[i]\n\
    \            end\n            index[arr[i]] = i\n        end\n    end\n    if\
    \ #even == 0 then\n        return nil\n    end\n    local smalest_value_index\n\
    \    for i = 1, #even do\n        if even[i] then\n            if smalest_value_index\
    \ == nil then\n                smalest_value_index = i\n            else\n   \
    \             if smalest_value < i then\n                    smalest_value_index\
    \ = i\n                    smalest_value = i\n                end\n          \
    \  end\n        end\n    end\n    if smalest_value_index == nil then\n       \
    \ return nil\n    end\n    return smalest_value, index[smalest_value]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3h57hf5f.lua:64:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp3h57hf5f.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_value = nil\n    for\
    \ i = 1, #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n        if arr[i] < smalest_value\
    \ then\n            smalest_value = arr[i]\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpug6i0hmw.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpug6i0hmw.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      evens[#evens+1] = arr[i]\n      if evens[#evens]\
    \ <= smalest_value then\n        smalest_value = evens[#evens]\n        smalest_index\
    \ = i\n      end\n    end\n  end\n  if #evens == 0 then\n    return nil\n  end\n\
    \  local smalest_even = evens[#evens]\n  local smalest_index = smalest_index\n\
    \  local smalest_even_index = #evens\n  for i = #evens, 1, -1 do\n    if evens[i]\
    \ <= smalest_even then\n      smalest_even = evens[i]\n      smalest_even_index\
    \ = i\n    end\n  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpic89i3g3.lua:57:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpic89i3g3.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for _, node in ipairs(arr) do\n        if smalest_value\
    \ == 0 then\n            smalest_value = node\n            smalest_index = node\n\
    \            smalest_node = node\n            smalest_node_val = node\n      \
    \      smalest_node_index = node\n        elseif node < smalest_value then\n \
    \           smalest_value = node\n            smalest_index = node\n         \
    \   smalest_node = node\n            smalest_node_val = node\n            smalest_node_index\
    \ = node\n        elseif node == smalest_value then\n            if smalest_index\
    \ > node then\n                smalest_value = node\n                smalest_index\
    \ = node\n                smalest_node = node\n                smalest_node_val\
    \ = node\n                smalest_node_index = node\n            elseif smalest_index\
    \ == node then\n                if smalest_node_val > node then\n            \
    \        smalest_value = node\n                    smalest_index = node\n    \
    \                smalest_node = node\n                    smalest_node_val = node\n\
    \                    smalest_node_index = node\n                elseif smalest_node_val\
    \ == node then\n                    if smalest_node_index > node then\n      \
    \                  smalest_value = node\n                        smalest_index\
    \ = node\n                        smalest_node = node\n                      \
    \  smalest_node_val = node\n                        smalest_node_index = node\n\
    \                    elseif smalest_node_index == node then\n                \
    \        smalest_node = node\n                        smalest_node_val = node\n\
    \                        smalest_node_index = node\n                    end\n\
    \                end\n            end\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    return smalest_value, smalest_index,\
    \ smalest_node, smalest_node_val, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpns8xgatr.lua:84:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpns8xgatr.lua:84:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = nil, nil\n  local smalest_even_value, smalest_even_index = nil,\
    \ nil\n  for i, v in ipairs(arr) do\n    if smalest_value == nil then\n      smalest_value\
    \ = v\n      smalest_index = i\n    elseif smalest_even_value == nil then\n  \
    \    smalest_even_value = v\n      smalest_even_index = i\n    elseif smalest_even_value\
    \ < v then\n      smalest_value = v\n      smalest_index = i\n      smalest_even_value\
    \ = smalest_even_value \n      smalest_even_index = smalest_even_index\n    end\n\
    \  end\n  if smalest_even_value == nil then\n    return smalest_index, smalest_index\n\
    \  end\n  return smalest_even_index, smalest_even_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6gw_sm7u.lua:52:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp6gw_sm7u.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ index = #arr\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n    \
    \        if arr[i] < smalest_value then\n                index = i\n         \
    \       smalest_value = arr[i]\n                smalest_index = i\n          \
    \  end\n        end\n    end\n    return smalest_value, smalest_index, index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpueyurtis.lua:56:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpueyurtis.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[smalest_value] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif evens[smalest_value]\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if #evens == 0 then\n      \
    \  return nil\n    end\n    local smalest_even = evens[smalest_value]\n    local\
    \ smalest_even_index = smalest_index\n    for i = 1, #evens do\n        if evens[i]\
    \ < smalest_even then\n            smalest_even = evens[i]\n            smalest_even_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_even_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7p4cf10n.lua:59:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp7p4cf10n.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = nil\n  local smallest_index = nil\n  local plucked_value = nil\n  for i =\
    \ 1, #arr do\n    if arr[i] < smallest_value then\n      smallest_value = arr[i]\n\
    \      smallest_index = i\n    end\n  end\n  if smallest_value == nil then\n \
    \   return nil\n  end\n  local index = smallest_index\n  local value = smallest_value\n\
    \  while index > 1 do\n    local next_value = arr[index + 1]\n    if next_value\
    \ % 2 == 0 then\n      value = next_value\n      index = index + 1\n    else\n\
    \      index = index + 1\n    end\n  end\n  plucked_value = value\n  return [plucked_value,\
    \ index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpuycqbsg2.lua:51: unexpected symbol near '['\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_node_index = nil\n \
    \   local smalest_node = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp8hq0e3aw.lua:99: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local pluck_node = min_value_index\n    local pluck_node_index\
    \ = min_value_index\n    for i = 1, #arr do\n        if arr[i] < min_value then\n\
    \            pluck_node = i\n            pluck_node_index = i\n        end\n \
    \   end\n    return { pluck_node, pluck_node_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpglrswwuf.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpglrswwuf.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        end\n    end\n    if smalest_value == nil then\n        return\
    \ nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqpgz596.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpqqpgz596.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    if smalest_value == 0 then\n        return smalest_index, smalest_node\n\
    \    end\n    local smalest_nodes = {}\n    for i = 1, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_nodes[i] = arr[i]\n        end\n \
    \   end\n    local smalest_index = #smalest_nodes\n    if smalest_index == 1 then\n\
    \        return smalest_index, smalest_nodes[1]\n    end\n    local smalest_index\
    \ = #smalest_nodes\n    if smalest_index == 1 then\n        return smalest_index,\
    \ smalest_nodes[smalest_index]\n    end\n    local smalest_index = #smalest_nodes\n\
    \    if smalest_index == 1 then\n        return smalest_index, smalest_nodes[smalest_index]\n\
    \    end\n    local smalest_index = #smalest_nodes\n    if smalest_index == 1\
    \ then\n        return smalest_index, smalest_nodes[smalest_index]\n    end\n\
    \    local smalest_index = #smalest_nodes\n    if smalest_index == 1 then\n  \
    \      return smalest_index, smalest_nodes[smalest_index]\n    end\n    local\
    \ smalest_index = #smalest_nodes\n    if smalest_index == 1 then\n        return\
    \ smalest_index, smalest_nodes[smalest_index]\n    end\n    local smalest_index\
    \ = #smalest_nodes\n    if smalest_index == 1 then\n        return smalest_index,\
    \ smalest_nodes[smalest_index]\n    end\n    local smalest_index = #smalest_nodes\n\
    \    if smalest_index == 1 then\n        return smalest_index, smalest_nodes[smalest_index]\n\
    \    end\n    local smalest_index = #smalest_nodes\n    if smalest_index == 1\
    \ then\n        return smalest_index, smalest_nodes[smalest_index]\n    end\n\
    \    local smalest_index = #smalest_nodes\n    if smalest_index == 1 then\n  \
    \      return smalest_index, smalest_nodes[smalest_index]\n    end\n    local\
    \ smalest_index = #smalest_nodes\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpx6tk3am0.lua:105: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value\
    \ = nil\n    local smallest_even_index = nil\n    local smallest_index = nil\n\
    \    local smallest_value = nil\n    for _, node in ipairs(arr) do\n        if\
    \ smallest_even_value == nil then\n            smallest_even_value = node\n  \
    \          smallest_even_index = node\n            smallest_index = node\n   \
    \         smallest_value = node\n        elseif smallest_even_value < node then\n\
    \            smallest_even_value = node\n            smallest_even_index = node\n\
    \            smallest_index = node\n            smallest_value = node\n      \
    \  elseif smallest_even_value == node then\n            if smallest_index == nil\
    \ then\n                smallest_index = node\n                smallest_value\
    \ = node\n            elseif smallest_value < node then\n                smallest_index\
    \ = node\n                smallest_value = node\n            end\n        end\n\
    \    end\n    if smallest_even_value == nil then\n        return nil\n    end\n\
    \    local result = {smallest_even_value,smallest_even_index}\n    if smallest_index\
    \ == nil then\n        return result\n    end\n    local smallest_index_value\
    \ = arr[smallest_index]\n    if smallest_index_value % 2 == 0 then\n        result[1]\
    \ = smallest_index_value\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppntxe93t.lua:60:\
    \ attempt to perform arithmetic on local 'smallest_index_value' (a nil value)\\\
    nstack traceback:\\n\\t/tmp/tmppntxe93t.lua:69: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index2 = nil\n    local\
    \ smalest_index3 = nil\n    local smalest_index4 = nil\n    local smalest_index5\
    \ = nil\n    local smalest_index6 = nil\n    local smalest_index7 = nil\n    local\
    \ smalest_index8 = nil\n    local smalest_index9 = nil\n    local smalest_index10\
    \ = nil\n    local smalest_index11 = nil\n    local smalest_index12 = nil\n  \
    \  local smalest_index13 = nil\n    local smalest_index14 = nil\n    local smalest_index15\
    \ = nil\n    local smalest_index16 = nil\n    local smalest_index17 = nil\n  \
    \  local smalest_index18 = nil\n    local smalest_index19 = nil\n    local smalest_index20\
    \ = nil\n    local smalest_index21 = nil\n    local smalest_index22 = nil\n  \
    \  local smalest_index23 = nil\n    local smalest_index24 = nil\n    local smalest_index25\
    \ = nil\n    local smalest_index26 = nil\n    local smalest_index27 = nil\n  \
    \  local smalest_index28 = nil\n    local smalest_index29 = nil\n    local smalest_index30\
    \ = nil\n    local smalest_index31 = nil\n    local smalest_index32 = nil\n  \
    \  local smalest_index33 = nil\n    local smalest_index34 = nil\n    local smalest_index35\
    \ = nil\n    local smalest_index36 = nil\n    local smalest_index37 = nil\n  \
    \  local smalest_index38 = nil\n    local smalest_index39 = nil\n    local smalest_index40\
    \ = nil\n    local smalest_index41 = nil\n    local smalest_index42 = nil\n  \
    \  local smalest_index43 = nil\n    local smalest_index44 = nil\n    local smalest_index45\
    \ = nil\n    local smalest_index46 = nil\n    local smalest_index47 = nil\n  \
    \  local smalest_index48 = nil\n    local smalest_index49 = nil\n    local smalest_index50\
    \ = nil\n    local smalest_index51 = nil\n    local smalest_index5\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpl8rhry7g.lua:94: 'end' expected (to close 'function' at\
    \ line 26) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local index = 1\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n   \
    \             smalest_value = arr[i]\n                smalest_index = index\n\
    \            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = index\n            end\n         \
    \   index = index + 1\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpce2ek0l9.lua:51:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpce2ek0l9.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = nil\n    local value = nil\n    for i = 1, #arr do\n      \
    \  if arr[i] > min then\n            index = i\n            value = arr[i]\n \
    \       end\n    end\n    return value, index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp5_4rj87.lua:27:\
    \ bad argument #1 to 'min' (number expected, got table)\\nstack traceback:\\n\\\
    t/tmp/tmpp5_4rj87.lua:27: in function 'candidate'\\n\\t/tmp/tmpp5_4rj87.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value\
    \ = nil\n    local smallest_index = nil\n    local smallest_value = nil\n    local\
    \ smallest_index_value = nil\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            if smallest_even_value == nil then\n                smallest_even_value\
    \ = arr[i]\n                smallest_index_value = i\n            elseif smallest_even_value\
    \ < arr[i] then\n                smallest_even_value = arr[i]\n              \
    \  smallest_index_value = i\n            end\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    if smallest_index_value == nil\
    \ then\n        return smallest_even_value\n    end\n    return smallest_even_value,\
    \ smallest_index_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptt9q04c9.lua:54:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmptt9q04c9.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_node = arr[i]\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n            end\n        end\n \
    \   end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprkkw0ia3.lua:52:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmprkkw0ia3.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < min_value then\n            min_value = arr[i]\n            min_index = i\n\
    \        end\n    end\n    if min_value == math.inf then\n        return nil\n\
    \    end\n    return min_value, min_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr2qsnei7.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpr2qsnei7.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_value_and_index = nil\n    local\
    \ smalest_index_and_value = nil\n    for i = 1, #arr do\n        if arr[i] % 2\
    \ == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    smalest_value_and_index = smalest_value, smalest_index\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == arr[i] then\n                smalest_value_and_index = smalest_value_and_index,\
    \ i\n            end\n        end\n    end\n    if smalest_value_and_index ==\
    \ nil then\n        return nil\n    end\n    smalest_index_and_value = smalest_index,\
    \ smalest_value_and_index\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == arr[i] then\n                smalest_index_and_value\
    \ = smalest_index_and_value, i\n            end\n        end\n    end\n    if\
    \ smalest_index_and_value == nil then\n        return nil\n    end\n    return\
    \ smalest_index_and_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv2ah_0wj.lua:72:\
    \ expected: {2, 1}\\nactual: 1\\nstack traceback:\\n\\t/tmp/tmpv2ah_0wj.lua:72:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smalest_value % 2 == 0 then\n        return smalest_value,\
    \ smalest_index\n    else\n        local smalest_value2 = arr[1]\n        local\
    \ smalest_index2 = 1\n        for i = 2, #arr do\n            if arr[i] < smalest_value2\
    \ then\n                smalest_value2 = arr[i]\n                smalest_index2\
    \ = index\n            end\n            index = index + 1\n        end\n     \
    \   if smalest_value2 % 2 == 0 then\n            return smalest_value2, smalest_index2\n\
    \        else\n            return nil\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjoaj3cfx.lua:60:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpjoaj3cfx.lua:60:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local results = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local index = smallest_index\n\
    \    while smallest_value % 2 == 0 do\n        index = index + 1\n        smallest_value\
    \ = smallest_value / 2\n    end\n    table.insert(results, smallest_value, index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn3shzda3.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpn3shzda3.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for index,\
    \ value in ipairs(arr) do\n        if smallest_value == 0 then\n            smallest_value\
    \ = value\n            smallest_index = index\n        elseif smallest_value ==\
    \ value then\n            smallest_index = smallest_index + 1\n        end\n \
    \   end\n    if smallest_index == 0 then\n        return nil\n    end\n    local\
    \ index = smallest_index\n    while smallest_value % 2 == 0 do\n        smallest_value\
    \ = smallest_value / 2\n        index = index + 1\n    end\n    results[1] = smallest_value\n\
    \    results[2] = index\n    return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp31mu4_i9.lua:54:\
    \ expected: {2, 1}\\nactual: {1, 3}\\nstack traceback:\\n\\t/tmp/tmp31mu4_i9.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smallest_value = arr[1]\n    local smallest_index = 1\n    for\
    \ i = 2, #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_ka8pp3.lua:43:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmp3_ka8pp3.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local result\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 then\n            if smallest_value == nil then\n          \
    \      smallest_value = arr[i]\n                smallest_index = i\n         \
    \   elseif smallest_value < arr[i] then\n                smallest_value = arr[i]\n\
    \                smallest_index = i\n            end\n        end\n    end\n \
    \   if smallest_value == nil then\n        return nil\n    end\n    if smallest_index\
    \ == nil then\n        return smallest_value\n    end\n    if smallest_value ==\
    \ arr[1] then\n        return smallest_index\n    end\n    if smallest_value ==\
    \ arr[1] then\n        return smallest_index\n    end\n    if smallest_value <\
    \ arr[1] then\n        return smallest_index\n    end\n    return smallest_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpse08hsvp.lua:62:\
    \ expected: {2, 1}\\nactual: 1\\nstack traceback:\\n\\t/tmp/tmpse08hsvp.lua:62:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node = {}\n    smalest_node[1] = smalest_value\n    smalest_node[2]\
    \ = smalest_index\n    return smalest_node\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp18_k1hbm.lua:53:\
    \ expected: {2, 1}\\nactual: {4, 1}\\nstack traceback:\\n\\t/tmp/tmp18_k1hbm.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            table.insert(results,\
    \ arr[i])\n        end\n    end\n    table.sort(results)\n    if #results == 0\
    \ then\n        return nil\n    end\n    local index = #results - 1\n    if results[index]\
    \ % 2 == 0 then\n        return results[index]\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0z1vdpt.lua:47:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpj0z1vdpt.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even_values\
    \ = {}\n    local smallest_values = {}\n    local smallest_index = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            even_values[#even_values\
    \ + 1] = arr[i]\n        else\n            if #smallest_values < #even_values\
    \ then\n                smallest_values[#smallest_values + 1] = arr[i]\n     \
    \           smallest_index[#smallest_values + 1] = i\n            else\n     \
    \           smallest_values[#smallest_values + 1] = arr[i]\n                smallest_index[#smallest_values\
    \ + 1] = i\n            end\n        end\n    end\n    if #even_values == 0 then\n\
    \        return nil\n    end\n    local smallest_value = smallest_values[#smallest_values]\n\
    \    local smallest_index = smallest_index[#smallest_values]\n    local plucked_value\
    \ = even_values[smallest_index]\n    local plucked_index = 0\n    for i = 1, #even_values\
    \ do\n        if even_values[i] == smallest_value then\n            plucked_index\
    \ = i\n        end\n    end\n    return [ plucked_value, plucked_index ]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpqbx0ifez.lua:55: unexpected symbol near '['\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            even_values[node.value]\
    \ = true\n        end\n    end\n    for _, node in ipairs(arr) do\n        if\
    \ even_values[node.value] then\n            if smalest_value < node.value then\n\
    \                smalest_value = node.value\n                smalest_index = node.index\n\
    \            end\n        end\n    end\n    if smalest_value == 0 then\n     \
    \   return nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0f06vnh6.lua:30:\
    \ attempt to index local 'node' (a number value)\\nstack traceback:\\n\\t/tmp/tmp0f06vnh6.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    if index == nil then\n     \
    \   return nil\n    end\n    return min, index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7vwrnh7k.lua:27:\
    \ bad argument #1 to 'min' (number expected, got table)\\nstack traceback:\\n\\\
    t/tmp/tmp7vwrnh7k.lua:27: in function 'candidate'\\n\\t/tmp/tmp7vwrnh7k.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = math.inf\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] < smallest_value then\n      smallest_value = arr[i]\n   \
    \   smallest_index = i\n    end\n  end\n  if smallest_value == math.inf then\n\
    \    return nil\n  end\n  results[1] = smallest_value\n  results[2] = smallest_index\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpffh1vkez.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpffh1vkez.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpekkj75ym.lua:48:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpekkj75ym.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  for i = 1, #arr do\n\
    \    if arr[i] > 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  if smalest_index\
    \ == #arr then\n    return smalest_value\n  end\n  local smalest_nodes = {}\n\
    \  local smalest_node_index = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n\
    \      if smalest_value == arr[i] then\n        smalest_nodes[smalest_node_index]\
    \ = arr[i]\n        smalest_node_index = smalest_node_index + 1\n      end\n \
    \   end\n  end\n  if smalest_node_index == 0 then\n    return nil\n  end\n  if\
    \ smalest_node_index == 1 then\n    return smalest_nodes[1]\n  end\n  local smalest_node_index\
    \ = smalest_node_index - 1\n  local smalest_node_value = smalest_nodes[smalest_node_index]\n\
    \  for i = 1, #smalest_nodes do\n    if smalest_nodes[i] > smalest_node_value\
    \ then\n      smalest_node_value = smalest_nodes[i]\n      smalest_node_index\
    \ = i\n    end\n  end\n  return smalest_nodes[smalest_node_index]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxix0ha22.lua:77:\
    \ expected: {2, 1}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpxix0ha22.lua:77:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index = 1\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_node then\n            smalest_node_index = i\n        end\n\
    \    end\n    return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp21pwgva5.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp21pwgva5.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local index = 1\n\
    \  local smalest_value = arr[1]\n  local smalest_index = 1\n  for i = 2, #arr\
    \ do\n    if arr[i] > smalest_value then\n      smalest_value = arr[i]\n     \
    \ smalest_index = index\n    end\n    index = index + 1\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvoufe0b5.lua:43:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpvoufe0b5.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n\
    \  local index = 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      table.insert(evens,\
    \ arr[i])\n      index = index + 1\n    end\n  end\n  if #evens == 0 then\n  \
    \  return nil\n  end\n  local smallest_value = table.min(evens)\n  local smallest_index\
    \ = #evens\n  for i = 1, #evens do\n    if evens[i] == smallest_value then\n \
    \     smallest_index = i\n    end\n  end\n  return smallest_value, smallest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpug0m1n8n.lua:38:\
    \ attempt to call field 'min' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpug0m1n8n.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local result\n    for i = 1,\
    \ #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        result = nil\n    else\n        result = arr[min_value_index]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0pfm6vr.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpp0pfm6vr.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value\n    local smallest_index\n    for i = 1, #arr\
    \ do\n        if arr[i] ~= 0 then\n            if smallest_value == nil then\n\
    \                smallest_value = arr[i]\n                smallest_index = i\n\
    \            elseif smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == nil then\n        return nil\n    end\n   \
    \ local index = smallest_index\n    local value = smallest_value\n    while index\
    \ > 1 do\n        if arr[index] % 2 == 0 then\n            arr[index] = arr[index]\
    \ / 2\n        else\n            arr[index] = arr[index] + (arr[index] - 1) /\
    \ 2\n        end\n        index = index - 1\n    end\n    table.insert(results,\
    \ value)\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpon0os42d.lua:61:\
    \ expected: {2, 1}\\nactual: {4}\\nstack traceback:\\n\\t/tmp/tmpon0os42d.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_even_value = nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_even_value\
    \ = arr[i]\n            elseif smalest_value ~= arr[i] then\n                if\
    \ smalest_even_value < arr[i] then\n                    smalest_value = arr[i]\n\
    \                    smalest_even_value = arr[i]\n                    smalest_index\
    \ = i\n                else\n                    smalest_even_value = smalest_even_value\
    \ + arr[i]\n                end\n            end\n        end\n    end\n    if\
    \ smalest_value == nil then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2oq3526a.lua:57:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmp2oq3526a.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local even_values\
    \ = {}\n  local smallest_value = 0\n  local smallest_index = 0\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      even_values[#even_values + 1] = arr[i]\n\
    \      if smallest_value < arr[i] then\n        smallest_value = arr[i]\n    \
    \    smallest_index = i\n      end\n    end\n  end\n  if #even_values == 0 then\n\
    \    return nil\n  end\n  local smallest_value_with_even_value = even_values[smallest_index]\n\
    \  local smallest_value_with_even_index = smallest_index\n  for i = 1, #even_values\
    \ do\n    if even_values[i] < smallest_value_with_even_value then\n      smallest_value_with_even_value\
    \ = even_values[i]\n      smallest_value_with_even_index = i\n    end\n  end\n\
    \  return smallest_value_with_even_index, smallest_value_with_even_value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxgeu28yd.lua:56:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpxgeu28yd.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupuv9rq0.lua:46:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpupuv9rq0.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_value = arr[1]\n    for i = 2, #arr do\n        if arr[i] < smalest_value\
    \ then\n            smalest_value = arr[i]\n            smalest_index = i\n  \
    \      end\n    end\n    if smalest_value == nil then\n        return nil\n  \
    \  end\n    if smalest_index == nil then\n        return smalest_value\n    end\n\
    \    if smalest_value == smalest_value then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index > smalest_index then\n        return smalest_value,\
    \ smalest_index\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqp8u16gc.lua:55:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpqp8u16gc.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_even_value = nil\n    local smalest_even_value_index = 0\n    for _,\
    \ v in ipairs(arr) do\n        if smalest_value == nil then\n            smalest_value\
    \ = v\n            smalest_index = v\n            smalest_even_value = v\n   \
    \         smalest_even_value_index = v\n        elseif smalest_value == v then\n\
    \            smalest_even_value = smalest_even_value\n            smalest_even_value_index\
    \ = smalest_even_value_index\n            smalest_value = v\n            smalest_index\
    \ = v\n        elseif smalest_even_value_index < v then\n            smalest_even_value\
    \ = v\n            smalest_even_value_index = v\n            smalest_value = v\n\
    \            smalest_index = v\n        end\n    end\n    if smalest_even_value_index\
    \ == 0 then\n        return smalest_value, smalest_index\n    end\n    local smalest_even_value_index\
    \ = 0\n    local smalest_even_value = 0\n    local smalest_index = smalest_index\n\
    \    for _, v in ipairs(arr) do\n        if smalest_even_value_index < v then\n\
    \            smalest_even_value = v\n            smalest_even_value_index = v\n\
    \            smalest_index = smalest_index\n        end\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg03upj1s.lua:69:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpg03upj1s.lua:69:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] > smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    results[1]\
    \ = smallest_value\n    results[2] = smallest_index\n    return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsdljjafw.lua:44:\
    \ expected: {2, 1}\\nactual: {4, 1}\\nstack traceback:\\n\\t/tmp/tmpsdljjafw.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smallest_value\
    \ == 0 then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            elseif smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    table.insert(results,\
    \ smallest_value, smallest_index)\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpak6lfqkc.lua:51:\
    \ expected: {2, 1}\\nactual: {4=1}\\nstack traceback:\\n\\t/tmp/tmpak6lfqkc.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[smalest_value] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            else\n            \
    \    if arr[i] < smalest_value then\n                    smalest_value = arr[i]\n\
    \                    smalest_index = i\n                end\n            end\n\
    \        end\n    end\n    if #evens == 0 then\n        return nil\n    end\n\
    \    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuvcmocfh.lua:53:\
    \ expected: {2, 1}\\nactual: 2\\nstack traceback:\\n\\t/tmp/tmpuvcmocfh.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n\
    \  local smalest_value = 0\n  local smalest_index = 0\n  local index = 1\n  for\
    \ i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      evens[#evens+1] = arr[i]\n\
    \      if evens[#evens] < smalest_value then\n        smalest_value = evens[#evens]\n\
    \        smalest_index = index\n      end\n      index = index + 1\n    end\n\
    \  end\n  if #evens == 0 then\n    return nil\n  else\n    return smalest_value,\
    \ smalest_index\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq6hizca8.lua:51:\
    \ expected: {2, 1}\\nactual: 0\\nstack traceback:\\n\\t/tmp/tmpq6hizca8.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    table.insert(results, min_value, min_value_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4z9jrwge.lua:31:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmp4z9jrwge.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    if smalest_value == math.inf then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpchb2eses.lua:30:\
    \ attempt to compare number with nil\\nstack traceback:\\n\\t/tmp/tmpchb2eses.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo9j8o1pd.lua:50:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpo9j8o1pd.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_value_and_index = nil\n    for _,\
    \ value in ipairs(arr) do\n        if smalest_value == nil then\n            smalest_value\
    \ = value\n            smalest_index = #arr\n        elseif smalest_value ~= value\
    \ then\n            smalest_value_and_index = { smalest_value, smalest_index }\n\
    \            smalest_value = value\n            smalest_index = #arr\n       \
    \ elseif smalest_value == value then\n            smalest_index = smalest_index\
    \ + 1\n        end\n    end\n    if smalest_value_and_index ~= nil then\n    \
    \    return smalest_value_and_index\n    else\n        return nil\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6nu3z3i5.lua:51:\
    \ expected: {2, 1}\\nactual: {2, 3}\\nstack traceback:\\n\\t/tmp/tmp6nu3z3i5.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value < arr[i] then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfga4zms_.lua:41:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpfga4zms_.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, value in ipairs(arr)\
    \ do\n        if smalest_value == nil then\n            smalest_value = value\n\
    \            smalest_index = index\n        elseif smalest_value == value then\n\
    \            smalest_index = index\n        end\n        index = index + 1\n \
    \   end\n    if smalest_value == nil then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjl4fzrdf.lua:47:\
    \ expected: {2, 1}\\nactual: 4\\nstack traceback:\\n\\t/tmp/tmpjl4fzrdf.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
