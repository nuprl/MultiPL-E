name: HumanEval_35_max_element
language: lua
results:
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i\n  for\
    \ i=1,#l do\n    if l[i]>max then\n      max=l[i]\n    end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9i9moco.lua:10:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpv9i9moco.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = nil, -1\n  for idx, value\
    \ in ipairs(l) do\n    if idx > max_idx then\n      max_value, max_idx = value,\
    \ idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9pbgl500.lua:20:\
    \ expected: 124, actual: -10\\nstack traceback:\\n\\t/tmp/tmp9pbgl500.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i=1,1\n\
    \  for i=1,#l do\n    if l[i]>max then max=l[i] end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, value in ipairs(l) do\n    if max_value == nil then\n      max_value\
    \ = value\n      max_element = value\n    else\n      if value > max_value then\n\
    \        max_value = value\n        max_element = value\n      end\n    end\n\
    \  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, value in ipairs(l) do\n    if max_value == nil then\n      max_value\
    \ = value\n      max_element = value\n    else\n      if value > max_value then\n\
    \        max_value = value\n        max_element = value\n      end\n    end\n\
    \  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max_value\
    \ = l[1]\n  for i=2,#l do\n    if l[i]>max_value then max_value = l[i] end\n \
    \ end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = nil, -1\n  for idx, value\
    \ in ipairs(l) do\n    if max_value == nil or value > max_value then\n      max_value,\
    \ max_idx = value, idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i=1,1\n\
    \  for i=1,#l do\n    if l[i]>max then max=l[i] end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max_value\
    \ = l[1]\n  for i=2,#l do\n    if l[i] > max_value then\n      max_value = l[i]\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = 0, 1\n  for idx, value\
    \ in ipairs(l) do\n    if value > max_value then\n      max_value, max_idx = value,\
    \ idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, value in ipairs(l) do\n    if max_value == nil or value > max_value\
    \ then\n      max_value, max_element = value, value\n    end\n  end\n  return\
    \ max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = 0, -1\n  for idx, value\
    \ in ipairs(l) do\n    if value > max_value then\n      max_value, max_idx = value,\
    \ idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, value in ipairs(l) do\n    if max_value == nil then\n      max_value\
    \ = value\n      max_element = value\n    else\n      if value > max_value then\n\
    \        max_value = value\n        max_element = value\n      end\n    end\n\
    \  end\n  return max_element\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the list.\n-- >>> max_element([1, 2, 3])\n\
    -- 3\n-- >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
