name: HumanEval_91_is_bored
language: lua
results:
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8hwljyzs.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8hwljyzs.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm46m_yg6.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm46m_yg6.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpof7i78sk.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpof7i78sk.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0520l5qt.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0520l5qt.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4vfv526h.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4vfv526h.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6lzq1gjv.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6lzq1gjv.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuhyu2dza.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuhyu2dza.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuvqzd_zz.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuvqzd_zz.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp86tadcsf.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp86tadcsf.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9lei1r09.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9lei1r09.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy374pi65.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy374pi65.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj66953u2.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj66953u2.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5bslnl5i.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5bslnl5i.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnttiev4z.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnttiev4z.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf0fl28ra.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf0fl28ra.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_i_aro5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3_i_aro5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_m7y5ijy.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_m7y5ijy.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1w4k4qp7.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1w4k4qp7.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllebbmtq.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpllebbmtq.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsqtufecs.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsqtufecs.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgapaww56.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgapaww56.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgshe1v7z.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgshe1v7z.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpii234epy.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpii234epy.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvil6y8yu.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvil6y8yu.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp61j7nncm.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp61j7nncm.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmproa4ki69.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmproa4ki69.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsd_utfni.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsd_utfni.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpac7d0sii.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpac7d0sii.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk93fzf1l.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk93fzf1l.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsoav_doo.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsoav_doo.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6kuso312.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6kuso312.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnolgvhhb.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnolgvhhb.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxiurb87q.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxiurb87q.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptj_162o6.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptj_162o6.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%w%.!?]+\") do\n        if w == \"I\" then\n      \
    \      boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyl_h2rda.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyl_h2rda.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7yyrgjfm.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7yyrgjfm.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1s4bqmtk.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1s4bqmtk.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphtiro2iv.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphtiro2iv.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%%.!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tzhvrbk.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3tzhvrbk.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps44_vrlj.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps44_vrlj.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpokv92vao.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpokv92vao.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp55yu29zw.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp55yu29zw.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpektakwcm.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpektakwcm.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzhmv31g3.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzhmv31g3.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb645cecm.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpb645cecm.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq_kaliyk.lua:18:\
    \ attempt to call field 'count' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq_kaliyk.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmjhoz1o5.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmjhoz1o5.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9e4m41s5.lua:18:\
    \ attempt to call field 'count' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9e4m41s5.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfj8pzhkd.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfj8pzhkd.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz3wx7yqh.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz3wx7yqh.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_tkxzl_c.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_tkxzl_c.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponq5hhxs.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmponq5hhxs.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6ja5tla.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmph6ja5tla.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk1ni27qz.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk1ni27qz.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxwb3lmn2.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxwb3lmn2.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8oj_2ps.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpr8oj_2ps.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgut9k9i5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgut9k9i5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphtxp2sjt.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphtxp2sjt.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0c13u3kv.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0c13u3kv.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg5gajcya.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg5gajcya.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptbbxnj5y.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptbbxnj5y.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%%.!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn3s7rirc.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpn3s7rirc.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S%.]\") do\n        if w == \"I\" then\n          \
    \  boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09huo3kh.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp09huo3kh.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyh6no6is.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyh6no6is.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ws1vchg.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_ws1vchg.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaumb6q08.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaumb6q08.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6nb7d7ag.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6nb7d7ag.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyjf8nlab.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyjf8nlab.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpehvm72wn.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpehvm72wn.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmwio1aqx.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmwio1aqx.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdi49mz1f.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdi49mz1f.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.sum(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7w1c2m7c.lua:18:\
    \ attempt to call field 'sum' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7w1c2m7c.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfoqeb4g8.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfoqeb4g8.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkoexwr8m.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkoexwr8m.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptlxulh80.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptlxulh80.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm1snh429.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm1snh429.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3rhsnfpu.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3rhsnfpu.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb5phl7ab.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpb5phl7ab.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkj10qyig.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkj10qyig.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6bdxztbd.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6bdxztbd.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvu_fsfrt.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvu_fsfrt.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdkvw_6d.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzdkvw_6d.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return #boredoms\
    \ == #S\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpppcfuuom.lua:24:\
    \ expected: 0, actual: false\\nstack traceback:\\n\\t/tmp/tmpppcfuuom.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps8s6edgf.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps8s6edgf.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpelgysono.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpelgysono.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpue5wcm46.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpue5wcm46.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0wm2yn7c.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0wm2yn7c.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpprrc2tdf.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpprrc2tdf.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt0td68z6.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt0td68z6.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkop9zpy1.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkop9zpy1.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg07l94mh.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg07l94mh.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5jk0z8v8.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5jk0z8v8.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1jtw1ok.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj1jtw1ok.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoltkcda1.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpoltkcda1.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzo_y32x9.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzo_y32x9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6y6c4lio.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6y6c4lio.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_l4kgtjk.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_l4kgtjk.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpulmqkj_6.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpulmqkj_6.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3imp8lry.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3imp8lry.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6c8e24ys.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6c8e24ys.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr4jdrxvt.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpr4jdrxvt.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2lufzjym.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2lufzjym.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa7eu1rvb.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa7eu1rvb.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc294p0f8.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc294p0f8.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp87a39z4e.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp87a39z4e.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.?!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3mrx7isu.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3mrx7isu.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyl8iasqg.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyl8iasqg.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0j3tntr4.lua:18:\
    \ attempt to call field 'count' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0j3tntr4.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2hh9ew9z.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2hh9ew9z.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyw0fy2b7.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyw0fy2b7.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0aip89bt.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0aip89bt.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy1peyw6j.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy1peyw6j.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6bgkcgl5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6bgkcgl5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%w%.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjwwfo3xe.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjwwfo3xe.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpehvevbpn.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpehvevbpn.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfh1mpbo.lua:18:\
    \ attempt to call field 'count' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyfh1mpbo.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp3_0w9bg.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp3_0w9bg.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp86shm9q4.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp86shm9q4.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1vhxyyas.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1vhxyyas.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphd2vuxam.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphd2vuxam.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3zapfkev.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3zapfkev.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp90dp18pm.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp90dp18pm.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp096zqr07.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp096zqr07.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqsy2_rep.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqsy2_rep.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%w%.!?]+\") do\n        if w == \"I\" then\n      \
    \      boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_04nz8_u.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_04nz8_u.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn399jzj5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpn399jzj5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3b920ooa.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3b920ooa.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl058t001.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl058t001.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5zsdlv7.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq5zsdlv7.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn352wm0j.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpn352wm0j.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_irg1msg.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_irg1msg.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx7n1m0cq.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx7n1m0cq.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyh9jhq4r.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyh9jhq4r.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbujq65ez.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbujq65ez.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpby44xqrj.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpby44xqrj.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp34jvqvu3.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp34jvqvu3.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc8qs8rp1.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc8qs8rp1.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwz9r10_k.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwz9r10_k.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_d52m8sr.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_d52m8sr.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1f200op4.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1f200op4.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14n9olur.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp14n9olur.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuuicecqy.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuuicecqy.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5p_xi110.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5p_xi110.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd1v3nflk.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpd1v3nflk.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9s5ka3lo.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9s5ka3lo.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxaqu1zzy.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxaqu1zzy.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppkhgi3aq.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppkhgi3aq.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99t2blj_.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp99t2blj_.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp2fev6z5.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp2fev6z5.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4knyviof.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4knyviof.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S%.]\") do\n        if w == \"I\" then\n          \
    \  boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiwzs8fjy.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpiwzs8fjy.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphxhzimg4.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphxhzimg4.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppapqy6lh.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppapqy6lh.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%%.!]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt86an1hz.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt86an1hz.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfagb7h4x.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfagb7h4x.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3gvhx52_.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3gvhx52_.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxh2qvmez.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxh2qvmez.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpco69s_cj.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpco69s_cj.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpya_oi9ts.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpya_oi9ts.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = {}\n\
    \    for w in S:gmatch(\"[^.!?]+\") do\n        if w == \"I\" then\n         \
    \   table.insert(boredoms, 1)\n        else\n            table.insert(boredoms,\
    \ 0)\n        end\n    end\n    return #boredoms == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpha3kl60j.lua:24:\
    \ expected: 0, actual: true\\nstack traceback:\\n\\t/tmp/tmpha3kl60j.lua:24: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoyw8_21x.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpoyw8_21x.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1t_9dwru.lua:18:\
    \ attempt to call field 'count' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1t_9dwru.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnse2hz7t.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnse2hz7t.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp84w8o9br.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp84w8o9br.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2v66psa8.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2v66psa8.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1z8c31o4.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1z8c31o4.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu5ez900b.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu5ez900b.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtq4ofnd.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdtq4ofnd.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[^.!?]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2sv6e4fp.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2sv6e4fp.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4_128_cn.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4_128_cn.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp47xgnqay.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp47xgnqay.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_fvwrnsx.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_fvwrnsx.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpna5do6vl.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpna5do6vl.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp52i86j8i.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp52i86j8i.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkds9u_6l.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkds9u_6l.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1q7lxm7x.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1q7lxm7x.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8nswrem4.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8nswrem4.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0p8rt_58.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0p8rt_58.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return #boredoms\
    \ == #S\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjx5u8yzh.lua:24:\
    \ expected: 0, actual: false\\nstack traceback:\\n\\t/tmp/tmpjx5u8yzh.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35pei39y.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp35pei39y.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw0xj3oo0.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw0xj3oo0.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv5h6opty.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpv5h6opty.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptaxvznz3.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptaxvznz3.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnvzm2db_.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnvzm2db_.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[^.!?]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplx7fykkc.lua:24:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmplx7fykkc.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx9drmgpv.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx9drmgpv.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzsm8vax6.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzsm8vax6.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfgeo48ve.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfgeo48ve.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc5othosr.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc5othosr.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoe2eto3s.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpoe2eto3s.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ma2vdel.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5ma2vdel.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1e0sij23.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1e0sij23.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[%S]+\") do\n        if w == \"I\" then\n           \
    \ boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppsjktcmq.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppsjktcmq.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfik0cwyb.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfik0cwyb.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2tmt4l6.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpb2tmt4l6.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7n0aypie.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7n0aypie.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq_n449bi.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq_n449bi.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppmwzwxoc.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppmwzwxoc.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg9_qm0d0.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg9_qm0d0.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_7u52ve.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpi_7u52ve.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
