name: HumanEval_24_largest_divisor
language: lua
results:
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfs3bccyr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfs3bccyr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1\n  -- The largest divisor is n+2 if n is evenly divisible\
    \ by all numbers from 1 to n+2\n  -- The largest divisor is n+3 if n is evenly\
    \ divisible by all numbers from 1 to n+3\n  -- The largest divisor is n+4 if n\
    \ is evenly divisible by all numbers from 1 to n+4\n  -- The largest divisor is\
    \ n+5 if n is evenly divisible by all numbers from 1 to n+5\n  -- The largest\
    \ divisor is n+6 if n is evenly divisible by all numbers from 1 to n+6\n  -- The\
    \ largest divisor is n+7 if n is evenly divisible by all numbers from 1 to n+7\n\
    \  -- The largest divisor is n+8 if n is evenly divisible by all numbers from\
    \ 1 to n+8\n  -- The largest divisor is n+9 if n is evenly divisible by all numbers\
    \ from 1 to n+9\n  -- The largest divisor is n+10 if n is evenly divisible by\
    \ all numbers from 1 to n+10\n  -- The largest divisor is n+11 if n is evenly\
    \ divisible by all numbers from 1 to n+11\n  -- The largest divisor is n+12 if\
    \ n is evenly divisible by all numbers from 1 to n+12\n  -- The largest divisor\
    \ is n+13 if n is evenly divisible by all numbers from 1 to n+13\n  -- The largest\
    \ divisor is n+14 if n is evenly divisible by all numbers from 1 to n+14\n  --\
    \ The largest divisor is n+15 if n is evenly divisible by all numbers from 1 to\
    \ n+15\n  -- The largest divisor is n+16 if n is evenly divisible by all numbers\
    \ from 1 to n+16\n  -- The largest divisor is n+17 if n is evenly divisible by\
    \ all numbers from 1 to n+17\n  -- The largest divisor is n+18 if n is evenly\
    \ divisible by all numbers from 1 to n+18\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7d1rbkpa.lua:37: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98zw92n4.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp98zw92n4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp731y9syb.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp731y9syb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5i82j_w.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpw5i82j_w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawq9wnm0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpawq9wnm0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7zi9byn.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpd7zi9byn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            if\
    \ divisor > max_divisor then\n                max_divisor = divisor\n        \
    \        max_divisor_value = i\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9m6oh36.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu9m6oh36.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gnvdlk1.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9gnvdlk1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n            else\n                max_divisor_remainder = i\n         \
    \   end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e8dfm9f.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp1e8dfm9f.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = math.floor(n/i)\n    if divisor > max_divisor then\n    \
    \  max_divisor = divisor\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0q881t5.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_0q881t5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqo4yy993.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqo4yy993.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy0ai4vz.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppy0ai4vz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx3cpy5m_.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            divisor = i\n            if max_divisor <\
    \ divisor then\n                max_divisor = divisor\n            end\n     \
    \   end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocoruuei.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpocoruuei.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 0\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor, max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaygd6pe.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgaygd6pe.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b4i0qe_.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6b4i0qe_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            if max_divisor < divisor then\n\
    \                max_divisor = divisor\n            end\n        end\n       \
    \ divisor = divisor + 1\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw1hi27n.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkw1hi27n.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xy6ne9q.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5xy6ne9q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wmbwv75.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1wmbwv75.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxt23_jz.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpqxt23_jz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jpcdsvr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0jpcdsvr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local divisor_p\
    \ = i / max_divisor_p\n            local divisor_pp = i / max_divisor_pp\n   \
    \         if divisor_pp * divisor_p == i then\n                max_divisor_p =\
    \ divisor_p\n                max_divisor_pp = divisor_pp\n            else\n \
    \               max_divisor_p = divisor_p\n                max_divisor_pp = divisor_pp\n\
    \            end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp060dhrrf.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp060dhrrf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnuo1mlk.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvnuo1mlk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n-1 if n is evenly divisible\
    \ by all numbers from 1 to n-1.\n  -- The largest divisor is n if n is evenly\
    \ divisible by all numbers from 1 to n.\n  -- The largest divisor is n+1 if n\
    \ is evenly divisible by all numbers from 1 to n+1.\n  -- The largest divisor\
    \ is n-1 if n is evenly divisible by all numbers from 1 to n-1.\n  -- The largest\
    \ divisor is n if n is evenly divisible by all numbers from 1 to n.\n  -- The\
    \ largest divisor is n+1 if n is evenly divisible by all numbers from 1 to n+1.\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n-1 if n is evenly divisible\
    \ by all numbers from 1 to n-1.\n  -- The largest divisor is n if n is evenly\
    \ divisible by all numbers from 1 to n.\n  -- The largest divisor is n+1 if n\
    \ is evenly divisible by all numbers from 1 to n+1.\n  -- The largest divisor\
    \ is n-1 if n is evenly divisible by all numbers from 1 to n-1.\n  -- The largest\
    \ divisor is n if n is evenly divisible by all numbers from 1 to n.\n  -- The\
    \ largest divisor is n+1 if n is evenly divisible by all numbers from 1 to n+1.\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n-1 if n is evenly di\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw091xwvn.lua:38: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2juupl26.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2juupl26.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijw3s90z.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpijw3s90z.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a2yi9x8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp5a2yi9x8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyxveh0_.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppyxveh0_.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh84fe6c.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbh84fe6c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq04d8_1.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmq04d8_1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = math.floor(n/i)\n\
    \      local divisor_pp = math.floor(n/math.pow(i,2))\n      if divisor_pp > max_divisor_pp\
    \ then\n        max_divisor_p = divisor_p\n        max_divisor_pp = divisor_pp\n\
    \      end\n      if divisor_p > max_divisor then\n        max_divisor = divisor_p\n\
    \      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    local max_divisor_ppp = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor_p = math.floor(n/i)\n            local divisor_pp\
    \ = math.floor(n/i*i)\n            local divisor_ppp = math.floor(n/i*i*i)\n \
    \           if divisor_ppp > max_divisor_ppp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_ppp\
    \ = divisor_ppp\n            elseif divisor_ppp > max_divisor_ppp then\n     \
    \           max_divisor_p = divisor_p\n                max_divisor_ppp = divisor_ppp\n\
    \            elseif divisor_pp > max_divisor_pp then\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_ppp = divisor_ppp\n            elseif\
    \ divisor_pp > max_divisor_pp then\n                max_divisor_p = divisor_p\n\
    \                max_divisor_ppp = divisor_ppp\n            elseif divisor_pp\
    \ > max_divisor_pp then\n                max_divisor_p = divisor_p\n         \
    \       max_divisor_ppp = divisor_ppp\n            elseif divisor_pp > max_divisor_pp\
    \ then\n                max_divisor_p = divisor_p\n                max_divisor_ppp\
    \ = divisor_ppp\n            elseif divisor_pp > max_divisor_pp then\n       \
    \         max_divisor_p = divisor_p\n                max_divisor_ppp = divisor_ppp\n\
    \            elseif divisor_pp > max_divisor_pp then\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_ppp = divisor_ppp\n            elseif\
    \ divisor_pp > max_divisor_pp then\n                max_divisor_p = divisor_p\n\
    \                max_divisor_ppp = divisor_ppp\n            elseif divisor_pp\
    \ > max_divisor_pp then\n                max_divisor_p = divisor_p\n         \
    \       max_divisor_ppp = divisor_ppp\n            elseif divisor_pp > max_divisor_pp\
    \ then\n                max_divisor_p = divisor_p\n                max_divisor_ppp\
    \ = divisor_ppp\n            elseif divisor_pp > max_divisor_pp then\n       \
    \         max_divisor_p = divisor_p\n                max_divisor_ppp = divisor_ppp\n\
    \            elseif divisor_pp > max_divisor_pp then\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_ppp = divisor_ppp\n            elseif\
    \ divisor_pp > max_divisor_pp then\n                max_divisor_p = divisor_p\n\
    \                max_divisor_ppp = divisor_ppp\n            elseif divisor_pp\
    \ > max_divisor_pp then\n                max_divisor_p = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxvlri0fg.lua:59: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt2a2qmc.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplt2a2qmc.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hfw6u12.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7hfw6u12.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We want to find the largest divisor of n that is smaller than n\n  -- >>>\
    \ largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(10)\n  -- 5\n  -- >>>\
    \ largest_divisor(100)\n  -- 5\n  -- >>> largest_divisor(1000)\n  -- 5\n  -- >>>\
    \ largest_divisor(10000)\n  -- 5\n  -- >>> largest_divisor(100000)\n  -- 5\n \
    \ -- >>> largest_divisor(1000000)\n  -- 5\n  -- >>> largest_divisor(10000000)\n\
    \  -- 5\n  -- >>> largest_divisor(100000000)\n  -- 5\n  -- >>> largest_divisor(1000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(10000000000)\n  -- 5\n  -- >>> largest_divisor(100000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(1000000000000)\n  -- 5\n  -- >>> largest_divisor(10000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(100000000000000)\n  -- 5\n  -- >>> largest_divisor(1000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(10000000000000000)\n  -- 5\n  -- >>> largest_divisor(100000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(1000000000000000000)\n  -- 5\n  -- >>> largest_divisor(10000000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(100000000000000000000)\n  -- 5\n  -- >>> largest_divisor(1000000000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(10000000000000000000000)\n  -- 5\n  -- >>> largest_divisor(100000000000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(1000000000000000000000000)\n  -- 5\n  -- >>>\
    \ largest_divisor(10000000000000000000000000)\n  -- 5\n  -- >>> largest_divisor(100000000000000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(1000000000000000000000000000)\n  -- 5\n  --\
    \ >>> largest_divisor(10000000000000000000000000000)\n  -- 5\n  -- >>> largest_divisor(100000000000000000000000000000)\n\
    \  -- 5\n  -- >>> largest_divisor(1000000000000000000000000000000)\n  -- 5\n \
    \ -- >>> largest_divisor(10000000000000000000000000000000)\n  -- 5\n  -- >>> largest_divisor(100000000000000000000000000000000)\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1hjn809o.lua:83: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok7j715r.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpok7j715r.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtsjl19w.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmprtsjl19w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpged44h4z.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpged44h4z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp47ples.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzp47ples.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprjbq60db.lua:68: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            elseif max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            end\n \
    \       end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h_16bgo.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_h_16bgo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oouum73.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0oouum73.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_index\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_value =\
    \ i\n      if divisor_value > max_divisor then\n        max_divisor = divisor_value\n\
    \        max_divisor_value_index = i\n      end\n    end\n  end\n  return max_divisor_value_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpoq_got.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdpoq_got.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_unetj2.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf_unetj2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use an iterative approach to find the largest divisor of n evenly\n \
    \ -- smaller than n.\n  -- We start by finding the largest divisor of n evenly\
    \ smaller than n.\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\n  -- a divisor of n evenly smaller than n.\n  -- The largest\
    \ divisor of n evenly smaller than n is given by n-1/(n-1)\n  -- (where n is given\
    \ by n-1/(n-1)).\n  -- We then divide n by that divisor and continue this process\
    \ until we have\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjvhqjktm.lua:48: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3vpuvmv.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpr3vpuvmv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8eu1byod.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8eu1byod.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchz_8dxy.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpchz_8dxy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is\
    \ n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The\
    \ smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor\
    \ is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  --\
    \ The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is\
    \ n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The\
    \ smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor\
    \ is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  --\
    \ The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is\
    \ n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The\
    \ smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor\
    \ is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  --\
    \ The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is\
    \ n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The\
    \ smallest divisor is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor\
    \ is 1\n  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  --\
    \ The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest divisor is\
    \ n-1\n  -- The smallest divisor is 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6a45ezqs.lua:70: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnnv3322.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnnnv3322.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s1759m4.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3s1759m4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = i\n            else\n                if max_div_n\
    \ * i > n then\n                    max_div = i\n                    max_div_n\
    \ = i\n                end\n            end\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb6pw9c3.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkb6pw9c3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6x2slas.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi6x2slas.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pstmb17.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6pstmb17.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      if max_divisor < i then\n        max_divisor = i\n\
    \      end\n      if max_divisor_value < n / i then\n        max_divisor_value\
    \ = n / i\n      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdp2ubvvq.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdp2ubvvq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzb8o7kov.lua:68: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol6agvfq.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpol6agvfq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_nhvjr9.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6_nhvjr9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    local divisor = math.floor(n/i)\n    if divisor > max_divisor\
    \ then\n      max_divisor = divisor\n      max_divisor_p = i\n      max_divisor_n\
    \ = divisor\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_po6gj0f.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_po6gj0f.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7_fo8szq.lua:68: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqpoj3bo.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgqpoj3bo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n      end\n      if divisor > max_divisor_value\
    \ then\n        max_divisor_value = divisor\n      end\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl01cfy5.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpsl01cfy5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local p = i\n      while n % p == 0 do\n        p = p\
    \ * 2\n      end\n      if p > max_divisor then\n        max_divisor = p\n   \
    \     max_divisor_p = i\n      end\n    end\n  end\n  return max_divisor_p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2_e1o5j.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpb2_e1o5j.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h0bfjnk.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp6h0bfjnk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaxhkpvd.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplaxhkpvd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrtd5ow2.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqrtd5ow2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpvrphtp.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpjpvrphtp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu9uqpvh.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbu9uqpvh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n      end\n      if divisor > max_divisor_value\
    \ then\n        max_divisor_value = divisor\n      end\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4zwkifd.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx4zwkifd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o8txwux.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4o8txwux.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6abzlqpp.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6abzlqpp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr44pwv73.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpr44pwv73.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      max_divisor = i\n      max_divisor_p\
    \ = math.floor(n / i)\n      max_divisor_n = math.floor(n / max_divisor)\n   \
    \ end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93s2j6kj.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp93s2j6kj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7a0ixch.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpc7a0ixch.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  else\n                max_divisor_value = max_divisor_value * i / n\n     \
    \       end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk6puxu7.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjk6puxu7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcobe6zds.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcobe6zds.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe87a73ia.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpe87a73ia.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div < i then\n          max_div = i\n        end\n      end\n \
    \     max_div_n = max_div_n * i\n    end\n  end\n  return max_div_n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf69yjj6.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpsf69yjj6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 0\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hpsi44b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp5hpsi44b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxmxr6_r.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgxmxr6_r.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4wwduio.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu4wwduio.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa5drp77p.lua:42: ')' expected (to close '(' at line 41) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            local div = i / n\n            if div > max_div\
    \ then\n                max_div = div\n                max_div_n = n\n       \
    \     end\n        end\n    end\n    return max_div_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zbrrrww.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2zbrrrww.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n+2 if n is evenly divisible\
    \ by all numbers from 1 to n+2.\n  -- The largest divisor is n+3 if n is evenly\
    \ divisible by all numbers from 1 to n+3.\n  -- The largest divisor is n+4 if\
    \ n is evenly divisible by all numbers from 1 to n+4.\n  -- The largest divisor\
    \ is n+5 if n is evenly divisible by all numbers from 1 to n+5.\n  -- The largest\
    \ divisor is n+6 if n is evenly divisible by all numbers from 1 to n+6.\n  --\
    \ The largest divisor is n+7 if n is evenly divisible by all numbers from 1 to\
    \ n+7.\n  -- The largest divisor is n+8 if n is evenly divisible by all numbers\
    \ from 1 to n+8.\n  -- The largest divisor is n+9 if n is evenly divisible by\
    \ all numbers from 1 to n+9.\n  -- The largest divisor is n+10 if n is evenly\
    \ divisible by all numbers from 1 to n+10.\n  -- The largest divisor is n+11 if\
    \ n is evenly divisible by all numbers from 1 to n+11.\n  -- The largest divisor\
    \ is n+12 if n is evenly divisible by all numbers from 1 to n+12.\n  -- The largest\
    \ divisor is n+13 if n is evenly divisible by all numbers from 1 to n+13.\n  --\
    \ The largest divisor is n+14 if n is evenly divisible by all numbers from 1 to\
    \ n+14.\n  -- The largest divisor is n+15 if n is evenly divisible by all numbers\
    \ from 1 to n+15.\n  -- The largest divisor is n+16 if n is evenly divisible by\
    \ all numbers from 1 to n+16.\n  -- The largest divisor is n+17 if n is evenly\
    \ divisible by all numbers from 1 to n+17.\n  -- The largest divisor is n+18 if\
    \ n is evenly divisible by all numbers from 1 to n+18.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp47e1hcgf.lua:36: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy8r_gw1.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxy8r_gw1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e8_a71d.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7e8_a71d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  local max_divisor = n - 1\n  -- The largest\
    \ divisor smaller than n is n\n  local max_divisor_less_than = math.floor(max_divisor)\n\
    \  -- The largest divisor smaller than n is n-1\n  local max_divisor_less_than_one\
    \ = math.floor(max_divisor_less_than)\n  -- The largest divisor smaller than n\
    \ is n-2\n  local max_divisor_less_than_three = math.floor(max_divisor_less_than_one)\n\
    \  -- The largest divisor smaller than n is n-3\n  local max_divisor_less_than_five\
    \ = math.floor(max_divisor_less_than_three)\n  -- The largest divisor smaller\
    \ than n is n-4\n  local max_divisor_less_than_seven = math.floor(max_divisor_less_than_five)\n\
    \  -- The largest divisor smaller than n is n-5\n  local max_divisor_less_than_ten\
    \ = math.floor(max_divisor_less_than_seven)\n  -- The largest divisor smaller\
    \ than n is n-6\n  local max_divisor_less_than_eleven = math.floor(max_divisor_less_than_ten)\n\
    \  -- The largest divisor smaller than n is n-7\n  local max_divisor_less_than_thirteen\
    \ = math.floor(max_divisor_less_than_eleven)\n  -- The largest divisor smaller\
    \ than n is n-8\n  local max_divisor_less_than_fourteen = math.floor(max_divisor_less_than_thirteen)\n\
    \  -- The largest divisor smaller than n is n-9\n  local max_divisor_less_than_fifteen\
    \ = math.floor(max_divisor_less_than_fourteen)\n  -- The largest divisor smaller\
    \ than n is n-10\n  local max_divisor_less_than_sixteen = math.floor(max_divisor_less_than_fifteen)\n\
    \  -- The largest divisor smaller than n is n-11\n  local max_divisor_less_than_seventeen\
    \ = math.floor(max_divisor_less_than_sixteen)\n  -- The largest divisor smaller\
    \ than n is n-12\n  local max_divisor_less_than_eighteen = math.floor(max_divisor_less_than_seventeen)\n\
    \  -- The largest divisor smaller than n is n-13\n  local max_divisor_less_than_nineteen\
    \ = math.floor(max_divisor_less_than_eighteen)\n  -- The largest divisor smaller\
    \ than n is n-14\n  local max_divisor_less_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkqfua8f4.lua:48: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = math.floor(n/i)\n\
    \      local divisor_pp = math.floor(n/i)\n      if divisor_pp > max_divisor_pp\
    \ then\n        max_divisor_p = divisor_p\n        max_divisor_pp = divisor_pp\n\
    \      end\n      if divisor_p > max_divisor then\n        max_divisor = divisor_p\n\
    \      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzcmaht8.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmppzcmaht8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local divisor_p = math.floor(n/i)\n \
    \           if divisor_p > max_divisor then\n                max_divisor = divisor_p\n\
    \                max_divisor_p = i\n            end\n        end\n    end\n  \
    \  return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94j212yt.lua:24:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp94j212yt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_myw0kc9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_myw0kc9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local p = i\n      while n % p == 0 do\n        p = p\
    \ * 2\n      end\n      if p > max_divisor then\n        max_divisor = p\n   \
    \     max_divisor_p = i\n      end\n    end\n  end\n  return max_divisor_p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp550rtsds.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp550rtsds.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  local max_divisor_pp = 1\n  local max_divisor_pn = 1\n  local max_divisor_ppp\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = math.floor(n/i)\n\
    \      local divisor_pp = math.floor(n/math.pow(i,2))\n      local divisor_pn\
    \ = math.floor(n/math.pow(i,3))\n      local divisor_ppp = math.floor(n/math.pow(i,4))\n\
    \      if divisor_ppp > max_divisor_ppp then\n        max_divisor_ppp = divisor_ppp\n\
    \      end\n      if divisor_pn > max_divisor_pn then\n        max_divisor_pn\
    \ = divisor_pn\n      end\n      if divisor_pp > max_divisor_pp then\n       \
    \ max_divisor_p = divisor_p\n      end\n      if divisor_pn > max_divisor_pn then\n\
    \        max_divisor_pn = divisor_pn\n      end\n      if divisor_pp > max_divisor_pp\
    \ then\n        max_divisor_pp = divisor_pp\n      end\n      if divisor_pn >\
    \ max_divisor_pn then\n        max_divisor_pn = divisor_pn\n      end\n      if\
    \ divisor_pp > max_divisor_pp then\n        max_divisor_pp = divisor_pp\n    \
    \  end\n      if divisor_pn > max_divisor_pn then\n        max_divisor_pn = divisor_pn\n\
    \      end\n      if divisor_pp > max_divisor_pp then\n        max_divisor_pp\
    \ = divisor_pp\n      end\n      if divisor_pn > max_divisor_pn then\n       \
    \ max_divisor_pn = divisor_pn\n      end\n      if divisor_pp > max_divisor_pp\
    \ then\n        max_divisor_pp = divisor_pp\n      end\n      if divisor_pn >\
    \ max_divisor_pn then\n        max_divisor_pn = divisor_pn\n      end\n      if\
    \ divisor_pp > max_divisor_pp then\n        max_divisor_pp = divisor_pp\n    \
    \  end\n      if divisor_pn > max_divisor_pn then\n        max_divisor_pn = divisor_pn\n\
    \      end\n      if divisor_pp > max_divisor_pp then\n        max_divisor_pp\
    \ = divisor_pp\n      end\n      if divisor_pn > max_divisor_pn then\n       \
    \ max_divisor_pn = divisor_pn\n      end\n      if divisor_pp > max_divisor_pp\
    \ then\n        max_divisor_pp = divisor_pp\n      end\n      if divisor_pn >\
    \ max_divisor_pn then\n        max_divisor_pn = divisor_pn\n      end\n      if\
    \ divisor_pp > max_divisor_pp then\n        max_divisor\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbkppgp34.lua:73: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  local max_divisor_remainder_pow2 = 0\n  local max_divisor_remainder_pow3\
    \ = 0\n  local max_divisor_remainder_pow4 = 0\n  local max_divisor_remainder_pow5\
    \ = 0\n  local max_divisor_remainder_pow6 = 0\n  local max_divisor_remainder_pow7\
    \ = 0\n  local max_divisor_remainder_pow8 = 0\n  local max_divisor_remainder_pow9\
    \ = 0\n  local max_divisor_remainder_pow10 = 0\n  local max_divisor_remainder_pow11\
    \ = 0\n  local max_divisor_remainder_pow12 = 0\n  local max_divisor_remainder_pow13\
    \ = 0\n  local max_divisor_remainder_pow14 = 0\n  local max_divisor_remainder_pow15\
    \ = 0\n  local max_divisor_remainder_pow16 = 0\n  local max_divisor_remainder_pow17\
    \ = 0\n  local max_divisor_remainder_pow18 = 0\n  local max_divisor_remainder_pow19\
    \ = 0\n  local max_divisor_remainder_pow20 = 0\n  local max_divisor_remainder_pow21\
    \ = 0\n  local max_divisor_remainder_pow22 = 0\n  local max_divisor_remainder_pow23\
    \ = 0\n  local max_divisor_remainder_pow24 = 0\n  local max_divisor_remainder_pow25\
    \ = 0\n  local max_divisor_remainder_pow26 = 0\n  local max_divisor_remainder_pow27\
    \ = 0\n  local max_divisor_remainder_pow28 = 0\n  local max_divisor_remainder_pow29\
    \ = 0\n  local max_divisor_remainder_pow30 = 0\n  local max_divisor_remainder_pow31\
    \ = 0\n  local max_divisor_remainder_pow32 = 0\n  local max_divisor_remainder_pow33\
    \ = 0\n  local max_divisor_remainder_pow34 = 0\n  local max_divisor_remainder_pow35\
    \ = 0\n  local max_divisor_remainder_pow36 = 0\n  local max_divisor_remainder_pow37\
    \ = 0\n  local max_divisor_remainder_pow38 = 0\n  local max_divisor_remainder_pow39\
    \ = 0\n  local max_divisor_remainder_pow40 = 0\n  local max_divisor_remainder_pow41\
    \ = 0\n  local max_divisor_remainder_pow42 = 0\n  local max_divisor_remainder_pow43\
    \ = 0\n  local max_divisor_remainder_pow44 = 0\n  local max_divisor_remainder_pow45\
    \ = 0\n  local max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe03vcs24.lua:64: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd643dy1c.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpd643dy1c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp232t03dt.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp232t03dt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 0 then\n    return 0\n  end\n  -- Recursive case\n\
    \  if n % 2 == 0 then\n    return largest_divisor(n / 2)\n  else\n    return largest_divisor(3\
    \ * n + 1) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5_hcqoa.lua:11:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpb5_hcqoa.lua:13: in function </tmp/tmpb5_hcqoa.lua:4>\n\
    \t(tail call): ?\n\t(tail call): ?\n\t/tmp/tmpb5_hcqoa.lua:13: in function </tmp/tmpb5_hcqoa.lua:4>\n\
    \t(tail call): ?\n\t(tail call): ?\n\t/tmp/tmpb5_hcqoa.lua:13: in function </tmp/tmpb5_hcqoa.lua:4>\n\
    \t(tail call): ?\n\t(tail call): ?\n\t...\n\nRan 1 tests in 0.415 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygaukkjr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpygaukkjr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6dhol25.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpi6dhol25.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71shd3fm.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp71shd3fm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_l0bvl9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpz_l0bvl9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr6ut4y5.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptr6ut4y5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sxeqvdo.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp0sxeqvdo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6dopimr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx6dopimr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            if\
    \ divisor > max_divisor then\n                max_divisor = divisor\n        \
    \        max_divisor_value = i\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk32agj7l.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk32agj7l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p8j1iur.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4p8j1iur.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2ealk_o.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpy2ealk_o.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = i\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyl_ho8r.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmyl_ho8r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1odwn7_.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpt1odwn7_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx_3xxpe.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyx_3xxpe.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is one less than the square root of n\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 0\n  -- >>> largest_divisor(21)\n\
    \  -- 1\n  -- >>> largest_divisor(22)\n  -- 2\n  -- >>> largest_divisor(23)\n\
    \  -- 3\n  -- >>> largest_divisor(24)\n  -- 4\n  -- >>> largest_divisor(25)\n\
    \  -- 5\n  -- >>> largest_divisor(26)\n  -- 6\n  -- >>> largest_divisor(27)\n\
    \  -- 7\n  -- >>> largest_divisor(28)\n  -- 8\n  -- >>> largest_divisor(29)\n\
    \  -- 9\n  -- >>> largest_divisor(30)\n  -- 10\n  -- >>> largest_divisor(31)\n\
    \  -- 11\n  -- >>> largest_divisor(32)\n  -- 12\n  -- >>> largest_divisor(33)\n\
    \  -- 13\n  -- >>> largest_divisor(34)\n  -- 14\n  -- >>> largest_divisor(35)\n\
    \  -- 15\n  -- >>> largest_divisor(36)\n  -- 16\n  -- >>> largest_divisor(37)\n\
    \  -- 17\n  -- >>> largest_divisor(38)\n  -- 18\n  -- >>> largest_divisor(39)\n\
    \  -- 19\n  -- >>> largest_divisor(40)\n  -- 20\n  -- >>> largest_divisor(41)\n\
    \  -- 21\n  -- >>> largest_divisor(42)\n  -- 22\n  -- >>> largest_divisor(43)\n\
    \  -- 23\n  -- >>> largest_divisor(44)\n  -- 24\n  -- >>> largest_divisor(45)\n\
    \  -- 25\n  -- >>> largest_divisor(46)\n  -- 26\n  -- >>> largest_divisor(47)\n\
    \  -- 27\n  -- >>> largest_divisor(48)\n  -- 28\n  -- >>> largest_divisor(49)\n\
    \  -- 29\n  -- >>> largest_divisor(50)\n  -- 30\n  -- >>> largest_divisor(51)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2j8m6fc2.lua:91: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa99g0nyt.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa99g0nyt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    local max_divisor_index\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            divisor =\
    \ i\n            if max_divisor < divisor then\n                max_divisor =\
    \ divisor\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwxyc3yt.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpwwxyc3yt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_value =\
    \ i\n      if divisor_value > max_divisor then\n        max_divisor = divisor_value\n\
    \        max_divisor_value = divisor_value\n        max_divisor_value_n = i\n\
    \      end\n    end\n  end\n  return max_divisor_value_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nss5pez.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2nss5pez.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = math.floor(n/i)\n    if divisor > max_divisor then\n    \
    \  max_divisor = divisor\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor * max_divisor_remainder\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpho05qvud.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpho05qvud.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_value =\
    \ i\n      local divisor_value_n = 1\n      while n % i == 0 do\n        n = n\
    \ / i\n        divisor_value = divisor_value*n\n        divisor_value_n = divisor_value_n+1\n\
    \      end\n      if divisor_value > max_divisor then\n        max_divisor = divisor_value\n\
    \        max_divisor_value = divisor_value_n\n      end\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k8uc9xr.lua:29:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3k8uc9xr.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25imbt78.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp25imbt78.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoybg8pd3.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpoybg8pd3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ap92v9f.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6ap92v9f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l19dagx.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4l19dagx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use \"n\" as the divisor and keep dividing by \"n\" until we get to 1.\n\
    \  -- If \"n\" divides evenly into 1, then \"n\" divides evenly into \"n\".\n\
    \  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into \"n\"\
    .\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into \"\
    n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"n\" divides evenly into \"n\", then \"n\" divides evenly into\
    \ \"n\".\n  -- If \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3b99p5je.lua:36: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i15hjif.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp0i15hjif.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j4g21y6.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0j4g21y6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_value = n\n      end\n\
    \    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1pcacj4.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu1pcacj4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbseug1un.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpbseug1un.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use an auxiliary table to store the divisors\n  local divisors = {}\n\
    \  -- We start from 2 to avoid the case where n is divisible by 2\n  for i = 2,\
    \ n do\n    -- If the current number is divisible by any number in the table\n\
    \    -- we add it to the table\n    if n % i == 0 then\n      table.insert(divisors,\
    \ i)\n    end\n  end\n  -- We return the largest number in the table\n  return\
    \ table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhusv7ah.lua:16:\
    \ attempt to call field 'max' (a nil value)\nstack traceback:\n\t/tmp/tmpwhusv7ah.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div_n\
    \ * i > n then\n                    max_div = i\n                    max_div_n\
    \ = n\n                end\n            end\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyorl_o8.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgyorl_o8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use an auxiliary table to store the divisors we encounter\n  local divisors\
    \ = {}\n  -- We start with the largest divisor and decrement it until we find\
    \ one that divides n evenly\n  -- or we reach the smallest divisor larger than\
    \ n\n  local d = n\n  while d > 1 do\n    -- We only consider divisors up to sqrt(n)\n\
    \    if d > math.ceil(n/d) then\n      -- We have found a divisor that divides\
    \ n evenly\n      -- We store it for later use\n      divisors[#divisors+1] =\
    \ d\n      -- We decrement the divisor until it divides n evenly\n      d = d*d\n\
    \    else\n      -- We have found a divisor that does not divide n evenly\n  \
    \    -- We decrement the divisor until it divides n evenly\n      d = d//d\n \
    \   end\n  end\n  -- We return the largest divisor smaller than n\n  return divisors[#divisors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmh729siv.lua:21: unexpected symbol near '/'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73bg7xqf.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp73bg7xqf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32xij_kj.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp32xij_kj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmkt6_sh.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcmkt6_sh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2c98gl0.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo2c98gl0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jwhyzbq.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8jwhyzbq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m2nc3c7.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2m2nc3c7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_o8_nb.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmprs_o8_nb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  local max_div_d = 1\n  for d\
    \ = 2, n do\n    if n % d == 0 then\n      if max_div_n == nil then\n        max_div_n\
    \ = d\n      else\n        if max_div_d > d then\n          max_div_d = d\n  \
    \      end\n      end\n    end\n  end\n  if max_div_d > n then\n    max_div_n\
    \ = n\n  end\n  return max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqx7qd8q.lua:30:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpqqx7qd8q.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gn9is36.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8gn9is36.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) -- Find largest divisor of n\n    local max_div\
    \ = max_div + 1 -- Make it a positive number\n    local max_div = max_div * 2\
    \ -- Make it a positive number\n    local max_div = max_div - 1 -- Make it a positive\
    \ number\n    local max_div = max_div + 1 -- Make it a positive number\n    local\
    \ max_div = max_div * 2 -- Make it a positive number\n    local max_div = max_div\
    \ - 1 -- Make it a positive number\n    local max_div = max_div + 1 -- Make it\
    \ a positive number\n    local max_div = max_div * 2 -- Make it a positive number\n\
    \    local max_div = max_div - 1 -- Make it a positive number\n    local max_div\
    \ = max_div + 1 -- Make it a positive number\n    local max_div = max_div * 2\
    \ -- Make it a positive number\n    local max_div = max_div - 1 -- Make it a positive\
    \ number\n    local max_div = max_div + 1 -- Make it a positive number\n    local\
    \ max_div = max_div * 2 -- Make it a positive number\n    local max_div = max_div\
    \ - 1 -- Make it a positive number\n    local max_div = max_div + 1 -- Make it\
    \ a positive number\n    local max_div = max_div * 2 -- Make it a positive number\n\
    \    local max_div = max_div - 1 -- Make it a positive number\n    local max_div\
    \ = max_div + 1 -- Make it a positive number\n    local max_div = max_div * 2\
    \ -- Make it a positive number\n    local max_div = max_div - 1 -- Make it a positive\
    \ number\n    local max_div = max_div + 1 -- Make it a positive number\n    local\
    \ max_div = max_div * 2 -- Make it a positive number\n    local max_div = max_div\
    \ - 1 -- Make it a positive number\n    local max_div = max_div + 1 -- Make it\
    \ a positive number\n    local max_div = max_div * 2 -- Make it a positive number\n\
    \    local max_div = max_div - 1 -- Make it a positive number\n    local max_div\
    \ = max_div + 1 -- Make it a positive number\n    local max_div = max_div * 2\
    \ -- Make it a positive number\n    local max_div = max_div - 1 -- Make it a positive\
    \ number\n    local max_div = max_div + 1 -- Make it a positive \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1whba5ac.lua:48: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 1, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div_n > i then\n\
    \                max_div = i\n                max_div_n = i\n            else\n\
    \                max_div_n = max_div_n * i\n            end\n        end\n   \
    \ end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vwkbl7g.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp6vwkbl7g.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zxzqi9c.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp7zxzqi9c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor0_egys.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpor0_egys.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is even.\n  -- We start at n-1 and\
    \ work our way down.\n  -- The largest divisor is n-1 because n is even.\n  --\
    \ We start at n-1 and work our way down.\n  -- The largest divisor is n-1 because\
    \ n is even.\n  -- We start at n-1 and work our way down.\n  -- The largest divisor\
    \ is n-1 because n is even.\n  -- We start at n-1 and work our way down.\n  --\
    \ The largest divisor is n-1 because n is even.\n  -- We start at n-1 and work\
    \ our way down.\n  -- The largest divisor is n-1 because n is even.\n  -- We start\
    \ at n-1 and work our way down.\n  -- The largest divisor is n-1 because n is\
    \ even.\n  -- We start at n-1 and work our way down.\n  -- The largest divisor\
    \ is n-1 because n is even.\n  -- We start at n-1 and work our way down.\n  --\
    \ The largest divisor is n-1 because n is even.\n  -- We start at n-1 and work\
    \ our way down.\n  -- The largest divisor is n-1 because n is even.\n  -- We start\
    \ at n-1 and work our way down.\n  -- The largest divisor is n-1 because n is\
    \ even.\n  -- We start at n-1 and work our way down.\n  -- The largest divisor\
    \ is n-1 because n is even.\n  -- We start at n-1 and work our way down.\n  --\
    \ The largest divisor is n-1 because n is even.\n  -- We start at n-1 and work\
    \ our way down.\n  -- The largest divisor is n-1 because n is even.\n  -- We start\
    \ at n-1 and work our way down.\n  -- The largest divisor is n-1 because n is\
    \ even.\n  -- We start at n-1 and work our way down.\n  -- The largest divisor\
    \ is n-1 because n is even.\n  -- We start at n-1 and work our way down.\n  --\
    \ The largest divisor is n-1 because n is even.\n  -- We start at n-1 and work\
    \ our way down.\n  -- The largest divisor is n-1 because n is even.\n  -- We start\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi00u7vnc.lua:52: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxmfpjir.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcxmfpjir.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      if max_divisor < i then\n        max_divisor = i\n\
    \        max_divisor_value = n\n      end\n    end\n  end\n  return max_divisor_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l2ltanz.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0l2ltanz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div_n < i then\n\
    \                max_div = i\n                max_div_n = i\n            else\n\
    \                max_div_n = i\n            end\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4z58ljdr.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4z58ljdr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is always even\n  local divisor = 2\n  -- The largest\
    \ divisor smaller than n is always even\n  local smaller_divisor = 2\n  -- The\
    \ largest divisor smaller than n is always even\n  local smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n  -- The largest divisor smaller than n is always even\n  local smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_smaller_divisor\
    \ = 2\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6i1wjlat.lua:49: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpio5asyfp.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that divides n evenly is n-1\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 1\n  -- >>> largest_divisor(21)\n\
    \  -- 2\n  -- >>> largest_divisor(22)\n  -- 3\n  -- >>> largest_divisor(23)\n\
    \  -- 4\n  -- >>> largest_divisor(24)\n  -- 5\n  -- >>> largest_divisor(25)\n\
    \  -- 6\n  -- >>> largest_divisor(26)\n  -- 7\n  -- >>> largest_divisor(27)\n\
    \  -- 8\n  -- >>> largest_divisor(28)\n  -- 9\n  -- >>> largest_divisor(29)\n\
    \  -- 10\n  -- >>> largest_divisor(30)\n  -- 11\n  -- >>> largest_divisor(31)\n\
    \  -- 12\n  -- >>> largest_divisor(32)\n  -- 13\n  -- >>> largest_divisor(33)\n\
    \  -- 14\n  -- >>> largest_divisor(34)\n  -- 15\n  -- >>> largest_divisor(35)\n\
    \  -- 16\n  -- >>> largest_divisor(36)\n  -- 17\n  -- >>> largest_divisor(37)\n\
    \  -- 18\n  -- >>> largest_divisor(38)\n  -- 19\n  -- >>> largest_divisor(39)\n\
    \  -- 20\n  -- >>> largest_divisor(40)\n  -- 21\n  -- >>> largest_divisor(41)\n\
    \  -- 22\n  -- >>> largest_divisor(42)\n  -- 23\n  -- >>> largest_divisor(43)\n\
    \  -- 24\n  -- >>> largest_divisor(44)\n  -- 25\n  -- >>> largest_divisor(45)\n\
    \  -- 26\n  -- >>> largest_divisor(46)\n  -- 27\n  -- >>> largest_divisor(47)\n\
    \  -- 28\n  -- >>> largest_divisor(48)\n  -- 29\n  -- >>> largest_divisor(49)\n\
    \  -- 30\n  -- >>> largest_divisor(50)\n  -- 31\n  -- >>> largest_divisor(\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpctjr230r.lua:90: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0l3uhj7m.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0l3uhj7m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c6lhw7o.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4c6lhw7o.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/5\n  --\
    \ The smallest divisor is n/5\n  -- The largest divisor is n/7\n  -- The smallest\
    \ divisor is n/7\n  -- The largest divisor is n/11\n  -- The smallest divisor\
    \ is n/11\n  -- The largest divisor is n/13\n  -- The smallest divisor is n/13\n\
    \  -- The largest divisor is n/17\n  -- The smallest divisor is n/17\n  -- The\
    \ largest divisor is n/19\n  -- The smallest divisor is n/19\n  -- The largest\
    \ divisor is n/23\n  -- The smallest divisor is n/23\n  -- The largest divisor\
    \ is n/29\n  -- The smallest divisor is n/29\n  -- The largest divisor is n/31\n\
    \  -- The smallest divisor is n/31\n  -- The largest divisor is n/37\n  -- The\
    \ smallest divisor is n/37\n  -- The largest divisor is n/41\n  -- The smallest\
    \ divisor is n/41\n  -- The largest divisor is n/43\n  -- The smallest divisor\
    \ is n/43\n  -- The largest divisor is n/47\n  -- The smallest divisor is n/47\n\
    \  -- The largest divisor is n/53\n  -- The smallest divisor is n/53\n  -- The\
    \ largest divisor is n/59\n  -- The smallest divisor is n/59\n  -- The largest\
    \ divisor is n/61\n  -- The smallest divisor is n/61\n  -- The largest divisor\
    \ is n/67\n  -- The smallest divisor is n/67\n  -- The largest divisor is n/71\n\
    \  -- The smallest divisor is n/71\n  -- The largest divisor is n/73\n  -- The\
    \ smallest divisor is n/73\n  -- The largest divisor is n/79\n  -- The smallest\
    \ divisor is n/79\n  -- The largest divisor is n/83\n  -- The smallest divisor\
    \ is n/83\n  -- The largest divisor is n/89\n  -- The smallest divisor is n/89\n\
    \  -- The largest divisor is n/97\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3w20ie7j.lua:68: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24a88qlx.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp24a88qlx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhqi8avv.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpmhqi8avv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by finding all the divisors of n\n  local divisors = {}\n  for\
    \ i = 1, n do\n    if n % i == 0 then\n      table.insert(divisors, i)\n    end\n\
    \  end\n  -- Now we find the largest one\n  local max_divisor = divisors[1]\n\
    \  for _, divisor in ipairs(divisors) do\n    if divisor > max_divisor then\n\
    \      max_divisor = divisor\n    end\n  end\n  return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9avvj92v.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9avvj92v.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliue3mdj.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpliue3mdj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that is smaller than n\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(17)\n  -- 5\n  -- >>> largest_divisor(18)\n\
    \  -- 5\n  -- >>> largest_divisor(19)\n  -- 5\n  -- >>> largest_divisor(20)\n\
    \  -- 5\n  -- >>> largest_divisor(21)\n  -- 5\n  -- >>> largest_divisor(22)\n\
    \  -- 5\n  -- >>> largest_divisor(23)\n  -- 5\n  -- >>> largest_divisor(24)\n\
    \  -- 5\n  -- >>> largest_divisor(25)\n  -- 5\n  -- >>> largest_divisor(26)\n\
    \  -- 5\n  -- >>> largest_divisor(27)\n  -- 5\n  -- >>> largest_divisor(28)\n\
    \  -- 5\n  -- >>> largest_divisor(29)\n  -- 5\n  -- >>> largest_divisor(30)\n\
    \  -- 5\n  -- >>> largest_divisor(31)\n  -- 5\n  -- >>> largest_divisor(32)\n\
    \  -- 5\n  -- >>> largest_divisor(33)\n  -- 5\n  -- >>> largest_divisor(34)\n\
    \  -- 5\n  -- >>> largest_divisor(35)\n  -- 5\n  -- >>> largest_divisor(36)\n\
    \  -- 5\n  -- >>> largest_divisor(37)\n  -- 5\n  -- >>> largest_divisor(38)\n\
    \  -- 5\n  -- >>> largest_divisor(39)\n  -- 5\n  -- >>> largest_divisor(40)\n\
    \  -- 5\n  -- >>> largest_divisor(41)\n  -- 5\n  -- >>> largest_divisor(42)\n\
    \  -- 5\n  -- >>> largest_divisor(43)\n  -- 5\n  -- >>> largest_divisor(44)\n\
    \  -- 5\n  -- >>> largest_divisor(45)\n  -- 5\n  -- >>> largest_divisor(46)\n\
    \  -- 5\n  -- >>> largest_divisor(47)\n  -- 5\n  -- >>> largest_divisor(48)\n\
    \  -- 5\n  -- >>> largest_divisor(49)\n  -- 5\n  -- >>> largest_divisor(50)\n\
    \  -- 5\n  -- >>> largest_divisor(51)\n  -- 5\n  -- >>> largest_divisor(52)\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeaqaip1k.lua:91: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case: n is even\n  if n <= 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphxu8ybv3.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n-1\n  if n % 2 == 1 then\n    return n-1\n  end\n \
    \ -- If n is prime, return n\n  if prime_check(n) then\n    return n\n  end\n\
    \  -- If n is divisible by 2, return n/2\n  if n % 2 == 0 then\n    return n/2\n\
    \  end\n  -- If n is divisible by 3, return n-1\n  if n % 3 == 0 then\n    return\
    \ n-1\n  end\n  -- If n is divisible by 5, return n/2\n  if n % 5 == 0 then\n\
    \    return n/2\n  end\n  -- If n is divisible by 7, return n-1\n  if n % 7 ==\
    \ 0 then\n    return n-1\n  end\n  -- If n is divisible by 11, return n/2\n  if\
    \ n % 11 == 0 then\n    return n/2\n  end\n  -- If n is divisible by 13, return\
    \ n-1\n  if n % 13 == 0 then\n    return n-1\n  end\n  -- If n is divisible by\
    \ 17, return n/2\n  if n % 17 == 0 then\n    return n/2\n  end\n  -- If n is divisible\
    \ by 19, return n-1\n  if n % 19 == 0 then\n    return n-1\n  end\n  -- If n is\
    \ divisible by 23, return n/2\n  if n % 23 == 0 then\n    return n/2\n  end\n\
    \  -- If n is divisible by 29, return n-1\n  if n % 29 == 0 then\n    return n-1\n\
    \  end\n  -- If n is divisible by 31, return n/2\n  if n % 31 == 0 then\n    return\
    \ n/2\n  end\n  -- If n is divisible by 37, return n-1\n  if n % 37 == 0 then\n\
    \    return n-1\n  end\n  -- If n is divisible by 41, return n/2\n  if n % 41\
    \ == 0 then\n    return n/2\n  end\n  -- If n is divisible by 43, return n-1\n\
    \  if n % 43 == 0 then\n    return n-1\n  end\n  -- If n is divisible by 47, return\
    \ n/2\n  if n % 47 == 0 then\n    return n/2\n  end\n  -- If n is divisible by\
    \ 53, return n-1\n  if n % 53 == 0 then\n    return n-1\n  end\n  -- If n is divisible\
    \ by 59, return n/2\n  if n % 59 == 0 then\n    return n/2\n  end\n  -- \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplwo0qovs.lua:97: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_divisor = i\n    \
    \  max_divisor_remainder = n % i\n      max_divisor_remainder_pow = max_divisor_remainder\n\
    \    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8ub03h1.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpp8ub03h1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1l5n31m.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpt1l5n31m.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  while n % divisor == 0 do\n                divisor = divisor + 1\n        \
    \    end\n            if divisor > max_divisor then\n                max_divisor\
    \ = divisor\n                max_divisor_remainder = n % divisor\n           \
    \ end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_m23p6b.lua:25:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmp0_m23p6b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3v6c0kc.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph3v6c0kc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The smallest \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpffnha91r.lua:68: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  local max_divisor_pppp = 1\n  for i = 2, n\
    \ do\n    local divisor_p = math.floor(n/i)\n    local divisor_pp = math.floor(n/i*i)\n\
    \    local divisor_ppp = math.floor(n/i*i*i)\n    local divisor_pppp = math.floor(n/i*i*i*i)\n\
    \    if divisor_p*divisor_pp*divisor_ppp*divisor_pppp > max_divisor_p*max_divisor_pp*max_divisor_ppp*max_divisor_pppp\
    \ then\n      max_divisor_p = divisor_p\n      max_divisor_pp = divisor_pp\n \
    \     max_divisor_ppp = divisor_ppp\n      max_divisor_pppp = divisor_pppp\n \
    \   end\n  end\n  return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn67bvd7.lua:30:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpfn67bvd7.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn0tfv9v.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmprn0tfv9v.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n            else\n\
    \                max_div = math.max(max_div, i)\n            end\n        end\n\
    \    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsok64jv0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpsok64jv0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetijgea3.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpetijgea3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i / max_divisor\n         \
    \   if p > max_divisor then\n                max_divisor = p\n               \
    \ max_divisor_p = p\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgvziu_y.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphgvziu_y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local divisor_p\
    \ = math.floor(n/i)\n            local divisor_pp = math.floor(n/i)\n        \
    \    if divisor_pp > max_divisor_pp then\n                max_divisor_pp = divisor_pp\n\
    \                max_divisor_p = divisor_p\n            end\n            if divisor_p\
    \ > max_divisor then\n                max_divisor = divisor_p\n            end\n\
    \        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7drg9n05.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7drg9n05.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because we start at n-1 and decrease by 1 each\
    \ time\n  -- We also start at n-1 because we decrease by 1 each time\n  -- We\
    \ start at n-1 because we decrease by 1 each time\n  -- We start at n-1 because\
    \ we decrease by 1 each time\n  -- We start at n-1 because we decrease by 1 each\
    \ time\n  -- We start at n-1 because we decrease by 1 each time\n  -- We start\
    \ at n-1 because we decrease by 1 each time\n  -- We start at n-1 because we decrease\
    \ by 1 each time\n  -- We start at n-1 because we decrease by 1 each time\n  --\
    \ We start at n-1 because we decrease by 1 each time\n  -- We start at n-1 because\
    \ we decrease by 1 each time\n  -- We start at n-1 because we decrease by 1 each\
    \ time\n  -- We start at n-1 because we decrease by 1 each time\n  -- We start\
    \ at n-1 because we decrease by 1 each time\n  -- We start at n-1 because we decrease\
    \ by 1 each time\n  -- We start at n-1 because we decrease by 1 each time\n  --\
    \ We start at n-1 because we decrease by 1 each time\n  -- We start at n-1 because\
    \ we decrease by 1 each time\n  -- We start at n-1 because we decrease by 1 each\
    \ time\n  -- We start at n-1 because we decrease by 1 each time\n  -- We start\
    \ at n-1 because we decrease by 1 each time\n  -- We start at n-1 because we decrease\
    \ by 1 each time\n  -- We start at n-1 because we decrease by 1 each time\n  --\
    \ We start at n-1 because we decrease by 1 each time\n  -- We start at n-1 because\
    \ we decrease by 1 each time\n  -- We start at n-1 because we decrease by 1 each\
    \ time\n  -- We start at n-1 because we decrease by 1 each time\n  -- We start\
    \ at n-1 because we decrease by 1 each time\n  -- We start at n-1 because we decrease\
    \ by 1 each time\n  -- We start at n-1 because we decrease by 1 each time\n  --\
    \ We start at n-1 because we decrease by 1 each time\n  -- We start at n-1 because\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpec0w57d0.lua:48: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfowuwtdx.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfowuwtdx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu33fxr45.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu33fxr45.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor, max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ddry6p2.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5ddry6p2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk49catoy.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk49catoy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_count\
    \ = 0\n  for i = 1, n do\n    local divisor = math.floor(n/i)\n    if divisor\
    \ > max_divisor then\n      max_divisor = divisor\n      max_divisor_remainder\
    \ = i\n      max_divisor_remainder_count = divisor\n    end\n  end\n  return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabn7xag1.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpabn7xag1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i / max_divisor\n         \
    \   if p > max_divisor then\n                max_divisor = p\n               \
    \ max_divisor_p = p\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdqu7qre.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqdqu7qre.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto5448qp.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpto5448qp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4qonrcw.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpz4qonrcw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vs21agz.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4vs21agz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 0\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/5\n  --\
    \ The smallest divisor is n/5\n  -- The largest divisor is n/7\n  -- The smallest\
    \ divisor is n/7\n  -- The largest divisor is n/11\n  -- The smallest divisor\
    \ is n/11\n  -- The largest divisor is n/13\n  -- The smallest divisor is n/13\n\
    \  -- The largest divisor is n/17\n  -- The smallest divisor is n/17\n  -- The\
    \ largest divisor is n/19\n  -- The smallest divisor is n/19\n  -- The largest\
    \ divisor is n/23\n  -- The smallest divisor is n/23\n  -- The largest divisor\
    \ is n/29\n  -- The smallest divisor is n/29\n  -- The largest divisor is n/31\n\
    \  -- The smallest divisor is n/31\n  -- The largest divisor is n/37\n  -- The\
    \ smallest divisor is n/37\n  -- The largest divisor is n/41\n  -- The smallest\
    \ divisor is n/41\n  -- The largest divisor is n/43\n  -- The smallest divisor\
    \ is n/43\n  -- The largest divisor is n/47\n  -- The smallest divisor is n/47\n\
    \  -- The largest divisor is n/53\n  -- The smallest divisor is n/53\n  -- The\
    \ largest divisor is n/59\n  -- The smallest divisor is n/59\n  -- The largest\
    \ divisor is n/61\n  -- The smallest divisor is n/61\n  -- The largest divisor\
    \ is n/67\n  -- The smallest divisor is n/67\n  -- The largest divisor is n/71\n\
    \  -- The smallest divisor is n/71\n  -- The largest divisor is n/73\n  -- The\
    \ smallest divisor is n/73\n  -- The largest divisor is n/79\n  -- The smallest\
    \ divisor is n/79\n  -- The largest divisor is n/83\n  -- The smallest divisor\
    \ is n/83\n  -- The largest divisor is n/89\n  -- The smallest divisor is n/89\n\
    \  -- The largest divisor is n/97\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwu8hgw44.lua:68: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = i\n            else\n                if max_div_n\
    \ * i > n then\n                    max_div = i\n                    max_div_n\
    \ = i\n                else\n                    max_div = max_div * i\n     \
    \               max_div_n = max_div_n * i\n                end\n            end\n\
    \        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_6uiwza.lua:29:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpq_6uiwza.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobe2ofbz.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpobe2ofbz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_value = i\n      end\n\
    \    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h7_loap.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9h7_loap.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyotpdu6.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpqyotpdu6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that divides n evenly is n-1\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 0\n  -- >>> largest_divisor(21)\n\
    \  -- 1\n  -- >>> largest_divisor(22)\n  -- 2\n  -- >>> largest_divisor(23)\n\
    \  -- 3\n  -- >>> largest_divisor(24)\n  -- 4\n  -- >>> largest_divisor(25)\n\
    \  -- 5\n  -- >>> largest_divisor(26)\n  -- 6\n  -- >>> largest_divisor(27)\n\
    \  -- 7\n  -- >>> largest_divisor(28)\n  -- 8\n  -- >>> largest_divisor(29)\n\
    \  -- 9\n  -- >>> largest_divisor(30)\n  -- 10\n  -- >>> largest_divisor(31)\n\
    \  -- 11\n  -- >>> largest_divisor(32)\n  -- 12\n  -- >>> largest_divisor(33)\n\
    \  -- 13\n  -- >>> largest_divisor(34)\n  -- 14\n  -- >>> largest_divisor(35)\n\
    \  -- 15\n  -- >>> largest_divisor(36)\n  -- 16\n  -- >>> largest_divisor(37)\n\
    \  -- 17\n  -- >>> largest_divisor(38)\n  -- 18\n  -- >>> largest_divisor(39)\n\
    \  -- 19\n  -- >>> largest_divisor(40)\n  -- 20\n  -- >>> largest_divisor(41)\n\
    \  -- 21\n  -- >>> largest_divisor(42)\n  -- 22\n  -- >>> largest_divisor(43)\n\
    \  -- 23\n  -- >>> largest_divisor(44)\n  -- 24\n  -- >>> largest_divisor(45)\n\
    \  -- 25\n  -- >>> largest_divisor(46)\n  -- 26\n  -- >>> largest_divisor(47)\n\
    \  -- 27\n  -- >>> largest_divisor(48)\n  -- 28\n  -- >>> largest_divisor(49)\n\
    \  -- 29\n  -- >>> largest_divisor(50)\n  -- 30\n  -- >>> largest_divisor(\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp33sw3862.lua:90: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lwl19u4.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0lwl19u4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2)\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_div36\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoxwlqf12.lua:42: ')' expected (to close '(' at line 41) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  local max_divisor_pn = 1\n  for i = 2, n do\n    local divisor = math.floor(n/i)\n\
    \    if divisor > max_divisor then\n      max_divisor = divisor\n      max_divisor_p\
    \ = i\n      max_divisor_n = 1\n    elseif divisor == max_divisor then\n     \
    \ max_divisor_n = 1\n    else\n      max_divisor_pn = max_divisor_p * max_divisor_n\n\
    \      if max_divisor_pn > divisor then\n        max_divisor_pn = divisor\n  \
    \    end\n      max_divisor_p = i\n      max_divisor_n = 1\n    end\n  end\n \
    \ return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7rk5ub1.lua:33:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpe7rk5ub1.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ogqz9fn.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9ogqz9fn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcwhgobm.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppcwhgobm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    while max_divisor_remainder\
    \ > 1 do\n        max_divisor = max_divisor + 1\n        max_divisor_remainder\
    \ = max_divisor_remainder / max_divisor\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e_arkpp.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8e_arkpp.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor_value*i\n           \
    \ end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8ptrdl_.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpc8ptrdl_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp60gzgj7x.lua:20: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_tp6kiq.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz_tp6kiq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge38gxuo.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpge38gxuo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyw37tm0z.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyw37tm0z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofdu5gwq.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpofdu5gwq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n+2 if n is evenly divisible\
    \ by all numbers from 1 to n+2.\n  -- The largest divisor is n+3 if n is evenly\
    \ divisible by all numbers from 1 to n+3.\n  -- The largest divisor is n+4 if\
    \ n is evenly divisible by all numbers from 1 to n+4.\n  -- The largest divisor\
    \ is n+5 if n is evenly divisible by all numbers from 1 to n+5.\n  -- The largest\
    \ divisor is n+6 if n is evenly divisible by all numbers from 1 to n+6.\n  --\
    \ The largest divisor is n+7 if n is evenly divisible by all numbers from 1 to\
    \ n+7.\n  -- The largest divisor is n+8 if n is evenly divisible by all numbers\
    \ from 1 to n+8.\n  -- The largest divisor is n+9 if n is evenly divisible by\
    \ all numbers from 1 to n+9.\n  -- The largest divisor is n+10 if n is evenly\
    \ divisible by all numbers from 1 to n+10.\n  -- The largest divisor is n+11 if\
    \ n is evenly divisible by all numbers from 1 to n+11.\n  -- The largest divisor\
    \ is n+12 if n is evenly divisible by all numbers from 1 to n+12.\n  -- The largest\
    \ divisor is n+13 if n is evenly divisible by all numbers from 1 to n+13.\n  --\
    \ The largest divisor is n+14 if n is evenly divisible by all numbers from 1 to\
    \ n+14.\n  -- The largest divisor is n+15 if n is evenly divisible by all numbers\
    \ from 1 to n+15.\n  -- The largest divisor is n+16 if n is evenly divisible by\
    \ all numbers from 1 to n+16.\n  -- The largest divisor is n+17 if n is evenly\
    \ divisible by all numbers from 1 to n+17.\n  -- The largest divisor is n+18 if\
    \ n is evenly divisible by all numbers from 1 to n+18.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwajlipa2.lua:36: 'end' expected (to close 'function' at line\
    \ 4) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
