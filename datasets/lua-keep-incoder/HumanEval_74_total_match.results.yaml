name: HumanEval_74_total_match
language: lua
results:
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ return lst1\n   elseif len1 > len2 then\n      return lst2\n   else\n      return\
    \ lst1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt8uidwa.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpbt8uidwa.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr53u6atj.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpr53u6atj.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  local i = 0\n  local j = 0\n  while i < len1 and j < len2 do\n    if lst1[i]\
    \ < lst2[j] then\n      len1 = len1 + 1\n      i = i + 1\n    else\n      len2\
    \ = len2 + 1\n      j = j + 1\n    end\n  end\n  if len1 == len2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6bkl09r.lua:37:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpk6bkl09r.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] ~= lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9padhz0.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpr9padhz0.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    local i = 0\n    local j = 0\n    local total = 0\n    local result\
    \ = []\n    while i < len1 and j < len2 do\n        if lst1[i] < lst2[j] then\n\
    \            total = total + 1\n            i = i + 1\n        else\n        \
    \    total = total + 1\n            j = j + 1\n        end\n    end\n    if i\
    \ == len1 then\n        result = lst1\n    elseif j == len2 then\n        result\
    \ = lst2\n    else\n        result = lst1\n    end\n    for i = 1, total do\n\
    \        table.insert(result, lst1[i])\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb58vaspr.lua:18: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    for i = 1, len1 do\n        len1 = len1 + lst1[i]:len()\n    end\n\
    \    for i = 1, len2 do\n        len2 = len2 + lst2[i]:len()\n    end\n    if\
    \ len1 == len2 then\n        return lst1\n    end\n    if len1 > len2 then\n \
    \       local temp = lst1\n        lst1 = lst2\n        lst2 = temp\n    end\n\
    \    local lst3 = {}\n    for i = 1, len1 do\n        local count = 0\n      \
    \  for j = 1, len2 do\n            if lst1[i] == lst2[j] then\n              \
    \  count = count + 1\n            end\n        end\n        lst3:insert(lst1[i])\n\
    \        lst3:insert(count)\n    end\n    return lst3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx8fcqq8.lua:47:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpqx8fcqq8.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] < lst2[i] then\n           \
    \     return lst1\n            else\n                return lst2\n           \
    \ end\n        end\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffa60idn.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpffa60idn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ayc87z4.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp5ayc87z4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in ipairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == 0 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp35ef3dp.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpp35ef3dp.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3w3evll.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmph3w3evll.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    for i = 1, len1 do\n        len1 = len1 + lst1[i]\n    end\n \
    \   for i = 1, len2 do\n        len2 = len2 + lst2[i]\n    end\n    if len1 ==\
    \ len2 then\n        return lst1\n    else\n        return nil\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h20csah.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp4h20csah.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + 1\n  end\n  for i = 1, len2 do\n\
    \    len2 = len2 + 1\n  end\n  if len1 == len2 then\n    return lst1\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0st9hbj.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpw0st9hbj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len\n  if len1 == len2 then\n\
    \    len = len1\n  else\n    len = len1\n    for i = 1, len2 do\n      if lst1[i]\
    \ > lst2[i] then\n        len = len - 1\n      end\n    end\n  end\n  local result\
    \ = {}\n  for i = 1, len do\n    result[i] = lst1[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23qfz65h.lua:35:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp23qfz65h.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        if lst1[i] < lst2[i] then\n            count = count\
    \ + 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n \
    \   elseif len1 > len2 then\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6m3y7u6.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmph6m3y7u6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  end\n  local result = {}\n  for i = 1, len1 do\n    if lst1[i] < lst2[i]\
    \ then\n      table.insert(result, lst1[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v5qi8zq.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp5v5qi8zq.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  end\n  local count = 0\n  for i = 1, len1 do\n    if lst1[i] < lst2[i]\
    \ then\n      count = count + 1\n    end\n  end\n  return lst1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafe651xm.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpafe651xm.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local result\n  if len1 == len2\
    \ then\n    result = lst1\n  else\n    if len1 > len2 then\n      result = lst1\n\
    \    else\n      result = lst2\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvzjiviv.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpyvzjiviv.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 0\n  local j = 0\n  local\
    \ total = 0\n  while i < len1 and j < len2 do\n    if lst1[i] > lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    elseif lst1[i] < lst2[j] then\n\
    \      total = total + 1\n      j = j + 1\n    else\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  if len1 == len2 then\n    return lst1\n  else\n \
    \   return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pbo3sm0.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0pbo3sm0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in ipairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbusd55im.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpbusd55im.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total_len = 0\n  for _, v in ipairs(lst1) do\n    total_len = total_len\
    \ + #v\n  end\n  for _, v in ipairs(lst2) do\n    total_len = total_len + #v\n\
    \  end\n  if total_len == 0 then\n    return lst1\n  else\n    local lst3 = {}\n\
    \    for _, v in ipairs(lst1) do\n      if #v < total_len then\n        lst3[#lst3+1]\
    \ = v\n      end\n    end\n    return lst3\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdelylq63.lua:35:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpdelylq63.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in ipairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    elseif num_chars == #lst2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rq7mipv.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp1rq7mipv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyr4casnz.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpyr4casnz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars =\
    \ num_chars + #v\n    end\n    if num_chars == 0 then\n        return lst1\n \
    \   elseif num_chars == #lst1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwikkp92i.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpwikkp92i.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 0\n  local j = 0\n  local\
    \ total = 0\n  while i < len1 and j < len2 do\n    if lst1[i] > lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    elseif lst1[i] < lst2[j] then\n\
    \      total = total + 1\n      j = j + 1\n    else\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  if i == len1 then\n    return lst1\n  elseif j ==\
    \ len2 then\n    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_v01ok8.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpy_v01ok8.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total = 0\n    for _, v in pairs(lst1) do\n        if v < lst2[1] then\n\
    \            total = total + 1\n        end\n    end\n    if total == 0 then\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2_f3ec4.lua:28:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp_2_f3ec4.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz4ny4t0.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmppz4ny4t0.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg63i0s0o.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpg63i0s0o.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  local i = 0\n\
    \  local j = 0\n  while i < len1 and j < len2 do\n    if lst1[i] < lst2[j] then\n\
    \      len = len + 1\n      i = i + 1\n    else\n      len = len + 1\n      j\
    \ = j + 1\n    end\n  end\n  if len1 == len2 then\n    return lst1\n  else\n \
    \   return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1uji5vk.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp_1uji5vk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local result\n  if len1 == len2\
    \ then\n    result = lst1\n  else\n    if len1 < len2 then\n      result = lst1\n\
    \    else\n      result = lst2\n    end\n  end\n  local i = 1\n  while i <= #result\
    \ do\n    if result[i] ~= lst1[i] then\n      break\n    end\n    i = i + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5d3q_hy.lua:37:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpb5d3q_hy.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rvo6tnc.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp3rvo6tnc.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsscj2me.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpqsscj2me.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 1\n  local j = 1\n  local\
    \ total = 0\n  while i <= len1 and j <= len2 do\n    if lst1[i] < lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    elseif lst1[i] > lst2[j] then\n\
    \      total = total + 1\n      j = j + 1\n    else\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  if len1 == len2 then\n    return lst1\n  else\n \
    \   return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxoic3bwh.lua:39:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpxoic3bwh.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + lst1[i]:len()\n  end\n  for i = 1, len2 do\n    total\
    \ = total + lst2[i]:len()\n  end\n  if len1 == len2 then\n    return lst1\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y7lu4xn.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp7y7lu4xn.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 1\n  local j = 1\n  local\
    \ total = 0\n  while i <= len1 and j <= len2 do\n    if lst1[i] < lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    else\n      total = total + 1\n\
    \      j = j + 1\n    end\n  end\n  if len1 == len2 then\n    return lst1\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_fcx5ax.lua:36:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpq_fcx5ax.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 < len2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl7ozrqo.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpfl7ozrqo.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total = 0\n  for _, str1 in pairs(lst1) do\n    for _, str2 in pairs(lst2)\
    \ do\n      total = total + #str1\n      if #str1 < #str2 then\n        break\n\
    \      end\n    end\n  end\n  return lst1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwnt7gb6.lua:27:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmprwnt7gb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + lst1[i]\n  end\n  for i = 1, len2 do\n    total = total\
    \ + lst2[i]\n  end\n  if total == len1 then\n    return lst1\n  elseif total ==\
    \ len2 then\n    return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiawmqgcx.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpiawmqgcx.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + lst1[i]\n  end\n  for i = 1, len2 do\n    total = total\
    \ + lst2[i]\n  end\n  if len1 == len2 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopjq2a7v.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpopjq2a7v.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        if lst1[i] < lst2[i] then\n            count = count\
    \ + 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n \
    \   end\n    return lst1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wfmb33a.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp0wfmb33a.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local count = 0\n  for _, v in pairs(lst1) do\n    if v in lst2 then\n    \
    \  count = count + 1\n    end\n  end\n  if count == #lst1 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpajhkg1p2.lua:13: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  local i = 0\n  local j = 0\n  local result = []\n  while i < len1 and j\
    \ < len2 do\n    if lst1[i] < lst2[j] then\n      len1 = len1 + 1\n      i = i\
    \ + 1\n    else\n      len2 = len2 + 1\n      j = j + 1\n    end\n  end\n  if\
    \ len1 == len2 then\n    for i = 1, len1 do\n      table.insert(result, lst1[i])\n\
    \    end\n  else\n    for i = 1, len1 do\n      table.insert(result, lst1[i])\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplt94c_oe.lua:17: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1, len2 = #lst1, #lst2\n  if len1 == len2 then\n    return lst1\n\
    \  end\n  local total = 0\n  for i = 1, len1 do\n    total = total + lst1[i]:len()\
    \ + lst2[i]:len()\n  end\n  local lst3 = {}\n  for i = 1, len1 do\n    lst3[i]\
    \ = lst1[i]\n  end\n  for i = 1, len2 do\n    lst3[len1 + i] = lst2[i]\n  end\n\
    \  return lst3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajsc4ro0.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpajsc4ro0.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    local\
    \ i = 0\n    local j = 0\n    local result\n    while i < len1 and j < len2 do\n\
    \        if lst1[i] < lst2[j] then\n            len = len + 1\n            i =\
    \ i + 1\n        else\n            len = len + 1\n            j = j + 1\n    \
    \    end\n    end\n    if len1 == len2 then\n        result = lst1\n    else\n\
    \        result = lst1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6usukwj.lua:18:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpy6usukwj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    local\
    \ i = 0\n    local j = 0\n    local result = []\n    while i < len1 and j < len2\
    \ do\n        if lst1[i] < lst2[j] then\n            len = len + 1\n         \
    \   i = i + 1\n        else\n            len = len + 1\n            j = j + 1\n\
    \        end\n    end\n    if i == len1 then\n        result = lst1\n    elseif\
    \ j == len2 then\n        result = lst2\n    else\n        result = lst1\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp26ypeo3_.lua:16: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, str1 in ipairs(lst1) do\n    for _, str2 in ipairs(lst2)\
    \ do\n      num_chars = num_chars + #str1 + #str2\n    end\n  end\n  if num_chars\
    \ == 0 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7rpb_kp.lua:29:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpp7rpb_kp.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in ipairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in ipairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == #lst1 then\n    return lst1\n  elseif num_chars == #lst2\
    \ then\n    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0shfb9bv.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp0shfb9bv.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] < lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst1\n    end\n\
    \    if len1 > len2 then\n        for i = 1, len2 do\n            if lst2[i] <\
    \ lst1[i] then\n                return lst2\n            end\n        end\n  \
    \      return lst2\n    end\n    for i = 1, len1 do\n        if lst1[i] > lst2[i]\
    \ then\n            return lst1\n        end\n    end\n    return lst2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn282xqlr.lua:41:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpn282xqlr.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwau7f7ko.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpwau7f7ko.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ len4 = len1 + len2\n  local len5 = len1 + len2\n  local len6 = len1 + len2\n\
    \  local len7 = len1 + len2\n  local len8 = len1 + len2\n  local len9 = len1 +\
    \ len2\n  local len10 = len1 + len2\n  local len11 = len1 + len2\n  local len12\
    \ = len1 + len2\n  local len13 = len1 + len2\n  local len14 = len1 + len2\n  local\
    \ len15 = len1 + len2\n  local len16 = len1 + len2\n  local len17 = len1 + len2\n\
    \  local len18 = len1 + len2\n  local len19 = len1 + len2\n  local len20 = len1\
    \ + len2\n  local len21 = len1 + len2\n  local len22 = len1 + len2\n  local len23\
    \ = len1 + len2\n  local len24 = len1 + len2\n  local len25 = len1 + len2\n  local\
    \ len26 = len1 + len2\n  local len27 = len1 + len2\n  local len28 = len1 + len2\n\
    \  local len29 = len1 + len2\n  local len30 = len1 + len2\n  local len31 = len1\
    \ + len2\n  local len32 = len1 + len2\n  local len33 = len1 + len2\n  local len34\
    \ = len1 + len2\n  local len35 = len1 + len2\n  local len36 = len1 + len2\n  local\
    \ len37 = len1 + len2\n  local len38 = len1 + len2\n  local len39 = len1 + len2\n\
    \  local len40 = len1 + len2\n  local len41 = len1 + len2\n  local len42 = len1\
    \ + len2\n  local len43 = len1 + len2\n  local len44 = len1 + len2\n  local len45\
    \ = len1 + len2\n  local len46 = len1 + len2\n  local len47 = len1 + len2\n  local\
    \ len48 = len1 + len2\n  local len49 = len1 + len2\n  local len50 = len1 + len2\n\
    \  local len51 = len1 + len2\n  local len52 = len1 + len2\n  local len53 = len\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph33t6niz.lua:79: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] > lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst1\n    end\n\
    \    if len1 > len2 then\n        return total_match(lst2, lst1)\n    end\n  \
    \  return total_match(lst1, lst2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a87txm9.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp2a87txm9.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0b5kdzc.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpp0b5kdzc.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrgx_z44.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpbrgx_z44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiixe140.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpmiixe140.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ len4 = len1 + len2 + 1\n  local lst3 = {}\n  local i = 1\n  while i <= len4\
    \ do\n    local j = 1\n    while j <= len3 do\n      if lst1[i] < lst2[j] then\n\
    \        lst3[#lst3 + 1] = lst1[i]\n        i = i + 1\n      else\n        lst3[#lst3\
    \ + 1] = lst2[j]\n        j = j + 1\n      end\n    end\n  end\n  return lst3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8kily78.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpk8kily78.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + 1\n  end\n  for i = 1, len2 do\n\
    \    len2 = len2 + 1\n  end\n  if len1 == len2 then\n    return lst1\n  elseif\
    \ len1 > len2 then\n    local lst3 = lst1\n    local lst4 = lst2\n  else\n   \
    \ local lst3 = lst2\n    local lst4 = lst1\n  end\n  local len3 = #lst3\n  local\
    \ len4 = #lst4\n  local len3 = 0\n  local len4 = 0\n  for i = 1, len3 do\n   \
    \ len3 = len3 + 1\n  end\n  for i = 1, len4 do\n    len4 = len4 + 1\n  end\n \
    \ if len3 == len4 then\n    return lst3\n  elseif len3 > len4 then\n    local\
    \ lst5 = lst3\n    local lst6 = lst4\n  else\n    local lst5 = lst4\n    local\
    \ lst6 = lst3\n  end\n  local len5 = #lst5\n  local len6 = #lst6\n  local len5\
    \ = 0\n  local len6 = 0\n  for i = 1, len5 do\n    len5 = len5 + 1\n  end\n  for\
    \ i = 1, len6 do\n    len6 = len6 + 1\n  end\n  if len5 == len6 then\n    return\
    \ lst5\n  elseif len5 > len6 then\n    local lst7 = lst5\n    local lst8 = lst6\n\
    \  else\n    local lst7 = lst6\n    local lst8 = lst5\n  end\n  local len7 = #lst7\n\
    \  local len8 = #lst8\n  local len7 = 0\n  local len8 = 0\n  for i = 1, len7 do\n\
    \    len7 = len7 + 1\n  end\n  for i = 1, len8 do\n    len8 = len8 + 1\n  end\n\
    \  if len7 == len8 then\n    return lst7\n  elseif len7 > len8 then\n    local\
    \ lst9 = lst7\n    local lst10 = lst8\n  else\n    local lst9 = lst8\n    local\
    \ lst10 = lst7\n  end\n  local len9 = #lst9\n  local len10 = #lst10\n  local len9\
    \ = 0\n  local len10 = 0\n  for i = 1, len9 do\n    len9 = len9 + 1\n  end\n \
    \ for i = 1, len10 do\n    len10 = len\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7061q7f9.lua:111: 'end' expected (to close 'for' at line 94)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    for i = 1, len1 do\n        len1 = len1 + 1\n    end\n    for\
    \ i = 1, len2 do\n        len2 = len2 + 1\n    end\n    if len1 == len2 then\n\
    \        return lst1\n    end\n    local total = 0\n    for i = 1, len1 do\n \
    \       total = total + 1\n        if lst1[i] > lst2[i] then\n            return\
    \ lst1\n        end\n    end\n    return lst2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv245ybo.lua:38:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmppv245ybo.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ return lst1\n   elseif len1 > len2 then\n      local temp = lst1\n      lst1\
    \ = lst2\n      lst2 = temp\n   end\n   local total = 0\n   for i = 1, len1 do\n\
    \      total = total + string.len(lst1[i])\n   end\n   for i = 1, len2 do\n  \
    \    total = total + string.len(lst2[i])\n   end\n   if total > len1 then\n  \
    \    return lst1\n   else\n      return lst2\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvmflg5y.lua:38:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmppvmflg5y.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] < lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i0tra5j.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp3i0tra5j.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp856_6ct.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpp856_6ct.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + #lst1[i]\n  end\n  for i = 1, len2 do\n    total = total\
    \ + #lst2[i]\n  end\n  if total == len1 then\n    return lst1\n  elseif total\
    \ == len2 then\n    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv9hdlh0.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpjv9hdlh0.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + lst1[i]\n  end\n  for i = 1, len2 do\n    total = total\
    \ + lst2[i]\n  end\n  if total == len1 then\n    return lst1\n  elseif total ==\
    \ len2 then\n    return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsca6bm9c.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpsca6bm9c.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] > lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst2\n    end\n\
    \    if len1 > len2 then\n        for i = 1, len2 do\n            if lst2[i] >\
    \ lst1[i] then\n                return lst2\n            end\n        end\n  \
    \      return lst1\n    end\n    for i = 1, len1 do\n        if lst1[i] > lst2[i]\
    \ then\n            return lst1\n        end\n    end\n    return lst2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1khhotur.lua:42:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp1khhotur.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyge482s4.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpyge482s4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        if lst1[i] < lst2[i] then\n            count = count\
    \ + 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n \
    \   elseif len1 > len2 then\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e5yhjeb.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp2e5yhjeb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ local i = 1\n      while i <= len1 do\n         if lst1[i] > lst2[i] then\n\
    \            len1 = len1 - 1\n         else\n            len2 = len2 - 1\n   \
    \      end\n         i = i + 1\n      end\n   end\n   return lst1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10sgz0ou.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp10sgz0ou.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count = 0\n    for _, v in pairs(lst1) do\n        if v ~= lst2[1]\
    \ then\n            count = count + 1\n        end\n    end\n    if count == #lst1\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjs9rvc7.lua:29:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmprjs9rvc7.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr999agb.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmphr999agb.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, str1 in ipairs(lst1) do\n    for _, str2 in ipairs(lst2)\
    \ do\n      num_chars = num_chars + #str1 + #str2\n    end\n  end\n  if num_chars\
    \ == 0 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi26296lj.lua:29:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpi26296lj.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len3 = len1 + len2\n\
    \    local lst3 = {}\n    for i = 1, len3 do\n        lst3[i] = lst1[i]\n    end\n\
    \    for i = 1, len2 do\n        lst3[len1 + i] = lst2[i]\n    end\n    local\
    \ len4 = len1 + len2\n    for i = 1, len4 do\n        if lst3[i] ~= lst3[len1\
    \ + i] then\n            return lst1\n        end\n    end\n    return lst1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxkzigx9.lua:34:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpaxkzigx9.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars =\
    \ num_chars + #v\n    end\n    if num_chars == 0 then\n        return lst1\n \
    \   else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwje5r4ig.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpwje5r4ig.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + #lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        total = total + #lst2[i]\n    end\n    if len1 == len2 then\n  \
    \      return lst1\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvesd01gl.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpvesd01gl.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count = 0\n    for _, v in pairs(lst1) do\n        if v < lst2[1] then\n\
    \            count = count + 1\n        end\n    end\n    if count == #lst2 then\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65cy2p59.lua:29:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp65cy2p59.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  local i = 0\n\
    \  local j = 0\n  while i < len1 and j < len2 do\n    if lst1[i] < lst2[j] then\n\
    \      len = len + 1\n      i = i + 1\n    else\n      len = len + 1\n      j\
    \ = j + 1\n    end\n  end\n  if len1 == len2 then\n    return lst1\n  else\n \
    \   return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0y1253s1.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0y1253s1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + lst1[i]:len()\n  end\n  for i = 1,\
    \ len2 do\n    len2 = len2 + lst2[i]:len()\n  end\n  if len1 == len2 then\n  \
    \  return lst1\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprx4s0ztj.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmprx4s0ztj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        total = total + lst2[i]\n    end\n    if len1 == len2 then\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o_e808k.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp0o_e808k.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] < lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe802mxq6.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpe802mxq6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ local i = 1\n      while i < len1 do\n         if lst1[i] > lst2[i] then\n \
    \           len1 = len1 - 1\n         else\n            len2 = len2 - 1\n    \
    \     end\n         i = i + 1\n      end\n   end\n   return lst1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xwsf6ui.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp2xwsf6ui.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsffk55l8.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpsffk55l8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezspq6pb.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpezspq6pb.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local count = 0\n  for _, v in ipairs(lst1) do\n    count = count + #v\n  end\n\
    \  for _, v in ipairs(lst2) do\n    count = count + #v\n  end\n  if count == #lst1\
    \ then\n    return lst1\n  elseif count == #lst2 then\n    return lst2\n  else\n\
    \    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze8lpt_a.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpze8lpt_a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8kwgr9k.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpk8kwgr9k.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + lst1[i]\n  end\n  for i = 1, len2\
    \ do\n    len2 = len2 + lst2[i]\n  end\n  if len1 == len2 then\n    return lst1\n\
    \  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2irl6ziz.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp2irl6ziz.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1_max = len1 -- The maximum\
    \ length of lst1\n  local len2_max = len2 -- The maximum length of lst2\n  local\
    \ len1_min = len1 -- The minimum length of lst1\n  local len2_min = len2 -- The\
    \ minimum length of lst2\n  local total_len = 0\n  local i = 0\n  local j = 0\n\
    \  while i < len1 and j < len2 do\n    if lst1[i] < lst2[j] then\n      len1_min\
    \ = len1_min - 1\n      len1_max = len1_max + 1\n      i = i + 1\n    elseif lst1[i]\
    \ > lst2[j] then\n      len2_min = len2_min - 1\n      len2_max = len2_max + 1\n\
    \      j = j + 1\n    else\n      total_len = total_len + 1\n      i = i + 1\n\
    \      j = j + 1\n    end\n  end\n  if len1_min == len1_max then\n    return lst1\n\
    \  elseif len2_min == len2_max then\n    return lst2\n  else\n    if total_len\
    \ == len1_min then\n      return lst1\n    elseif total_len == len2_min then\n\
    \      return lst2\n    else\n      return lst1\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1pxs4zj.lua:21:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpb1pxs4zj.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count = 0\n    for _, v in ipairs(lst1) do\n        if v < lst2[1]\
    \ then\n            count = count + 1\n        end\n    end\n    if count == #lst1\
    \ then\n        return lst1\n    end\n    for _, v in ipairs(lst2) do\n      \
    \  if v < lst1[1] then\n            count = count + 1\n        end\n    end\n\
    \    if count == #lst2 then\n        return lst2\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirwssjfg.lua:35:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpirwssjfg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        if lst1[i] < lst2[i] then\n            count = count\
    \ + 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n \
    \   end\n    return lst1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp56z2x2v.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpp56z2x2v.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ for i = 1, len1 do\n         if lst1[i] < lst2[i] then\n            return lst1\n\
    \         end\n      end\n   else\n      return lst1\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9uxw9b0.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpk9uxw9b0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] > lst2[i] then\n           \
    \     return lst1\n            else\n                return lst2\n           \
    \ end\n        end\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_z_914h.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpz_z_914h.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 < len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe59c1ja7.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpe59c1ja7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1_max = math.max(len1,\
    \ len2)\n  local len2_max = math.max(len1, len2)\n  local len1_min = math.min(len1,\
    \ len2)\n  local len2_min = math.min(len1, len2)\n  local len1_diff = len1_max\
    \ - len1_min\n  local len2_diff = len2_max - len2_min\n  local len1_diff2 = len1_diff\
    \ * len2_diff\n  local len2_diff2 = len2_diff * len1_diff\n  local len1_diff3\
    \ = len1_diff * len2_diff * len1_diff\n  local len2_diff3 = len2_diff * len1_diff\
    \ * len2_diff\n  local len1_diff4 = len1_diff * len2_diff * len1_diff * len2_diff\n\
    \  local len2_diff4 = len2_diff * len1_diff * len2_diff * len1_diff\n  local len1_diff5\
    \ = len1_diff * len2_diff * len1_diff * len2_diff * len1_diff\n  local len2_diff5\
    \ = len2_diff * len1_diff * len2_diff * len1_diff * len2_diff\n  local len1_diff6\
    \ = len1_diff * len2_diff * len1_diff * len2_diff * len1_diff * len2_diff\n  local\
    \ len2_diff6 = len2_diff * len1_diff * len2_diff * len1_diff * len2_diff * len1_diff\n\
    \  local len1_diff7 = len1_diff * len2_diff * len1_diff * len2_diff * len1_diff\
    \ * len2_diff * len1_diff\n  local len2_diff7 = len2_diff * len1_diff * len2_diff\
    \ * len1_diff * len2_diff * len1_diff * len2_diff\n  local len1_diff8 = len1_diff\
    \ * len2_diff * len1_diff * len2_diff * len1_diff * len2_diff * len1_diff * len2_diff\n\
    \  local len2_diff8 = len2_diff * len1_diff * len2_diff * len1_diff * len2_diff\
    \ * len1_diff * len2_diff * len1_diff\n  local len1_diff9 = len1_diff * len2_diff\
    \ * len1_diff * len2_diff * len1_diff * len2_diff * len1_diff * len2_diff * len1_diff\n\
    \  local len2_diff9 = len2_diff * len1_diff * len2_diff * \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpla46wl77.lua:35: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] ~= lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9u2pzkb.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpz9u2pzkb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] < lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5ukrm88.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpz5ukrm88.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    \n   \
    \ if len1 == len2 then\n        for i = 1, len1 do\n            if lst1[i] < lst2[i]\
    \ then\n                len = len + 1\n            end\n        end\n    else\n\
    \        len = len1\n    end\n    \n    return lst1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxexsx24.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpmxexsx24.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp62k9rw.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpwp62k9rw.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b4ns52v.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp9b4ns52v.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + #lst1[i]\n  end\n  for i = 1, len2 do\n    total = total\
    \ + #lst2[i]\n  end\n  if len1 == len2 then\n    return lst1\n  else\n    return\
    \ lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx3m06z4.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpbx3m06z4.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local i = 1\n    local j\
    \ = 1\n    local total = 0\n    while i <= len1 and j <= len2 do\n        if lst1[i]\
    \ < lst2[j] then\n            total = total + 1\n            i = i + 1\n     \
    \   else\n            total = total + 1\n            j = j + 1\n        end\n\
    \    end\n    if len1 == len2 then\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblur1eq6.lua:36:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpblur1eq6.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == #lst1 then\n    return lst1\n  elseif num_chars == #lst2\
    \ then\n    return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugl2e3q7.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpugl2e3q7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s19z9ix.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp8s19z9ix.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] < lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp713qg34u.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp713qg34u.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        total = total + lst2[i]\n    end\n    if len1 == len2 then\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvqngc6u.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmppvqngc6u.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1, len2 = #lst1, #lst2\n  local count = 0\n  for i = 1, len1 do\n\
    \    if lst1[i] ~= lst2[i] then\n      count = count + 1\n    end\n  end\n  if\
    \ len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwzldncr.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpgwzldncr.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local i = 0\n    local j\
    \ = 0\n    local total = 0\n    while i < len1 and j < len2 do\n        if lst1[i]\
    \ < lst2[j] then\n            total = total + 1\n            i = i + 1\n     \
    \   else\n            total = total + 1\n            j = j + 1\n        end\n\
    \    end\n    if i == len1 then\n        return lst1\n    elseif j == len2 then\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoit5u5rr.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpoit5u5rr.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    local\
    \ i = 1\n    while i <= len1 do\n      if lst1[i] < lst2[i] then\n        return\
    \ lst1\n      end\n      i = i + 1\n    end\n    return lst2\n  elseif len1 >\
    \ len2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7lubnqg.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpt7lubnqg.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 < len2 then\n    return lst2\n  else\n    local i = 0\n\
    \    local j = 0\n    local total = 0\n    while i < len1 and j < len2 do\n  \
    \    if lst1[i] < lst2[j] then\n        total = total + 1\n        i = i + 1\n\
    \      else\n        total = total + 1\n        j = j + 1\n      end\n    end\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiiin3j5.lua:38:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpgiiin3j5.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ return lst1\n   elseif len1 < len2 then\n      return lst2\n   else\n      return\
    \ lst1\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyja8xcpt.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpyja8xcpt.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1_max = math.max(len1,\
    \ len2)\n  local len2_max = math.max(len1, len2)\n  local len1_min = math.min(len1,\
    \ len2)\n  local len2_min = math.min(len1, len2)\n  local len1_diff = len1_max\
    \ - len1_min\n  local len2_diff = len2_max - len2_min\n  local len1_sum = len1_max\
    \ + 1\n  local len2_sum = len2_max + 1\n  local lst3 = {}\n  for i = 1, len1_sum\
    \ do\n    lst3[i] = lst1[i]\n  end\n  for i = 1, len2_sum do\n    lst3[len1_sum\
    \ + i] = lst2[i]\n  end\n  for i = 1, len1_diff do\n    lst3[len1_sum + len2_sum\
    \ + i] = lst1[i]\n  end\n  for i = 1, len2_diff do\n    lst3[len1_sum + len2_sum\
    \ + len1_diff + i] = lst2[i]\n  end\n  return lst3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8bdntcp.lua:41:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\", 4=\"hi\", 5=\"hi\"}\n\
    stack traceback:\n\t/tmp/tmpf8bdntcp.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + lst1[i]\n  end\n  for i = 1, len2 do\n    total = total\
    \ + lst2[i]\n  end\n  if total == len1 then\n    return lst1\n  elseif total ==\
    \ len2 then\n    return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll7fc6qx.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpll7fc6qx.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrj0hjvx.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpxrj0hjvx.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in ipairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7biq_50r.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp7biq_50r.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ len4 = len1 + len2\n  local len5 = len1 + len2\n  local len6 = len1 + len2\n\
    \  local len7 = len1 + len2\n  local len8 = len1 + len2\n  local len9 = len1 +\
    \ len2\n  local len10 = len1 + len2\n  local len11 = len1 + len2\n  local len12\
    \ = len1 + len2\n  local len13 = len1 + len2\n  local len14 = len1 + len2\n  local\
    \ len15 = len1 + len2\n  local len16 = len1 + len2\n  local len17 = len1 + len2\n\
    \  local len18 = len1 + len2\n  local len19 = len1 + len2\n  local len20 = len1\
    \ + len2\n  local len21 = len1 + len2\n  local len22 = len1 + len2\n  local len23\
    \ = len1 + len2\n  local len24 = len1 + len2\n  local len25 = len1 + len2\n  local\
    \ len26 = len1 + len2\n  local len27 = len1 + len2\n  local len28 = len1 + len2\n\
    \  local len29 = len1 + len2\n  local len30 = len1 + len2\n  local len31 = len1\
    \ + len2\n  local len32 = len1 + len2\n  local len33 = len1 + len2\n  local len34\
    \ = len1 + len2\n  local len35 = len1 + len2\n  local len36 = len1 + len2\n  local\
    \ len37 = len1 + len2\n  local len38 = len1 + len2\n  local len39 = len1 + len2\n\
    \  local len40 = len1 + len2\n  local len41 = len1 + len2\n  local len42 = len1\
    \ + len2\n  local len43 = len1 + len2\n  local len44 = len1 + len2\n  local len45\
    \ = len1 + len2\n  local len46 = len1 + len2\n  local len47 = len1 + len2\n  local\
    \ len48 = len1 + len2\n  local len49 = len1 + len2\n  local len50 = len1 + len2\n\
    \  local len51 = len1 + len2\n  local len52 = len1 + len2\n  local len53 = len\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9ef6s_0s.lua:79: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      return lst1\n    end\n    local lst3 = {}\n    for i = 1, len1 do\n   \
    \     local found = false\n        for j = 1, len2 do\n            if lst1[i]\
    \ == lst2[j] then\n                lst3[#lst3 + 1] = lst1[i]\n               \
    \ found = true\n                break\n            end\n        end\n        if\
    \ not found then\n            lst3[#lst3 + 1] = lst1[i]\n        end\n    end\n\
    \    return lst3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvojrhktl.lua:37:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpvojrhktl.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1, len2 = #lst1, #lst2\n  if len1 == len2 then\n    return lst1\n\
    \  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g6oclgf.lua:25:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp3g6oclgf.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuy07uz2.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpmuy07uz2.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] ~= lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpc6adzb.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpbpc6adzb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        count = count + lst1[i]:len() \n    end\n    for i =\
    \ 1, len2 do\n        count = count + lst2[i]:len() \n    end\n    if len1 ==\
    \ len2 then\n        return lst1\n    elseif len1 < len2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdqonox4.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpkdqonox4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + lst1[i]:len() \n    end\n    for i =\
    \ 1, len2 do\n        total = total + lst2[i]:len() \n    end\n    if len1 ==\
    \ len2 then\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn2ea7pk.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpmn2ea7pk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 0\n  local j = 0\n  local\
    \ total = 0\n  while i < len1 and j < len2 do\n    if lst1[i] > lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    else\n      total = total + 1\n\
    \      j = j + 1\n    end\n  end\n  if i == len1 then\n    return lst1\n  elseif\
    \ j == len2 then\n    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j2r5gxg.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp3j2r5gxg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdfsiq0s.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpxdfsiq0s.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  end\n  local total = 0\n  for i = 1, len1 do\n    total = total + lst1[i]:len()\
    \ \n  end\n  for i = 1, len2 do\n    total = total + lst2[i]:len() \n  end\n \
    \ if total == len1 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoi7bhrl0.lua:34:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpoi7bhrl0.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ lst3 = {}\n  for i = 1, len3 do\n    lst3[i] = 0\n  end\n  for i = 1, len1 do\n\
    \    lst3[#lst3 + 1] = lst1[i]\n  end\n  for i = 1, len2 do\n    lst3[#lst3 +\
    \ len1 + 1] = lst2[i]\n  end\n  for i = 1, len3 do\n    lst3[#lst3 + len1 + len2\
    \ + 1] = lst3[i]\n  end\n  return lst3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf06v2ph8.lua:34:\
    \ expected: {\"hi\", \"hi\"}\nactual: {0, 0, 0, 0, \"hi\", \"admin\", 9=\"hi\"\
    , 11=0}\nstack traceback:\n\t/tmp/tmpf06v2ph8.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        if lst1[i] < lst2[i] then\n            count = count\
    \ + 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n \
    \   end\n    if len1 < len2 then\n        local temp = lst1\n        lst1 = lst2\n\
    \        lst2 = temp\n    end\n    local newlst = lst1\n    for i = 1, len2 do\n\
    \        if lst2[i] < lst1[i] then\n            newlst[i] = lst2[i]\n        end\n\
    \    end\n    return newlst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnek37wo.lua:40:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpwnek37wo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  local i = 0\n  local j = 0\n  while i < len1 and j < len2 do\n    if lst1[i]\
    \ < lst2[j] then\n      len1 = len1 + 1\n    else\n      len2 = len2 + 1\n   \
    \ end\n    i = i + 1\n    j = j + 1\n  end\n  if len1 == len2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn46bqzki.lua:37:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpn46bqzki.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpi1pw0j.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpqpi1pw0j.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in ipairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    elseif num_chars == #lst2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjlfnc57.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpqjlfnc57.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total_len = 0\n  for i =\
    \ 1, len1 do\n    total_len = total_len + #lst1[i]\n  end\n  for i = 1, len2 do\n\
    \    total_len = total_len + #lst2[i]\n  end\n  if total_len == len1 then\n  \
    \  return lst1\n  elseif total_len == len2 then\n    return lst2\n  else\n   \
    \ return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4_h71kh.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpb4_h71kh.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len\n  if len1 == len2 then\n\
    \    len = len1\n  else\n    len = len1\n    for i = 1, len2 do\n      if lst1[i]\
    \ > lst2[i] then\n        len = len - 1\n      else\n        len = len + 1\n \
    \     end\n    end\n  end\n  local lst3 = {}\n  for i = 1, len do\n    lst3[i]\
    \ = lst1[i]\n  end\n  return lst3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrahenr5.lua:37:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpxrahenr5.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6sa7vnf.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpd6sa7vnf.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        total = total + lst2[i]\n    end\n    if total == len1 then\n  \
    \      return lst1\n    elseif total == len2 then\n        return lst2\n    else\n\
    \        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_djbz9yf.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp_djbz9yf.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total = 0\n  for _, v in pairs(lst1) do\n    total = total + #v\n  end\n\
    \  for _, v in pairs(lst2) do\n    total = total + #v\n  end\n  if total == #lst1\
    \ then\n    return lst1\n  elseif total == #lst2 then\n    return lst2\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobljfc1n.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpobljfc1n.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local result\n    if len1\
    \ == len2 then\n        result = lst1\n    else\n        result = lst1\n    end\n\
    \    for i = 1, len1 do\n        if lst1[i] < lst2[i] then\n            table.insert(result,\
    \ lst1[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao7p0e_g.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\", \"admin\"}\nstack traceback:\n\
    \t/tmp/tmpao7p0e_g.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g5y7n6n.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp0g5y7n6n.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local results = {}\n    for\
    \ i = 1, len1 do\n        local found = false\n        for j = 1, len2 do\n  \
    \          if lst1[i] == lst2[j] then\n                found = true\n        \
    \        break\n            end\n        end\n        if found then\n        \
    \    table.insert(results, lst1[i])\n        end\n    end\n    return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wdx8kf5.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\"}\nstack traceback:\n\t/tmp/tmp6wdx8kf5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total_len = 0\n  for i =\
    \ 1, len1 do\n    total_len = total_len + #lst1[i]\n  end\n  for i = 1, len2 do\n\
    \    total_len = total_len + #lst2[i]\n  end\n  if total_len == len1 then\n  \
    \  return lst1\n  elseif total_len == len2 then\n    return lst2\n  else\n   \
    \ return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_awf90p.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp7_awf90p.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == 0 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p5c2q6j.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp0p5c2q6j.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m2wva3j.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp2m2wva3j.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ local i = 1\n      while i <= len1 do\n         if lst1[i] < lst2[i] then\n\
    \            len1 = len1 - 1\n         else\n            len2 = len2 - 1\n   \
    \      end\n         i = i + 1\n      end\n   end\n   return lst1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm29mf736.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpm29mf736.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1, len2 = #lst1, #lst2\n    if len1 == len2 then\n        return\
    \ lst1\n    end\n    local total_len = 0\n    for i = 1, len1 do\n        total_len\
    \ = total_len + lst1[i]:len()\n    end\n    for i = 1, len2 do\n        total_len\
    \ = total_len + lst2[i]:len()\n    end\n    if total_len == len1 then\n      \
    \  return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoygfg08j.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpoygfg08j.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ lst3 = {}\n  for i = 1, len3 do\n    lst3[i] = 0\n  end\n  for i = 1, len1 do\n\
    \    lst3[lst1[i]] = lst3[lst1[i]] + 1\n  end\n  for i = 1, len2 do\n    lst3[lst2[i]]\
    \ = lst3[lst2[i]] + 1\n  end\n  local len4 = #lst3\n  local lst4 = {}\n  for i\
    \ = 1, len4 do\n    lst4[i] = lst3[i]\n  end\n  return lst4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8h92tjt.lua:19:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpn8h92tjt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total = 0\n  for i = 1, len1\
    \ do\n    total = total + lst1[i]:len() \n  end\n  for i = 1, len2 do\n    total\
    \ = total + lst2[i]:len() \n  end\n  if total == len1 then\n    return lst1\n\
    \  elseif total == len2 then\n    return lst2\n  else\n    return lst1\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucv6l6tf.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpucv6l6tf.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9nxk0zu.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpm9nxk0zu.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == #lst1 then\n    return lst1\n  elseif num_chars == #lst2\
    \ then\n    return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33iuiyt6.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp33iuiyt6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 0\n  local j = 0\n  local\
    \ total = 0\n  while i < len1 and j < len2 do\n    if lst1[i] < lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    else\n      total = total + 1\n\
    \      j = j + 1\n    end\n  end\n  if len1 == len2 then\n    return lst1\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n2m4xjl.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp5n2m4xjl.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1, len2 = #lst1, #lst2\n  if len1 == len2 then\n    return lst1\n\
    \  elseif len1 > len2 then\n    local tmp = lst1\n    lst1 = lst2\n    lst2 =\
    \ tmp\n  end\n  local i, j, k\n  local results = {}\n  for i = 1, len1 do\n  \
    \  for j = 1, len2 do\n      if lst1[i] < lst2[j] then\n        table.insert(results,\
    \ lst1[i])\n        break\n      elseif lst1[i] == lst2[j] then\n        table.insert(results,\
    \ lst1[i])\n      end\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxczjiija.lua:38:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpxczjiija.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnajsu4dt.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpnajsu4dt.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total_len = 0\n  for i =\
    \ 1, len1 do\n    total_len = total_len + lst1[i]\n  end\n  for i = 1, len2 do\n\
    \    total_len = total_len + lst2[i]\n  end\n  if total_len == len1 then\n   \
    \ return lst1\n  elseif total_len == len2 then\n    return lst2\n  else\n    return\
    \ nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3o9d1rv.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmph3o9d1rv.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwiub0gi.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpcwiub0gi.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    for i = 1, len1 do\n        len1 = len1 + lst1[i]\n    end\n \
    \   for i = 1, len2 do\n        len2 = len2 + lst2[i]\n    end\n    if len1 ==\
    \ len2 then\n        return lst1\n    elseif len1 < len2 then\n        return\
    \ total_match(lst2, lst1)\n    else\n        return total_match(lst1, lst2)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0mx3df1.lua:34:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpw0mx3df1.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local len1 = #lst1\n   local len2 = #lst2\n   if len1 == len2 then\n     \
    \ local i = 1\n      while i <= len1 do\n         if lst1[i] > lst2[i] then\n\
    \            len1 = len1 - 1\n         else\n            len2 = len2 - 1\n   \
    \      end\n         i = i + 1\n      end\n   end\n   return lst1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjfkyn6w.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpmjfkyn6w.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    local\
    \ i = 1\n    while i <= len1 do\n      if lst1[i] > lst2[i] then\n        len1\
    \ = len1 - 1\n      else\n        len2 = len2 - 1\n      end\n      i = i + 1\n\
    \    end\n    return lst1\n  elseif len1 > len2 then\n    local i = 1\n    while\
    \ i <= len1 do\n      len2 = len2 - 1\n      i = i + 1\n    end\n    return lst1\n\
    \  else\n    local i = 1\n    while i <= len1 do\n      len1 = len1 - 1\n    \
    \  i = i + 1\n    end\n    return lst2\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9irl096d.lua:45:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp9irl096d.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len3 = len1 + len2\n\
    \    local lst3 = {}\n    for i = 1, len3 do\n        local str1 = lst1[i]\n \
    \       local str2 = lst2[i]\n        local len1 = #str1\n        local len2 =\
    \ #str2\n        local len3 = len1 + len2\n        if len3 > len1 then\n     \
    \       lst3[i] = str1\n        elseif len3 <= len1 then\n            lst3[i]\
    \ = str2\n        end\n    end\n    return lst3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd3mc433.lua:18:\
    \ attempt to get length of local 'str1' (a nil value)\nstack traceback:\n\t/tmp/tmppd3mc433.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local count = 0\n  for _, v in pairs(lst1) do\n    count = count + #v\n  end\n\
    \  for _, v in pairs(lst2) do\n    count = count + #v\n  end\n  if count == #lst1\
    \ then\n    return lst1\n  elseif count == #lst2 then\n    return lst2\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_30ti4m4.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp_30ti4m4.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    for i = 1, len1 do\n        len1 = len1 + lst1[i]:len()\n    end\n\
    \    for i = 1, len2 do\n        len2 = len2 + lst2[i]:len()\n    end\n    if\
    \ len1 == len2 then\n        return lst1\n    end\n    if len1 < len2 then\n \
    \       local temp = lst1\n        lst1 = lst2\n        lst2 = temp\n    end\n\
    \    local results = {}\n    local i = 0\n    while i < len1 do\n        local\
    \ j = 0\n        while j < len2 do\n            if lst1[i] < lst2[j] then\n  \
    \              table.insert(results, lst1[i])\n                i = i + 1\n   \
    \             break\n            elseif lst1[i] == lst2[j] then\n            \
    \    j = j + 1\n            else\n                j = j + 1\n            end\n\
    \        end\n        i = i + 1\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07joiaf2.lua:53:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp07joiaf2.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbwkzf1p.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpxbwkzf1p.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1_lst2 = #lst1 -- len1_lst2\
    \ will be the length of lst1 less the length of lst2\n  local len2_lst2 = #lst2\
    \ -- len2_lst2 will be the length of lst2 less the length of lst1\n  local total_len\
    \ = 0\n  local total_len1 = 0\n  local total_len2 = 0\n  local total_len1_lst2\
    \ = 0\n  local total_len2_lst2 = 0\n  local total_len1_lst2_lst2 = 0\n  local\
    \ total_len2_lst2_lst2 = 0\n  local total_len1_lst2_lst2_lst2 = 0\n  local total_len2_lst2_lst2_lst2\
    \ = 0\n  local total_len1_lst2_lst2_lst2_lst2 = 0\n  local total_len2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len1_lst2_lst2_lst2_lst2_lst2 = 0\n  local total_len2_lst2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len1_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n  local total_len2_lst2_lst2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len1_lst2_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n  local total_len2_lst2_lst2_lst2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len1_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n  local\
    \ total_len2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n  local total_len1_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n \
    \ local total_len1_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n  local\
    \ total_len2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2 = 0\n  local total_len1_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2_lst2\
    \ = 0\n  local total_len1_lst2_lst\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsczlws3_.lua:56: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  local i = 1\n\
    \  while i < len1 do\n    len = len + lst1[i]\n    i = i + 1\n  end\n  i = 1\n\
    \  while i < len2 do\n    len = len + lst2[i]\n    i = i + 1\n  end\n  if len\
    \ == len1 then\n    return lst1\n  elseif len == len2 then\n    return lst2\n\
    \  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r6fx2xj.lua:16:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp8r6fx2xj.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local i = 1\n    local j\
    \ = 1\n    local total = 0\n    while i < len1 and j < len2 do\n        if lst1[i]\
    \ < lst2[j] then\n            total = total + 1\n            i = i + 1\n     \
    \   else\n            total = total + 1\n            j = j + 1\n        end\n\
    \    end\n    if i == len1 then\n        return lst1\n    elseif j == len2 then\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1y8wtc4i.lua:39:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp1y8wtc4i.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r595hil.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp_r595hil.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total_len = 0\n  for _, v in pairs(lst1) do\n    total_len = total_len\
    \ + #v\n  end\n  for _, v in pairs(lst2) do\n    total_len = total_len + #v\n\
    \  end\n  if total_len == 0 then\n    return lst1\n  else\n    local total_len\
    \ = 0\n    for _, v in pairs(lst1) do\n      total_len = total_len + #v\n    end\n\
    \    for _, v in pairs(lst2) do\n      total_len = total_len + #v\n    end\n \
    \   if total_len == 0 then\n      return lst1\n    else\n      local total_len\
    \ = 0\n      for _, v in pairs(lst1) do\n        total_len = total_len + #v\n\
    \      end\n      for _, v in pairs(lst2) do\n        total_len = total_len +\
    \ #v\n      end\n      if total_len > total_len then\n        return lst1\n  \
    \    else\n        return lst2\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1384h5a.lua:52:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpb1384h5a.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] > lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvq_ihk8z.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpvq_ihk8z.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == #lst1 then\n    return lst1\n  elseif num_chars == #lst2\
    \ then\n    return lst2\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd4q5kqt.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpbd4q5kqt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   local num_chars = 0\n   for _, str1 in ipairs(lst1) do\n      for _, str2\
    \ in ipairs(lst2) do\n         num_chars = num_chars + #str1\n      end\n   end\n\
    \   if #lst1 == #lst2 then\n      return lst1\n   else\n      return lst1\n  \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhk5btnt.lua:28:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpmhk5btnt.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  else\n    local total = 0\n    for i = 1, len1 do\n      total = total\
    \ + lst1[i]:len() \n    end\n    for i = 1, len2 do\n      total = total + lst2[i]:len()\
    \ \n    end\n    if total == len1 then\n      return lst1\n    else\n      return\
    \ lst2\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88pnlbrq.lua:35:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp88pnlbrq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + 1\n  end\n  for i = 1, len2 do\n\
    \    len2 = len2 + 1\n  end\n  if len1 == len2 then\n    return lst1\n  elseif\
    \ len1 > len2 then\n    for i = 1, len1 do\n      if lst1[i] > lst2[i] then\n\
    \        return lst1\n      end\n    end\n  else\n    for i = 1, len2 do\n   \
    \   if lst2[i] > lst1[i] then\n        return lst2\n      end\n    end\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp791uuoar.lua:43:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp791uuoar.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      return lst1\n    end\n    local total = 0\n    for i = 1, len1 do\n   \
    \     total = total + lst1[i]:len() \n    end\n    for i = 1, len2 do\n      \
    \  total = total + lst2[i]:len() \n    end\n    if total == len1 then\n      \
    \  return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46nx24tq.lua:34:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp46nx24tq.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + lst1[i]:len()\n  end\n  for i = 1,\
    \ len2 do\n    len2 = len2 + lst2[i]:len()\n  end\n  if len1 == len2 then\n  \
    \  return lst1\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bicf0ld.lua:32:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp_bicf0ld.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local result\n  if len1 == len2\
    \ then\n    local i = 1\n    while i <= len1 do\n      if lst1[i] > lst2[i] then\n\
    \        result = lst1\n        break\n      else\n        result = lst2\n   \
    \     break\n      end\n      i = i + 1\n    end\n  else\n    result = lst1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4hzcxeq.lua:35:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpw4hzcxeq.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars =\
    \ num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    elseif num_chars == #lst2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpem0j1bd0.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpem0j1bd0.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv14rf3yu.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpv14rf3yu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] > lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst1\n    end\n\
    \    local len3 = len1 + len2\n    local lst3 = {}\n    for i = 1, len3 do\n \
    \       lst3[i] = 0\n    end\n    for i = 1, len1 do\n        lst3[len1 + i] =\
    \ lst1[i]\n    end\n    for i = 1, len2 do\n        lst3[len1 + len2 + i] = lst2[i]\n\
    \    end\n    for i = 1, len3 do\n        if lst3[i] > 0 then\n            return\
    \ lst3\n        end\n    end\n    return lst3\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhem6681.lua:44:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpqhem6681.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ lst3 = {}\n  for i = 1, len3 do\n    lst3[i] = 0\n  end\n  for i = 1, len1 do\n\
    \    lst3[lst1[i]] = lst3[lst1[i]] + 1\n  end\n  for i = 1, len2 do\n    lst3[lst2[i]]\
    \ = lst3[lst2[i]] + 1\n  end\n  local len4 = #lst3\n  if len1 == len2 then\n \
    \   return lst1\n  elseif len1 == len3 then\n    return lst2\n  elseif len2 ==\
    \ len3 then\n    return lst1\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmf6t43z.lua:19:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpwmf6t43z.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] < lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0i4oc__.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpx0i4oc__.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ lst3 = {}\n  for i = 1, len3 do\n    lst3[i] = 0\n  end\n  for i = 1, len1 do\n\
    \    lst3[lst1[i]] = lst3[lst1[i]] + 1\n  end\n  for i = 1, len2 do\n    lst3[lst2[i]]\
    \ = lst3[lst2[i]] + 1\n  end\n  local len4 = #lst3\n  local lst4 = {}\n  for i\
    \ = 1, len4 do\n    lst4[i] = lst3[i]\n  end\n  return lst4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0vr3u7s.lua:19:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpc0vr3u7s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars =\
    \ num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3df1r31e.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp3df1r31e.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuc5hfwa.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmphuc5hfwa.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local num_chars = 0\n    for _, v in ipairs(lst1) do\n        num_chars =\
    \ num_chars + #v\n    end\n    for _, v in ipairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == 0 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihj7v5kn.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpihj7v5kn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1, len2 = #lst1, #lst2\n  local i, j, k\n  local total = 0\n  for\
    \ i = 1, len1 do\n    for j = 1, len2 do\n      if lst1[i] < lst2[j] then\n  \
    \      total = total + 1\n        break\n      end\n    end\n  end\n  if total\
    \ == len1 then\n    return lst1\n  else\n    local new_lst = lst1\n    for i =\
    \ 1, len1 do\n      if lst1[i] > lst2[i] then\n        new_lst[i] = lst2[i]\n\
    \      end\n    end\n    return new_lst\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowmgfhnk.lua:39:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpowmgfhnk.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50j5muqx.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp50j5muqx.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        total = total + lst2[i]\n    end\n    if len1 == len2 then\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ts9jkkz.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp4ts9jkkz.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcswgt58.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpgcswgt58.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local i = 1\n  local j = 1\n  local\
    \ total = 0\n  while i <= len1 and j <= len2 do\n    if lst1[i] < lst2[j] then\n\
    \      total = total + 1\n      i = i + 1\n    elseif lst1[i] > lst2[j] then\n\
    \      total = total + 1\n      j = j + 1\n    else\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  if i == len1 then\n    return lst1\n  elseif j ==\
    \ len2 then\n    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtt_671f.lua:43:\
    \ expected: {\"4\"}\nactual: {\"1\", \"2\", \"3\", \"4\", \"5\"}\nstack traceback:\n\
    \t/tmp/tmpqtt_671f.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_fsnjxk.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp7_fsnjxk.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local result\n    if len1\
    \ == len2 then\n        result = lst1\n    elseif len1 > len2 then\n        result\
    \ = lst2\n    else\n        result = lst1\n    end\n    for i = 1, len1 do\n \
    \       if result[i] ~= lst2[i] then\n            break\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0hbrog.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpmw0hbrog.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in ipairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in ipairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == #lst1 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl128fvh.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpgl128fvh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] > lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst2\n    end\n\
    \    if len1 < len2 then\n        return lst1\n    end\n    return lst2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfz0r77i.lua:34:\
    \ expected: {\"hI\", \"Hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpvfz0r77i.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5isrfsb9.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp5isrfsb9.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   if #lst1 == 0 then return lst2 end\n   if #lst2 == 0 then return lst1 end\n\
    \   if #lst1 > #lst2 then return lst1 end\n   if #lst1 < #lst2 then return lst2\
    \ end\n   local i = 1\n   local j = 1\n   local len1 = #lst1\n   local len2 =\
    \ #lst2\n   while i <= len1 and j <= len2 do\n      if lst1[i] < lst2[j] then\n\
    \         i = i + 1\n      else\n         j = j + 1\n      end\n   end\n   if\
    \ i == len1 then\n      return lst1\n   elseif j == len2 then\n      return lst2\n\
    \   else\n      return lst1\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj11mdg4.lua:39:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpfj11mdg4.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len = 0\n  for i = 1, len1\
    \ do\n    len = len + lst1[i]\n  end\n  for i = 1, len2 do\n    len = len + lst2[i]\n\
    \  end\n  if len == len1 then\n    return lst1\n  elseif len == len2 then\n  \
    \  return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ph_qefs.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmp6ph_qefs.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    if lst1[i] > lst2[i] then\n      count = count + 1\n    end\n  end\n\
    \  if len1 == len2 then\n    return lst1\n  else\n    return lst1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn647sz3i.lua:30:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpn647sz3i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local total_len = 0\n  local i\
    \ = 0\n  local j = 0\n  while i < len1 and j < len2 do\n    if lst1[i] < lst2[j]\
    \ then\n      total_len = total_len + #lst1[i]\n      i = i + 1\n    else\n  \
    \    total_len = total_len + #lst2[j]\n      j = j + 1\n    end\n  end\n  if i\
    \ == len1 then\n    return lst1\n  elseif j == len2 then\n    return lst2\n  else\n\
    \    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtmn5gg4.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmprtmn5gg4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] < lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst1\n    end\n\
    \    if len1 > len2 then\n        for i = 1, len2 do\n            if lst1[i] <\
    \ lst2[i] then\n                return lst2\n            end\n        end\n  \
    \      return lst2\n    end\n    for i = 1, len1 do\n        if lst1[i] > lst2[i]\
    \ then\n            return lst1\n        end\n    end\n    return lst2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedjxc2ps.lua:41:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpedjxc2ps.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local i = 0\n    local j\
    \ = 0\n    local total = 0\n    while i < len1 and j < len2 do\n        if lst1[i]\
    \ > lst2[j] then\n            total = total + 1\n            i = i + 1\n     \
    \   elseif lst1[i] < lst2[j] then\n            total = total + 1\n           \
    \ j = j + 1\n        else\n            i = i + 1\n            j = j + 1\n    \
    \    end\n    end\n    if i == len1 then\n        return lst1\n    elseif j ==\
    \ len2 then\n        return lst2\n    elseif i == len2 then\n        return lst1\n\
    \    elseif j == len1 then\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v9ev0t2.lua:17:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp5v9ev0t2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len3 = len1 + len2\n  local\
    \ lst3 = {}\n  for i = 1, len3 do\n    lst3[i] = 0\n  end\n  for i = 1, len1 do\n\
    \    lst3[lst1[i]] = lst3[lst1[i]] + 1\n  end\n  for i = 1, len2 do\n    lst3[lst2[i]]\
    \ = lst3[lst2[i]] + 1\n  end\n  local len4 = #lst3\n  if len1 == len2 then\n \
    \   return lst1\n  elseif len1 == len3 then\n    return lst2\n  elseif len2 ==\
    \ len3 then\n    return lst1\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu3cl5jw.lua:19:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpzu3cl5jw.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      for i = 1, len1 do\n            if lst1[i] < lst2[i] then\n           \
    \     return lst1\n            end\n        end\n        return lst1\n    end\n\
    \    return lst2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1g1b7k7.lua:28:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpq1g1b7k7.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local len1 = 0\n  local len2 =\
    \ 0\n  for i = 1, len1 do\n    len1 = len1 + 1\n  end\n  for i = 1, len2 do\n\
    \    len2 = len2 + 1\n  end\n  if len1 == len2 then\n    return lst1\n  end\n\
    \  if len1 > len2 then\n    local temp = lst1\n    lst1 = lst2\n    lst2 = temp\n\
    \  end\n  local i = 1\n  local j = 1\n  local count = 0\n  while i <= len1 do\n\
    \    while j <= len2 do\n      if lst1[i] == lst2[j] then\n        count = count\
    \ + 1\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return lst1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9ldl1q8.lua:48:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpf9ldl1q8.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local num_chars = 0\n  for _, v in ipairs(lst1) do\n    num_chars = num_chars\
    \ + #v\n  end\n  for _, v in ipairs(lst2) do\n    num_chars = num_chars + #v\n\
    \  end\n  if num_chars == #lst1 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo83io_z1.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmpo83io_z1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe87zyjf2.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpe87zyjf2.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count = 0\n    for _, v in pairs(lst1) do\n        if v ~= lst2[1]\
    \ then\n            count = count + 1\n        end\n    end\n    if count == #lst2\
    \ then\n        return lst1\n    else\n        return nil\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulb4qe4h.lua:28:\
    \ expected: {\"hi\", \"hi\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpulb4qe4h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \   if #lst1 == 0 then return lst2 end\n   if #lst2 == 0 then return lst1 end\n\
    \   if #lst1 == #lst2 then return lst1 end\n   if #lst1 > #lst2 then return lst1\
    \ end\n   if #lst1 < #lst2 then return lst2 end\n   local lst3 = {}\n   for i\
    \ = 1, #lst1 do\n      local found = false\n      for j = 1, #lst2 do\n      \
    \   if lst1[i] == lst2[j] then\n            lst3[#lst3 + 1] = lst1[i]\n      \
    \      found = true\n         end\n      end\n      if not found then lst3[#lst3\
    \ + 1] = lst1[i] end\n   end\n   return lst3\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ytzpa3z.lua:34:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp3ytzpa3z.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4oqnotm.lua:15:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmpr4oqnotm.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
